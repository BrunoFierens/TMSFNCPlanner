var pas = {};

var rtl = {

  quiet: false,
  debug_load_units: false,
  debug_rtti: false,

  debug: function(){
    if (rtl.quiet || !console || !console.log) return;
    console.log(arguments);
  },

  error: function(s){
    rtl.debug('Error: ',s);
    throw s;
  },

  warn: function(s){
    rtl.debug('Warn: ',s);
  },

  hasString: function(s){
    return rtl.isString(s) && (s.length>0);
  },

  isArray: function(a) {
    return Array.isArray(a);
  },

  isFunction: function(f){
    return typeof(f)==="function";
  },

  isModule: function(m){
    return rtl.isObject(m) && rtl.hasString(m.$name) && (pas[m.$name]===m);
  },

  isImplementation: function(m){
    return rtl.isObject(m) && rtl.isModule(m.$module) && (m.$module.$impl===m);
  },

  isNumber: function(n){
    return typeof(n)==="number";
  },

  isObject: function(o){
    var s=typeof(o);
    return (typeof(o)==="object") && (o!=null);
  },

  isString: function(s){
    return typeof(s)==="string";
  },

  getNumber: function(n){
    return typeof(n)==="number"?n:NaN;
  },

  getChar: function(c){
    return ((typeof(c)==="string") && (c.length===1)) ? c : "";
  },

  getObject: function(o){
    return ((typeof(o)==="object") || (typeof(o)==='function')) ? o : null;
  },

  isPasClass: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$classname') && rtl.isObject(type.$module));
  },

  isPasClassInstance: function(type){
    return (rtl.isObject(type) && rtl.isPasClass(type.$class));
  },

  hexStr: function(n,digits){
    return ("000000000000000"+n.toString(16).toUpperCase()).slice(-digits);
  },

  m_loading: 0,
  m_loading_intf: 1,
  m_intf_loaded: 2,
  m_loading_impl: 3, // loading all used unit
  m_initializing: 4, // running initialization
  m_initialized: 5,

  module: function(module_name, intfuseslist, intfcode, impluseslist, implcode){
    if (rtl.debug_load_units) rtl.debug('rtl.module name="'+module_name+'" intfuses='+intfuseslist+' impluses='+impluseslist+' hasimplcode='+rtl.isFunction(implcode));
    if (!rtl.hasString(module_name)) rtl.error('invalid module name "'+module_name+'"');
    if (!rtl.isArray(intfuseslist)) rtl.error('invalid interface useslist of "'+module_name+'"');
    if (!rtl.isFunction(intfcode)) rtl.error('invalid interface code of "'+module_name+'"');
    if (!(impluseslist==undefined) && !rtl.isArray(impluseslist)) rtl.error('invalid implementation useslist of "'+module_name+'"');
    if (!(implcode==undefined) && !rtl.isFunction(implcode)) rtl.error('invalid implementation code of "'+module_name+'"');

    if (pas[module_name])
      rtl.error('module "'+module_name+'" is already registered');

    var module = pas[module_name] = {
      $name: module_name,
      $intfuseslist: intfuseslist,
      $impluseslist: impluseslist,
      $state: rtl.m_loading,
      $intfcode: intfcode,
      $implcode: implcode,
      $impl: null,
      $rtti: Object.create(rtl.tSectionRTTI)
    };
    module.$rtti.$module = module;
    if (implcode) module.$impl = {
      $module: module,
      $rtti: module.$rtti
    };
  },

  exitcode: 0,

  run: function(module_name){
  
    function doRun(){
      if (!rtl.hasString(module_name)) module_name='program';
      if (rtl.debug_load_units) rtl.debug('rtl.run module="'+module_name+'"');
      rtl.initRTTI();
      var module = pas[module_name];
      if (!module) rtl.error('rtl.run module "'+module_name+'" missing');
      rtl.loadintf(module);
      rtl.loadimpl(module);
      if (module_name=='program'){
        if (rtl.debug_load_units) rtl.debug('running $main');
        var r = pas.program.$main();
        if (rtl.isNumber(r)) rtl.exitcode = r;
      }
    }
    
    if (rtl.showUncaughtExceptions) {
      try{
        doRun();
      } catch(re) {
        var errMsg = re.hasOwnProperty('$class') ? re.$class.$classname : '';
	    errMsg +=  ((errMsg) ? ': ' : '') + (re.hasOwnProperty('fMessage') ? re.fMessage : re);
        alert('Uncaught Exception : '+errMsg);
        rtl.exitCode = 216;
      }
    } else {
      doRun();
    }
    return rtl.exitcode;
  },

  loadintf: function(module){
    if (module.$state>rtl.m_loading_intf) return; // already finished
    if (rtl.debug_load_units) rtl.debug('loadintf: "'+module.$name+'"');
    if (module.$state===rtl.m_loading_intf)
      rtl.error('unit cycle detected "'+module.$name+'"');
    module.$state=rtl.m_loading_intf;
    // load interfaces of interface useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadintf);
    // run interface
    if (rtl.debug_load_units) rtl.debug('loadintf: run intf of "'+module.$name+'"');
    module.$intfcode(module.$intfuseslist);
    // success
    module.$state=rtl.m_intf_loaded;
    // Note: units only used in implementations are not yet loaded (not even their interfaces)
  },

  loaduseslist: function(module,useslist,f){
    if (useslist==undefined) return;
    for (var i in useslist){
      var unitname=useslist[i];
      if (rtl.debug_load_units) rtl.debug('loaduseslist of "'+module.$name+'" uses="'+unitname+'"');
      if (pas[unitname]==undefined)
        rtl.error('module "'+module.$name+'" misses "'+unitname+'"');
      f(pas[unitname]);
    }
  },

  loadimpl: function(module){
    if (module.$state>=rtl.m_loading_impl) return; // already processing
    if (module.$state<rtl.m_intf_loaded) rtl.error('loadimpl: interface not loaded of "'+module.$name+'"');
    if (rtl.debug_load_units) rtl.debug('loadimpl: load uses of "'+module.$name+'"');
    module.$state=rtl.m_loading_impl;
    // load interfaces of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadintf);
    // load implementation of interfaces useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadimpl);
    // load implementation of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadimpl);
    // Note: At this point all interfaces used by this unit are loaded. If
    //   there are implementation uses cycles some used units might not yet be
    //   initialized. This is by design.
    // run implementation
    if (rtl.debug_load_units) rtl.debug('loadimpl: run impl of "'+module.$name+'"');
    if (rtl.isFunction(module.$implcode)) module.$implcode(module.$impluseslist);
    // run initialization
    if (rtl.debug_load_units) rtl.debug('loadimpl: run init of "'+module.$name+'"');
    module.$state=rtl.m_initializing;
    if (rtl.isFunction(module.$init)) module.$init();
    // unit initialized
    module.$state=rtl.m_initialized;
  },

  createCallback: function(scope, fn){
    var cb;
    if (typeof(fn)==='string'){
      cb = function(){
        return scope[fn].apply(scope,arguments);
      };
    } else {
      cb = function(){
        return fn.apply(scope,arguments);
      };
    };
    cb.scope = scope;
    cb.fn = fn;
    return cb;
  },

  cloneCallback: function(cb){
    return rtl.createCallback(cb.scope,cb.fn);
  },

  eqCallback: function(a,b){
    // can be a function or a function wrapper
    if (a==b){
      return true;
    } else {
      return (a!=null) && (b!=null) && (a.fn) && (a.scope===b.scope) && (a.fn==b.fn);
    }
  },

  initClass: function(c,parent,name,initfn){
    parent[name] = c;
    c.$classname = name;
    if ((parent.$module) && (parent.$module.$impl===parent)) parent=parent.$module;
    c.$parent = parent;
    c.$fullname = parent.$name+'.'+name;
    if (rtl.isModule(parent)){
      c.$module = parent;
      c.$name = name;
    } else {
      c.$module = parent.$module;
      c.$name = parent.name+'.'+name;
    };
    // rtti
    if (rtl.debug_rtti) rtl.debug('initClass '+c.$fullname);
    var t = c.$module.$rtti.$Class(c.$name,{ "class": c, module: parent });
    c.$rtti = t;
    if (rtl.isObject(c.$ancestor)) t.ancestor = c.$ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  createClass: function(parent,name,ancestor,initfn){
    // create a normal class,
    // ancestor must be null or a normal class,
    // the root ancestor can be an external class
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // Note:
      // if root is an "object" then c.$ancestor === Object.getPrototypeOf(c)
      // if root is a "function" then c.$ancestor === c.__proto__, Object.getPrototypeOf(c) returns the root
    } else {
      c = {};
      c.$create = function(fnname,args){
        if (args == undefined) args = [];
        var o = Object.create(this);
        o.$class = this; // Note: o.$class === Object.getPrototypeOf(o)
        o.$init();
        try{
          o[fnname].apply(o,args);
          o.AfterConstruction();
        } catch($e){
          o.$destroy;
          throw $e;
        }
        return o;
      };
      c.$destroy = function(fnname){
        this.BeforeDestruction();
        this[fnname]();
        this.$final;
      };
    };
    rtl.initClass(c,parent,name,initfn);
  },

  createClassExt: function(parent,name,ancestor,newinstancefnname,initfn){
    // Create a class using an external ancestor.
    // If newinstancefnname is given, use that function to create the new object.
    // If exist call BeforeDestruction and AfterConstruction.
    var c = null;
    c = Object.create(ancestor);
    c.$create = function(fnname,args){
      if (args == undefined) args = [];
      var o = null;
      if (newinstancefnname.length>0){
        o = this[newinstancefnname](fnname,args);
      } else {
        o = Object.create(this);
      }
      o.$class = this; // Note: o.$class === Object.getPrototypeOf(o)
      o.$init();
      try{
        o[fnname].apply(o,args);
        if (o.AfterConstruction) o.AfterConstruction();
      } catch($e){
        o.$destroy;
        throw $e;
      }
      return o;
    };
    c.$destroy = function(fnname){
      if (this.BeforeDestruction) this.BeforeDestruction();
      this[fnname]();
      this.$final;
    };
    rtl.initClass(c,parent,name,initfn);
  },

  tObjectDestroy: "Destroy",

  free: function(obj,name){
    if (obj[name]==null) return;
    obj[name].$destroy(rtl.tObjectDestroy);
    obj[name]=null;
  },

  freeLoc: function(obj){
    if (obj==null) return;
    obj.$destroy(rtl.tObjectDestroy);
    return null;
  },

  is: function(instance,type){
    return type.isPrototypeOf(instance) || (instance===type);
  },

  isExt: function(instance,type,mode){
    // mode===1 means instance must be a Pascal class instance
    // mode===2 means instance must be a Pascal class
    // Notes:
    // isPrototypeOf and instanceof return false on equal
    // isPrototypeOf does not work for Date.isPrototypeOf(new Date())
    //   so if isPrototypeOf is false test with instanceof
    // instanceof needs a function on right side
    if (instance == null) return false; // Note: ==null checks for undefined too
    if ((typeof(type) !== 'object') && (typeof(type) !== 'function')) return false;
    if (instance === type){
      if (mode===1) return false;
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if (type.isPrototypeOf && type.isPrototypeOf(instance)){
      if (mode===1) return rtl.isPasClassInstance(instance);
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if ((typeof type == 'function') && (instance instanceof type)) return true;
    return false;
  },

  Exception: null,
  EInvalidCast: null,
  EAbstractError: null,
  ERangeError: null,

  raiseE: function(typename){
    var t = rtl[typename];
    if (t==null){
      var mod = pas.SysUtils;
      if (!mod) mod = pas.sysutils;
      if (mod){
        t = mod[typename];
        if (!t) t = mod[typename.toLowerCase()];
        if (!t) t = mod['Exception'];
        if (!t) t = mod['exception'];
      }
    }
    if (t){
      if (t.Create){
        throw t.$create("Create");
      } else if (t.create){
        throw t.$create("create");
      }
    }
    if (typename === "EInvalidCast") throw "invalid type cast";
    if (typename === "EAbstractError") throw "Abstract method called";
    if (typename === "ERangeError") throw "range error";
    throw typename;
  },

  as: function(instance,type){
    if((instance === null) || rtl.is(instance,type)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  asExt: function(instance,type,mode){
    if((instance === null) || rtl.isExt(instance,type,mode)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  createInterface: function(module, name, guid, fnnames, ancestor, initfn){
    //console.log('createInterface name="'+name+'" guid="'+guid+'" names='+fnnames);
    var i = ancestor?Object.create(ancestor):{};
    module[name] = i;
    i.$module = module;
    i.$name = name;
    i.$fullname = module.$name+'.'+name;
    i.$guid = guid;
    i.$guidr = null;
    i.$names = fnnames?fnnames:[];
    if (rtl.isFunction(initfn)){
      // rtti
      if (rtl.debug_rtti) rtl.debug('createInterface '+i.$fullname);
      var t = i.$module.$rtti.$Interface(name,{ "interface": i, module: module });
      i.$rtti = t;
      if (ancestor) t.ancestor = ancestor.$rtti;
      if (!t.ancestor) t.ancestor = null;
      initfn.call(i);
    }
    return i;
  },

  strToGUIDR: function(s,g){
    var p = 0;
    function n(l){
      var h = s.substr(p,l);
      p+=l;
      return parseInt(h,16);
    }
    p+=1; // skip {
    g.D1 = n(8);
    p+=1; // skip -
    g.D2 = n(4);
    p+=1; // skip -
    g.D3 = n(4);
    p+=1; // skip -
    if (!g.D4) g.D4=[];
    g.D4[0] = n(2);
    g.D4[1] = n(2);
    p+=1; // skip -
    for(var i=2; i<8; i++) g.D4[i] = n(2);
    return g;
  },

  guidrToStr: function(g){
    if (g.$intf) return g.$intf.$guid;
    var h = rtl.hexStr;
    var s='{'+h(g.D1,8)+'-'+h(g.D2,4)+'-'+h(g.D3,4)+'-'+h(g.D4[0],2)+h(g.D4[1],2)+'-';
    for (var i=2; i<8; i++) s+=h(g.D4[i],2);
    s+='}';
    return s;
  },

  createTGUID: function(guid){
    var TGuid = (pas.System)?pas.System.TGuid:pas.system.tguid;
    var g = rtl.strToGUIDR(guid,new TGuid());
    return g;
  },

  getIntfGUIDR: function(intfTypeOrVar){
    if (!intfTypeOrVar) return null;
    if (!intfTypeOrVar.$guidr){
      var g = rtl.createTGUID(intfTypeOrVar.$guid);
      if (!intfTypeOrVar.hasOwnProperty('$guid')) intfTypeOrVar = Object.getPrototypeOf(intfTypeOrVar);
      g.$intf = intfTypeOrVar;
      intfTypeOrVar.$guidr = g;
    }
    return intfTypeOrVar.$guidr;
  },

  addIntf: function (aclass, intf, map){
    function jmp(fn){
      if (typeof(fn)==="function"){
        return function(){ return fn.apply(this.$o,arguments); };
      } else {
        return function(){ rtl.raiseE('EAbstractError'); };
      }
    }
    if(!map) map = {};
    var t = intf;
    var item = Object.create(t);
    aclass.$intfmaps[intf.$guid] = item;
    do{
      var names = t.$names;
      if (!names) break;
      for (var i=0; i<names.length; i++){
        var intfname = names[i];
        var fnname = map[intfname];
        if (!fnname) fnname = intfname;
        //console.log('addIntf: intftype='+t.$name+' index='+i+' intfname="'+intfname+'" fnname="'+fnname+'" proc='+typeof(fn));
        item[intfname] = jmp(aclass[fnname]);
      }
      t = Object.getPrototypeOf(t);
    }while(t!=null);
  },

  getIntfG: function (obj, guid, query){
    if (!obj) return null;
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query);
    // search
    var maps = obj.$intfmaps;
    if (!maps) return null;
    var item = maps[guid];
    if (!item) return null;
    // check delegation
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query+' item='+typeof(item));
    if (typeof item === 'function') return item.call(obj); // COM: contains _AddRef
    // check cache
    var intf = null;
    if (obj.$interfaces){
      intf = obj.$interfaces[guid];
      //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' cache='+typeof(intf));
    }
    if (!intf){ // intf can be undefined!
      intf = Object.create(item);
      intf.$o = obj;
      if (!obj.$interfaces) obj.$interfaces = {};
      obj.$interfaces[guid] = intf;
    }
    if (typeof(query)==='object'){
      // called by queryIntfT
      var o = null;
      if (intf.QueryInterface(rtl.getIntfGUIDR(query),
          {get:function(){ return o; }, set:function(v){ o=v; }}) === 0){
        return o;
      } else {
        return null;
      }
    } else if(query===2){
      // called by TObject.GetInterfaceByStr
      if (intf.$kind === 'com') intf._AddRef();
    }
    return intf;
  },

  getIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid);
  },

  queryIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid,intftype);
  },

  queryIntfIsT: function(obj,intftype){
    var i = rtl.queryIntfG(obj,intftype.$guid);
    if (!i) return false;
    if (i.$kind === 'com') i._Release();
    return true;
  },

  asIntfT: function (obj,intftype){
    var i = rtl.getIntfG(obj,intftype.$guid);
    if (i!==null) return i;
    rtl.raiseEInvalidCast();
  },

  intfIsClass: function(intf,classtype){
    return (intf!=null) && (rtl.is(intf.$o,classtype));
  },

  intfAsClass: function(intf,classtype){
    if (intf==null) return null;
    return rtl.as(intf.$o,classtype);
  },

  intfToClass: function(intf,classtype){
    if ((intf!==null) && rtl.is(intf.$o,classtype)) return intf.$o;
    return null;
  },

  // interface reference counting
  intfRefs: { // base object for temporary interface variables
    ref: function(id,intf){
      // called for temporary interface references needing delayed release
      var old = this[id];
      //console.log('rtl.intfRefs.ref: id='+id+' old="'+(old?old.$name:'null')+'" intf="'+(intf?intf.$name:'null'));
      if (old){
        // called again, e.g. in a loop
        delete this[id];
        old._Release(); // may fail
      }
      this[id]=intf;
      return intf;
    },
    free: function(){
      //console.log('rtl.intfRefs.free...');
      for (var id in this){
        if (this.hasOwnProperty(id)) this[id]._Release;
      }
    }
  },

  createIntfRefs: function(){
    //console.log('rtl.createIntfRefs');
    return Object.create(rtl.intfRefs);
  },

  setIntfP: function(path,name,value,skipAddRef){
    var old = path[name];
    //console.log('rtl.setIntfP path='+path+' name='+name+' old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old === value) return;
    if (old !== null){
      path[name]=null;
      old._Release();
    }
    if (value !== null){
      if (!skipAddRef) value._AddRef();
      path[name]=value;
    }
  },

  setIntfL: function(old,value,skipAddRef){
    //console.log('rtl.setIntfL old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old !== value){
      if (value!==null){
        if (!skipAddRef) value._AddRef();
      }
      if (old!==null){
        old._Release();  // Release after AddRef, to avoid double Release if Release creates an exception
      }
    } else if (skipAddRef){
      if (old!==null){
        old._Release();  // value has an AddRef
      }
    }
    return value;
  },

  _AddRef: function(intf){
    //if (intf) console.log('rtl._AddRef intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._AddRef();
    return intf;
  },

  _Release: function(intf){
    //if (intf) console.log('rtl._Release intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._Release();
    return intf;
  },

  checkMethodCall: function(obj,type){
    if (rtl.isObject(obj) && rtl.is(obj,type)) return;
    rtl.raiseE("EInvalidCast");
  },

  rc: function(i,minval,maxval){
    // range check integer
    if ((Math.floor(i)===i) && (i>=minval) && (i<=maxval)) return i;
    rtl.raiseE('ERangeError');
  },

  rcc: function(c,minval,maxval){
    // range check char
    if ((typeof(c)==='string') && (c.length===1)){
      var i = c.charCodeAt(0);
      if ((i>=minval) && (i<=maxval)) return c;
    }
    rtl.raiseE('ERangeError');
  },

  rcSetCharAt: function(s,index,c){
    // range check setCharAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return rtl.setCharAt(s,index,c);
  },

  rcCharAt: function(s,index){
    // range check charAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return s.charAt(index);
  },

  rcArrR: function(arr,index){
    // range check read array
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      if (arguments.length>2){
        // arr,index1,index2,...
        arr=arr[index];
        for (var i=2; i<arguments.length; i++) arr=rtl.rcArrR(arr,arguments[i]);
        return arr;
      }
      return arr[index];
    }
    rtl.raiseE('ERangeError');
  },

  rcArrW: function(arr,index,value){
    // range check write array
    // arr,index1,index2,...,value
    for (var i=3; i<arguments.length; i++){
      arr=rtl.rcArrR(arr,index);
      index=arguments[i-1];
      value=arguments[i];
    }
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      return arr[index]=value;
    }
    rtl.raiseE('ERangeError');
  },

  length: function(arr){
    return (arr == null) ? 0 : arr.length;
  },

  arraySetLength: function(arr,defaultvalue,newlength){
    // multi dim: (arr,defaultvalue,dim1,dim2,...)
    if (arr == null) arr = [];
    var p = arguments;
    function setLength(a,argNo){
      var oldlen = a.length;
      var newlen = p[argNo];
      if (oldlen!==newlength){
        a.length = newlength;
        if (argNo === p.length-1){
          if (rtl.isArray(defaultvalue)){
            for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array
          } else if (rtl.isFunction(defaultvalue)){
            for (var i=oldlen; i<newlen; i++) a[i]=new defaultvalue(); // e.g. record
          } else if (rtl.isObject(defaultvalue)) {
            for (var i=oldlen; i<newlen; i++) a[i]={}; // e.g. set
          } else {
            for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue;
          }
        } else {
          for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array
        }
      }
      if (argNo < p.length-1){
        // multi argNo
        for (var i=0; i<newlen; i++) a[i]=setLength(a[i],argNo+1);
      }
      return a;
    }
    return setLength(arr,2);
  },

  arrayEq: function(a,b){
    if (a===null) return b===null;
    if (b===null) return false;
    if (a.length!==b.length) return false;
    for (var i=0; i<a.length; i++) if (a[i]!==b[i]) return false;
    return true;
  },

  arrayClone: function(type,src,srcpos,end,dst,dstpos){
    // type: 0 for references, "refset" for calling refSet(), a function for new type()
    // src must not be null
    // This function does not range check.
    if (rtl.isFunction(type)){
      for (; srcpos<end; srcpos++) dst[dstpos++] = new type(src[srcpos]); // clone record
    } else if((typeof(type)==="string") && (type === 'refSet')) {
      for (; srcpos<end; srcpos++) dst[dstpos++] = rtl.refSet(src[srcpos]); // ref set
    }  else {
      for (; srcpos<end; srcpos++) dst[dstpos++] = src[srcpos]; // reference
    };
  },

  arrayConcat: function(type){
    // type: see rtl.arrayClone
    var a = [];
    var l = 0;
    for (var i=1; i<arguments.length; i++) l+=arguments[i].length;
    a.length = l;
    l=0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src == null) continue;
      rtl.arrayClone(type,src,0,src.length,a,l);
      l+=src.length;
    };
    return a;
  },

  arrayCopy: function(type, srcarray, index, count){
    // type: see rtl.arrayClone
    // if count is missing, use srcarray.length
    if (srcarray == null) return [];
    if (index < 0) index = 0;
    if (count === undefined) count=srcarray.length;
    var end = index+count;
    if (end>srcarray.length) end = srcarray.length;
    if (index>=end) return [];
    if (type===0){
      return srcarray.slice(index,end);
    } else {
      var a = [];
      a.length = end-index;
      rtl.arrayClone(type,srcarray,index,end,a,0);
      return a;
    }
  },

  setCharAt: function(s,index,c){
    return s.substr(0,index)+c+s.substr(index+1);
  },

  getResStr: function(mod,name){
    var rs = mod.$resourcestrings[name];
    return rs.current?rs.current:rs.org;
  },

  createSet: function(){
    var s = {};
    for (var i=0; i<arguments.length; i++){
      if (arguments[i]!=null){
        s[arguments[i]]=true;
      } else {
        var first=arguments[i+=1];
        var last=arguments[i+=1];
        for(var j=first; j<=last; j++) s[j]=true;
      }
    }
    return s;
  },

  cloneSet: function(s){
    var r = {};
    for (var key in s) r[key]=true;
    return r;
  },

  refSet: function(s){
    s.$shared = true;
    return s;
  },

  includeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    s[enumvalue] = true;
    return s;
  },

  excludeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    delete s[enumvalue];
    return s;
  },

  diffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    delete r.$shared;
    return r;
  },

  unionSet: function(s,t){
    var r = {};
    for (var key in s) r[key]=true;
    for (var key in t) r[key]=true;
    delete r.$shared;
    return r;
  },

  intersectSet: function(s,t){
    var r = {};
    for (var key in s) if (t[key]) r[key]=true;
    delete r.$shared;
    return r;
  },

  symDiffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    for (var key in t) if (!s[key]) r[key]=true;
    delete r.$shared;
    return r;
  },

  eqSet: function(s,t){
    for (var key in s) if (!t[key] && (key!='$shared')) return false;
    for (var key in t) if (!s[key] && (key!='$shared')) return false;
    return true;
  },

  neSet: function(s,t){
    return !rtl.eqSet(s,t);
  },

  leSet: function(s,t){
    for (var key in s) if (!t[key] && (key!='$shared')) return false;
    return true;
  },

  geSet: function(s,t){
    for (var key in t) if (!s[key] && (key!='$shared')) return false;
    return true;
  },

  strSetLength: function(s,newlen){
    var oldlen = s.length;
    if (oldlen > newlen){
      return s.substring(0,newlen);
    } else if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return s+' '.repeat(newlen-oldlen);
    } else {
       while (oldlen<newlen){
         s+=' ';
         oldlen++;
       };
       return s;
    }
  },

  spaceLeft: function(s,width){
    var l=s.length;
    if (l>=width) return s;
    if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return ' '.repeat(width-l) + s;
    } else {
      while (l<width){
        s=' '+s;
        l++;
      };
    };
  },

  floatToStr : function(d,w,p){
    // input 1-3 arguments: double, width, precision
    if (arguments.length>2){
      return rtl.spaceLeft(d.toFixed(p),w);
    } else {
	  // exponent width
	  var pad = "";
	  var ad = Math.abs(d);
	  if (ad<1.0e+10) {
		pad='00';
	  } else if (ad<1.0e+100) {
		pad='0';
      }  	
	  if (arguments.length<2) {
	    w=9;		
      } else if (w<9) {
		w=9;
      }		  
      var p = w-8;
      var s=(d>0 ? " " : "" ) + d.toExponential(p);
      s=s.replace(/e(.)/,'E$1'+pad);
      return rtl.spaceLeft(s,w);
    }
  },

  initRTTI: function(){
    if (rtl.debug_rtti) rtl.debug('initRTTI');

    // base types
    rtl.tTypeInfo = { name: "tTypeInfo" };
    function newBaseTI(name,kind,ancestor){
      if (!ancestor) ancestor = rtl.tTypeInfo;
      if (rtl.debug_rtti) rtl.debug('initRTTI.newBaseTI "'+name+'" '+kind+' ("'+ancestor.name+'")');
      var t = Object.create(ancestor);
      t.name = name;
      t.kind = kind;
      rtl[name] = t;
      return t;
    };
    function newBaseInt(name,minvalue,maxvalue,ordtype){
      var t = newBaseTI(name,1 /* tkInteger */,rtl.tTypeInfoInteger);
      t.minvalue = minvalue;
      t.maxvalue = maxvalue;
      t.ordtype = ordtype;
      return t;
    };
    newBaseTI("tTypeInfoInteger",1 /* tkInteger */);
    newBaseInt("shortint",-0x80,0x7f,0);
    newBaseInt("byte",0,0xff,1);
    newBaseInt("smallint",-0x8000,0x7fff,2);
    newBaseInt("word",0,0xffff,3);
    newBaseInt("longint",-0x80000000,0x7fffffff,4);
    newBaseInt("longword",0,0xffffffff,5);
    newBaseInt("nativeint",-0x10000000000000,0xfffffffffffff,6);
    newBaseInt("nativeuint",0,0xfffffffffffff,7);
    newBaseTI("char",2 /* tkChar */);
    newBaseTI("string",3 /* tkString */);
    newBaseTI("tTypeInfoEnum",4 /* tkEnumeration */,rtl.tTypeInfoInteger);
    newBaseTI("tTypeInfoSet",5 /* tkSet */);
    newBaseTI("double",6 /* tkDouble */);
    newBaseTI("boolean",7 /* tkBool */);
    newBaseTI("tTypeInfoProcVar",8 /* tkProcVar */);
    newBaseTI("tTypeInfoMethodVar",9 /* tkMethod */,rtl.tTypeInfoProcVar);
    newBaseTI("tTypeInfoArray",10 /* tkArray */);
    newBaseTI("tTypeInfoDynArray",11 /* tkDynArray */);
    newBaseTI("tTypeInfoPointer",15 /* tkPointer */);
    var t = newBaseTI("pointer",15 /* tkPointer */,rtl.tTypeInfoPointer);
    t.reftype = null;
    newBaseTI("jsvalue",16 /* tkJSValue */);
    newBaseTI("tTypeInfoRefToProcVar",17 /* tkRefToProcVar */,rtl.tTypeInfoProcVar);

    // member kinds
    rtl.tTypeMember = {};
    function newMember(name,kind){
      var m = Object.create(rtl.tTypeMember);
      m.name = name;
      m.kind = kind;
      rtl[name] = m;
    };
    newMember("tTypeMemberField",1); // tmkField
    newMember("tTypeMemberMethod",2); // tmkMethod
    newMember("tTypeMemberProperty",3); // tmkProperty

    // base object for storing members: a simple object
    rtl.tTypeMembers = {};

    // tTypeInfoStruct - base object for tTypeInfoClass, tTypeInfoRecord, tTypeInfoInterface
    var tis = newBaseTI("tTypeInfoStruct",0);
    tis.$addMember = function(name,ancestor,options){
      if (rtl.debug_rtti){
        if (!rtl.hasString(name) || (name.charAt()==='$')) throw 'invalid member "'+name+'", this="'+this.name+'"';
        if (!rtl.is(ancestor,rtl.tTypeMember)) throw 'invalid ancestor "'+ancestor+':'+ancestor.name+'", "'+this.name+'.'+name+'"';
        if ((options!=undefined) && (typeof(options)!='object')) throw 'invalid options "'+options+'", "'+this.name+'.'+name+'"';
      };
      var t = Object.create(ancestor);
      t.name = name;
      this.members[name] = t;
      this.names.push(name);
      if (rtl.isObject(options)){
        for (var key in options) if (options.hasOwnProperty(key)) t[key] = options[key];
      };
      return t;
    };
    tis.addField = function(name,type,options){
      var t = this.$addMember(name,rtl.tTypeMemberField,options);
      if (rtl.debug_rtti){
        if (!rtl.is(type,rtl.tTypeInfo)) throw 'invalid type "'+type+'", "'+this.name+'.'+name+'"';
      };
      t.typeinfo = type;
      this.fields.push(name);
      return t;
    };
    tis.addFields = function(){
      var i=0;
      while(i<arguments.length){
        var name = arguments[i++];
        var type = arguments[i++];
        if ((i<arguments.length) && (typeof(arguments[i])==='object')){
          this.addField(name,type,arguments[i++]);
        } else {
          this.addField(name,type);
        };
      };
    };
    tis.addMethod = function(name,methodkind,params,result,options){
      var t = this.$addMember(name,rtl.tTypeMemberMethod,options);
      t.methodkind = methodkind;
      t.procsig = rtl.newTIProcSig(params);
      t.procsig.resulttype = result?result:null;
      this.methods.push(name);
      return t;
    };
    tis.addProperty = function(name,flags,result,getter,setter,options){
      var t = this.$addMember(name,rtl.tTypeMemberProperty,options);
      t.flags = flags;
      t.typeinfo = result;
      t.getter = getter;
      t.setter = setter;
      // Note: in options: params, stored, defaultvalue
      if (rtl.isArray(t.params)) t.params = rtl.newTIParams(t.params);
      this.properties.push(name);
      if (!rtl.isString(t.stored)) t.stored = "";
      return t;
    };
    tis.getField = function(index){
      return this.members[this.fields[index]];
    };
    tis.getMethod = function(index){
      return this.members[this.methods[index]];
    };
    tis.getProperty = function(index){
      return this.members[this.properties[index]];
    };

    newBaseTI("tTypeInfoRecord",12 /* tkRecord */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClass",13 /* tkClass */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClassRef",14 /* tkClassRef */);
    newBaseTI("tTypeInfoInterface",15 /* tkInterface */,rtl.tTypeInfoStruct);
  },

  tSectionRTTI: {
    $module: null,
    $inherited: function(name,ancestor,o){
      if (rtl.debug_rtti){
        rtl.debug('tSectionRTTI.newTI "'+(this.$module?this.$module.$name:"(no module)")
          +'"."'+name+'" ('+ancestor.name+') '+(o?'init':'forward'));
      };
      var t = this[name];
      if (t){
        if (!t.$forward) throw 'duplicate type "'+name+'"';
        if (!ancestor.isPrototypeOf(t)) throw 'typeinfo ancestor mismatch "'+name+'" ancestor="'+ancestor.name+'" t.name="'+t.name+'"';
      } else {
        t = Object.create(ancestor);
        t.name = name;
        t.module = this.module;
        this[name] = t;
      }
      if (o){
        delete t.$forward;
        for (var key in o) if (o.hasOwnProperty(key)) t[key]=o[key];
      } else {
        t.$forward = true;
      }
      return t;
    },
    $Scope: function(name,ancestor,o){
      var t=this.$inherited(name,ancestor,o);
      t.members = {};
      t.names = [];
      t.fields = [];
      t.methods = [];
      t.properties = [];
      return t;
    },
    $TI: function(name,kind,o){ var t=this.$inherited(name,rtl.tTypeInfo,o); t.kind = kind; return t; },
    $Int: function(name,o){ return this.$inherited(name,rtl.tTypeInfoInteger,o); },
    $Enum: function(name,o){ return this.$inherited(name,rtl.tTypeInfoEnum,o); },
    $Set: function(name,o){ return this.$inherited(name,rtl.tTypeInfoSet,o); },
    $StaticArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoArray,o); },
    $DynArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoDynArray,o); },
    $ProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoProcVar,o); },
    $RefToProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoRefToProcVar,o); },
    $MethodVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoMethodVar,o); },
    $Record: function(name,o){ return this.$Scope(name,rtl.tTypeInfoRecord,o); },
    $Class: function(name,o){ return this.$Scope(name,rtl.tTypeInfoClass,o); },
    $ClassRef: function(name,o){ return this.$inherited(name,rtl.tTypeInfoClassRef,o); },
    $Pointer: function(name,o){ return this.$inherited(name,rtl.tTypeInfoPointer,o); },
    $Interface: function(name,o){ return this.$Scope(name,rtl.tTypeInfoInterface,o); }
  },

  newTIParam: function(param){
    // param is an array, 0=name, 1=type, 2=optional flags
    var t = {
      name: param[0],
      typeinfo: param[1],
      flags: (rtl.isNumber(param[2]) ? param[2] : 0)
    };
    return t;
  },

  newTIParams: function(list){
    // list: optional array of [paramname,typeinfo,optional flags]
    var params = [];
    if (rtl.isArray(list)){
      for (var i=0; i<list.length; i++) params.push(rtl.newTIParam(list[i]));
    };
    return params;
  },

  newTIProcSig: function(params,result,flags){
    var s = {
      params: rtl.newTIParams(params),
      resulttype: result,
      flags: flags
    };
    return s;
  }
}
rtl.module("System",[],function () {
  "use strict";
  var $mod = this;
  this.LineEnding = "\n";
  this.sLineBreak = $mod.LineEnding;
  this.MaxLongint = 0x7fffffff;
  this.Maxint = 2147483647;
  this.TTextLineBreakStyle = {"0": "tlbsLF", tlbsLF: 0, "1": "tlbsCRLF", tlbsCRLF: 1, "2": "tlbsCR", tlbsCR: 2};
  $mod.$rtti.$inherited("TDateTime",rtl.double,{});
  this.TTimeStamp = function (s) {
    if (s) {
      this.Time = s.Time;
      this.date = s.date;
    } else {
      this.Time = 0;
      this.date = 0;
    };
    this.$equal = function (b) {
      return (this.Time === b.Time) && (this.date === b.date);
    };
  };
  this.TGuid = function (s) {
    if (s) {
      this.D1 = s.D1;
      this.D2 = s.D2;
      this.D3 = s.D3;
      this.D4 = s.D4.slice(0);
    } else {
      this.D1 = 0;
      this.D2 = 0;
      this.D3 = 0;
      this.D4 = rtl.arraySetLength(null,0,8);
    };
    this.$equal = function (b) {
      return (this.D1 === b.D1) && ((this.D2 === b.D2) && ((this.D3 === b.D3) && rtl.arrayEq(this.D4,b.D4)));
    };
  };
  rtl.createClass($mod,"TObject",null,function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
    this.Create = function () {
    };
    this.Destroy = function () {
    };
    this.Free = function () {
      this.$destroy("Destroy");
    };
    this.AfterConstruction = function () {
    };
    this.BeforeDestruction = function () {
    };
    this.GetInterface = function (iid, obj) {
      var Result = false;
      var i = iid.$intf;
      if (i){
        i = rtl.getIntfG(this,i.$guid,2);
        if (i){
          obj.set(i);
          return true;
        }
      };
      Result = this.GetInterfaceByStr(rtl.guidrToStr(iid),obj);
      return Result;
    };
    this.GetInterfaceByStr = function (iidstr, obj) {
      var Result = false;
      if ($mod.IObjectInstance.$equal(rtl.createTGUID(iidstr))) {
        obj.set(this);
        return true;
      };
      var i = rtl.getIntfG(this,iidstr,2);
      obj.set(i);
      return i!==null;
      Result = false;
      return Result;
    };
  });
  this.E_NOINTERFACE = -2147467262;
  rtl.createInterface($mod,"IUnknown","{00000000-0000-0000-C000-000000000046}",["QueryInterface","_AddRef","_Release"],null,function () {
    this.$kind = "com";
    var $r = this.$rtti;
    $r.addMethod("QueryInterface",1,[["iid",$mod.$rtti["TGuid"],2],["obj",null,4]],rtl.longint);
    $r.addMethod("_AddRef",1,null,rtl.longint);
    $r.addMethod("_Release",1,null,rtl.longint);
  });
  this.IObjectInstance = new $mod.TGuid({D1: 0xD91C9AF4, D2: 0x3C93, D3: 0x420F, D4: [0xA3,0x03,0xBF,0x5B,0xA8,0x2B,0xFD,0x23]});
  this.Frac = function (A) {
    return A % 1;
  };
  this.Odd = function (A) {
    return A&1 != 0;
  };
  this.Random = function (Range) {
    return Math.floor(Math.random()*Range);
  };
  this.Sqr$1 = function (A) {
    return A*A;
  };
  this.Trunc = function (A) {
    if (!Math.trunc) {
      Math.trunc = function(v) {
        v = +v;
        if (!isFinite(v)) return v;
        return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
      };
    }
    $mod.Trunc = Math.trunc;
    return Math.trunc(A);
  };
  this.DefaultTextLineBreakStyle = $mod.TTextLineBreakStyle.tlbsLF;
  this.Int = function (A) {
    var Result = 0.0;
    Result = Math.trunc(A);
    return Result;
  };
  this.Copy = function (S, Index, Size) {
    if (Index<1) Index = 1;
    return (Size>0) ? S.substring(Index-1,Index+Size-1) : "";
  };
  this.Copy$1 = function (S, Index) {
    if (Index<1) Index = 1;
    return S.substr(Index-1);
  };
  this.Delete = function (S, Index, Size) {
    var h = "";
    if (((Index < 1) || (Index > S.get().length)) || (Size <= 0)) return;
    h = S.get();
    S.set($mod.Copy(h,1,Index - 1) + $mod.Copy$1(h,Index + Size));
  };
  this.Pos = function (Search, InString) {
    return InString.indexOf(Search)+1;
  };
  this.Insert = function (Insertion, Target, Index) {
    var t = "";
    if (Insertion === "") return;
    t = Target.get();
    if (Index < 1) {
      Target.set(Insertion + t)}
     else if (Index > t.length) {
      Target.set(t + Insertion)}
     else Target.set(($mod.Copy(t,1,Index - 1) + Insertion) + $mod.Copy(t,Index,t.length));
  };
  this.upcase = function (c) {
    return c.toUpperCase();
  };
  this.val = function (S, NI, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x) || (x !== $mod.Int(x))) {
      Code.set(1)}
     else NI.set($mod.Trunc(x));
  };
  this.val$5 = function (S, I, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else if (x > 2147483647) {
      Code.set(2)}
     else I.set($mod.Trunc(x));
  };
  this.val$7 = function (S, d, Code) {
    var x = 0.0;
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else {
      Code.set(0);
      d.set(x);
    };
  };
  this.StringOfChar = function (c, l) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 1, $end2 = l; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + c;
    };
    return Result;
  };
  this.Assigned = function (V) {
    return (V!=undefined) && (V!=null) && (!rtl.isArray(V) || (V.length > 0));
  };
  $mod.$init = function () {
    rtl.exitcode = 0;
  };
});
rtl.module("RTLConsts",["System"],function () {
  "use strict";
  var $mod = this;
  this.SArgumentMissing = 'Missing argument in format "%s"';
  this.SInvalidFormat = 'Invalid format specifier : "%s"';
  this.SInvalidArgIndex = 'Invalid argument index in format: "%s"';
  this.SListCapacityError = "List capacity (%s) exceeded.";
  this.SListCountError = "List count (%s) out of bounds.";
  this.SListIndexError = "List index (%s) out of bounds";
  this.SSortedListError = "Operation not allowed on sorted list";
  this.SDuplicateString = "String list does not allow duplicates";
  this.SErrFindNeedsSortedList = "Cannot use find on unsorted list";
  this.SInvalidName = 'Invalid component name: "%s"';
  this.SDuplicateName = 'Duplicate component name: "%s"';
  this.SErrInvalidTimeFormat = 'Invalid time format: "%s"';
  this.SErrInvalidInteger = 'Invalid integer value: "%s"';
});
rtl.module("Types",["System"],function () {
  "use strict";
  var $mod = this;
  this.TDirection = {"0": "FromBeginning", FromBeginning: 0, "1": "FromEnd", FromEnd: 1};
  this.TDuplicates = {"0": "dupIgnore", dupIgnore: 0, "1": "dupAccept", dupAccept: 1, "2": "dupError", dupError: 2};
  this.TPoint = function (s) {
    if (s) {
      this.x = s.x;
      this.y = s.y;
    } else {
      this.x = 0;
      this.y = 0;
    };
    this.$equal = function (b) {
      return (this.x === b.x) && (this.y === b.y);
    };
  };
  $mod.$rtti.$Record("TPoint",{}).addFields("x",rtl.longint,"y",rtl.longint);
  this.TRect = function (s) {
    if (s) {
      this.Left = s.Left;
      this.Top = s.Top;
      this.Right = s.Right;
      this.Bottom = s.Bottom;
    } else {
      this.Left = 0;
      this.Top = 0;
      this.Right = 0;
      this.Bottom = 0;
    };
    this.$equal = function (b) {
      return (this.Left === b.Left) && ((this.Top === b.Top) && ((this.Right === b.Right) && (this.Bottom === b.Bottom)));
    };
  };
  this.Rect = function (Left, Top, Right, Bottom) {
    var Result = new $mod.TRect();
    Result.Left = Left;
    Result.Top = Top;
    Result.Right = Right;
    Result.Bottom = Bottom;
    return Result;
  };
  this.Bounds = function (ALeft, ATop, AWidth, AHeight) {
    var Result = new $mod.TRect();
    Result.Left = ALeft;
    Result.Top = ATop;
    Result.Right = ALeft + AWidth;
    Result.Bottom = ATop + AHeight;
    return Result;
  };
  this.Point = function (x, y) {
    var Result = new $mod.TPoint();
    Result.x = x;
    Result.y = y;
    return Result;
  };
});
rtl.module("JS",["System","Types"],function () {
  "use strict";
  var $mod = this;
  this.isInteger = function (v) {
    return Math.floor(v)===v;
  };
  this.isNull = function (v) {
    return v === null;
  };
  this.TJSValueType = {"0": "jvtNull", jvtNull: 0, "1": "jvtBoolean", jvtBoolean: 1, "2": "jvtInteger", jvtInteger: 2, "3": "jvtFloat", jvtFloat: 3, "4": "jvtString", jvtString: 4, "5": "jvtObject", jvtObject: 5, "6": "jvtArray", jvtArray: 6};
  this.GetValueType = function (JS) {
    var Result = 0;
    var t = "";
    if ($mod.isNull(JS)) {
      Result = $mod.TJSValueType.jvtNull}
     else {
      t = typeof(JS);
      if (t === "string") {
        Result = $mod.TJSValueType.jvtString}
       else if (t === "boolean") {
        Result = $mod.TJSValueType.jvtBoolean}
       else if (t === "object") {
        if (rtl.isArray(JS)) {
          Result = $mod.TJSValueType.jvtArray}
         else Result = $mod.TJSValueType.jvtObject;
      } else if (t === "number") if ($mod.isInteger(JS)) {
        Result = $mod.TJSValueType.jvtInteger}
       else Result = $mod.TJSValueType.jvtFloat;
    };
    return Result;
  };
});
rtl.module("SysUtils",["System","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FreeAndNil = function (Obj) {
    var o = null;
    o = Obj.get();
    if (o === null) return;
    Obj.set(null);
    o.$destroy("Destroy");
  };
  rtl.createClass($mod,"Exception",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fMessage = "";
    };
    this.Create$1 = function (Msg) {
      this.fMessage = Msg;
    };
    this.CreateFmt = function (Msg, Args) {
      this.fMessage = $mod.Format(Msg,Args);
    };
  });
  rtl.createClass($mod,"EConvertError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EArgumentException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EArgumentOutOfRangeException",$mod.EArgumentException,function () {
  });
  this.Trim = function (S) {
    return S.trim();
  };
  this.TrimLeft = function (S) {
    return S.replace(/^[\s\uFEFF\xA0\x00-\x1f]+/,'');
  };
  this.UpperCase = function (s) {
    return s.toUpperCase();
  };
  this.LowerCase = function (s) {
    return s.toLowerCase();
  };
  this.CompareStr = function (s1, s2) {
    var l1 = s1.length;
    var l2 = s2.length;
    if (l1<=l2){
      var s = s2.substr(0,l1);
      if (s1<s){ return -1;
      } else if (s1>s){ return 1;
      } else { return l1<l2 ? -1 : 0; };
    } else {
      var s = s1.substr(0,l2);
      if (s<s2){ return -1;
      } else { return 1; };
    };
  };
  this.CompareText = function (s1, s2) {
    var l1 = s1.toLowerCase();
    var l2 = s2.toLowerCase();
    if (l1>l2){ return 1;
    } else if (l1<l2){ return -1;
    } else { return 0; };
  };
  this.Format = function (Fmt, Args) {
    var Result = "";
    var ChPos = 0;
    var OldPos = 0;
    var ArgPos = 0;
    var DoArg = 0;
    var Len = 0;
    var Hs = "";
    var ToAdd = "";
    var Index = 0;
    var Width = 0;
    var Prec = 0;
    var Left = false;
    var Fchar = "";
    var vq = 0;
    function ReadFormat() {
      var Result = "";
      var Value = 0;
      function ReadInteger() {
        var Code = 0;
        var ArgN = 0;
        if (Value !== -1) return;
        OldPos = ChPos;
        while (((ChPos <= Len) && (Fmt.charAt(ChPos - 1) <= "9")) && (Fmt.charAt(ChPos - 1) >= "0")) ChPos += 1;
        if (ChPos > Len) $impl.DoFormatError(1,Fmt);
        if (Fmt.charAt(ChPos - 1) === "*") {
          if (Index === -1) {
            ArgN = ArgPos}
           else {
            ArgN = Index;
            Index += 1;
          };
          if ((ChPos > OldPos) || (ArgN > (rtl.length(Args) - 1))) $impl.DoFormatError(1,Fmt);
          ArgPos = ArgN + 1;
          if (rtl.isNumber(Args[ArgN]) && pas.JS.isInteger(Args[ArgN])) {
            Value = Math.floor(Args[ArgN])}
           else $impl.DoFormatError(1,Fmt);
          ChPos += 1;
        } else {
          if (OldPos < ChPos) {
            pas.System.val(pas.System.Copy(Fmt,OldPos,ChPos - OldPos),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Code;
              }, set: function (v) {
                Code = v;
              }});
            if (Code > 0) $impl.DoFormatError(1,Fmt);
          } else Value = -1;
        };
      };
      function ReadIndex() {
        if (Fmt.charAt(ChPos - 1) !== ":") {
          ReadInteger()}
         else Value = 0;
        if (Fmt.charAt(ChPos - 1) === ":") {
          if (Value === -1) $impl.DoFormatError(2,Fmt);
          Index = Value;
          Value = -1;
          ChPos += 1;
        };
      };
      function ReadLeft() {
        if (Fmt.charAt(ChPos - 1) === "-") {
          Left = true;
          ChPos += 1;
        } else Left = false;
      };
      function ReadWidth() {
        ReadInteger();
        if (Value !== -1) {
          Width = Value;
          Value = -1;
        };
      };
      function ReadPrec() {
        if (Fmt.charAt(ChPos - 1) === ".") {
          ChPos += 1;
          ReadInteger();
          if (Value === -1) Value = 0;
          Prec = Value;
        };
      };
      Index = -1;
      Width = -1;
      Prec = -1;
      Value = -1;
      ChPos += 1;
      if (Fmt.charAt(ChPos - 1) === "%") {
        Result = "%";
        return Result;
      };
      ReadIndex();
      ReadLeft();
      ReadWidth();
      ReadPrec();
      Result = pas.System.upcase(Fmt.charAt(ChPos - 1));
      return Result;
    };
    function Checkarg(AT, err) {
      var Result = false;
      Result = false;
      if (Index === -1) {
        DoArg = ArgPos}
       else DoArg = Index;
      ArgPos = DoArg + 1;
      if ((DoArg > (rtl.length(Args) - 1)) || (pas.JS.GetValueType(Args[DoArg]) !== AT)) {
        if (err) $impl.DoFormatError(3,Fmt);
        ArgPos -= 1;
        return Result;
      };
      Result = true;
      return Result;
    };
    Result = "";
    Len = Fmt.length;
    ChPos = 1;
    OldPos = 1;
    ArgPos = 0;
    while (ChPos <= Len) {
      while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) !== "%")) ChPos += 1;
      if (ChPos > OldPos) Result = Result + pas.System.Copy(Fmt,OldPos,ChPos - OldPos);
      if (ChPos < Len) {
        Fchar = ReadFormat();
        var $tmp1 = Fchar;
        if ($tmp1 === "D") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          ToAdd = $mod.IntToStr(Math.floor(Args[DoArg]));
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          if (ToAdd.charAt(0) !== "-") {
            ToAdd = pas.System.StringOfChar("0",Index) + ToAdd}
           else pas.System.Insert(pas.System.StringOfChar("0",Index + 1),{get: function () {
              return ToAdd;
            }, set: function (v) {
              ToAdd = v;
            }},2);
        } else if ($tmp1 === "U") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          if (Math.floor(Args[DoArg]) < 0) $impl.DoFormatError(3,Fmt);
          ToAdd = $mod.IntToStr(Math.floor(Args[DoArg]));
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          ToAdd = pas.System.StringOfChar("0",Index) + ToAdd;
        } else if ($tmp1 === "E") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffFixed,9999,Prec);
        } else if ($tmp1 === "F") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffFixed,9999,Prec);
        } else if ($tmp1 === "G") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffGeneral,Prec,3);
        } else if ($tmp1 === "N") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffNumber,9999,Prec);
        } else if ($tmp1 === "M") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffCurrency,9999,Prec);
        } else if ($tmp1 === "S") {
          Checkarg(pas.JS.TJSValueType.jvtString,true);
          Hs = "" + Args[DoArg];
          Index = Hs.length;
          if ((Prec !== -1) && (Index > Prec)) Index = Prec;
          ToAdd = pas.System.Copy(Hs,1,Index);
        } else if ($tmp1 === "P") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          ToAdd = $mod.IntToHex(Math.floor(Args[DoArg]),31);
        } else if ($tmp1 === "X") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          vq = Math.floor(Args[DoArg]);
          Index = 31;
          if (Prec > Index) {
            ToAdd = $mod.IntToHex(vq,Index)}
           else {
            Index = 1;
            while (((1 << (Index * 4)) <= vq) && (Index < 16)) Index += 1;
            if (Index > Prec) Prec = Index;
            ToAdd = $mod.IntToHex(vq,Prec);
          };
        } else if ($tmp1 === "%") ToAdd = "%";
        if (Width !== -1) if (ToAdd.length < Width) if (!Left) {
          ToAdd = pas.System.StringOfChar(" ",Width - ToAdd.length) + ToAdd}
         else ToAdd = ToAdd + pas.System.StringOfChar(" ",Width - ToAdd.length);
        Result = Result + ToAdd;
      };
      ChPos += 1;
      OldPos = ChPos;
    };
    return Result;
  };
  var Alpha = rtl.createSet(null,65,90,null,97,122,95);
  var AlphaNum = rtl.unionSet(Alpha,rtl.createSet(null,48,57));
  var Dot = ".";
  this.IsValidIdent = function (Ident, AllowDots, StrictDots) {
    var Result = false;
    var First = false;
    var I = 0;
    var Len = 0;
    Len = Ident.length;
    if (Len < 1) return false;
    First = true;
    Result = false;
    I = 1;
    while (I <= Len) {
      if (First) {
        if (!(Ident.charCodeAt(I - 1) in Alpha)) return Result;
        First = false;
      } else if (AllowDots && (Ident.charAt(I - 1) === Dot)) {
        if (StrictDots) {
          if (I >= Len) return Result;
          First = true;
        };
      } else if (!(Ident.charCodeAt(I - 1) in AlphaNum)) return Result;
      I = I + 1;
    };
    Result = true;
    return Result;
  };
  this.TStringReplaceFlag = {"0": "rfReplaceAll", rfReplaceAll: 0, "1": "rfIgnoreCase", rfIgnoreCase: 1};
  this.StringReplace = function (aOriginal, aSearch, aReplace, Flags) {
    var Result = "";
    var REFlags = "";
    var REString = "";
    REFlags = "";
    if ($mod.TStringReplaceFlag.rfReplaceAll in Flags) REFlags = "g";
    if ($mod.TStringReplaceFlag.rfIgnoreCase in Flags) REFlags = REFlags + "i";
    REString = aSearch.replace(new RegExp($impl.RESpecials,"g"),"\\$1");
    Result = aOriginal.replace(new RegExp(REString,REFlags),aReplace);
    return Result;
  };
  this.IntToStr = function (Value) {
    var Result = "";
    Result = "" + Value;
    return Result;
  };
  this.TryStrToInt$1 = function (S, res) {
    var Result = false;
    var Radix = 10;
    var F = "";
    var N = "";
    var J = undefined;
    N = S;
    F = pas.System.Copy(N,1,1);
    if (F === "$") {
      Radix = 16}
     else if (F === "&") {
      Radix = 8}
     else if (F === "%") Radix = 2;
    if (Radix !== 10) pas.System.Delete({get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},1,1);
    J = parseInt(N,Radix);
    Result = !isNaN(J);
    if (Result) res.set(Math.floor(J));
    return Result;
  };
  this.StrToInt = function (S) {
    var Result = 0;
    var R = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = R;
    return Result;
  };
  this.StrToInt64 = function (S) {
    var Result = 0;
    var N = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = N;
    return Result;
  };
  var HexDigits = "0123456789ABCDEF";
  this.IntToHex = function (Value, Digits) {
    var Result = "";
    if (Digits === 0) Digits = 1;
    Result = "";
    while (Value > 0) {
      Result = HexDigits.charAt(((Value & 15) + 1) - 1) + Result;
      Value = Value >>> 4;
    };
    while (Result.length < Digits) Result = "0" + Result;
    return Result;
  };
  this.TFloatFormat = {"0": "ffFixed", ffFixed: 0, "1": "ffGeneral", ffGeneral: 1, "2": "ffExponent", ffExponent: 2, "3": "ffNumber", ffNumber: 3, "4": "ffCurrency", ffCurrency: 4};
  this.FloatToStr = function (Value) {
    var Result = "";
    Result = $mod.FloatToStrF(Value,$mod.TFloatFormat.ffGeneral,15,0);
    return Result;
  };
  this.FloatToStrF = function (Value, format, Precision, Digits) {
    var Result = "";
    var DS = "";
    DS = $mod.DecimalSeparator;
    var $tmp1 = format;
    if ($tmp1 === $mod.TFloatFormat.ffGeneral) {
      Result = $impl.FormatGeneralFloat(Value,Precision,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffExponent) {
      Result = $impl.FormatExponentFloat(Value,Precision,Digits,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffFixed) {
      Result = $impl.FormatFixedFloat(Value,Digits,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffNumber) {
      Result = $impl.FormatNumberFloat(Value,Digits,DS,$mod.ThousandSeparator)}
     else if ($tmp1 === $mod.TFloatFormat.ffCurrency) Result = $impl.FormatNumberCurrency(Value,Digits,DS,$mod.ThousandSeparator);
    if (((format !== $mod.TFloatFormat.ffCurrency) && (Result.length > 1)) && (Result.charAt(0) === "-")) $impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS);
    return Result;
  };
  this.TimeSeparator = "";
  this.DateSeparator = "";
  this.ShortDateFormat = "";
  this.LongDateFormat = "";
  this.ShortTimeFormat = "";
  this.LongTimeFormat = "";
  this.DecimalSeparator = "";
  this.ThousandSeparator = "";
  this.TimeAMString = "";
  this.TimePMString = "";
  this.HoursPerDay = 24;
  this.MinsPerHour = 60;
  this.SecsPerMin = 60;
  this.MSecsPerSec = 1000;
  this.MinsPerDay = 24 * 60;
  this.SecsPerDay = 1440 * 60;
  this.MSecsPerDay = 86400 * 1000;
  this.MaxDateTime = 2958465.99999999;
  this.DateDelta = 693594;
  this.MonthDays = rtl.arraySetLength(null,0,2,12);
  this.ShortMonthNames = rtl.arraySetLength(null,"",12);
  this.LongMonthNames = rtl.arraySetLength(null,"",12);
  this.ShortDayNames = rtl.arraySetLength(null,"",7);
  this.LongDayNames = rtl.arraySetLength(null,"",7);
  rtl.createClass($mod,"TFormatSettings",pas.System.TObject,function () {
    this.GetDecimalSeparator = function () {
      var Result = "";
      Result = $mod.DecimalSeparator;
      return Result;
    };
    this.GetShortDateFormat = function () {
      var Result = "";
      Result = $mod.ShortDateFormat;
      return Result;
    };
    this.GetThousandSeparator = function () {
      var Result = "";
      Result = $mod.ThousandSeparator;
      return Result;
    };
    this.SetDateSeparator = function (Value) {
      $mod.DateSeparator = Value;
    };
    this.SetDecimalSeparator = function (Value) {
      $mod.DecimalSeparator = Value;
    };
    this.SetShortDateFormat = function (Value) {
      $mod.ShortDateFormat = Value;
    };
    this.SetThousandSeparator = function (Value) {
      $mod.ThousandSeparator = Value;
    };
    this.SetTimeSeparator = function (Value) {
      $mod.TimeSeparator = Value;
    };
  });
  this.FormatSettings = null;
  this.TwoDigitYearCenturyWindow = 0;
  this.JSDateToDateTime = function (aDate) {
    var Result = 0.0;
    Result = $mod.EncodeDate(aDate.getFullYear(),aDate.getMonth() + 1,aDate.getDate()) + $mod.EncodeTime(aDate.getHours(),aDate.getMinutes(),aDate.getSeconds(),aDate.getMilliseconds());
    return Result;
  };
  this.DateTimeToTimeStamp = function (DateTime) {
    var Result = new pas.System.TTimeStamp();
    var D = 0.0;
    D = DateTime * 86400000;
    if (D < 0) {
      D = D - 0.5}
     else D = D + 0.5;
    Result.Time = pas.System.Trunc(Math.abs(pas.System.Trunc(D)) % 86400000);
    Result.date = 693594 + Math.floor(pas.System.Trunc(D) / 86400000);
    return Result;
  };
  this.TryEncodeDate = function (Year, Month, Day, date) {
    var Result = false;
    var c = 0;
    var ya = 0;
    Result = (((((Year > 0) && (Year < 10000)) && (Month >= 1)) && (Month <= 12)) && (Day > 0)) && (Day <= $mod.MonthDays[+$mod.IsLeapYear(Year)][Month - 1]);
    if (Result) {
      if (Month > 2) {
        Month -= 3}
       else {
        Month += 9;
        Year -= 1;
      };
      c = Math.floor(Year / 100);
      ya = Year - (100 * c);
      date.set(((((146097 * c) >>> 2) + ((1461 * ya) >>> 2)) + Math.floor(((153 * Month) + 2) / 5)) + Day);
      date.set(date.get() - 693900);
    };
    return Result;
  };
  this.TryEncodeTime = function (Hour, Min, Sec, MSec, Time) {
    var Result = false;
    Result = (((Hour < 24) && (Min < 60)) && (Sec < 60)) && (MSec < 1000);
    if (Result) Time.set(((((Hour * 3600000) + (Min * 60000)) + (Sec * 1000)) + MSec) / 86400000);
    return Result;
  };
  this.EncodeDate = function (Year, Month, Day) {
    var Result = 0.0;
    if (!$mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s-%s-%s is not a valid date specification",[$mod.IntToStr(Year),$mod.IntToStr(Month),$mod.IntToStr(Day)]]);
    return Result;
  };
  this.EncodeTime = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTime(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s:%s:%s.%s is not a valid time specification",[$mod.IntToStr(Hour),$mod.IntToStr(Minute),$mod.IntToStr(Second),$mod.IntToStr(MilliSecond)]]);
    return Result;
  };
  this.ComposeDateTime = function (date, Time) {
    var Result = 0.0;
    if (date < 0) {
      Result = pas.System.Trunc(date) - Math.abs(pas.System.Frac(Time))}
     else Result = pas.System.Trunc(date) + Math.abs(pas.System.Frac(Time));
    return Result;
  };
  this.DecodeDate = function (date, Year, Month, Day) {
    var ly = 0;
    var ld = 0;
    var lm = 0;
    var j = 0;
    if (date <= -693594) {
      Year.set(0);
      Month.set(0);
      Day.set(0);
    } else {
      if (date > 0) {
        date = date + (1 / (86400000 * 2))}
       else date = date - (1 / (86400000 * 2));
      if (date > $mod.MaxDateTime) date = $mod.MaxDateTime;
      j = ((pas.System.Trunc(date) + 693900) << 2) - 1;
      ly = Math.floor(j / 146097);
      j = j - (146097 * ly);
      ld = j >>> 2;
      j = Math.floor(((ld << 2) + 3) / 1461);
      ld = (((ld << 2) + 7) - (1461 * j)) >>> 2;
      lm = Math.floor(((5 * ld) - 3) / 153);
      ld = Math.floor((((5 * ld) + 2) - (153 * lm)) / 5);
      ly = (100 * ly) + j;
      if (lm < 10) {
        lm += 3}
       else {
        lm -= 9;
        ly += 1;
      };
      Year.set(ly);
      Month.set(lm);
      Day.set(ld);
    };
  };
  this.DecodeDateFully = function (DateTime, Year, Month, Day, DOW) {
    var Result = false;
    $mod.DecodeDate(DateTime,Year,Month,Day);
    DOW.set($mod.DayOfWeek(DateTime));
    Result = $mod.IsLeapYear(Year.get());
    return Result;
  };
  this.DecodeTime = function (Time, Hour, Minute, Second, MilliSecond) {
    var l = 0;
    l = $mod.DateTimeToTimeStamp(Time).Time;
    Hour.set(Math.floor(l / 3600000));
    l = l % 3600000;
    Minute.set(Math.floor(l / 60000));
    l = l % 60000;
    Second.set(Math.floor(l / 1000));
    l = l % 1000;
    MilliSecond.set(l);
  };
  this.DayOfWeek = function (DateTime) {
    var Result = 0;
    Result = 1 + ((pas.System.Trunc(DateTime) - 1) % 7);
    if (Result <= 0) Result += 7;
    return Result;
  };
  this.Now = function () {
    var Result = 0.0;
    Result = $mod.JSDateToDateTime(new Date());
    return Result;
  };
  this.IncMonth = function (DateTime, NumberOfMonths) {
    var Result = 0.0;
    var Year = 0;
    var Month = 0;
    var Day = 0;
    $mod.DecodeDate(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }});
    $mod.IncAMonth({get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},NumberOfMonths);
    Result = $mod.ComposeDateTime($impl.DoEncodeDate(Year,Month,Day),DateTime);
    return Result;
  };
  this.IncAMonth = function (Year, Month, Day, NumberOfMonths) {
    var TempMonth = 0;
    var S = 0;
    if (NumberOfMonths >= 0) {
      S = 1}
     else S = -1;
    Year.set(Year.get() + Math.floor(NumberOfMonths / 12));
    TempMonth = (Month.get() + (NumberOfMonths % 12)) - 1;
    if ((TempMonth > 11) || (TempMonth < 0)) {
      TempMonth -= S * 12;
      Year.set(Year.get() + S);
    };
    Month.set(TempMonth + 1);
    if (Day.get() > $mod.MonthDays[+$mod.IsLeapYear(Year.get())][Month.get() - 1]) Day.set($mod.MonthDays[+$mod.IsLeapYear(Year.get())][Month.get() - 1]);
  };
  this.IsLeapYear = function (Year) {
    var Result = false;
    Result = ((Year % 4) === 0) && (((Year % 100) !== 0) || ((Year % 400) === 0));
    return Result;
  };
  this.FormatDateTime = function (FormatStr, DateTime) {
    var Result = "";
    function StoreStr(APos, Len) {
      Result = Result + pas.System.Copy(FormatStr,APos,Len);
    };
    function StoreString(AStr) {
      Result = Result + AStr;
    };
    function StoreInt(Value, Digits) {
      var S = "";
      S = $mod.IntToStr(Value);
      while (S.length < Digits) S = "0" + S;
      StoreString(S);
    };
    var Year = 0;
    var Month = 0;
    var Day = 0;
    var DayOfWeek = 0;
    var Hour = 0;
    var Minute = 0;
    var Second = 0;
    var MilliSecond = 0;
    function StoreFormat(FormatStr, Nesting, TimeFlag) {
      var Token = "";
      var lastformattoken = "";
      var prevlasttoken = "";
      var Count = 0;
      var Clock12 = false;
      var tmp = 0;
      var isInterval = false;
      var P = 0;
      var FormatCurrent = 0;
      var FormatEnd = 0;
      if (Nesting > 1) return;
      FormatCurrent = 1;
      FormatEnd = FormatStr.length;
      Clock12 = false;
      isInterval = false;
      P = 1;
      while (P <= FormatEnd) {
        Token = FormatStr.charAt(P - 1);
        var $tmp1 = Token;
        if (($tmp1 === "'") || ($tmp1 === '"')) {
          P += 1;
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
        } else if (($tmp1 === "A") || ($tmp1 === "a")) {
          if ((($mod.CompareText(pas.System.Copy(FormatStr,P,3),"A\/P") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,4),"AMPM") === 0)) || ($mod.CompareText(pas.System.Copy(FormatStr,P,5),"AM\/PM") === 0)) {
            Clock12 = true;
            break;
          };
        };
        P += 1;
      };
      Token = "ÿ";
      lastformattoken = " ";
      prevlasttoken = "H";
      while (FormatCurrent <= FormatEnd) {
        Token = $mod.UpperCase(FormatStr.charAt(FormatCurrent - 1)).charAt(0);
        Count = 1;
        P = FormatCurrent + 1;
        var $tmp2 = Token;
        if (($tmp2 === "'") || ($tmp2 === '"')) {
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
          P += 1;
          Count = P - FormatCurrent;
          StoreStr(FormatCurrent + 1,Count - 2);
        } else if ($tmp2 === "A") {
          if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,4),"AMPM") === 0) {
            Count = 4;
            if (Hour < 12) {
              StoreString($mod.TimeAMString)}
             else StoreString($mod.TimePMString);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,5),"AM\/PM") === 0) {
            Count = 5;
            if (Hour < 12) {
              StoreStr(FormatCurrent,2)}
             else StoreStr(FormatCurrent + 3,2);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,3),"A\/P") === 0) {
            Count = 3;
            if (Hour < 12) {
              StoreStr(FormatCurrent,1)}
             else StoreStr(FormatCurrent + 2,1);
          } else throw $mod.EConvertError.$create("Create$1",["Illegal character in format string"]);
        } else if ($tmp2 === "\/") {
          StoreString($mod.DateSeparator);
        } else if ($tmp2 === ":") {
          StoreString($mod.TimeSeparator)}
         else if ((((((((((($tmp2 === " ") || ($tmp2 === "C")) || ($tmp2 === "D")) || ($tmp2 === "H")) || ($tmp2 === "M")) || ($tmp2 === "N")) || ($tmp2 === "S")) || ($tmp2 === "T")) || ($tmp2 === "Y")) || ($tmp2 === "Z")) || ($tmp2 === "F")) {
          while ((P <= FormatEnd) && ($mod.UpperCase(FormatStr.charAt(P - 1)) === Token)) P += 1;
          Count = P - FormatCurrent;
          var $tmp3 = Token;
          if ($tmp3 === " ") {
            StoreStr(FormatCurrent,Count)}
           else if ($tmp3 === "Y") {
            if (Count > 2) {
              StoreInt(Year,4)}
             else StoreInt(Year % 100,2);
          } else if ($tmp3 === "M") {
            if (isInterval && ((prevlasttoken === "H") || TimeFlag)) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if ((lastformattoken === "H") || TimeFlag) {
              if (Count === 1) {
                StoreInt(Minute,0)}
               else StoreInt(Minute,2);
            } else {
              var $tmp4 = Count;
              if ($tmp4 === 1) {
                StoreInt(Month,0)}
               else if ($tmp4 === 2) {
                StoreInt(Month,2)}
               else if ($tmp4 === 3) {
                StoreString($mod.ShortMonthNames[Month - 1])}
               else {
                StoreString($mod.LongMonthNames[Month - 1]);
              };
            };
          } else if ($tmp3 === "D") {
            var $tmp5 = Count;
            if ($tmp5 === 1) {
              StoreInt(Day,0)}
             else if ($tmp5 === 2) {
              StoreInt(Day,2)}
             else if ($tmp5 === 3) {
              StoreString($mod.ShortDayNames[DayOfWeek - 1])}
             else if ($tmp5 === 4) {
              StoreString($mod.LongDayNames[DayOfWeek - 1])}
             else if ($tmp5 === 5) {
              StoreFormat($mod.ShortDateFormat,Nesting + 1,false)}
             else {
              StoreFormat($mod.LongDateFormat,Nesting + 1,false);
            };
          } else if ($tmp3 === "H") {
            if (isInterval) {
              StoreInt(Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24),0)}
             else if (Clock12) {
              tmp = Hour % 12;
              if (tmp === 0) tmp = 12;
              if (Count === 1) {
                StoreInt(tmp,0)}
               else StoreInt(tmp,2);
            } else {
              if (Count === 1) {
                StoreInt(Hour,0)}
               else StoreInt(Hour,2);
            }}
           else if ($tmp3 === "N") {
            if (isInterval) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Minute,0)}
             else StoreInt(Minute,2)}
           else if ($tmp3 === "S") {
            if (isInterval) {
              StoreInt(Second + ((Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Second,0)}
             else StoreInt(Second,2)}
           else if ($tmp3 === "Z") {
            if (Count === 1) {
              StoreInt(MilliSecond,0)}
             else StoreInt(MilliSecond,3)}
           else if ($tmp3 === "T") {
            if (Count === 1) {
              StoreFormat($mod.ShortTimeFormat,Nesting + 1,true)}
             else StoreFormat($mod.LongTimeFormat,Nesting + 1,true)}
           else if ($tmp3 === "C") {
            StoreFormat($mod.ShortDateFormat,Nesting + 1,false);
            if (((Hour !== 0) || (Minute !== 0)) || (Second !== 0)) {
              StoreString(" ");
              StoreFormat($mod.LongTimeFormat,Nesting + 1,true);
            };
          } else if ($tmp3 === "F") {
            StoreFormat($mod.ShortDateFormat,Nesting + 1,false);
            StoreString(" ");
            StoreFormat($mod.LongTimeFormat,Nesting + 1,true);
          };
          prevlasttoken = lastformattoken;
          lastformattoken = Token;
        } else {
          StoreString(Token);
        };
        FormatCurrent += Count;
      };
    };
    $mod.DecodeDateFully(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},{get: function () {
        return DayOfWeek;
      }, set: function (v) {
        DayOfWeek = v;
      }});
    $mod.DecodeTime(DateTime,{get: function () {
        return Hour;
      }, set: function (v) {
        Hour = v;
      }},{get: function () {
        return Minute;
      }, set: function (v) {
        Minute = v;
      }},{get: function () {
        return Second;
      }, set: function (v) {
        Second = v;
      }},{get: function () {
        return MilliSecond;
      }, set: function (v) {
        MilliSecond = v;
      }});
    if (FormatStr !== "") {
      StoreFormat(FormatStr,0,false)}
     else StoreFormat("C",0,false);
    return Result;
  };
  this.TryStrToTime = function (S, Value) {
    var Result = false;
    Result = $mod.TryStrToTime$1(S,Value,"\x00");
    return Result;
  };
  this.TryStrToTime$1 = function (S, Value, separator) {
    var Result = false;
    var Msg = "";
    Result = S.length !== 0;
    if (Result) {
      Value.set($impl.IntStrToTime({get: function () {
          return Msg;
        }, set: function (v) {
          Msg = v;
        }},S,S.length,separator));
      Result = Msg === "";
    };
    return Result;
  };
  this.CurrencyFormat = 0;
  this.NegCurrFormat = 0;
  this.CurrencyDecimals = 2;
  this.CurrencyString = "$";
  this.Supports$3 = function (Instance, IID, Intf) {
    var Result = false;
    Result = (Instance !== null) && Instance.GetInterfaceByStr(IID,Intf);
    return Result;
  };
  $mod.$init = function () {
    $mod.FormatSettings = $mod.TFormatSettings.$create("Create");
    $mod.LongDayNames[0] = "Sunday";
    $mod.LongDayNames[1] = "Monday";
    $mod.LongDayNames[2] = "Tuesday";
    $mod.LongDayNames[3] = "Wednesday";
    $mod.LongDayNames[4] = "Thursday";
    $mod.LongDayNames[5] = "Friday";
    $mod.LongDayNames[6] = "Saturday";
    $mod.ShortDayNames[0] = "Sun";
    $mod.ShortDayNames[1] = "Mon";
    $mod.ShortDayNames[2] = "Tue";
    $mod.ShortDayNames[3] = "Wed";
    $mod.ShortDayNames[4] = "Thu";
    $mod.ShortDayNames[5] = "Fri";
    $mod.ShortDayNames[6] = "Sat";
    $mod.ShortMonthNames[0] = "Jan";
    $mod.ShortMonthNames[1] = "Feb";
    $mod.ShortMonthNames[2] = "Mar";
    $mod.ShortMonthNames[3] = "Apr";
    $mod.ShortMonthNames[4] = "May";
    $mod.ShortMonthNames[5] = "Jun";
    $mod.ShortMonthNames[6] = "Jul";
    $mod.ShortMonthNames[7] = "Aug";
    $mod.ShortMonthNames[8] = "Sep";
    $mod.ShortMonthNames[9] = "Oct";
    $mod.ShortMonthNames[10] = "Nov";
    $mod.ShortMonthNames[11] = "Dec";
    $mod.LongMonthNames[0] = "January";
    $mod.LongMonthNames[1] = "February";
    $mod.LongMonthNames[2] = "March";
    $mod.LongMonthNames[3] = "April";
    $mod.LongMonthNames[4] = "May";
    $mod.LongMonthNames[5] = "June";
    $mod.LongMonthNames[6] = "July";
    $mod.LongMonthNames[7] = "August";
    $mod.LongMonthNames[8] = "September";
    $mod.LongMonthNames[9] = "October";
    $mod.LongMonthNames[10] = "November";
    $mod.LongMonthNames[11] = "December";
    $mod.MonthDays[1][0] = 31;
    $mod.MonthDays[1][1] = 29;
    $mod.MonthDays[1][2] = 31;
    $mod.MonthDays[1][3] = 30;
    $mod.MonthDays[1][4] = 31;
    $mod.MonthDays[1][5] = 30;
    $mod.MonthDays[1][6] = 31;
    $mod.MonthDays[1][7] = 31;
    $mod.MonthDays[1][8] = 30;
    $mod.MonthDays[1][9] = 31;
    $mod.MonthDays[1][10] = 30;
    $mod.MonthDays[1][11] = 31;
    $mod.MonthDays[0][0] = 31;
    $mod.MonthDays[0][1] = 28;
    $mod.MonthDays[0][2] = 31;
    $mod.MonthDays[0][3] = 30;
    $mod.MonthDays[0][4] = 31;
    $mod.MonthDays[0][5] = 30;
    $mod.MonthDays[0][6] = 31;
    $mod.MonthDays[0][7] = 31;
    $mod.MonthDays[0][8] = 30;
    $mod.MonthDays[0][9] = 31;
    $mod.MonthDays[0][10] = 30;
    $mod.MonthDays[0][11] = 31;
    $impl.DateTimeToStrFormat[0] = "c";
    $impl.DateTimeToStrFormat[1] = "f";
    $mod.DateSeparator = "-";
    $mod.TimeSeparator = ":";
    $mod.ShortDateFormat = "yyyy-mm-dd";
    $mod.LongDateFormat = "ddd, yyyy-mm-dd";
    $mod.ShortTimeFormat = "hh:nn";
    $mod.LongTimeFormat = "hh:nn:ss";
    $mod.DecimalSeparator = ".";
    $mod.ThousandSeparator = ",";
    $mod.TimeAMString = "AM";
    $mod.TimePMString = "PM";
    $mod.TwoDigitYearCenturyWindow = 50;
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.feInvalidFormat = 1;
  $impl.feMissingArgument = 2;
  $impl.feInvalidArgIndex = 3;
  $impl.DoFormatError = function (ErrCode, fmt) {
    var $tmp1 = ErrCode;
    if ($tmp1 === 1) {
      throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidFormat,[fmt]])}
     else if ($tmp1 === 2) {
      throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SArgumentMissing,[fmt]])}
     else if ($tmp1 === 3) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidArgIndex,[fmt]]);
  };
  $impl.maxdigits = 15;
  $impl.ReplaceDecimalSep = function (S, DS) {
    var Result = "";
    var P = 0;
    P = pas.System.Pos(".",S);
    if (P > 0) {
      Result = (pas.System.Copy(S,1,P - 1) + DS) + pas.System.Copy(S,P + 1,S.length - P)}
     else Result = S;
    return Result;
  };
  $impl.FormatGeneralFloat = function (Value, Precision, DS) {
    var Result = "";
    var P = 0;
    var PE = 0;
    var Q = 0;
    var Exponent = 0;
    if ((Precision === -1) || (Precision > 15)) Precision = 15;
    Result = rtl.floatToStr(Value,Precision + 7);
    Result = $mod.TrimLeft(Result);
    P = pas.System.Pos(".",Result);
    if (P === 0) return Result;
    PE = pas.System.Pos("E",Result);
    if (PE === 0) {
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    Q = PE + 2;
    Exponent = 0;
    while (Q <= Result.length) {
      Exponent = ((Exponent * 10) + Result.charCodeAt(Q - 1)) - "0".charCodeAt();
      Q += 1;
    };
    if (Result.charAt((PE + 1) - 1) === "-") Exponent = -Exponent;
    if (((P + Exponent) < PE) && (Exponent > -6)) {
      Result = rtl.strSetLength(Result,PE - 1);
      if (Exponent >= 0) {
        for (var $l1 = 0, $end2 = Exponent - 1; $l1 <= $end2; $l1++) {
          Q = $l1;
          Result = rtl.setCharAt(Result,P - 1,Result.charAt((P + 1) - 1));
          P += 1;
        };
        Result = rtl.setCharAt(Result,P - 1,".");
        P = 1;
        if (Result.charAt(P - 1) === "-") P += 1;
        while (((Result.charAt(P - 1) === "0") && (P < Result.length)) && (pas.System.Copy(Result,P + 1,DS.length) !== DS)) pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P,1);
      } else {
        pas.System.Insert(pas.System.Copy("00000",1,-Exponent),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P - 1);
        Result = rtl.setCharAt(Result,(P - Exponent) - 1,Result.charAt(((P - Exponent) - 1) - 1));
        Result = rtl.setCharAt(Result,P - 1,".");
        if (Exponent !== -1) Result = rtl.setCharAt(Result,((P - Exponent) - 1) - 1,"0");
      };
      Q = Result.length;
      while ((Q > 0) && (Result.charAt(Q - 1) === "0")) Q -= 1;
      if (Result.charAt(Q - 1) === ".") Q -= 1;
      if ((Q === 0) || ((Q === 1) && (Result.charAt(0) === "-"))) {
        Result = "0"}
       else Result = rtl.strSetLength(Result,Q);
    } else {
      while (Result.charAt((PE - 1) - 1) === "0") {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE - 1,1);
        PE -= 1;
      };
      if (Result.charAt((PE - 1) - 1) === DS) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE - 1,1);
        PE -= 1;
      };
      if (Result.charAt((PE + 1) - 1) === "+") {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE + 1,1)}
       else PE += 1;
      while (Result.charAt((PE + 1) - 1) === "0") pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},PE + 1,1);
    };
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatExponentFloat = function (Value, Precision, Digits, DS) {
    var Result = "";
    var P = 0;
    DS = $mod.DecimalSeparator;
    if ((Precision === -1) || (Precision > 15)) Precision = 15;
    Result = rtl.floatToStr(Value,Precision + 7);
    while (Result.charAt(0) === " ") pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos("E",Result);
    if (P === 0) {
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    P += 2;
    if (Digits > 4) Digits = 4;
    Digits = ((Result.length - P) - Digits) + 1;
    if (Digits < 0) {
      pas.System.Insert(pas.System.Copy("0000",1,-Digits),{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P)}
     else while ((Digits > 0) && (Result.charAt(P - 1) === "0")) {
      pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P,1);
      if (P > Result.length) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P - 2,2);
        break;
      };
      Digits -= 1;
    };
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatFixedFloat = function (Value, Digits, DS) {
    var Result = "";
    if (Digits === -1) {
      Digits = 2}
     else if (Digits > 18) Digits = 18;
    Result = rtl.floatToStr(Value,0,Digits);
    if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatNumberFloat = function (Value, Digits, DS, TS) {
    var Result = "";
    var P = 0;
    if (Digits === -1) {
      Digits = 2}
     else if (Digits > 15) Digits = 15;
    Result = rtl.floatToStr(Value,0,Digits);
    if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos(".",Result);
    Result = $impl.ReplaceDecimalSep(Result,DS);
    P -= 3;
    if ((TS !== "") && (TS !== "\x00")) while (P > 1) {
      if (Result.charAt((P - 1) - 1) !== "-") pas.System.Insert(TS,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P);
      P -= 3;
    };
    return Result;
  };
  $impl.RemoveLeadingNegativeSign = function (AValue, DS) {
    var Result = false;
    var i = 0;
    var TS = "";
    var StartPos = 0;
    Result = false;
    StartPos = 2;
    TS = $mod.ThousandSeparator;
    for (var $l1 = StartPos, $end2 = AValue.get().length; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = (AValue.get().charCodeAt(i - 1) in rtl.createSet(48,DS.charCodeAt(),69,43)) || (AValue.get() === TS);
      if (!Result) break;
    };
    if (Result) pas.System.Delete(AValue,1,1);
    return Result;
  };
  $impl.FormatNumberCurrency = function (Value, Digits, DS, TS) {
    var Result = "";
    var Negative = false;
    var P = 0;
    if (Digits === -1) {
      Digits = $mod.CurrencyDecimals}
     else if (Digits > 18) Digits = 18;
    Result = rtl.floatToStr(Value,0,Digits);
    Negative = Result.charAt(0) === "-";
    if (Negative) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos(".",Result);
    if (P !== 0) {
      Result = $impl.ReplaceDecimalSep(Result,DS)}
     else P = Result.length + 1;
    P -= 3;
    while (P > 1) {
      if ($mod.ThousandSeparator !== "\x00") pas.System.Insert($mod.FormatSettings.GetThousandSeparator(),{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P);
      P -= 3;
    };
    if ((Result.length > 1) && Negative) Negative = !$impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS);
    if (!Negative) {
      var $tmp1 = $mod.CurrencyFormat;
      if ($tmp1 === 0) {
        Result = $mod.CurrencyString + Result}
       else if ($tmp1 === 1) {
        Result = Result + $mod.CurrencyString}
       else if ($tmp1 === 2) {
        Result = ($mod.CurrencyString + " ") + Result}
       else if ($tmp1 === 3) Result = (Result + " ") + $mod.CurrencyString;
    } else {
      var $tmp2 = $mod.NegCurrFormat;
      if ($tmp2 === 0) {
        Result = (("(" + $mod.CurrencyString) + Result) + ")"}
       else if ($tmp2 === 1) {
        Result = ("-" + $mod.CurrencyString) + Result}
       else if ($tmp2 === 2) {
        Result = ($mod.CurrencyString + "-") + Result}
       else if ($tmp2 === 3) {
        Result = ($mod.CurrencyString + Result) + "-"}
       else if ($tmp2 === 4) {
        Result = (("(" + Result) + $mod.CurrencyString) + ")"}
       else if ($tmp2 === 5) {
        Result = ("-" + Result) + $mod.CurrencyString}
       else if ($tmp2 === 6) {
        Result = (Result + "-") + $mod.CurrencyString}
       else if ($tmp2 === 7) {
        Result = (Result + $mod.CurrencyString) + "-"}
       else if ($tmp2 === 8) {
        Result = (("-" + Result) + " ") + $mod.CurrencyString}
       else if ($tmp2 === 9) {
        Result = (("-" + $mod.CurrencyString) + " ") + Result}
       else if ($tmp2 === 10) {
        Result = ((Result + " ") + $mod.CurrencyString) + "-"}
       else if ($tmp2 === 11) {
        Result = (($mod.CurrencyString + " ") + Result) + "-"}
       else if ($tmp2 === 12) {
        Result = (($mod.CurrencyString + " ") + "-") + Result}
       else if ($tmp2 === 13) {
        Result = ((Result + "-") + " ") + $mod.CurrencyString}
       else if ($tmp2 === 14) {
        Result = ((("(" + $mod.CurrencyString) + " ") + Result) + ")"}
       else if ($tmp2 === 15) Result = ((("(" + Result) + " ") + $mod.CurrencyString) + ")";
    };
    if (TS === "") ;
    return Result;
  };
  $impl.RESpecials = "([\\[\\]\\(\\)\\\\\\.\\*])";
  $impl.DoEncodeDate = function (Year, Month, Day) {
    var Result = 0;
    var D = 0.0;
    if ($mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }})) {
      Result = pas.System.Trunc(D)}
     else Result = 0;
    return Result;
  };
  $impl.DateTimeToStrFormat = ["c","f"];
  var AMPM_None = 0;
  var AMPM_AM = 1;
  var AMPM_PM = 2;
  var tiHour = 0;
  var tiMin = 1;
  var tiSec = 2;
  var tiMSec = 3;
  var Digits$1 = "0123456789";
  $impl.IntStrToTime = function (ErrorMsg, S, Len, separator) {
    var Result = 0.0;
    var AmPm = 0;
    var TimeValues = [];
    function SplitElements(TimeValues, AmPm) {
      var Result = false;
      var Cur = 0;
      var Offset = 0;
      var ElemLen = 0;
      var Err = 0;
      var TimeIndex = 0;
      var FirstSignificantDigit = 0;
      var Value = 0;
      var DigitPending = false;
      var MSecPending = false;
      var AmPmStr = "";
      var CurChar = "";
      var I = 0;
      var allowedchars = "";
      Result = false;
      AmPm.set(0);
      MSecPending = false;
      TimeIndex = 0;
      for (I = 0; I <= 3; I++) TimeValues.get()[I] = 0;
      Cur = 1;
      while ((Cur < Len) && (S.charAt(Cur - 1) === " ")) Cur += 1;
      Offset = Cur;
      if (((Cur > (Len - 1)) || (S.charAt(Cur - 1) === separator)) || (S.charAt(Cur - 1) === $mod.DecimalSeparator)) {
        return Result;
      };
      DigitPending = pas.System.Pos(S.charAt(Cur - 1),Digits$1) > 0;
      while (Cur <= Len) {
        CurChar = S.charAt(Cur - 1);
        if (pas.System.Pos(CurChar,Digits$1) > 0) {
          if (!DigitPending || (TimeIndex > 3)) {
            return Result;
          };
          Offset = Cur;
          if (CurChar !== "0") {
            FirstSignificantDigit = Offset}
           else FirstSignificantDigit = -1;
          while ((Cur < Len) && (pas.System.Pos(S.charAt((Cur + 1) - 1),Digits$1) > 0)) {
            if ((FirstSignificantDigit === -1) && (S.charAt(Cur - 1) !== "0")) FirstSignificantDigit = Cur;
            Cur += 1;
          };
          if (FirstSignificantDigit === -1) FirstSignificantDigit = Cur;
          ElemLen = (1 + Cur) - FirstSignificantDigit;
          if ((ElemLen <= 2) || ((ElemLen <= 3) && (TimeIndex === 3))) {
            pas.System.val$5(pas.System.Copy(S,FirstSignificantDigit,ElemLen),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Err;
              }, set: function (v) {
                Err = v;
              }});
            TimeValues.get()[TimeIndex] = Value;
            TimeIndex += 1;
            DigitPending = false;
          } else {
            return Result;
          };
        } else if (CurChar === " ") {}
        else if (CurChar === separator) {
          if (DigitPending || (TimeIndex > 2)) {
            return Result;
          };
          DigitPending = true;
          MSecPending = false;
        } else if (CurChar === $mod.DecimalSeparator) {
          if ((DigitPending || MSecPending) || (TimeIndex !== 3)) {
            return Result;
          };
          DigitPending = true;
          MSecPending = true;
        } else {
          if ((AmPm.get() !== 0) || DigitPending) {
            return Result;
          };
          Offset = Cur;
          allowedchars = $mod.DecimalSeparator + " ";
          if (separator !== "\x00") allowedchars = allowedchars + separator;
          while (((Cur < (Len - 1)) && (pas.System.Pos(S.charAt((Cur + 1) - 1),allowedchars) === 0)) && (pas.System.Pos(S.charAt((Cur + 1) - 1),Digits$1) === 0)) Cur += 1;
          ElemLen = (1 + Cur) - Offset;
          AmPmStr = pas.System.Copy(S,1 + Offset,ElemLen);
          if ($mod.CompareText(AmPmStr,$mod.TimeAMString) === 0) {
            AmPm.set(1)}
           else if ($mod.CompareText(AmPmStr,$mod.TimePMString) === 0) {
            AmPm.set(2)}
           else if ($mod.CompareText(AmPmStr,"AM") === 0) {
            AmPm.set(1)}
           else if ($mod.CompareText(AmPmStr,"PM") === 0) {
            AmPm.set(2)}
           else {
            return Result;
          };
          if (TimeIndex === 0) {
            DigitPending = true;
          } else {
            TimeIndex = 3 + 1;
            DigitPending = false;
          };
        };
        Cur += 1;
      };
      if (((TimeIndex === 0) || ((AmPm.get() !== 0) && ((TimeValues.get()[0] > 12) || (TimeValues.get()[0] === 0)))) || DigitPending) return Result;
      Result = true;
      return Result;
    };
    TimeValues = rtl.arraySetLength(TimeValues,0,4);
    if (separator === "\x00") if ($mod.TimeSeparator !== "\x00") {
      separator = $mod.TimeSeparator}
     else separator = ":";
    AmPm = 0;
    if (!SplitElements({get: function () {
        return TimeValues;
      }, set: function (v) {
        TimeValues = v;
      }},{get: function () {
        return AmPm;
      }, set: function (v) {
        AmPm = v;
      }})) {
      ErrorMsg.set($mod.Format(pas.RTLConsts.SErrInvalidTimeFormat,[S]));
      return Result;
    };
    if ((AmPm === 2) && (TimeValues[0] !== 12)) {
      TimeValues[0] += 12}
     else if ((AmPm === 1) && (TimeValues[0] === 12)) TimeValues[0] = 0;
    if (!$mod.TryEncodeTime(TimeValues[0],TimeValues[1],TimeValues[2],TimeValues[3],{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) ErrorMsg.set($mod.Format(pas.RTLConsts.SErrInvalidTimeFormat,[S]));
    return Result;
  };
});
rtl.module("Classes",["System","RTLConsts","Types","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$MethodVar("TNotifyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]]]), methodkind: 0});
  rtl.createClass($mod,"EListError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EStringListError",$mod.EListError,function () {
  });
  rtl.createClass($mod,"EComponentError",pas.SysUtils.Exception,function () {
  });
  this.TAlignment = {"0": "taLeftJustify", taLeftJustify: 0, "1": "taRightJustify", taRightJustify: 1, "2": "taCenter", taCenter: 2};
  $mod.$rtti.$Enum("TAlignment",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TAlignment});
  rtl.createClass($mod,"TFPList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = [];
      this.FCount = 0;
      this.FCapacity = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Get = function (Index) {
      var Result = undefined;
      if ((Index < 0) || (Index >= this.FCount)) this.RaiseIndexError(Index);
      Result = this.FList[Index];
      return Result;
    };
    this.Put = function (Index, Item) {
      if ((Index < 0) || (Index >= this.FCount)) this.RaiseIndexError(Index);
      this.FList[Index] = Item;
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity < this.FCount) this.$class.error(pas.RTLConsts.SListCapacityError,"" + NewCapacity);
      if (NewCapacity === this.FCapacity) return;
      this.FList = rtl.arraySetLength(this.FList,undefined,NewCapacity);
      this.FCapacity = NewCapacity;
    };
    this.SetCount = function (NewCount) {
      if (NewCount < 0) this.$class.error(pas.RTLConsts.SListCountError,"" + NewCount);
      if (NewCount > this.FCount) {
        if (NewCount > this.FCapacity) this.SetCapacity(NewCount);
      };
      this.FCount = NewCount;
    };
    this.RaiseIndexError = function (Index) {
      this.$class.error(pas.RTLConsts.SListIndexError,"" + Index);
    };
    this.Destroy = function () {
      this.Clear();
      pas.System.TObject.Destroy.call(this);
    };
    this.Add = function (Item) {
      var Result = 0;
      if (this.FCount === this.FCapacity) this.Expand();
      this.FList[this.FCount] = Item;
      Result = this.FCount;
      this.FCount += 1;
      return Result;
    };
    this.Clear = function () {
      if (rtl.length(this.FList) > 0) {
        this.SetCount(0);
        this.SetCapacity(0);
      };
    };
    this.Delete = function (Index) {
      if ((Index < 0) || (Index >= this.FCount)) this.$class.error(pas.RTLConsts.SListIndexError,"" + Index);
      this.FCount = this.FCount - 1;
      this.FList.splice(Index,1);
      this.FCapacity -= 1;
    };
    this.error = function (Msg, Data) {
      throw $mod.EListError.$create("CreateFmt",[Msg,[Data]]);
    };
    this.Expand = function () {
      var Result = null;
      var IncSize = 0;
      if (this.FCount < this.FCapacity) return this;
      IncSize = 4;
      if (this.FCapacity > 3) IncSize = IncSize + 4;
      if (this.FCapacity > 8) IncSize = IncSize + 8;
      if (this.FCapacity > 127) IncSize += this.FCapacity >>> 2;
      this.SetCapacity(this.FCapacity + IncSize);
      Result = this;
      return Result;
    };
    this.IndexOf = function (Item) {
      var Result = 0;
      var C = 0;
      Result = 0;
      C = this.FCount;
      while ((Result < C) && (this.FList[Result] != Item)) Result += 1;
      if (Result >= C) Result = -1;
      return Result;
    };
    this.IndexOfItem = function (Item, Direction) {
      var Result = 0;
      if (Direction === pas.Types.TDirection.FromBeginning) {
        Result = this.IndexOf(Item)}
       else {
        Result = this.FCount - 1;
        while ((Result >= 0) && (this.FList[Result] != Item)) Result = Result - 1;
      };
      return Result;
    };
    this.Insert = function (Index, Item) {
      if ((Index < 0) || (Index > this.FCount)) this.$class.error(pas.RTLConsts.SListIndexError,"" + Index);
      this.FList.splice(Index,0,Item);
      this.FCapacity += 1;
      this.FCount += 1;
    };
    this.Last = function () {
      var Result = undefined;
      if (this.FCount === 0) {
        Result = null}
       else Result = this.Get(this.FCount - 1);
      return Result;
    };
    this.Remove = function (Item) {
      var Result = 0;
      Result = this.IndexOf(Item);
      if (Result !== -1) this.Delete(Result);
      return Result;
    };
    this.Sort = function (Compare) {
      if (!(rtl.length(this.FList) > 0) || (this.FCount < 2)) return;
      $impl.QuickSort(this.FList,0,this.FCount - 1,Compare);
    };
  });
  this.TListNotification = {"0": "lnAdded", lnAdded: 0, "1": "lnExtracted", lnExtracted: 1, "2": "lnDeleted", lnDeleted: 2};
  rtl.createClass($mod,"TList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Get = function (Index) {
      var Result = undefined;
      Result = this.FList.Get(Index);
      return Result;
    };
    this.Put = function (Index, Item) {
      var V = undefined;
      V = this.Get(Index);
      this.FList.Put(Index,Item);
      if (pas.System.Assigned(V)) this.Notify(V,$mod.TListNotification.lnDeleted);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
    };
    this.Notify = function (aValue, Action) {
      if (pas.System.Assigned(aValue)) ;
      if (Action === $mod.TListNotification.lnExtracted) ;
    };
    this.SetCount = function (NewCount) {
      if (NewCount < this.FList.FCount) {
        while (this.FList.FCount > NewCount) this.Delete(this.FList.FCount - 1)}
       else this.FList.SetCount(NewCount);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FList.FCount;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FList = $mod.TFPList.$create("Create");
    };
    this.Destroy = function () {
      if (this.FList != null) this.Clear();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FList;
        }, set: function (v) {
          this.p.FList = v;
        }});
    };
    this.Add = function (Item) {
      var Result = 0;
      Result = this.FList.Add(Item);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
      return Result;
    };
    this.Clear = function () {
      while (this.FList.FCount > 0) this.Delete(this.GetCount() - 1);
    };
    this.Delete = function (Index) {
      var V = undefined;
      V = this.FList.Get(Index);
      this.FList.Delete(Index);
      if (pas.System.Assigned(V)) this.Notify(V,$mod.TListNotification.lnDeleted);
    };
    this.IndexOf = function (Item) {
      var Result = 0;
      Result = this.FList.IndexOf(Item);
      return Result;
    };
    this.Insert = function (Index, Item) {
      this.FList.Insert(Index,Item);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
    };
    this.Remove = function (Item) {
      var Result = 0;
      Result = this.IndexOf(Item);
      if (Result !== -1) this.Delete(Result);
      return Result;
    };
    this.Sort = function (Compare) {
      this.FList.Sort(Compare);
    };
  });
  rtl.createClass($mod,"TPersistent",pas.System.TObject,function () {
    this.AssignError = function (Source) {
      var SourceName = "";
      if (Source !== null) {
        SourceName = Source.$classname}
       else SourceName = "Nil";
      throw pas.SysUtils.EConvertError.$create("Create$1",[((("Cannot assign a " + SourceName) + " to a ") + this.$classname) + "."]);
    };
    this.AssignTo = function (Dest) {
      Dest.AssignError(this);
    };
    this.GetOwner = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.Assign = function (Source) {
      if (Source !== null) {
        Source.AssignTo(this)}
       else this.AssignError(null);
    };
  });
  rtl.createClass($mod,"TInterfacedPersistent",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FOwnerInterface = null;
    };
    this.$final = function () {
      this.FOwnerInterface = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this._AddRef = function () {
      var Result = 0;
      Result = -1;
      if (this.FOwnerInterface != null) Result = this.FOwnerInterface._AddRef();
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      Result = -1;
      if (this.FOwnerInterface != null) Result = this.FOwnerInterface._Release();
      return Result;
    };
    this.QueryInterface = function (IID, Obj) {
      var Result = 0;
      Result = -2147467262;
      if (this.GetInterface(IID,Obj)) Result = 0;
      return Result;
    };
    this.AfterConstruction = function () {
      try {
        pas.System.TObject.AfterConstruction.call(this);
        if (this.GetOwner() !== null) this.GetOwner().GetInterface(rtl.getIntfGUIDR(pas.System.IUnknown),{p: this, get: function () {
            return this.p.FOwnerInterface;
          }, set: function (v) {
            this.p.FOwnerInterface = v;
          }});
      } finally {
        rtl._Release(this.FOwnerInterface);
      };
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TStrings",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FSpecialCharsInited = false;
      this.FAlwaysQuote = false;
      this.FQuoteChar = "";
      this.FDelimiter = "";
      this.FNameValueSeparator = "";
      this.FUpdateCount = 0;
      this.FLBS = 0;
      this.FSkipLastLineBreak = false;
      this.FStrictDelimiter = false;
      this.FLineBreak = "";
    };
    this.GetValue = function (Name) {
      var Result = "";
      var L = 0;
      var N = "";
      Result = "";
      L = this.IndexOfName(Name);
      if (L !== -1) this.GetNameValue(L,{get: function () {
          return N;
        }, set: function (v) {
          N = v;
        }},{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.SetDelimiter = function (c) {
      this.CheckSpecialChars();
      this.FDelimiter = c;
    };
    this.DoSetTextStr = function (Value, DoClear) {
      var S = "";
      var P = 0;
      try {
        this.BeginUpdate();
        if (DoClear) this.Clear();
        P = 1;
        while (this.GetNextLinebreak(Value,{get: function () {
            return S;
          }, set: function (v) {
            S = v;
          }},{get: function () {
            return P;
          }, set: function (v) {
            P = v;
          }})) this.Add(S);
      } finally {
        this.EndUpdate();
      };
    };
    this.GetLineBreak = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FLineBreak;
      return Result;
    };
    this.SetLineBreak = function (S) {
      this.CheckSpecialChars();
      this.FLineBreak = S;
    };
    this.GetSkipLastLineBreak = function () {
      var Result = false;
      this.CheckSpecialChars();
      Result = this.FSkipLastLineBreak;
      return Result;
    };
    this.error = function (Msg, Data) {
      throw $mod.EStringListError.$create("CreateFmt",[Msg,[pas.SysUtils.IntToStr(Data)]]);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.GetCount();
      return Result;
    };
    this.GetObject = function (Index) {
      var Result = null;
      if (Index === 0) ;
      Result = null;
      return Result;
    };
    this.GetTextStr = function () {
      var Result = "";
      var I = 0;
      var S = "";
      var NL = "";
      this.CheckSpecialChars();
      if (this.FLineBreak !== pas.System.sLineBreak) {
        NL = this.FLineBreak}
       else {
        var $tmp1 = this.FLBS;
        if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsLF) {
          NL = "\n"}
         else if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsCRLF) {
          NL = "\r\n"}
         else if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsCR) NL = "\r";
      };
      Result = "";
      for (var $l2 = 0, $end3 = this.GetCount() - 1; $l2 <= $end3; $l2++) {
        I = $l2;
        S = this.Get(I);
        Result = Result + S;
        if ((I < (this.GetCount() - 1)) || !this.GetSkipLastLineBreak()) Result = Result + NL;
      };
      return Result;
    };
    this.PutObject = function (Index, AObject) {
      if (Index === 0) return;
      if (AObject === null) return;
    };
    this.SetTextStr = function (Value) {
      this.CheckSpecialChars();
      this.DoSetTextStr(Value,true);
    };
    this.SetUpdateState = function (Updating) {
      if (Updating) ;
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.SetDelimitedText = function (AValue) {
      var i = 0;
      var j = 0;
      var aNotFirst = false;
      this.CheckSpecialChars();
      this.BeginUpdate();
      i = 1;
      j = 1;
      aNotFirst = false;
      try {
        this.Clear();
        if (this.FStrictDelimiter) {
          while (i <= AValue.length) {
            if ((aNotFirst && (i <= AValue.length)) && (AValue.charAt(i - 1) === this.FDelimiter)) i += 1;
            if (i <= AValue.length) {
              if (AValue.charAt(i - 1) === this.FQuoteChar) {
                j = i + 1;
                while ((j <= AValue.length) && ((AValue.charAt(j - 1) !== this.FQuoteChar) || (((j + 1) <= AValue.length) && (AValue.charAt((j + 1) - 1) === this.FQuoteChar)))) {
                  if ((j <= AValue.length) && (AValue.charAt(j - 1) === this.FQuoteChar)) {
                    j += 2}
                   else j += 1;
                };
                this.Add(pas.SysUtils.StringReplace(pas.System.Copy(AValue,i + 1,(j - i) - 1),this.FQuoteChar + this.FQuoteChar,this.FQuoteChar,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
                i = j + 1;
              } else {
                j = i;
                while ((j <= AValue.length) && (AValue.charAt(j - 1) !== this.FDelimiter)) j += 1;
                this.Add(pas.System.Copy(AValue,i,j - i));
                i = j;
              };
            } else {
              if (aNotFirst) this.Add("");
            };
            aNotFirst = true;
          };
        } else {
          while (i <= AValue.length) {
            if ((aNotFirst && (i <= AValue.length)) && (AValue.charAt(i - 1) === this.FDelimiter)) i += 1;
            while ((i <= AValue.length) && (AValue.charCodeAt(i - 1) <= " ".charCodeAt())) i += 1;
            if (i <= AValue.length) {
              if (AValue.charAt(i - 1) === this.FQuoteChar) {
                j = i + 1;
                while ((j <= AValue.length) && ((AValue.charAt(j - 1) !== this.FQuoteChar) || (((j + 1) <= AValue.length) && (AValue.charAt((j + 1) - 1) === this.FQuoteChar)))) {
                  if ((j <= AValue.length) && (AValue.charAt(j - 1) === this.FQuoteChar)) {
                    j += 2}
                   else j += 1;
                };
                this.Add(pas.SysUtils.StringReplace(pas.System.Copy(AValue,i + 1,(j - i) - 1),this.FQuoteChar + this.FQuoteChar,this.FQuoteChar,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
                i = j + 1;
              } else {
                j = i;
                while (((j <= AValue.length) && (AValue.charCodeAt(j - 1) > " ".charCodeAt())) && (AValue.charAt(j - 1) !== this.FDelimiter)) j += 1;
                this.Add(pas.System.Copy(AValue,i,j - i));
                i = j;
              };
            } else {
              if (aNotFirst) this.Add("");
            };
            while ((i <= AValue.length) && (AValue.charCodeAt(i - 1) <= " ".charCodeAt())) i += 1;
            aNotFirst = true;
          };
        };
      } finally {
        this.EndUpdate();
      };
    };
    this.CheckSpecialChars = function () {
      if (!this.FSpecialCharsInited) {
        this.FQuoteChar = '"';
        this.FDelimiter = ",";
        this.FNameValueSeparator = "=";
        this.FLBS = pas.System.DefaultTextLineBreakStyle;
        this.FSpecialCharsInited = true;
        this.FLineBreak = pas.System.sLineBreak;
      };
    };
    this.GetNextLinebreak = function (Value, S, P) {
      var Result = false;
      var PP = 0;
      S.set("");
      Result = false;
      if ((Value.length - P.get()) < 0) return Result;
      PP = Value.indexOf(this.GetLineBreak(),P.get() - 1) + 1;
      if (PP < 1) PP = Value.length + 1;
      S.set(pas.System.Copy(Value,P.get(),PP - P.get()));
      P.set(PP + this.GetLineBreak().length);
      Result = true;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FAlwaysQuote = false;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.Add = function (S) {
      var Result = 0;
      Result = this.GetCount();
      this.Insert(this.GetCount(),S);
      return Result;
    };
    this.AddObject = function (S, AObject) {
      var Result = 0;
      Result = this.Add(S);
      this.PutObject(Result,AObject);
      return Result;
    };
    this.AddStrings = function (TheStrings) {
      var Runner = 0;
      for (var $l1 = 0, $end2 = TheStrings.GetCount() - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        this.AddObject(TheStrings.Get(Runner),TheStrings.GetObject(Runner));
      };
    };
    this.Assign = function (Source) {
      var S = null;
      if ($mod.TStrings.isPrototypeOf(Source)) {
        S = Source;
        this.BeginUpdate();
        try {
          this.Clear();
          this.FSpecialCharsInited = S.FSpecialCharsInited;
          this.FQuoteChar = S.FQuoteChar;
          this.FDelimiter = S.FDelimiter;
          this.FNameValueSeparator = S.FNameValueSeparator;
          this.FLBS = S.FLBS;
          this.FLineBreak = S.FLineBreak;
          this.AddStrings(S);
        } finally {
          this.EndUpdate();
        };
      } else $mod.TPersistent.Assign.call(this,Source);
    };
    this.BeginUpdate = function () {
      if (this.FUpdateCount === 0) this.SetUpdateState(true);
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) this.FUpdateCount -= 1;
      if (this.FUpdateCount === 0) this.SetUpdateState(false);
    };
    this.IndexOf = function (S) {
      var Result = 0;
      Result = 0;
      while ((Result < this.GetCount()) && (this.DoCompareText(this.Get(Result),S) !== 0)) Result = Result + 1;
      if (Result === this.GetCount()) Result = -1;
      return Result;
    };
    this.IndexOfName = function (Name) {
      var Result = 0;
      var len = 0;
      var S = "";
      this.CheckSpecialChars();
      Result = 0;
      while (Result < this.GetCount()) {
        S = this.Get(Result);
        len = pas.System.Pos(this.FNameValueSeparator,S) - 1;
        if ((len >= 0) && (this.DoCompareText(Name,pas.System.Copy(S,1,len)) === 0)) return Result;
        Result += 1;
      };
      Result = -1;
      return Result;
    };
    this.GetNameValue = function (Index, AName, AValue) {
      var L = 0;
      this.CheckSpecialChars();
      AValue.set(this.Get(Index));
      L = pas.System.Pos(this.FNameValueSeparator,AValue.get());
      if (L !== 0) {
        AName.set(pas.System.Copy(AValue.get(),1,L - 1));
        AValue.set(pas.System.Copy(AValue.get(),L + 1,AValue.get().length - L));
      } else AName.set("");
    };
  });
  this.TStringItem = function (s) {
    if (s) {
      this.FString = s.FString;
      this.FObject = s.FObject;
    } else {
      this.FString = "";
      this.FObject = null;
    };
    this.$equal = function (b) {
      return (this.FString === b.FString) && (this.FObject === b.FObject);
    };
  };
  this.TStringsSortStyle = {"0": "sslNone", sslNone: 0, "1": "sslUser", sslUser: 1, "2": "sslAuto", sslAuto: 2};
  rtl.createClass($mod,"TStringList",$mod.TStrings,function () {
    this.$init = function () {
      $mod.TStrings.$init.call(this);
      this.FList = [];
      this.FCount = 0;
      this.FOnChange = null;
      this.FOnChanging = null;
      this.FDuplicates = 0;
      this.FCaseSensitive = false;
      this.FOwnsObjects = false;
      this.FSortStyle = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      this.FOnChange = undefined;
      this.FOnChanging = undefined;
      $mod.TStrings.$final.call(this);
    };
    this.GetSorted = function () {
      var Result = false;
      Result = this.FSortStyle in rtl.createSet($mod.TStringsSortStyle.sslUser,$mod.TStringsSortStyle.sslAuto);
      return Result;
    };
    this.Grow = function () {
      var NC = 0;
      NC = this.GetCapacity();
      if (NC >= 256) {
        NC = NC + Math.floor(NC / 4)}
       else if (NC === 0) {
        NC = 4}
       else NC = NC * 4;
      this.SetCapacity(NC);
    };
    this.InternalClear = function (FromIndex, ClearOnly) {
      var I = 0;
      if (FromIndex < this.FCount) {
        if (this.FOwnsObjects) {
          for (var $l1 = FromIndex, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            this.FList[I].FString = "";
            pas.SysUtils.FreeAndNil({p: this.FList[I], get: function () {
                return this.p.FObject;
              }, set: function (v) {
                this.p.FObject = v;
              }});
          };
        } else {
          for (var $l3 = FromIndex, $end4 = this.FCount - 1; $l3 <= $end4; $l3++) {
            I = $l3;
            this.FList[I].FString = "";
          };
        };
        this.FCount = FromIndex;
      };
      if (!ClearOnly) this.SetCapacity(0);
    };
    this.CheckIndex = function (AIndex) {
      if ((AIndex < 0) || (AIndex >= this.FCount)) this.error(pas.RTLConsts.SListIndexError,AIndex);
    };
    this.Changed = function () {
      if (this.FUpdateCount === 0) {
        if (this.FOnChange != null) this.FOnChange(this);
      };
    };
    this.Changing = function () {
      if (this.FUpdateCount === 0) if (this.FOnChanging != null) this.FOnChanging(this);
    };
    this.Get = function (Index) {
      var Result = "";
      this.CheckIndex(Index);
      Result = this.FList[Index].FString;
      return Result;
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = rtl.length(this.FList);
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FCount;
      return Result;
    };
    this.GetObject = function (Index) {
      var Result = null;
      this.CheckIndex(Index);
      Result = this.FList[Index].FObject;
      return Result;
    };
    this.PutObject = function (Index, AObject) {
      this.CheckIndex(Index);
      this.Changing();
      this.FList[Index].FObject = AObject;
      this.Changed();
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity < 0) this.error(pas.RTLConsts.SListCapacityError,NewCapacity);
      if (NewCapacity !== this.GetCapacity()) this.FList = rtl.arraySetLength(this.FList,$mod.TStringItem,NewCapacity);
    };
    this.SetUpdateState = function (Updating) {
      if (Updating) {
        this.Changing()}
       else this.Changed();
    };
    this.InsertItem = function (Index, S) {
      this.InsertItem$1(Index,S,null);
    };
    this.InsertItem$1 = function (Index, S, O) {
      var It = new $mod.TStringItem();
      this.Changing();
      if (this.FCount === this.GetCapacity()) this.Grow();
      It.FString = S;
      It.FObject = O;
      this.FList.splice(Index,0,It);
      this.FCount += 1;
      this.Changed();
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      if (this.FCaseSensitive) {
        Result = pas.SysUtils.CompareStr(s1,s2)}
       else Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.Destroy = function () {
      this.InternalClear(0,false);
      $mod.TStrings.Destroy.call(this);
    };
    this.Add = function (S) {
      var Result = 0;
      if (!(this.FSortStyle === $mod.TStringsSortStyle.sslAuto)) {
        Result = this.FCount}
       else if (this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) {
        var $tmp1 = this.FDuplicates;
        if ($tmp1 === pas.Types.TDuplicates.dupIgnore) {
          return Result}
         else if ($tmp1 === pas.Types.TDuplicates.dupError) this.error(pas.RTLConsts.SDuplicateString,0);
      };
      this.InsertItem(Result,S);
      return Result;
    };
    this.Clear = function () {
      if (this.FCount === 0) return;
      this.Changing();
      this.InternalClear(0,false);
      this.Changed();
    };
    this.Delete = function (Index) {
      this.CheckIndex(Index);
      this.Changing();
      if (this.FOwnsObjects) pas.SysUtils.FreeAndNil({p: this.FList[Index], get: function () {
          return this.p.FObject;
        }, set: function (v) {
          this.p.FObject = v;
        }});
      this.FList.splice(Index,1);
      this.FList[this.GetCount() - 1].FString = "";
      this.FList[this.GetCount() - 1].FObject = null;
      this.FCount -= 1;
      this.Changed();
    };
    this.Find = function (S, Index) {
      var Result = false;
      var L = 0;
      var R = 0;
      var I = 0;
      var CompareRes = 0;
      Result = false;
      Index.set(-1);
      if (!this.GetSorted()) throw $mod.EListError.$create("Create$1",[pas.RTLConsts.SErrFindNeedsSortedList]);
      L = 0;
      R = this.GetCount() - 1;
      while (L <= R) {
        I = L + Math.floor((R - L) / 2);
        CompareRes = this.DoCompareText(S,this.FList[I].FString);
        if (CompareRes > 0) {
          L = I + 1}
         else {
          R = I - 1;
          if (CompareRes === 0) {
            Result = true;
            if (this.FDuplicates !== pas.Types.TDuplicates.dupAccept) L = I;
          };
        };
      };
      Index.set(L);
      return Result;
    };
    this.IndexOf = function (S) {
      var Result = 0;
      if (!this.GetSorted()) {
        Result = $mod.TStrings.IndexOf.call(this,S)}
       else if (!this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) Result = -1;
      return Result;
    };
    this.Insert = function (Index, S) {
      if (this.FSortStyle === $mod.TStringsSortStyle.sslAuto) {
        this.error(pas.RTLConsts.SSortedListError,0)}
       else {
        if ((Index < 0) || (Index > this.FCount)) this.error(pas.RTLConsts.SListIndexError,Index);
        this.InsertItem(Index,S);
      };
    };
  });
  rtl.createClass($mod,"TCollectionItem",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FCollection = null;
      this.FID = 0;
    };
    this.$final = function () {
      this.FCollection = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetIndex = function () {
      var Result = 0;
      if (this.FCollection !== null) {
        Result = this.FCollection.FItems.IndexOf(this)}
       else Result = -1;
      return Result;
    };
    this.SetCollection = function (Value) {
      if (Value !== this.FCollection) {
        if (this.FCollection !== null) this.FCollection.RemoveItem(this);
        if (Value !== null) Value.InsertItem(this);
      };
    };
    this.Changed = function (AllItems) {
      if ((this.FCollection !== null) && (this.FCollection.FUpdateCount === 0)) {
        if (AllItems) {
          this.FCollection.Update(null)}
         else this.FCollection.Update(this);
      };
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FCollection;
      return Result;
    };
    this.Create$1 = function (ACollection) {
      pas.System.TObject.Create.call(this);
      this.SetCollection(ACollection);
    };
    this.Destroy = function () {
      this.SetCollection(null);
      pas.System.TObject.Destroy.call(this);
    };
  });
  this.TCollectionNotification = {"0": "cnAdded", cnAdded: 0, "1": "cnExtracting", cnExtracting: 1, "2": "cnDeleting", cnDeleting: 2};
  rtl.createClass($mod,"TCollection",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FItemClass = null;
      this.FItems = null;
      this.FUpdateCount = 0;
      this.FNextID = 0;
    };
    this.$final = function () {
      this.FItemClass = undefined;
      this.FItems = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FItems.FCount;
      return Result;
    };
    this.InsertItem = function (Item) {
      if (!this.FItemClass.isPrototypeOf(Item)) return;
      this.FItems.Add(Item);
      Item.FCollection = this;
      Item.FID = this.FNextID;
      this.FNextID += 1;
      this.SetItemName(Item);
      this.Notify(Item,$mod.TCollectionNotification.cnAdded);
      this.Changed();
    };
    this.RemoveItem = function (Item) {
      var I = 0;
      this.Notify(Item,$mod.TCollectionNotification.cnExtracting);
      I = this.FItems.IndexOfItem(Item,pas.Types.TDirection.FromEnd);
      if (I !== -1) this.FItems.Delete(I);
      Item.FCollection = null;
      this.Changed();
    };
    this.DoClear = function () {
      var Item = null;
      while (this.FItems.FCount > 0) {
        Item = rtl.getObject(this.FItems.Last());
        if (Item != null) Item.$destroy("Destroy");
      };
    };
    this.Changed = function () {
      if (this.FUpdateCount === 0) this.Update(null);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FItems.Get(Index));
      return Result;
    };
    this.SetItemName = function (Item) {
      if (Item === null) ;
    };
    this.Update = function (Item) {
      if (Item === null) ;
    };
    this.Notify = function (Item, Action) {
      if (Item === null) ;
      if (Action === $mod.TCollectionNotification.cnAdded) ;
    };
    this.Create$1 = function (AItemClass) {
      pas.System.TObject.Create.call(this);
      this.FItemClass = AItemClass;
      this.FItems = $mod.TFPList.$create("Create");
    };
    this.Destroy = function () {
      this.FUpdateCount = 1;
      try {
        this.DoClear();
      } finally {
        this.FUpdateCount = 0;
      };
      if (this.FItems != null) this.FItems.$destroy("Destroy");
      pas.System.TObject.Destroy.call(this);
    };
    this.Add = function () {
      var Result = null;
      Result = this.FItemClass.$create("Create$1",[this]);
      return Result;
    };
    this.Assign = function (Source) {
      var I = 0;
      if ($mod.TCollection.isPrototypeOf(Source)) {
        this.Clear();
        for (var $l1 = 0, $end2 = Source.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.Add().Assign(Source.GetItem(I));
        };
        return;
      } else $mod.TPersistent.Assign.call(this,Source);
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.Clear = function () {
      if (this.FItems.FCount === 0) return;
      this.BeginUpdate();
      try {
        this.DoClear();
      } finally {
        this.EndUpdate();
      };
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) this.FUpdateCount -= 1;
      if (this.FUpdateCount === 0) this.Changed();
    };
    this.Delete = function (Index) {
      var Item = null;
      Item = rtl.getObject(this.FItems.Get(Index));
      this.Notify(Item,$mod.TCollectionNotification.cnDeleting);
      if (Item != null) Item.$destroy("Destroy");
    };
  });
  rtl.createClass($mod,"TOwnedCollection",$mod.TCollection,function () {
    this.$init = function () {
      $mod.TCollection.$init.call(this);
      this.FOwner = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      $mod.TCollection.$final.call(this);
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    this.Create$2 = function (AOwner, AItemClass) {
      this.FOwner = AOwner;
      $mod.TCollection.Create$1.call(this,AItemClass);
    };
  });
  this.TOperation = {"0": "opInsert", opInsert: 0, "1": "opRemove", opRemove: 1};
  this.TComponentStateItem = {"0": "csLoading", csLoading: 0, "1": "csReading", csReading: 1, "2": "csWriting", csWriting: 2, "3": "csDestroying", csDestroying: 3, "4": "csDesigning", csDesigning: 4, "5": "csAncestor", csAncestor: 5, "6": "csUpdating", csUpdating: 6, "7": "csFixups", csFixups: 7, "8": "csFreeNotification", csFreeNotification: 8, "9": "csInline", csInline: 9, "10": "csDesignInstance", csDesignInstance: 10};
  this.TComponentStyleItem = {"0": "csInheritable", csInheritable: 0, "1": "csCheckPropAvail", csCheckPropAvail: 1, "2": "csSubComponent", csSubComponent: 2, "3": "csTransient", csTransient: 3};
  rtl.createClass($mod,"TComponent",$mod.TInterfacedPersistent,function () {
    this.$init = function () {
      $mod.TInterfacedPersistent.$init.call(this);
      this.FOwner = null;
      this.FName = "";
      this.FTag = 0;
      this.FComponents = null;
      this.FFreeNotifies = null;
      this.FComponentState = {};
      this.FComponentStyle = {};
      this.FLeft = 0;
      this.FTop = 0;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FComponents = undefined;
      this.FFreeNotifies = undefined;
      this.FComponentState = undefined;
      this.FComponentStyle = undefined;
      $mod.TInterfacedPersistent.$final.call(this);
    };
    this.GetComponent = function (AIndex) {
      var Result = null;
      if (!(this.FComponents != null)) {
        Result = null}
       else Result = rtl.getObject(this.FComponents.Get(AIndex));
      return Result;
    };
    this.GetComponentCount = function () {
      var Result = 0;
      if (!(this.FComponents != null)) {
        Result = 0}
       else Result = this.FComponents.FCount;
      return Result;
    };
    this.Insert = function (AComponent) {
      if (!(this.FComponents != null)) this.FComponents = $mod.TFPList.$create("Create");
      this.FComponents.Add(AComponent);
      AComponent.FOwner = this;
    };
    this.Remove = function (AComponent) {
      AComponent.FOwner = null;
      if (this.FComponents != null) {
        this.FComponents.Remove(AComponent);
        if (this.FComponents.FCount === 0) {
          this.FComponents.$destroy("Destroy");
          this.FComponents = null;
        };
      };
    };
    this.RemoveNotification = function (AComponent) {
      if (this.FFreeNotifies !== null) {
        this.FFreeNotifies.Remove(AComponent);
        if (this.FFreeNotifies.FCount === 0) {
          this.FFreeNotifies.$destroy("Destroy");
          this.FFreeNotifies = null;
          this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csFreeNotification);
        };
      };
    };
    this.ChangeName = function (NewName) {
      this.FName = NewName;
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    this.GetLeft = function () {
      var Result = 0;
      Result = this.FLeft;
      return Result;
    };
    this.GetTop = function () {
      var Result = 0;
      Result = this.FTop;
      return Result;
    };
    this.Loaded = function () {
      this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csLoading);
    };
    this.Loading = function () {
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csLoading);
    };
    this.Notification = function (AComponent, Operation) {
      var C = 0;
      if (Operation === $mod.TOperation.opRemove) this.RemoveFreeNotification(AComponent);
      if (!(this.FComponents != null)) return;
      C = this.FComponents.FCount - 1;
      while (C >= 0) {
        rtl.getObject(this.FComponents.Get(C)).Notification(AComponent,Operation);
        C -= 1;
        if (C >= this.FComponents.FCount) C = this.FComponents.FCount - 1;
      };
    };
    this.SetDesigning = function (Value, SetChildren) {
      var Runner = 0;
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDesigning)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csDesigning);
      if ((this.FComponents != null) && SetChildren) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).SetDesigning(Value,true);
      };
    };
    this.SetName = function (NewName) {
      if (this.FName === NewName) return;
      if ((NewName !== "") && !pas.SysUtils.IsValidIdent(NewName,false,false)) throw $mod.EComponentError.$create("CreateFmt",[pas.RTLConsts.SInvalidName,[NewName]]);
      if (this.FOwner != null) {
        this.FOwner.ValidateRename(this,this.FName,NewName)}
       else this.ValidateRename(null,this.FName,NewName);
      this.ChangeName(NewName);
    };
    this.SetChildOrder = function (Child, Order) {
      if (Child === null) ;
      if (Order === 0) ;
    };
    this.SetLeft = function (AValue) {
      this.FLeft = AValue;
    };
    this.SetTop = function (AValue) {
      this.FTop = AValue;
    };
    this.ValidateRename = function (AComponent, CurName, NewName) {
      if ((((AComponent !== null) && (pas.SysUtils.CompareText(CurName,NewName) !== 0)) && (AComponent.FOwner === this)) && (this.FindComponent(NewName) !== null)) throw $mod.EComponentError.$create("CreateFmt",[pas.RTLConsts.SDuplicateName,[NewName]]);
      if (($mod.TComponentStateItem.csDesigning in this.FComponentState) && (this.FOwner !== null)) this.FOwner.ValidateRename(AComponent,CurName,NewName);
    };
    this.ValidateContainer = function (AComponent) {
      AComponent.ValidateInsert(this);
    };
    this.ValidateInsert = function (AComponent) {
      if (AComponent === null) ;
    };
    this.Create$1 = function (AOwner) {
      this.FComponentStyle = rtl.createSet($mod.TComponentStyleItem.csInheritable);
      if (AOwner != null) AOwner.InsertComponent(this);
    };
    this.Destroy = function () {
      var I = 0;
      var C = null;
      this.Destroying();
      if (this.FFreeNotifies != null) {
        I = this.FFreeNotifies.FCount - 1;
        while (I >= 0) {
          C = rtl.getObject(this.FFreeNotifies.Get(I));
          this.FFreeNotifies.Delete(I);
          C.Notification(this,$mod.TOperation.opRemove);
          if (this.FFreeNotifies === null) {
            I = 0}
           else if (I > this.FFreeNotifies.FCount) I = this.FFreeNotifies.FCount;
          I -= 1;
        };
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.FFreeNotifies;
          }, set: function (v) {
            this.p.FFreeNotifies = v;
          }});
      };
      this.DestroyComponents();
      if (this.FOwner !== null) this.FOwner.RemoveComponent(this);
      pas.System.TObject.Destroy.call(this);
    };
    this.BeforeDestruction = function () {
      if (!($mod.TComponentStateItem.csDestroying in this.FComponentState)) this.Destroying();
    };
    this.DestroyComponents = function () {
      var acomponent = null;
      while (this.FComponents != null) {
        acomponent = rtl.getObject(this.FComponents.Last());
        this.Remove(acomponent);
        acomponent.$destroy("Destroy");
      };
    };
    this.Destroying = function () {
      var Runner = 0;
      if ($mod.TComponentStateItem.csDestroying in this.FComponentState) return;
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDestroying);
      if (this.FComponents != null) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).Destroying();
      };
    };
    this.AfterLoadDFMValues = function () {
      this.EndUpdate();
    };
    this.BeforeLoadDFMValues = function () {
      this.BeginUpdate();
    };
    this.BeginUpdate = function () {
    };
    this.EndUpdate = function () {
    };
    this.FindComponent = function (AName) {
      var Result = null;
      var I = 0;
      Result = null;
      if ((AName === "") || !(this.FComponents != null)) return Result;
      for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas.SysUtils.CompareText(rtl.getObject(this.FComponents.Get(I)).FName,AName) === 0) {
          Result = rtl.getObject(this.FComponents.Get(I));
          return Result;
        };
      };
      return Result;
    };
    this.FreeNotification = function (AComponent) {
      if ((this.FOwner !== null) && (AComponent === this.FOwner)) return;
      if (!(this.FFreeNotifies != null)) this.FFreeNotifies = $mod.TFPList.$create("Create");
      if (this.FFreeNotifies.IndexOf(AComponent) === -1) {
        this.FFreeNotifies.Add(AComponent);
        AComponent.FreeNotification(this);
      };
    };
    this.RemoveFreeNotification = function (AComponent) {
      this.RemoveNotification(AComponent);
      AComponent.RemoveNotification(this);
    };
    this.InsertComponent = function (AComponent) {
      AComponent.ValidateContainer(this);
      this.ValidateRename(AComponent,"",AComponent.FName);
      this.Insert(AComponent);
      if ($mod.TComponentStateItem.csDesigning in this.FComponentState) AComponent.SetDesigning(true,true);
      this.Notification(AComponent,$mod.TOperation.opInsert);
    };
    this.RemoveComponent = function (AComponent) {
      this.Notification(AComponent,$mod.TOperation.opRemove);
      this.Remove(AComponent);
      AComponent.SetDesigning(false,true);
      this.ValidateRename(AComponent,AComponent.FName,"");
    };
    var $r = this.$rtti;
    $r.addProperty("Name",6,rtl.string,"FName","SetName");
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag");
  });
  this.RegisterClass = function (AClass) {
    $impl.ClassList[AClass.$classname] = AClass;
  };
  $mod.$init = function () {
    $impl.ClassList = Object.create(null);
  };
},["JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.QuickSort = function (aList, L, R, Compare) {
    var I = 0;
    var J = 0;
    var P = undefined;
    var Q = undefined;
    do {
      I = L;
      J = R;
      P = aList[Math.floor((L + R) / 2)];
      do {
        while (Compare(P,aList[I]) > 0) I = I + 1;
        while (Compare(P,aList[J]) < 0) J = J - 1;
        if (I <= J) {
          Q = aList[I];
          aList[I] = aList[J];
          aList[J] = Q;
          I = I + 1;
          J = J - 1;
        };
      } while (!(I > J));
      if ((J - L) < (R - I)) {
        if (L < J) $impl.QuickSort(aList,L,J,Compare);
        L = I;
      } else {
        if (I < R) $impl.QuickSort(aList,I,R,Compare);
        R = J;
      };
    } while (!(L >= R));
  };
  $impl.ClassList = null;
});
rtl.module("Web",["System","Types","JS"],function () {
  "use strict";
  var $mod = this;
  this.TJSTextMetrics = function (s) {
    if (s) {
      this.width = s.width;
    } else {
      this.width = 0.0;
    };
    this.$equal = function (b) {
      return this.width === b.width;
    };
  };
  rtl.createClass($mod,"TJSKeyNames",pas.System.TObject,function () {
    this.Alt = "Alt";
    this.CapsLock = "CapsLock";
    this.Control = "Control";
    this.Shift = "Shift";
    this.Enter = "Enter";
    this.Tab = "Tab";
    this.ArrowDown = "ArrowDown";
    this.ArrowLeft = "ArrowLeft";
    this.ArrowRight = "ArrowRight";
    this.ArrowUp = "ArrowUp";
    this._End = "End";
    this.Home = "Home";
    this.PageDown = "PageDown";
    this.PageUp = "PageUp";
    this.BackSpace = "Backspace";
    this.Delete = "Delete";
    this.Insert = "Insert";
    this.Escape = "Escape";
    this.Pause = "Pause";
    this.F1 = "F1";
    this.F2 = "F2";
    this.F3 = "F3";
    this.F4 = "F4";
    this.F5 = "F5";
    this.F6 = "F6";
    this.F7 = "F7";
    this.F8 = "F8";
    this.F9 = "F9";
    this.F10 = "F10";
    this.F11 = "F11";
    this.F12 = "F12";
    this.F13 = "F13";
    this.F14 = "F14";
    this.F15 = "F15";
    this.F16 = "F16";
    this.F17 = "F17";
    this.F18 = "F18";
    this.F19 = "F19";
    this.F20 = "F20";
  });
});
rtl.module("math",["System","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.RandomRange = function (aFrom, aTo) {
    var Result = 0;
    Result = pas.System.Random(Math.abs(aFrom - aTo)) + Math.min(aTo,aFrom);
    return Result;
  };
  this.SameValue = function (A, B, Epsilon) {
    var Result = false;
    if (Epsilon === 0.0) Epsilon = Math.max(Math.min(Math.abs(A),Math.abs(B)) * 1E-12,1E-12);
    if (A > B) {
      Result = (A - B) <= Epsilon}
     else Result = (B - A) <= Epsilon;
    return Result;
  };
  this.Floor = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.floor(A));
    return Result;
  };
  this.DegToRad = function (deg) {
    var Result = 0.0;
    Result = deg * (Math.PI / 180.0);
    return Result;
  };
  this.EqualsValue = 0;
  this.LessThanValue = -1;
  this.GreaterThanValue = 1;
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.DZeroResolution = 1E-12;
});
rtl.module("contnrs",["System","SysUtils","Classes"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TObjectList",pas.Classes.TList,function () {
    this.$init = function () {
      pas.Classes.TList.$init.call(this);
      this.FFreeObjects = false;
    };
    this.Notify = function (Ptr, Action) {
      var O = null;
      if (this.FFreeObjects) if (Action === pas.Classes.TListNotification.lnDeleted) {
        O = rtl.getObject(Ptr);
        O = rtl.freeLoc(O);
      };
      pas.Classes.TList.Notify.call(this,Ptr,Action);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Get.call(this,Index));
      return Result;
    };
    this.Create$2 = function () {
      pas.Classes.TList.Create$1.call(this);
      this.FFreeObjects = true;
    };
    this.Add$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.Add.call(this,rtl.getObject(AObject));
      return Result;
    };
    this.Remove$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.Remove.call(this,rtl.getObject(AObject));
      return Result;
    };
  });
},["JS"]);
rtl.module("WEBLib.Graphics",["System","Classes","Types","Web","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.SysDefault = 0x20000000;
  this.clNone = -1;
  this.clBlack = 0x0;
  this.clGray = 0x808080;
  this.clSilver = 0xC0C0C0;
  this.clWhite = 0xFFFFFF;
  this.clDefault = 536870912;
  this.clBtnFace = 0xF0F0F0;
  this.clWindowText = 0;
  this.clWindow = 16777215;
  this.DEFAULT_CHARSET = 1;
  this.TVerticalAlignment = {"0": "taAlignTop", taAlignTop: 0, "1": "taAlignBottom", taAlignBottom: 1, "2": "taVerticalCenter", taVerticalCenter: 2};
  this.TPenStyle = {"0": "psSolid", psSolid: 0, "1": "psDash", psDash: 1, "2": "psDot", psDot: 2, "3": "psDashDot", psDashDot: 3, "4": "psDashDotDot", psDashDotDot: 4, "5": "psClear", psClear: 5, "6": "psInsideFrame", psInsideFrame: 6, "7": "psUserStyle", psUserStyle: 7, "8": "psAlternate", psAlternate: 8};
  $mod.$rtti.$Enum("TPenStyle",{minvalue: 0, maxvalue: 8, ordtype: 1, enumtype: this.TPenStyle});
  this.TBrushStyle = {"0": "bsSolid", bsSolid: 0, "1": "bsClear", bsClear: 1, "2": "bsHorizontal", bsHorizontal: 2, "3": "bsVertical", bsVertical: 3, "4": "bsFDiagonal", bsFDiagonal: 4, "5": "bsBDiagonal", bsBDiagonal: 5, "6": "bsCross", bsCross: 6, "7": "bsDiagCross", bsDiagCross: 7};
  $mod.$rtti.$Enum("TBrushStyle",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TBrushStyle});
  this.TFontStyle = {"0": "fsBold", fsBold: 0, "1": "fsItalic", fsItalic: 1, "2": "fsStrikeOut", fsStrikeOut: 2, "3": "fsUnderline", fsUnderline: 3};
  $mod.$rtti.$Enum("TFontStyle",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TFontStyle});
  $mod.$rtti.$Set("TFontStyles",{comptype: $mod.$rtti["TFontStyle"]});
  $mod.$rtti.$Int("TFontCharset",{minvalue: 0, maxvalue: 255, ordtype: 3});
  this.TCanvasPointF = function (s) {
    if (s) {
      this.X = s.X;
      this.Y = s.Y;
    } else {
      this.X = 0.0;
      this.Y = 0.0;
    };
    this.$equal = function (b) {
      return (this.X === b.X) && (this.Y === b.Y);
    };
  };
  this.TCanvasRectF = function (s) {
    if (s) {
      this.Left = s.Left;
      this.Top = s.Top;
      this.Right = s.Right;
      this.Bottom = s.Bottom;
    } else {
      this.Left = 0.0;
      this.Top = 0.0;
      this.Right = 0.0;
      this.Bottom = 0.0;
    };
    this.$equal = function (b) {
      return (this.Left === b.Left) && ((this.Top === b.Top) && ((this.Right === b.Right) && (this.Bottom === b.Bottom)));
    };
  };
  rtl.createClass($mod,"TPen",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FWidth = 0;
      this.FColor = 0;
      this.FStyle = 0;
    };
    this.SetColor = function (Value) {
      this.FColor = Value;
    };
    this.Create$1 = function () {
      this.FColor = 0;
      this.FWidth = 1;
      this.FStyle = $mod.TPenStyle.psSolid;
    };
    this.Assign = function (Source) {
      if ($mod.TPen.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TPen).FColor;
        this.FStyle = rtl.as(Source,$mod.TPen).FStyle;
        this.FWidth = rtl.as(Source,$mod.TPen).FWidth;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("Width",0,rtl.longint,"FWidth","FWidth");
    $r.addProperty("Style",0,$mod.$rtti["TPenStyle"],"FStyle","FStyle");
  });
  rtl.createClass($mod,"TBrush",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FColor = 0;
      this.FStyle = 0;
    };
    this.Create$1 = function () {
      this.FColor = 16777215;
      this.FStyle = $mod.TBrushStyle.bsSolid;
    };
    this.Assign = function (Source) {
      if ($mod.TBrush.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TBrush).FColor;
        this.FStyle = rtl.as(Source,$mod.TBrush).FStyle;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Color",0,rtl.longint,"FColor","FColor");
    $r.addProperty("Style",0,$mod.$rtti["TBrushStyle"],"FStyle","FStyle");
  });
  rtl.createClass($mod,"TFont",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FName = "";
      this.FSize = 0;
      this.FColor = 0;
      this.FStyle = {};
      this.FOnChange = null;
      this.FHeight = 0;
      this.FCharset = 0;
    };
    this.$final = function () {
      this.FStyle = undefined;
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetHeight = function (Value) {
      var d = 0.0;
      this.FHeight = Value;
      d = (-this.FHeight * 72) / 96;
      this.FSize = Math.round(d);
      this.DoChange();
    };
    this.SetName = function (AName) {
      if (this.FName !== AName) {
        this.FName = AName;
        this.DoChange();
      };
    };
    this.SetSize = function (ASize) {
      if (this.FSize !== ASize) {
        this.FSize = ASize;
        this.DoChange();
      };
    };
    this.SetColor = function (AColor) {
      if (this.FColor !== AColor) {
        this.FColor = AColor;
        this.DoChange();
      };
    };
    this.SetStyle = function (AStyle) {
      this.FStyle = rtl.refSet(AStyle);
      this.DoChange();
    };
    this.DoChange = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Assign = function (Source) {
      if ($mod.TFont.isPrototypeOf(Source)) {
        this.FName = rtl.as(Source,$mod.TFont).FName;
        this.FColor = rtl.as(Source,$mod.TFont).FColor;
        this.FSize = rtl.as(Source,$mod.TFont).FSize;
        this.FStyle = rtl.refSet(rtl.as(Source,$mod.TFont).FStyle);
      };
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.apply(this,arguments);
      this.FName = "Tahoma";
      this.FSize = 8;
      this.FStyle = {};
      this.FColor = 0;
    };
    this.ToString = function () {
      var Result = "";
      var s = "";
      s = "";
      if ($mod.TFontStyle.fsBold in this.FStyle) s = "Bold ";
      if ($mod.TFontStyle.fsItalic in this.FStyle) s = "Italic ";
      Result = ((s + $mod.FontSizeToHTML($mod.FontSizeToPx(this.FSize))) + " ") + this.FName;
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Charset",0,$mod.$rtti["TFontCharset"],"FCharset","FCharset");
    $r.addProperty("Name",2,rtl.string,"FName","SetName");
    $r.addProperty("Height",2,rtl.longint,"FHeight","SetHeight");
    $r.addProperty("Style",2,$mod.$rtti["TFontStyles"],"FStyle","SetStyle");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("Size",2,rtl.longint,"FSize","SetSize");
    $r.addProperty("OnChange",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TGraphic",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FAddToQueue = false;
      this.FCanvasElement = null;
      this.FEmpty = false;
      this.FData = "";
      this.FCanvas = null;
      this.FOnChange = null;
      this.FImage = null;
      this.FURL = "";
    };
    this.$final = function () {
      this.FCanvasElement = undefined;
      this.FCanvas = undefined;
      this.FOnChange = undefined;
      this.FImage = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetHeight = function (Value) {
      this.FImage.height = Value;
      this.RecreateCanvas();
      this.DoChange();
    };
    this.SetWidth = function (Value) {
      this.FImage.width = Value;
      this.RecreateCanvas();
      this.DoChange();
    };
    this.GetCanvas = function () {
      var Result = null;
      if (!(this.FCanvas != null)) this.RecreateCanvas();
      Result = this.FCanvas;
      return Result;
    };
    this.DoChange = function () {
      var i = 0;
      this.FEmpty = (this.GetWidth() === 0) && (this.GetHeight() === 0);
      if ((!this.FEmpty && (this.FData !== "")) && !$impl.FCache.Exists(this.FData)) {
        $impl.FCache.Add$1($impl.TGraphicCache.$create("Create$1",[this.FImage,this.FData]));
        i = $impl.FQueue.IndexOf(this.FData);
        if ((i >= 0) && (i <= ($impl.FQueue.GetCount() - 1))) $impl.FQueue.Delete(i);
        $impl.FCacheCount -= 1;
        if ($impl.FCacheCount === 0) {
          if (pas["WEBLib.Forms"].Application.FOnImageCacheReady != null) pas["WEBLib.Forms"].Application.FOnImageCacheReady(pas["WEBLib.Forms"].Application);
        };
      };
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.SetURL = function (URL) {
      this.LoadFromURL(URL);
    };
    this.GetWidth = function () {
      var Result = 0;
      var w = 0;
      w = this.FImage.width;
      Result = w;
      return Result;
    };
    this.GetHeight = function () {
      var Result = 0;
      var h = 0;
      h = this.FImage.height;
      Result = h;
      return Result;
    };
    this.RecreateCanvas = function () {
      if (!(this.FCanvasElement != null)) this.FCanvasElement = document.createElement("CANVAS");
      if (this.FCanvasElement != null) {
        this.FCanvasElement.height = this.GetHeight();
        this.FCanvasElement.width = this.GetWidth();
        if (!(this.FCanvas != null)) {
          this.FCanvas = $mod.TCanvas.$create("Create$1",[this.FCanvasElement]);
          this.FCanvas.FOnBeginScene = rtl.createCallback(this,"DoBeginScene");
          this.FCanvas.FOnEndScene = rtl.createCallback(this,"DoEndScene");
        };
      };
    };
    this.DoBeginScene = function (Sender) {
      this.FCanvas.Clear();
    };
    this.DoEndScene = function (Sender) {
      this.FAddToQueue = false;
      this.CaptureCanvas();
      this.FAddToQueue = true;
    };
    this.AssignEvents = function () {
      var me = this;
      this.FImage.onload = function() {
         me.DoChange();
        };
    };
    this.CreateImage = function () {
      this.FImage = new Image();
    };
    this.LoadFromCache = function (AData) {
      var dt = "";
      var o = null;
      var b = false;
      var s = "";
      var l = false;
      this.FData = AData;
      dt = AData;
      if ((dt !== "") && !$impl.FCache.Find(dt,{get: function () {
          return o;
        }, set: function (v) {
          o = v;
        }})) {
        b = false;
        s = "";
        s = this.FImage.src;
        b = (s != '');
        l = b && (dt !== s);
        if (l) {
          this.CreateImage();
          this.AssignEvents();
        };
        if ((!l && ($impl.FQueue.IndexOf(dt) === -1)) || l) {
          this.FImage.src = dt;
          $impl.FCacheCount += 1;
          if (this.FAddToQueue) $impl.FQueue.Add(dt);
        };
      } else {
        this.FImage = o;
        this.DoChange();
      };
    };
    this.CreateFromResource = function (AResource) {
      var Result = null;
      Result = this.CreateFromResource$1(AResource,0);
      return Result;
    };
    this.CreateFromResource$1 = function (AResource, AInstance) {
      var Result = null;
      Result = $mod.TGraphic.$create("Create$3");
      Result.LoadFromResource(AResource);
      return Result;
    };
    this.CreateFromURL = function (AURL) {
      var Result = null;
      Result = this.CreateFromURL$1(AURL,0);
      return Result;
    };
    this.CreateFromURL$1 = function (AURL, AInstance) {
      var Result = null;
      Result = $mod.TGraphic.$create("Create$3");
      Result.LoadFromURL(AURL);
      return Result;
    };
    this.Image = function () {
      var Result = null;
      Result = this.FImage;
      return Result;
    };
    this.Empty = function () {
      var Result = false;
      Result = this.FEmpty;
      return Result;
    };
    this.Create$3 = function () {
      this.FAddToQueue = true;
      this.FEmpty = true;
      this.FData = "";
      this.CreateImage();
      this.AssignEvents();
    };
    this.CaptureCanvas = function () {
      if ((this.FCanvas != null) && (this.FCanvas.FElementCanvas != null)) this.LoadFromResource(this.FCanvas.FElementCanvas.toDataURL());
    };
    this.LoadFromCanvas = function (ACanvas) {
      if ((ACanvas != null) && (ACanvas.FElementCanvas != null)) this.LoadFromResource(ACanvas.FElementCanvas.toDataURL());
    };
    this.SetSize = function (AWidth, AHeight) {
      this.SetWidth(AWidth);
      this.SetHeight(AHeight);
    };
    this.Assign = function (Source) {
      var s = "";
      if ((Source != null) && (Source.FCanvas != null)) {
        this.LoadFromCanvas(Source.FCanvas)}
       else if (((Source != null) && (Source.FImage != null)) && !Source.Empty()) {
        s = Source.FImage.src;
        this.LoadFromURL(s);
      };
    };
    this.LoadFromURL = function (AURL) {
      this.LoadFromURL$1(AURL,0);
    };
    this.LoadFromURL$1 = function (AURL, AHInstance) {
      this.FEmpty = true;
      this.LoadFromCache(AURL);
    };
    this.LoadFromFile = function (AFileName) {
      this.LoadFromURL(AFileName);
    };
    this.LoadFromResource = function (AResource) {
      this.LoadFromResource$1(AResource,0);
    };
    this.LoadFromResource$1 = function (AResource, AHInstance) {
      this.FEmpty = true;
      this.LoadFromCache(AResource);
    };
    this.LoadFromStream = function (AStream) {
      this.DoChange();
    };
    var $r = this.$rtti;
    $r.addProperty("OnChange",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("URL",2,rtl.string,"FURL","SetURL");
  });
  rtl.createClass($mod,"TBitmap",$mod.TGraphic,function () {
  });
  rtl.createClass($mod,"TCanvas",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FElementCanvas = null;
      this.FContext = null;
      this.FPen = null;
      this.FBrush = null;
      this.FFont = null;
      this.FPathOpen = false;
      this.FPathX = 0.0;
      this.FPathY = 0.0;
      this.FClipRect = new $mod.TCanvasRectF();
      this.FOnEndScene = null;
      this.FOnBeginScene = null;
    };
    this.$final = function () {
      this.FElementCanvas = undefined;
      this.FContext = undefined;
      this.FPen = undefined;
      this.FBrush = undefined;
      this.FFont = undefined;
      this.FClipRect = undefined;
      this.FOnEndScene = undefined;
      this.FOnBeginScene = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetClipRect = function (Value) {
      this.FClipRect = new $mod.TCanvasRectF(Value);
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.FContext.rect(this.FClipRect.Left,this.FClipRect.Top,this.FClipRect.Right - this.FClipRect.Left,this.FClipRect.Bottom - this.FClipRect.Top);
        this.FContext.clip();
      };
    };
    this.ApplyStroke = function () {
      if (this.FContext != null) {
        this.FContext.lineWidth = this.FPen.FWidth;
        this.FContext.strokeStyle = $mod.ColorToHTML(this.FPen.FColor);
        var $tmp1 = this.FPen.FStyle;
        if ($tmp1 === $mod.TPenStyle.psSolid) {
          this.FContext.setLineDash([])}
         else if ($tmp1 === $mod.TPenStyle.psDot) {
          this.FContext.setLineDash([1,2])}
         else if ($tmp1 === $mod.TPenStyle.psDash) {
          this.FContext.setLineDash([8,2])}
         else if ($tmp1 === $mod.TPenStyle.psDashDot) {
          this.FContext.setLineDash([6,2,2,2])}
         else if ($tmp1 === $mod.TPenStyle.psDashDotDot) {
          this.FContext.setLineDash([6,2,2,2,2,2])}
         else if ($tmp1 === $mod.TPenStyle.psClear) this.FContext.setLineDash([0,0xFFFF]);
      };
    };
    this.ApplyFill = function () {
      if (this.FContext != null) this.FContext.fillStyle = $mod.ColorToHTML(this.FBrush.FColor);
    };
    this.Create$1 = function (AControl) {
      this.FElementCanvas = AControl;
      this.FContext = AControl.getContext("2d");
      this.FPen = $mod.TPen.$create("Create$1");
      this.FBrush = $mod.TBrush.$create("Create$1");
      this.FPathOpen = false;
      this.FFont = $mod.TFont.$create("Create$1");
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.SetTransform = function (m11, m12, m21, m22, dx, dy) {
      if (this.FContext != null) this.FContext.setTransform(m11,m12,m21,m22,dx,dy);
    };
    this.Transform = function (m11, m12, m21, m22, dx, dy) {
      if (this.FContext != null) this.FContext.transform(m11,m12,m21,m22,dx,dy);
    };
    this.AngleArc$1 = function (X, Y, Radius, StartAngle, SweepAngle) {
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.ApplyStroke();
        this.FContext.arc(X,Y,Radius,StartAngle,StartAngle + SweepAngle);
        this.FContext.stroke();
      };
    };
    this.MoveTo$1 = function (X, Y) {
      if (this.FContext != null) {
        this.FPathOpen = true;
        this.FContext.beginPath();
        this.ApplyStroke();
        this.FContext.moveTo(X,Y);
      };
    };
    this.LineTo$1 = function (X, Y) {
      if (this.FContext != null) {
        if (!this.FPathOpen) {
          this.FContext.beginPath();
          this.ApplyStroke();
          this.FContext.moveTo(this.FPathX,this.FPathY);
        };
        this.FContext.lineTo(X,Y);
        this.FContext.stroke();
        this.FPathX = X;
        this.FPathY = Y;
        this.FPathOpen = false;
      };
    };
    this.Rectangle = function (X1, Y1, X2, Y2) {
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        this.FContext.rect(X1,Y1,X2 - X1,Y2 - Y1);
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Rectangle$1 = function (X1, Y1, X2, Y2) {
      this.Rectangle(X1,Y1,X2,Y2);
    };
    this.Rectangle$3 = function (Rect) {
      this.Rectangle(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.RoundRect$1 = function (X1, Y1, X2, Y2, X3, Y3) {
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        this.FContext.moveTo(X1 + (X3 / 2),Y1);
        this.FContext.lineTo(X2 - (X3 / 2),Y1);
        this.FContext.quadraticCurveTo(X2,Y1,X2,Y1 + (Y3 / 2));
        this.FContext.lineTo(X2,Y2 - (Y3 / 2));
        this.FContext.quadraticCurveTo(X2,Y2,X2 - (X3 / 2),Y2);
        this.FContext.lineTo(X1 + (X3 / 2),Y2);
        this.FContext.quadraticCurveTo(X1,Y2,X1,Y2 - (Y3 / 2));
        this.FContext.lineTo(X1,Y1 + (Y3 / 2));
        this.FContext.quadraticCurveTo(X1,Y1,X1 + (X3 / 2),Y1);
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.RoundRect$3 = function (Rect, CX, CY) {
      this.RoundRect$1(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom,CX,CY);
    };
    this.FillRect = function (Rect) {
      this.Rectangle$1(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.Ellipse$1 = function (X1, Y1, X2, Y2) {
      var w = 0.0;
      var h = 0.0;
      var kappa = 0.0;
      var ox = 0.0;
      var oy = 0.0;
      var xe = 0.0;
      var ye = 0.0;
      var xm = 0.0;
      var ym = 0.0;
      if (this.FContext != null) {
        w = X2 - X1;
        h = Y2 - Y1;
        kappa = 0.5522848;
        ox = (w / 2) * kappa;
        oy = (h / 2) * kappa;
        xe = X1 + w;
        ye = Y1 + h;
        xm = X1 + (w / 2);
        ym = Y1 + (h / 2);
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        this.FContext.moveTo(X1,ym);
        this.FContext.bezierCurveTo(X1,ym - oy,xm - ox,Y1,xm,Y1);
        this.FContext.bezierCurveTo(xm + ox,Y1,xe,ym - oy,xe,ym);
        this.FContext.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
        this.FContext.bezierCurveTo(xm - ox,ye,X1,ym + oy,X1,ym);
        this.FContext.closePath();
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Ellipse$3 = function (Rect) {
      this.Ellipse$1(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.Polyline$1 = function (Points) {
      var l = 0;
      var i = 0;
      if (this.FContext != null) {
        l = rtl.length(Points);
        this.FContext.beginPath();
        this.ApplyStroke();
        i = 0;
        this.FContext.moveTo(Points[i].X,Points[i].Y);
        while (i < (l - 1)) {
          i += 1;
          this.FContext.lineTo(Points[i].X,Points[i].Y);
        };
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Polygon$1 = function (Points) {
      var l = 0;
      var i = 0;
      if (this.FContext != null) {
        l = rtl.length(Points);
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        i = 0;
        this.FContext.moveTo(Points[i].X,Points[i].Y);
        while (i < (l - 1)) {
          i += 1;
          this.FContext.lineTo(Points[i].X,Points[i].Y);
        };
        this.FContext.closePath();
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.TextOut$1 = function (X, Y, Text) {
      if (this.FContext != null) {
        this.FContext.fillStyle = $mod.ColorToHTML(this.FFont.FColor);
        this.FContext.font = this.FFont.ToString();
        this.FContext.textBaseline = "hanging";
        this.FContext.fillText(Text,X,Y + 0.5);
      };
    };
    this.StretchDraw$1 = function (Rect, Graphic) {
      var img = null;
      if (this.FContext != null) {
        img = Graphic.Image();
        this.FContext.drawImage(img,0,0,Graphic.GetWidth(),Graphic.GetHeight(),Rect.Left,Rect.Top,Rect.Right - Rect.Left,Rect.Bottom - Rect.Top);
      };
    };
    this.BeginScene = function () {
      if (this.FOnBeginScene != null) this.FOnBeginScene(this);
    };
    this.EndScene = function () {
      if (this.FOnEndScene != null) this.FOnEndScene(this);
    };
    this.Save = function () {
      if (this.FContext != null) this.FContext.save();
    };
    this.Restore = function () {
      if (this.FContext != null) this.FContext.restore();
    };
    this.Refresh = function () {
    };
    this.Clear = function () {
      if ((this.FContext != null) && (this.FElementCanvas != null)) this.FContext.clearRect(0,0,this.FElementCanvas.width,this.FElementCanvas.height);
    };
    this.Clear$1 = function (AColor) {
      var c = 0;
      var s = 0;
      this.Clear();
      if (this.FElementCanvas != null) {
        c = this.FBrush.FColor;
        s = this.FBrush.FStyle;
        this.FBrush.FColor = AColor;
        this.FBrush.FStyle = $mod.TBrushStyle.bsSolid;
        this.FillRect(pas.Types.Rect(0,0,this.FElementCanvas.width,this.FElementCanvas.height));
        this.FBrush.FColor = c;
        this.FBrush.FStyle = s;
      };
    };
    this.TextRect$1 = function (ARect, Text, WordWrap, Calculate, AHorizontalAlignment, AVerticalAlignment) {
      var Self = this;
      var Result = new $mod.TCanvasRectF();
      var i = 0;
      var s = "";
      var sn = "";
      var st = "";
      var l = 0;
      var w = 0.0;
      var mw = 0.0;
      var f = false;
      var p = 0;
      var tw = 0.0;
      var th = 0.0;
      var lcnt = 0;
      var rs = new $mod.TCanvasRectF();
      var fws = 0.0;
      var ths = 0.0;
      var ww = false;
      var wwx = false;
      var fx = false;
      function DrawText(AText, AWidth, AHeight) {
        if (ww) {
          var $tmp1 = AHorizontalAlignment;
          if ($tmp1 === pas.Classes.TAlignment.taCenter) {
            Self.TextOut$1(ARect.Left + (((ARect.Right - ARect.Left) - AWidth) / 2),ARect.Top,AText)}
           else if ($tmp1 === pas.Classes.TAlignment.taLeftJustify) {
            Self.TextOut$1(ARect.Left,ARect.Top,AText)}
           else if ($tmp1 === pas.Classes.TAlignment.taRightJustify) Self.TextOut$1(ARect.Right - AWidth,ARect.Top,AText);
        } else {
          var $tmp2 = AHorizontalAlignment;
          if ($tmp2 === pas.Classes.TAlignment.taCenter) {
            var $tmp3 = AVerticalAlignment;
            if ($tmp3 === $mod.TVerticalAlignment.taAlignTop) {
              Self.TextOut$1(ARect.Left + (((ARect.Right - ARect.Left) - AWidth) / 2),ARect.Top,AText)}
             else if ($tmp3 === $mod.TVerticalAlignment.taVerticalCenter) {
              Self.TextOut$1(ARect.Left + (((ARect.Right - ARect.Left) - AWidth) / 2),ARect.Top + (((ARect.Bottom - ARect.Top) - AHeight) / 2),AText)}
             else if ($tmp3 === $mod.TVerticalAlignment.taAlignBottom) Self.TextOut$1(ARect.Left + (((ARect.Right - ARect.Left) - AWidth) / 2),ARect.Bottom - AHeight,AText);
          } else if ($tmp2 === pas.Classes.TAlignment.taLeftJustify) {
            var $tmp4 = AVerticalAlignment;
            if ($tmp4 === $mod.TVerticalAlignment.taAlignTop) {
              Self.TextOut$1(ARect.Left,ARect.Top,AText)}
             else if ($tmp4 === $mod.TVerticalAlignment.taVerticalCenter) {
              Self.TextOut$1(ARect.Left,ARect.Top + (((ARect.Bottom - ARect.Top) - AHeight) / 2),AText)}
             else if ($tmp4 === $mod.TVerticalAlignment.taAlignBottom) Self.TextOut$1(ARect.Left,ARect.Bottom - AHeight,AText);
          } else if ($tmp2 === pas.Classes.TAlignment.taRightJustify) {
            var $tmp5 = AVerticalAlignment;
            if ($tmp5 === $mod.TVerticalAlignment.taAlignTop) {
              Self.TextOut$1(ARect.Right - AWidth,ARect.Top,AText)}
             else if ($tmp5 === $mod.TVerticalAlignment.taVerticalCenter) {
              Self.TextOut$1(ARect.Right - AWidth,ARect.Top + (((ARect.Bottom - ARect.Top) - AHeight) / 2),AText)}
             else if ($tmp5 === $mod.TVerticalAlignment.taAlignBottom) Self.TextOut$1(ARect.Right - AWidth,ARect.Bottom - AHeight,AText);
          };
        };
      };
      function FindNextWord(Text, APos) {
        var Result = "";
        var l = 0;
        var i = 0;
        Result = "";
        l = Text.length;
        if (APos.get() > l) return Result;
        i = APos.get();
        while (true) {
          if ((((Text.charAt(i - 1) === "\n") && (Text.charAt((i - 1) - 1) === "\r")) || ((Text.charAt(i - 1) === "\r") && (Text.charAt((i - 1) - 1) === "\n"))) || (Text.charAt(i - 1) === " ")) {
            if (Text.charAt(i - 1) === " ") {
              Result = pas.System.Copy(Text,APos.get(),i - (APos.get() - 1))}
             else Result = pas.System.Copy(Text,APos.get(),i - APos.get());
            break;
          } else if (((Text.charAt(i - 1) === "\n") || (Text.charAt(i - 1) === "\r")) || (Text.charAt(i - 1) === " ")) {
            Result = pas.System.Copy(Text,APos.get(),i - (APos.get() - 1));
            break;
          } else if (i >= l) {
            Result = pas.System.Copy(Text,APos.get(),i - (APos.get() - 1));
            break;
          } else i += 1;
        };
        APos.set(i + 1);
        return Result;
      };
      ww = (WordWrap || (pas.System.Pos("\r",Text) > 0)) || (pas.System.Pos("\n",Text) > 0);
      wwx = !WordWrap && ((pas.System.Pos("\r",Text) > 0) || (pas.System.Pos("\n",Text) > 0));
      if (!ww) {
        w = Self.TextWidth(Text);
        th = Self.TextHeight(Text);
        if (!Calculate) DrawText(Text,w,th);
        Result = new $mod.TCanvasRectF($mod.CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Left + w,ARect.Top + th));
      } else {
        rs = new $mod.TCanvasRectF(ARect);
        mw = 0;
        i = 1;
        ths = Self.FFont.FSize * 0.5;
        lcnt = 0;
        fws = 0;
        tw = 0;
        s = FindNextWord(Text,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }});
        w = Self.TextWidth(s);
        th = Self.TextHeight(s) + ths;
        mw = mw + w;
        if ((s.length > 0) && (s.charAt(s.length - 1) === " ")) mw = mw + fws;
        fx = false;
        while (i <= Text.length) {
          l = s.length;
          if ((l >= 2) && (((s.charAt(l - 1) === "\n") && (s.charAt((l - 1) - 1) === "\r")) || ((s.charAt(l - 1) === "\r") && (s.charAt((l - 1) - 1) === "\n")))) {
            s = pas.System.Copy(s,1,l - 2);
            f = true;
          } else if ((l >= 1) && ((s.charAt(l - 1) === "\n") || (s.charAt(l - 1) === "\r"))) {
            s = pas.System.Copy(s,1,l - 1);
            f = true;
          } else f = false;
          sn = FindNextWord(Text,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }});
          w = Self.TextWidth(sn);
          th = Math.max(th,Self.TextHeight(sn) + ths);
          if ((((ARect.Left + mw) + w) > ARect.Right) || f) {
            if ((s !== "") && !fx) {
              p = s.length;
              st = pas.System.Copy(s,1,p);
              lcnt += 1;
              if (mw > tw) tw = mw;
              if (!Calculate) DrawText(st,mw,th);
              mw = 0;
            };
            s = "";
            fx = false;
            if ((wwx && f) || !wwx) {
              ARect.Top = ARect.Top + th}
             else if (wwx && !f) fx = true;
            if ((pas.System.Trunc(ARect.Top) > pas.System.Trunc(ARect.Bottom - th)) && !Calculate) break;
          };
          mw = mw + w;
          if ((sn.length > 0) && (sn.charAt(sn.length - 1) === " ")) mw = mw + fws;
          s = s + sn;
        };
        if (s !== "") {
          p = s.length;
          st = pas.System.Copy(s,1,p);
          lcnt += 1;
          if (mw > tw) tw = mw;
          if (!Calculate) DrawText(st,mw,th);
        };
        Result = new $mod.TCanvasRectF($mod.CreateCanvasRectF(rs.Left,rs.Top,rs.Left + tw,rs.Top + (lcnt * th)));
      };
      return Result;
    };
    this.TextWidth = function (Text) {
      var Result = 0.0;
      var f = "";
      var tm = new pas.Web.TJSTextMetrics();
      if (this.FContext != null) {
        f = this.FFont.ToString();
        this.FContext.font = f;
        tm = new pas.Web.TJSTextMetrics(this.FContext.measureText(Text));
        Result = tm.width;
      };
      return Result;
    };
    this.TextHeight = function (Text) {
      var Result = 0.0;
      Result = $mod.FontSizeToPx(this.FFont.FSize);
      return Result;
    };
  });
  this.ColorToRGB = function (Color) {
    var Result = 0;
    Result = Color;
    return Result;
  };
  this.ColorToHex = function (c) {
    var Result = "";
    var s = "";
    s = c.toString(16);
    
        while (s.length < 6)
        {
          s = "0" + s;
        };
    Result = (pas.System.Copy(s,5,2) + pas.System.Copy(s,3,2)) + pas.System.Copy(s,1,2);
    return Result;
  };
  this.ColorToHTML = function (c) {
    var Result = "";
    Result = "#" + $mod.ColorToHex(c);
    return Result;
  };
  this.FontSizeToHTML = function (sz) {
    var Result = "";
    Result = pas.SysUtils.FloatToStr(sz) + "px";
    Result = pas.SysUtils.StringReplace(Result,",",".",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    return Result;
  };
  this.HexToColor = function (h) {
    var Result = 0;
    var s = "";
    h = pas.SysUtils.StringReplace(h,"#","",{});
    h = pas.SysUtils.StringReplace(h,"$","",{});
    s = (("$" + pas.System.Copy(h,5,2)) + pas.System.Copy(h,3,2)) + pas.System.Copy(h,1,2);
    Result = pas.SysUtils.StrToInt64(s);
    return Result;
  };
  this.FontSizeToPx = function (sz) {
    var Result = 0.0;
    Result = (sz * 96) / 72;
    return Result;
  };
  this.GetRValue = function (rgb) {
    var Result = 0;
    Result = (rgb & 0xFF) & 255;
    return Result;
  };
  this.GetGValue = function (rgb) {
    var Result = 0;
    Result = ((rgb >>> 8) & 0xFF) & 255;
    return Result;
  };
  this.GetBValue = function (rgb) {
    var Result = 0;
    Result = ((rgb >>> 16) & 0xFF) & 255;
    return Result;
  };
  this.CreateCanvasRectF = function (Left, Top, Right, Bottom) {
    var Result = new $mod.TCanvasRectF();
    Result.Left = Left;
    Result.Top = Top;
    Result.Right = Right;
    Result.Bottom = Bottom;
    return Result;
  };
  this.CreateCanvasPointF = function (X, Y) {
    var Result = new $mod.TCanvasPointF();
    Result.X = X;
    Result.Y = Y;
    return Result;
  };
  this.RGB = function (r, g, b) {
    var Result = 0;
    Result = (r | (g << 8)) | (b << 16);
    return Result;
  };
  $mod.$init = function () {
    $impl.FCache = $impl.TGraphicCacheList.$create("Create$2");
    $impl.FQueue = pas.Classes.TStringList.$create("Create$1");
  };
},["WEBLib.Forms","math","SysUtils","contnrs"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($impl,"TGraphicCache",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FImage = null;
      this.FID = "";
    };
    this.$final = function () {
      this.FImage = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AImage, AID) {
      this.FImage = AImage;
      this.FID = AID;
    };
  });
  rtl.createClass($impl,"TGraphicCacheList",pas.contnrs.TObjectList,function () {
    this.Find = function (AID, FImage) {
      var Result = false;
      var I = 0;
      var it = null;
      Result = false;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItem(I),$impl.TGraphicCache);
        if ((it.FID === AID) && (it.FImage != null)) {
          FImage.set(it.FImage);
          Result = true;
          break;
        };
      };
      return Result;
    };
    this.Exists = function (AID) {
      var Result = false;
      var I = 0;
      var it = null;
      Result = false;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItem(I),$impl.TGraphicCache);
        if ((it.FID === AID) && (it.FImage != null)) {
          Result = true;
          break;
        };
      };
      return Result;
    };
  });
  $impl.FCache = null;
  $impl.FQueue = null;
  $impl.FCacheCount = 0;
});
rtl.module("WEBLib.StdCtrls",["System","Classes","WEBLib.Controls","SysUtils","Web","WEBLib.Graphics","Types"],function () {
  "use strict";
  var $mod = this;
  this.TEditCharCase = {"0": "wecLowerCase", wecLowerCase: 0, "1": "wecNormal", wecNormal: 1, "2": "wecMixedCase", wecMixedCase: 2, "3": "wecUpperCase", wecUpperCase: 3};
  $mod.$rtti.$Enum("TEditCharCase",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TEditCharCase});
  this.TCheckBoxState = {"0": "cbChecked", cbChecked: 0, "1": "cbGrayed", cbGrayed: 1, "2": "cbUnchecked", cbUnchecked: 2};
  $mod.$rtti.$Enum("TCheckBoxState",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TCheckBoxState});
  this.TDateTimeKind = {"0": "dtkDate", dtkDate: 0, "1": "dtkTime", dtkTime: 1};
  $mod.$rtti.$Enum("TDateTimeKind",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TDateTimeKind});
  this.TEllipsisPosition = {"0": "epEndEllipsis", epEndEllipsis: 0, "1": "epNone", epNone: 1};
  $mod.$rtti.$Enum("TEllipsisPosition",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TEllipsisPosition});
  this.TTextLayout = {"0": "tlTop", tlTop: 0, "1": "tlCenter", tlCenter: 1, "2": "tlBottom", tlBottom: 2};
  $mod.$rtti.$Enum("TTextLayout",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTextLayout});
  rtl.createClass($mod,"TCustomLabel",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FContent = null;
      this.FAutoSize = false;
      this.FCaption = "";
      this.FEllipsisPosition = 0;
      this.FWordWrap = false;
      this.FAlignment = 0;
      this.FLayout = 0;
      this.FTransparent = false;
    };
    this.$final = function () {
      this.FContent = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetLayout = function (Value) {
      if (this.FLayout !== Value) {
        this.FLayout = Value;
        this.UpdateElement();
      };
    };
    this.SetAlignment = function (Value) {
      if (this.FAlignment !== Value) {
        this.FAlignment = Value;
        this.UpdateElement();
      };
    };
    this.GetContentHandle = function () {
      var Result = null;
      Result = this.FContent;
      return Result;
    };
    this.GetOuterWidth = function () {
      var Result = 0;
      Result = this.GetWidth();
      Result = Result + 4;
      return Result;
    };
    this.GetOuterHeight = function () {
      var Result = 0;
      Result = this.GetHeight();
      if (this.FAutoSize) Result = Result + 4;
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      this.FContent = document.createElement("SPAN");
      Result.appendChild(this.FContent);
      return Result;
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = this.FCaption;
      return Result;
    };
    this.CanShowFocus = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.BindElement = function () {
      this.FContent = this.FContainer.firstElementChild;
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.apply(this,arguments);
      if (this.GetContentHandle() != null) {
        this.GetContentHandle().innerHTML = this.GetDisplayText()}
       else this.GetElementHandle().innerHTML = this.GetDisplayText();
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.apply(this,arguments);
      if (this.IsUpdating()) return;
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().style.setProperty("display","table");
        if (this.FAutoSize) {
          this.GetElementHandle().style.setProperty("overflow","")}
         else this.GetElementHandle().style.setProperty("overflow","hidden");
      };
      if (this.GetContentHandle() != null) {
        var $tmp1 = this.FLayout;
        if ($tmp1 === $mod.TTextLayout.tlTop) {
          this.GetContentHandle().style.setProperty("vertical-align","top")}
         else if ($tmp1 === $mod.TTextLayout.tlCenter) {
          this.GetContentHandle().style.setProperty("vertical-align","middle")}
         else if ($tmp1 === $mod.TTextLayout.tlBottom) this.GetContentHandle().style.setProperty("vertical-align","bottom");
        var $tmp2 = this.FAlignment;
        if ($tmp2 === pas.Classes.TAlignment.taCenter) {
          this.GetContentHandle().setAttribute("align","center")}
         else if ($tmp2 === pas.Classes.TAlignment.taRightJustify) this.GetContentHandle().setAttribute("align","right");
        if (!this.FTransparent) this.GetContentHandle().style.setProperty("background-color",pas["WEBLib.Graphics"].ColorToHTML(this.FColor));
        this.GetContentHandle().style.setProperty("display","table-cell");
        if (this.FEnabled) this.GetContentHandle().style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML(this.FFont.FColor));
        if (this.FElementFont === pas["WEBLib.Controls"].TElementFont.efProperty) this.SetHTMLElementFont(this.GetContentHandle(),this.FFont);
        if (this.FEllipsisPosition === $mod.TEllipsisPosition.epNone) {
          this.GetContentHandle().style.setProperty("text-overflow","clip")}
         else this.GetContentHandle().style.setProperty("text-overflow","ellipsis");
        if (this.FWordWrap) {
          this.GetContentHandle().style.setProperty("white-space","normal")}
         else this.GetContentHandle().style.setProperty("white-space","nowrap");
      };
    };
    this.SetAutoSize = function (AValue) {
      if (this.FAutoSize !== AValue) {
        this.FAutoSize = AValue;
        if (this.FAutoSize) {
          this.SetWidth(-1);
          this.SetHeight(-1);
          this.FEllipsisPosition = $mod.TEllipsisPosition.epNone;
        };
        this.UpdateElement();
      };
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        this.FCaption = AValue;
        this.UpdateElement();
      };
    };
    this.SetEllipsisPosition = function (AValue) {
      if (this.FEllipsisPosition !== AValue) {
        this.FEllipsisPosition = AValue;
        if (this.FEllipsisPosition !== $mod.TEllipsisPosition.epNone) this.FAutoSize = false;
        this.UpdateElement();
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FAutoSize = true;
      this.FLayout = $mod.TTextLayout.tlTop;
      this.FCaption = "";
      this.FEllipsisPosition = $mod.TEllipsisPosition.epNone;
      this.FTransparent = true;
      this.SetColor(16777215);
      this.FAlignment = pas.Classes.TAlignment.taLeftJustify;
      this.SetTabStop(false);
    };
  });
  rtl.createClass($mod,"TLabel",$mod.TCustomLabel,function () {
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("Alignment",2,pas.Classes.$rtti["TAlignment"],"FAlignment","SetAlignment");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize");
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("EllipsisPosition",2,$mod.$rtti["TEllipsisPosition"],"FEllipsisPosition","SetEllipsisPosition");
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Layout",2,$mod.$rtti["TTextLayout"],"FLayout","SetLayout");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Transparent",0,rtl.boolean,"FTransparent","FTransparent");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WordWrap",0,rtl.boolean,"FWordWrap","FWordWrap");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
  });
  rtl.createClass($mod,"TCustomInput",pas["WEBLib.Controls"].TCustomControl,function () {
    this.GetInputType = function () {
      var Result = "";
      Result = "EDIT";
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("INPUT");
      Result.setAttribute("type",this.GetInputType());
      return Result;
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.apply(this,arguments);
      if (this.FContainer != null) {
        if (this.FColor !== 16777215) this.FContainer.style.setProperty("background-Color",pas["WEBLib.Graphics"].ColorToHTML(this.FColor));
        this.FContainer.style.setProperty("-moz-box-sizing","border-box");
        this.FContainer.style.setProperty("-webkit-box-sizing","border-box");
        this.FContainer.style.setProperty("box-sizing","border-box");
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.SetShowFocus(true);
    };
  });
  rtl.createClass($mod,"TCustomEdit",$mod.TCustomInput,function () {
    this.$init = function () {
      $mod.TCustomInput.$init.call(this);
      this.FCharCase = 0;
      this.FMaxLength = 0;
      this.FReadOnly = false;
      this.FText = "";
      this.FTextHint = "";
      this.FSelStart = 0;
      this.FAlignment = 0;
      this.FHideSelection = false;
      this.FPasswordChar = "";
      this.FOnChange = null;
      this.FAutoSize = false;
      this.FAutoSelect = false;
      this.FSelLength = 0;
      this.FNumeric = false;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      $mod.TCustomInput.$final.call(this);
    };
    this.SetAlignment = function (Value) {
      this.FAlignment = Value;
      this.UpdateElement();
    };
    this.SetHideSelection = function (Value) {
      this.FHideSelection = Value;
      this.UpdateElement();
    };
    this.SetAutoSelect = function (Value) {
      this.FAutoSelect = Value;
      this.UpdateElement();
    };
    this.SetAutoSize = function (Value) {
      this.FAutoSize = Value;
      this.UpdateElement();
    };
    this.GetElementInputHandle = function () {
      var Result = null;
      Result = this.FContainer;
      return Result;
    };
    this.SetPasswordChar = function (Value) {
      this.FPasswordChar = Value;
      this.UpdateElement();
    };
    this.GetInputType = function () {
      var Result = "";
      if (this.FPasswordChar !== "") {
        Result = "PASSWORD"}
       else if (this.FNumeric) {
        Result = "NUMBER"}
       else Result = "TEXT";
      return Result;
    };
    this.PersistinHTML = function () {
      this.GetElementInputHandle().setAttribute("value",this.GetText());
    };
    this.DisableTab = function () {
      pas["WEBLib.Controls"].TControl.DisableTab.apply(this,arguments);
      this.FContainer.setAttribute("tabindex","-1");
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FText;
      if (this.GetElementInputHandle() != null) Result = this.GetElementInputHandle().value;
      return Result;
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = this.FText;
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.IsReadOnly = function () {
      var Result = false;
      Result = this.FReadOnly;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.apply(this,arguments);
      if (this.GetElementInputHandle() != null) {
        this.GetElementInputHandle().oninput = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.apply(this,arguments);
      if (this.GetElementInputHandle() != null) {
        var $tmp1 = this.FCharCase;
        if ($tmp1 === $mod.TEditCharCase.wecUpperCase) {
          this.GetElementInputHandle().style.setProperty("text-transform","uppercase")}
         else if ($tmp1 === $mod.TEditCharCase.wecLowerCase) {
          this.GetElementInputHandle().style.setProperty("text-transform","lowercase")}
         else if ($tmp1 === $mod.TEditCharCase.wecMixedCase) {
          this.GetElementInputHandle().style.setProperty("text-transform","capitalize")}
         else if ($tmp1 === $mod.TEditCharCase.wecNormal) this.GetElementInputHandle().style.setProperty("text-transform","initial");
        this.GetElementInputHandle().readOnly = this.IsReadOnly();
        this.GetElementInputHandle().placeholder = this.FTextHint;
        this.GetElementInputHandle().setAttribute("type",this.GetInputType());
        if (this.FMaxLength <= 0) {
          this.GetElementInputHandle().removeAttribute("maxLength")}
         else this.GetElementInputHandle().maxLength = this.FMaxLength;
        this.GetElementInputHandle().value = this.GetDisplayText();
        if (!this.FNumeric) this.GetElementInputHandle().setSelectionRange(this.FSelStart,this.FSelStart + this.FSelLength);
      };
    };
    this.SetCharCase = function (AValue) {
      this.FCharCase = AValue;
      this.UpdateElement();
    };
    this.SetMaxLength = function (AValue) {
      this.FMaxLength = AValue;
      this.UpdateElement();
    };
    this.SetReadOnly = function (AValue) {
      this.FReadOnly = AValue;
      this.UpdateElement();
    };
    this.SetText = function (AValue) {
      this.FText = AValue;
      this.UpdateElement();
    };
    this.SetTextHint = function (AValue) {
      this.FTextHint = AValue;
      this.UpdateElement();
    };
    this.CreateInitialize = function () {
      $mod.TCustomInput.CreateInitialize.apply(this,arguments);
      this.FText = "";
      this.FCharCase = $mod.TEditCharCase.wecNormal;
      this.FMaxLength = 0;
      this.FReadOnly = false;
      this.FTextHint = "";
    };
    this.Change = function () {
      if (this.GetElementHandle() != null) this.FText = this.GetElementInputHandle().value;
      if (this.FOnChange != null) this.FOnChange(this);
    };
  });
  rtl.createClass($mod,"TEdit",$mod.TCustomEdit,function () {
    var $r = this.$rtti;
    $r.addProperty("Alignment",2,pas.Classes.$rtti["TAlignment"],"FAlignment","SetAlignment");
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize");
    $r.addProperty("AutoSelect",2,rtl.boolean,"FAutoSelect","SetAutoSelect");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("CharCase",2,$mod.$rtti["TEditCharCase"],"FCharCase","SetCharCase");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("HideSelection",2,rtl.boolean,"FHideSelection","SetHideSelection");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("PasswordChar",2,rtl.char,"FPasswordChar","SetPasswordChar");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("MaxLength",2,rtl.longint,"FMaxLength","SetMaxLength");
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("TextHint",2,rtl.string,"FTextHint","SetTextHint");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TDateTimePicker",$mod.TCustomInput,function () {
    this.$init = function () {
      $mod.TCustomInput.$init.call(this);
      this.FDate = 0.0;
      this.FKind = 0;
      this.FTime = 0.0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      $mod.TCustomInput.$final.call(this);
    };
    this.SetDate = function (AValue) {
      if (this.FDate !== AValue) {
        this.FDate = AValue;
        this.UpdateElement();
      };
    };
    this.GetDate = function () {
      var Result = 0.0;
      var str = "";
      var ye = "";
      var mo = "";
      var da = "";
      Result = this.FTime;
      if (!(this.FContainer != null)) return Result;
      str = this.FContainer.value;
      ye = pas.System.Copy(str,1,4);
      mo = pas.System.Copy(str,6,2);
      da = pas.System.Copy(str,9,2);
      Result = pas.SysUtils.EncodeDate(pas.SysUtils.StrToInt(ye),pas.SysUtils.StrToInt(mo),pas.SysUtils.StrToInt(da));
      return Result;
    };
    this.SetTime = function (AValue) {
      if (this.FTime !== AValue) {
        this.FTime = AValue;
        this.UpdateElement();
      };
    };
    this.GetTime = function () {
      var Result = 0.0;
      var str = "";
      var d = 0.0;
      Result = this.FTime;
      if (!(this.FContainer != null)) return Result;
      str = this.FContainer.value;
      if (pas.SysUtils.TryStrToTime(str,{get: function () {
          return d;
        }, set: function (v) {
          d = v;
        }})) Result = d;
      return Result;
    };
    this.SetKind = function (AValue) {
      this.FKind = AValue;
      if (this.FContainer != null) {
        if (AValue === $mod.TDateTimeKind.dtkDate) {
          this.FContainer.setAttribute("type","DATE")}
         else this.FContainer.setAttribute("type","TIME");
      };
    };
    this.SetText = function (Value) {
      if (!(this.FContainer != null)) return;
    };
    this.GetText = function () {
      var Result = "";
      Result = "";
      if (!(this.FContainer != null)) return Result;
      Result = this.FContainer.value;
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.apply(this,arguments);
      if (this.FContainer != null) {
        this.FContainer.oninput = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.apply(this,arguments);
      if (this.FContainer != null) {
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TDateTimeKind.dtkTime) {
          this.FContainer.value = pas.SysUtils.FormatDateTime(pas.SysUtils.LongTimeFormat,this.FTime)}
         else if ($tmp1 === $mod.TDateTimeKind.dtkDate) this.FContainer.value = pas.SysUtils.FormatDateTime("yyyy-MM-dd",this.FDate);
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = $mod.TCustomInput.CreateElement.call(this);
      if (this.FContainer != null) this.FContainer.setAttribute("step","1");
      return Result;
    };
    this.GetInputType = function () {
      var Result = "";
      if (this.FKind === $mod.TDateTimeKind.dtkDate) {
        Result = "DATE"}
       else Result = "TIME";
      return Result;
    };
    this.Change = function () {
      this.FTime = this.GetTime();
      this.FDate = this.GetDate();
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.CreateInitialize = function () {
      $mod.TCustomInput.CreateInitialize.apply(this,arguments);
      this.SetDate(pas.SysUtils.Now());
      this.SetShowFocus(true);
    };
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("date",3,pas.System.$rtti["TDateTime"],"GetDate","SetDate");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Kind",2,$mod.$rtti["TDateTimeKind"],"FKind","SetKind");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("Time",3,pas.System.$rtti["TDateTime"],"GetTime","SetTime");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TCheckBox",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FCaption = "";
      this.FChecked = false;
      this.FState = 0;
    };
    this.Loaded = function () {
      var lbl = null;
      pas["WEBLib.Controls"].TCustomControl.Loaded.apply(this,arguments);
      if (this.FContainer != null) {
        lbl = this.FContainer.children.item(1);
        lbl.onclick = rtl.createCallback(this,"HandleLabelClick");
      };
    };
    this.UpdateElementData = function () {
      var chk = null;
      pas["WEBLib.Controls"].TControl.UpdateElementData.apply(this,arguments);
      if (this.FContainer != null) {
        chk = this.FContainer.firstElementChild;
        chk.disabled = !this.FEnabled;
        chk.checked = this.FChecked;
        chk.indeterminate = this.GetState() === $mod.TCheckBoxState.cbGrayed;
      };
    };
    this.UpdateElementSize = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementSize.apply(this,arguments);
      if ((this.FHeightStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) && (this.GetElementHandle() != null)) {
        this.GetElementHandle().style.setProperty("height","");
      };
    };
    this.PersistinHTML = function () {
      var cb = null;
      if (!(this.FContainer != null)) return;
      cb = this.FContainer.firstElementChild;
      if (cb.checked) {
        cb.setAttribute("checked","checked")}
       else cb.removeAttribute("checked");
    };
    this.DisableTab = function () {
      var cb = null;
      pas["WEBLib.Controls"].TControl.DisableTab.apply(this,arguments);
      if (!(this.FContainer != null)) return;
      cb = this.FContainer.firstElementChild;
      cb.setAttribute("tabindex","-1");
    };
    this.CreateElement = function () {
      var Result = null;
      var btn = null;
      var lbl = null;
      Result = document.createElement("SPAN");
      btn = document.createElement("INPUT");
      lbl = document.createElement("SPAN");
      btn.setAttribute("TYPE","CHECKBOX");
      btn.setAttribute("id",this.GetID());
      lbl.setAttribute("id",this.GetID() + "lbl");
      lbl.setAttribute("value",this.GetID());
      btn.style.setProperty("vertical-align","middle");
      lbl.style.setProperty("vertical-align","middle");
      Result.appendChild(btn);
      Result.appendChild(lbl);
      return Result;
    };
    this.SetChecked = function (AValue) {
      this.FChecked = AValue;
      this.UpdateElement();
    };
    this.GetChecked = function () {
      var Result = false;
      if (this.FContainer != null) this.FChecked = this.FContainer.firstElementChild.checked;
      Result = this.FChecked;
      return Result;
    };
    this.SetState = function (AValue) {
      this.FState = AValue;
      this.FChecked = this.FState === $mod.TCheckBoxState.cbChecked;
      this.UpdateElement();
    };
    this.GetState = function () {
      var Result = 0;
      Result = this.FState;
      return Result;
    };
    this.SetCaption = function (AValue) {
      this.FCaption = AValue;
      if (this.FContainer != null) this.FContainer.lastElementChild.innerHTML = AValue;
    };
    this.SetEnabled = function (Value) {
      pas["WEBLib.Controls"].TControl.SetEnabled.apply(this,arguments);
      if (this.FContainer != null) this.FContainer.firstElementChild.disabled = !Value;
    };
    this.HandleLabelClick = function (Event) {
      var Result = false;
      var chk = null;
      if (this.FContainer != null) {
        chk = this.FContainer.firstElementChild;
        chk.checked = !chk.checked;
      };
      Result = true;
      return Result;
    };
    this.Click = function () {
      pas["WEBLib.Controls"].TControl.Click.apply(this,arguments);
      this.FChecked = this.GetChecked();
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FCaption = this.GetID();
      this.SetShowFocus(true);
    };
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("Checked",3,rtl.boolean,"GetChecked","SetChecked");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("State",3,$mod.$rtti["TCheckBoxState"],"GetState","SetState");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TRadioButton",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FCaption = "";
      this.FChecked = false;
      this.FGroupName = "";
    };
    this.Loaded = function () {
      var lbl = null;
      pas["WEBLib.Controls"].TCustomControl.Loaded.apply(this,arguments);
      if (this.FContainer != null) {
        lbl = this.FContainer.children.item(1);
        if (lbl != null) lbl.onclick = rtl.createCallback(this,"HandleLabelClick");
      };
    };
    this.PersistinHTML = function () {
      var rb = null;
      if (!(this.FContainer != null)) return;
      rb = this.FContainer.firstElementChild;
      if (rb.checked) {
        rb.setAttribute("checked","checked")}
       else rb.removeAttribute("checked");
    };
    this.DisableTab = function () {
      var rb = null;
      pas["WEBLib.Controls"].TControl.DisableTab.apply(this,arguments);
      if (!(this.FContainer != null)) return;
      rb = this.FContainer.firstElementChild;
      rb.setAttribute("tabindex","-1");
    };
    this.CreateElement = function () {
      var Result = null;
      var btn = null;
      var lbl = null;
      Result = document.createElement("LABEL");
      btn = document.createElement("INPUT");
      lbl = document.createElement("SPAN");
      btn.setAttribute("TYPE","RADIO");
      btn.setAttribute("id",this.GetID() + "rd");
      btn.setAttribute("name",this.FGroupName);
      btn.disabled = !this.FEnabled;
      btn.style.setProperty("vertical-align","middle");
      btn.style.setProperty("margin-top","-2px");
      lbl.setAttribute("id",this.GetID() + "lbl");
      lbl.setAttribute("value",this.GetID());
      Result.appendChild(btn);
      Result.appendChild(lbl);
      return Result;
    };
    this.SetChecked = function (AValue) {
      this.FChecked = AValue;
      if (this.FContainer != null) this.FContainer.firstElementChild.checked = AValue;
    };
    this.GetChecked = function () {
      var Result = false;
      Result = this.FChecked;
      if (this.FContainer != null) Result = this.FContainer.firstElementChild.checked;
      return Result;
    };
    this.SetEnabled = function (Value) {
      pas["WEBLib.Controls"].TControl.SetEnabled.apply(this,arguments);
      if (this.FContainer != null) this.FContainer.firstElementChild.disabled = !Value;
    };
    this.SetCaption = function (AValue) {
      this.FCaption = AValue;
      if (this.FContainer != null) this.FContainer.lastElementChild.innerHTML = AValue;
    };
    this.SetGroupName = function (AValue) {
      this.FGroupName = AValue;
      if (this.FContainer != null) this.FContainer.firstElementChild.setAttribute("name",AValue);
    };
    this.HandleLabelClick = function (Event) {
      var Result = false;
      var rb = null;
      if (this.FContainer != null) {
        rb = this.FContainer.firstElementChild;
        rb.checked = true;
      };
      Result = true;
      return Result;
    };
    this.UpdateElementSize = function () {
      var el = null;
      pas["WEBLib.Controls"].TControl.UpdateElementSize.apply(this,arguments);
      el = document.getElementById(this.GetID() + "rd");
      if (el != null) {
        el.style.setProperty("height",pas.SysUtils.IntToStr(this.GetHeight()) + "px");
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FCaption = this.GetID();
      this.FGroupName = "";
      this.SetShowFocus(true);
    };
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Checked",3,rtl.boolean,"GetChecked","SetChecked");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("GroupName",2,rtl.string,"FGroupName","SetGroupName");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TCustomComboBox",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FItems = null;
      this.FItemIndex = 0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.GetText = function () {
      var Result = "";
      if (this.GetItemIndex() >= 0) {
        Result = this.FItems.Get(this.GetItemIndex())}
       else Result = "";
      return Result;
    };
    this.SetText = function (Value) {
      var I = 0;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Value === this.FItems.Get(I)) this.SetItemIndex(I);
      };
    };
    this.GetElementSelectHandle = function () {
      var Result = null;
      Result = this.FContainer;
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.DoItemsChange = function (Sender) {
      this.DoUpdateList();
    };
    this.DoUpdateList = function () {
      var i = 0;
      var s = "";
      var opt = null;
      if (!(this.FContainer != null)) return;
      for (var $l1 = this.FContainer.options.length - 1; $l1 >= 0; $l1--) {
        i = $l1;
        this.FContainer.remove(i);
      };
      for (var $l2 = 0, $end3 = this.FItems.GetCount() - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        s = this.FItems.Get(i);
        opt = document.createElement("OPTION");
        opt.setAttribute("value",s);
        opt.innerHTML = s;
        this.FContainer.appendChild(opt);
      };
      this.UpdateElement();
    };
    this.GetItemIndex = function () {
      var Result = 0;
      Result = this.FItemIndex;
      if (this.FContainer != null) Result = this.FContainer.selectedIndex;
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SELECT");
      return Result;
    };
    this.DisableTab = function () {
      pas["WEBLib.Controls"].TControl.DisableTab.apply(this,arguments);
      if (this.FContainer != null) this.FContainer.setAttribute("tabindex","-1");
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.apply(this,arguments);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().onchange = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.apply(this,arguments);
      if (this.GetElementSelectHandle() != null) this.GetElementSelectHandle().selectedIndex = this.FItemIndex;
    };
    this.SetItems = function (AItems) {
      this.FItems.Assign(AItems);
    };
    this.SetItemIndex = function (AIndex) {
      if (this.FItemIndex !== AIndex) {
        this.FItemIndex = AIndex;
        this.UpdateElement();
      };
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.apply(this,arguments);
      this.DoUpdateList();
    };
    this.Change = function () {
      this.FItemIndex = this.GetItemIndex();
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.PersistinHTML = function () {
      var sel = null;
      pas["WEBLib.Controls"].TControl.PersistinHTML.apply(this,arguments);
      sel = this.GetElementHandle().children.item(this.GetItemIndex());
      sel.setAttribute("selected","selected");
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FItems = pas.Classes.TStringList.$create("Create$1");
      this.FItems.FOnChange = rtl.createCallback(this,"DoItemsChange");
      this.SetShowFocus(true);
    };
    this.Destroy = function () {
      rtl.free(this,"FItems");
      pas["WEBLib.Controls"].TCustomControl.Destroy.apply(this,arguments);
    };
    this.Clear = function () {
      this.FItems.Clear();
    };
  });
  rtl.createClass($mod,"TComboBox",$mod.TCustomComboBox,function () {
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex");
    $r.addProperty("Items",2,pas.Classes.$rtti["TStringList"],"FItems","SetItems");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TCustomMemo",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FBlockChange = false;
      this.FLines = null;
      this.FSelStart = 0;
      this.FSelLength = 0;
      this.FAutoSize = false;
      this.FOnChange = null;
      this.FReadOnly = false;
    };
    this.$final = function () {
      this.FLines = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.GetText = function () {
      var Result = "";
      if (this.GetElementInputHandle() != null) {
        this.FBlockChange = true;
        this.FLines.SetTextStr(this.GetElementInputHandle().value);
        this.FBlockChange = false;
      };
      Result = this.FLines.GetTextStr();
      return Result;
    };
    this.SetText = function (Value) {
      this.FLines.SetTextStr(Value);
    };
    this.SetSelLength = function (Value) {
      if (this.FSelLength !== Value) {
        this.FSelLength = Value;
        this.UpdateElement();
      };
    };
    this.SetSelStart = function (Value) {
      if (this.FSelStart !== Value) {
        this.FSelStart = Value;
        this.UpdateElement();
      };
    };
    this.SetAutoSize = function (Value) {
      if (this.FAutoSize !== Value) {
        this.FAutoSize = Value;
        this.UpdateElement();
      };
    };
    this.GetElementInputHandle = function () {
      var Result = null;
      Result = this.FContainer;
      return Result;
    };
    this.SetReadOnly = function (Value) {
      if (this.FReadOnly !== Value) {
        this.FReadOnly = Value;
        this.UpdateElement();
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("TEXTAREA");
      return Result;
    };
    this.DoHandleInput = function (Event) {
      var Result = false;
      this.GetText();
      this.Change();
      Result = true;
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.IsReadOnly = function () {
      var Result = false;
      Result = this.FReadOnly;
      return Result;
    };
    this.PersistinHTML = function () {
      this.GetElementInputHandle().innerHTML = this.FLines.GetTextStr();
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = this.FLines.GetTextStr();
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.apply(this,arguments);
      if (this.GetElementInputHandle() != null) this.GetElementInputHandle().oninput = rtl.createCallback(this,"DoHandleInput");
      if (this.GetElementInputHandle() != null) this.GetElementInputHandle().onchange = rtl.createCallback(this,"DoHandleChange");
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.apply(this,arguments);
      if ((this.GetElementInputHandle() != null) && !this.FBlockChange) {
        this.GetElementInputHandle().value = this.GetDisplayText();
        this.GetElementInputHandle().setSelectionRange(this.FSelStart,this.FSelStart + this.FSelLength);
        this.GetElementInputHandle().style.setProperty("resize","none");
        this.GetElementInputHandle().readOnly = this.IsReadOnly();
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.apply(this,arguments);
      if ((this.GetElementInputHandle() != null) && !this.FBlockChange) {
        this.GetElementInputHandle().style.setProperty("overflow","");
      };
    };
    this.SetLines = function (ALines) {
      this.FLines.Assign(ALines);
    };
    this.DoLinesChange = function (Sender) {
      this.UpdateElement();
    };
    this.Change = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FLines = pas.Classes.TStringList.$create("Create$1");
      this.FLines.FOnChange = rtl.createCallback(this,"DoLinesChange");
      this.SetShowFocus(true);
    };
    this.Destroy = function () {
      rtl.free(this,"FLines");
      pas["WEBLib.Controls"].TCustomControl.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TMemo",$mod.TCustomMemo,function () {
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Lines",2,pas.Classes.$rtti["TStringList"],"FLines","SetLines");
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly");
    $r.addProperty("SelStart",2,rtl.longint,"FSelStart","SetSelStart");
    $r.addProperty("SelLength",2,rtl.longint,"FSelLength","SetSelLength");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TScrollBarContent",pas["WEBLib.Controls"].TCustomControl,function () {
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
  });
  this.TScrollBarKind = {"0": "sbHorizontal", sbHorizontal: 0, "1": "sbVertical", sbVertical: 1};
  $mod.$rtti.$Enum("TScrollBarKind",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TScrollBarKind});
  rtl.createClass($mod,"TScrollBar",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FScrolling = false;
      this.FContent = null;
      this.FKind = 0;
      this.FPosition = 0;
      this.FSmallChange = 0;
      this.FMax = 0;
      this.FMin = 0;
      this.FLargeChange = 0;
      this.FPageSize = 0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FContent = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetKind = function (Value) {
      if (this.FKind !== Value) {
        this.FKind = Value;
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          this.SetBounds(this.GetLeft(),this.GetTop(),this.GetHeight(),17);
        } else if ($tmp1 === $mod.TScrollBarKind.sbVertical) {
          this.SetBounds(this.GetLeft(),this.GetTop(),17,this.GetWidth());
        };
        this.UpdateElement();
        this.UpdateContent();
      };
    };
    this.SetPosition = function (Value) {
      if (this.FPosition !== Value) {
        this.FPosition = Value;
        this.UpdateContent();
      };
    };
    this.SetMax = function (Value) {
      if (this.FMax !== Value) {
        this.FMax = Value;
        this.UpdateContent();
      };
    };
    this.SetMin = function (Value) {
      if (this.FMin !== Value) {
        this.FMin = Value;
        this.UpdateContent();
      };
    };
    this.SetPageSize = function (Value) {
      if (this.FPageSize !== Value) {
        this.FPageSize = Value;
        this.UpdateContent();
      };
    };
    this.GetPosition = function () {
      var Result = 0;
      Result = 0;
      if (this.GetElement() != null) {
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          Result = Math.round(this.GetValue(this.GetElement().scrollLeft))}
         else if ($tmp1 === $mod.TScrollBarKind.sbVertical) Result = Math.round(this.GetValue(this.GetElement().scrollTop));
      };
      return Result;
    };
    this.GetPageSize = function () {
      var Result = 0;
      Result = this.FPageSize;
      if (Result === 0) Result = 25;
      return Result;
    };
    this.GetValue = function (XYPos) {
      var Result = 0.0;
      Result = 0;
      if (this.FContent != null) {
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          Result = (XYPos / this.FContent.GetWidth()) * (this.FMax - this.FMin)}
         else if ($tmp1 === $mod.TScrollBarKind.sbVertical) Result = (XYPos / this.FContent.GetHeight()) * (this.FMax - this.FMin);
      };
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    this.DoScroll = function (Event) {
      var Result = false;
      this.FScrolling = true;
      if (this.FOnChange != null) this.FOnChange(this);
      this.FScrolling = false;
      Result = true;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.apply(this,arguments);
      if (this.GetElementHandle() != null) this.GetElementHandle().onscroll = rtl.createCallback(this,"DoScroll");
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.apply(this,arguments);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().style.setProperty("overflow","auto");
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          this.GetElementHandle().style.setProperty("overflow-y","hidden");
          this.GetElementHandle().style.setProperty("overflow-x","");
        } else if ($tmp1 === $mod.TScrollBarKind.sbVertical) {
          this.GetElementHandle().style.setProperty("overflow-y","");
          this.GetElementHandle().style.setProperty("overflow-x","hidden");
        };
      };
    };
    this.UpdateContent = function () {
      var x = 0;
      var y = 0;
      var w = 0;
      var h = 0;
      var ps = 0;
      var v = 0.0;
      if (((!(this.FContent != null) || !(this.GetElementHandle() != null)) || (pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) || this.FScrolling) return;
      ps = this.GetPageSize();
      v = (this.FMax - this.FMin) / ps;
      var $tmp1 = this.FKind;
      if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
        y = 0;
        h = this.GetHeight();
        w = Math.round(v * this.GetWidth());
        x = Math.round(((this.FPosition - this.FMin) / (this.FMax - this.FMin)) * w);
      } else if ($tmp1 === $mod.TScrollBarKind.sbVertical) {
        x = 0;
        w = this.GetWidth();
        h = Math.round(v * this.GetHeight());
        y = Math.round(((this.FPosition - this.FMin) / (this.FMax - this.FMin)) * h);
      };
      this.FContent.SetBounds(0,0,w,h);
      this.GetElementHandle().scrollLeft = x;
      this.GetElementHandle().scrollTop = y;
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.apply(this,arguments);
      this.UpdateContent();
    };
    this.SetBounds = function (X, Y, AWidth, AHeight) {
      pas["WEBLib.Controls"].TControl.SetBounds.apply(this,arguments);
      this.UpdateContent();
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.SetTabStop(true);
      this.FKind = $mod.TScrollBarKind.sbHorizontal;
      this.FPosition = 0;
      this.FMin = 0;
      this.FMax = 100;
      this.FSmallChange = 1;
      this.FLargeChange = 1;
      this.FContent = $mod.TScrollBarContent.$create("Create$1",[this]);
      this.FContent.SetParent(this);
      this.FContent.SetWidth(121);
      this.FContent.SetHeight(17);
      this.SetWidth(121);
      this.SetHeight(17);
      this.UpdateContent();
    };
    this.Destroy = function () {
      rtl.free(this,"FContent");
      pas["WEBLib.Controls"].TCustomControl.Destroy.apply(this,arguments);
    };
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Kind",2,$mod.$rtti["TScrollBarKind"],"FKind","SetKind");
    $r.addProperty("Position",3,rtl.longint,"GetPosition","SetPosition");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("SmallChange",0,rtl.longint,"FSmallChange","FSmallChange");
    $r.addProperty("LargeChange",0,rtl.longint,"FLargeChange","FLargeChange");
    $r.addProperty("Max",2,rtl.longint,"FMax","SetMax");
    $r.addProperty("Min",2,rtl.longint,"FMin","SetMin");
    $r.addProperty("PageSize",3,rtl.longint,"GetPageSize","SetPageSize");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
});
rtl.module("WEBLib.Controls",["System","Classes","WEBLib.Graphics","Types","SysUtils","Web"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.VK_TAB = 9;
  this.VK_RETURN = 13;
  this.VK_ESCAPE = 27;
  this.VK_SPACE = 32;
  this.VK_PRIOR = 33;
  this.VK_NEXT = 34;
  this.VK_END = 35;
  this.VK_HOME = 36;
  this.VK_LEFT = 37;
  this.VK_UP = 38;
  this.VK_RIGHT = 39;
  this.VK_DOWN = 40;
  this.VK_INSERT = 45;
  this.VK_DELETE = 46;
  this.VK_F2 = 113;
  this.VK_F4 = 115;
  this.crDefault = 0;
  this.crNone = 1;
  this.crArrow = 2;
  this.crCross = 3;
  this.crIBeam = 4;
  this.crSize = 22;
  this.crSizeNESW = 6;
  this.crSizeNS = 7;
  this.crSizeNWSE = 8;
  this.crSizeWE = 9;
  this.crUpArrow = 10;
  this.crHourGlass = 11;
  this.crDrag = 12;
  this.crNoDrop = 13;
  this.crHSplit = 14;
  this.crVSplit = 15;
  this.crMultIDrag = 16;
  this.crSQLWait = 17;
  this.crNo = 18;
  this.crAppStart = 19;
  this.crHelp = 20;
  this.crHandPoint = 21;
  this.crSizeAll = 22;
  this.TAlign = {"0": "alNone", alNone: 0, "1": "alTop", alTop: 1, "2": "alBottom", alBottom: 2, "3": "alLeft", alLeft: 3, "4": "alRight", alRight: 4, "5": "alClient", alClient: 5, "6": "alCustom", alCustom: 6};
  $mod.$rtti.$Enum("TAlign",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TAlign});
  this.TMouseButton = {"0": "mbLeft", mbLeft: 0, "1": "mbRight", mbRight: 1, "2": "mbMiddle", mbMiddle: 2};
  $mod.$rtti.$Enum("TMouseButton",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TMouseButton});
  this.TBorderStyle = {"0": "bsNone", bsNone: 0, "1": "bsSingle", bsSingle: 1};
  $mod.$rtti.$Enum("TBorderStyle",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TBorderStyle});
  this.TSizeStyle = {"0": "ssPercent", ssPercent: 0, "1": "ssAbsolute", ssAbsolute: 1, "2": "ssAuto", ssAuto: 2};
  $mod.$rtti.$Enum("TSizeStyle",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TSizeStyle});
  this.TAnchorKind = {"0": "akLeft", akLeft: 0, "1": "akTop", akTop: 1, "2": "akRight", akRight: 2, "3": "akBottom", akBottom: 3};
  $mod.$rtti.$Enum("TAnchorKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TAnchorKind});
  $mod.$rtti.$Set("TAnchors",{comptype: $mod.$rtti["TAnchorKind"]});
  this.TElementFont = {"0": "efProperty", efProperty: 0, "1": "efCSS", efCSS: 1};
  $mod.$rtti.$Enum("TElementFont",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TElementFont});
  this.TElementPosition = {"0": "epAbsolute", epAbsolute: 0, "1": "epRelative", epRelative: 1, "2": "epNone", epNone: 2};
  $mod.$rtti.$Enum("TElementPosition",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TElementPosition});
  this.TShiftState$a = {"0": "ssShift", ssShift: 0, "1": "ssAlt", ssAlt: 1, "2": "ssCtrl", ssCtrl: 2, "3": "ssLeft", ssLeft: 3, "4": "ssRight", ssRight: 4, "5": "ssMIDdle", ssMIDdle: 5, "6": "ssDouble", ssDouble: 6, "7": "ssTouch", ssTouch: 7, "8": "ssPen", ssPen: 8, "9": "ssCommand", ssCommand: 9};
  $mod.$rtti.$Enum("TShiftState$a",{minvalue: 0, maxvalue: 9, ordtype: 1, enumtype: this.TShiftState$a});
  $mod.$rtti.$Set("TShiftState",{comptype: $mod.$rtti["TShiftState$a"]});
  $mod.$rtti.$MethodVar("TNotifyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Button",$mod.$rtti["TMouseButton"]],["Shift",$mod.$rtti["TShiftState"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseWheelEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Shift",$mod.$rtti["TShiftState"]],["WheelDelta",rtl.longint],["MousePos",pas.Types.$rtti["TPoint"]],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseMoveEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Shift",$mod.$rtti["TShiftState"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TKeyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AKey",rtl.word,1],["Shift",$mod.$rtti["TShiftState"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TKeyPressEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AChar",rtl.char,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTouchEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  this.TControlStyleValue = {"0": "csAcceptsControls", csAcceptsControls: 0};
  rtl.createClass($mod,"TMargins",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOnChange = null;
      this.FLeft = 0;
      this.FTop = 0;
      this.FRight = 0;
      this.FBottom = 0;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetLeft = function (Value) {
      if (Value !== this.FLeft) {
        this.FLeft = Value;
        this.DoChange();
      };
    };
    this.SetTop = function (Value) {
      if (Value !== this.FTop) {
        this.FTop = Value;
        this.DoChange();
      };
    };
    this.SetRight = function (Value) {
      if (Value !== this.FRight) {
        this.FRight = Value;
        this.DoChange();
      };
    };
    this.SetBottom = function (Value) {
      if (Value !== this.FBottom) {
        this.FBottom = Value;
        this.DoChange();
      };
    };
    this.DoChange = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function () {
      this.FLeft = 3;
      this.FTop = 3;
      this.FBottom = 3;
      this.FRight = 3;
    };
    var $r = this.$rtti;
    $r.addProperty("Left",2,rtl.longint,"FLeft","SetLeft",{Default: 3});
    $r.addProperty("Top",2,rtl.longint,"FTop","SetTop",{Default: 3});
    $r.addProperty("Right",2,rtl.longint,"FRight","SetRight",{Default: 3});
    $r.addProperty("Bottom",2,rtl.longint,"FBottom","SetBottom",{Default: 3});
  });
  rtl.createClass($mod,"TControl",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FMouseInsideLayer = false;
      this.FLayer = null;
      this.FCaptured = false;
      this.FControlCreated = false;
      this.FUpdateCount = 0;
      this.FBlockUpdateElement = false;
      this.FElement = null;
      this.FID = "";
      this.FNew = false;
      this.FContainer = null;
      this.FElementEvent = null;
      this.FElementClassName = "";
      this.FColor = 0;
      this.FFont = null;
      this.FParent = null;
      this.FPrevParent = null;
      this.FControls = [];
      this.FOnClick = null;
      this.FOnDblClick = null;
      this.FOnMouseDown = null;
      this.FOnMouseUp = null;
      this.FOnMouseMove = null;
      this.FOnKeyDown = null;
      this.FOnKeyUp = null;
      this.FOnKeyPress = null;
      this.FOnEnter = null;
      this.FOnExit = null;
      this.FEnabled = false;
      this.FHint = "";
      this.FShowHint = false;
      this.FTabOrder = 0;
      this.FTabStop = false;
      this.FVisible = false;
      this.FWidth = 0;
      this.FHeight = 0;
      this.FTag$1 = 0;
      this.FAlign = 0;
      this.FAnchors = {};
      this.FAlignWithMargins = false;
      this.FIsAligning = false;
      this.FOnMouseEnter = null;
      this.FOnMouseLeave = null;
      this.FCursor = 0;
      this.FDoubleBuffered = false;
      this.FControlStyle = {};
      this.FMargins = null;
      this.FOnMouseWheel = null;
      this.FParentDoubleBuffered = false;
      this.FParentFont = false;
      this.FOnTouchMove = null;
      this.FOnTouchStart = null;
      this.FOnTouchEnd = null;
      this.FLinkTouchEvents = false;
      this.FWidthStyle = 0;
      this.FHeightStyle = 0;
      this.FWidthPercent = 0;
      this.FHeightPercent = 0;
      this.FOrigRect = new pas.Types.TRect();
      this.FOrigParentRect = new pas.Types.TRect();
      this.FIsResizing = false;
      this.FShowFocus = false;
      this.FBorderWidth = 0;
      this.FOrigTop = 0;
      this.FOrigLeft = 0;
      this.FUpdateTopLeft = false;
      this.FEnablePropagation = false;
      this.FScriptLoaded = false;
      this.FRequiredScripts = null;
      this.FElementFont = 0;
      this.FElementPosition = 0;
    };
    this.$final = function () {
      this.FLayer = undefined;
      this.FElement = undefined;
      this.FContainer = undefined;
      this.FElementEvent = undefined;
      this.FFont = undefined;
      this.FParent = undefined;
      this.FPrevParent = undefined;
      this.FControls = undefined;
      this.FOnClick = undefined;
      this.FOnDblClick = undefined;
      this.FOnMouseDown = undefined;
      this.FOnMouseUp = undefined;
      this.FOnMouseMove = undefined;
      this.FOnKeyDown = undefined;
      this.FOnKeyUp = undefined;
      this.FOnKeyPress = undefined;
      this.FOnEnter = undefined;
      this.FOnExit = undefined;
      this.FAnchors = undefined;
      this.FOnMouseEnter = undefined;
      this.FOnMouseLeave = undefined;
      this.FControlStyle = undefined;
      this.FMargins = undefined;
      this.FOnMouseWheel = undefined;
      this.FOnTouchMove = undefined;
      this.FOnTouchStart = undefined;
      this.FOnTouchEnd = undefined;
      this.FOrigRect = undefined;
      this.FOrigParentRect = undefined;
      this.FRequiredScripts = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.GetControlsCount = function () {
      var Result = 0;
      Result = rtl.length(this.FControls);
      return Result;
    };
    this.GetControls = function (Index) {
      var Result = null;
      Result = this.FControls[Index];
      return Result;
    };
    this.SetVisible = function (AValue) {
      if (this.FVisible !== AValue) {
        this.VisibleChanging();
        this.FVisible = AValue;
        this.UpdateElement();
        this.DoRealign();
      };
    };
    this.SetWidth = function (AValue) {
      if (this.FWidth !== AValue) {
        this.FWidth = AValue;
        this.DoBoundsChange();
      };
    };
    this.SetHeight = function (AValue) {
      var dr = null;
      if (this.FHeight !== AValue) {
        if ((this.FAlign in rtl.createSet($mod.TAlign.alLeft,$mod.TAlign.alRight,$mod.TAlign.alClient)) && (this.GetElementHandle() != null)) {
          dr = this.GetElementHandle().getBoundingClientRect();
          if ((dr.top + AValue) >= window.innerHeight) {
            AValue = Math.round(window.innerHeight - dr.top);
            if (this.FAlignWithMargins) AValue = (AValue - this.FMargins.FBottom) - this.FMargins.FTop;
          };
        };
        this.FHeight = AValue;
        this.DoBoundsChange();
      };
    };
    this.SetHint = function (AValue) {
      if (this.FHint !== AValue) {
        this.FHint = AValue;
        this.UpdateElement();
      };
    };
    this.SetShowHint = function (AValue) {
      if (this.FShowHint !== AValue) {
        this.FShowHint = AValue;
        this.UpdateElement();
      };
    };
    this.SetTabOrder = function (AValue) {
      if (this.FTabOrder !== AValue) {
        this.FTabOrder = AValue;
        this.UpdateElement();
      };
    };
    this.SetTabStop = function (AValue) {
      if (this.FTabStop !== AValue) {
        this.FTabStop = AValue;
        this.UpdateElement();
      };
    };
    this.SetAlign = function (Value) {
      if (this.FAlign !== Value) {
        this.FAlign = Value;
        this.DoRealign();
      };
    };
    this.SetAlignWithMargins = function (Value) {
      if (this.FAlignWithMargins !== Value) {
        this.FAlignWithMargins = Value;
        this.DoRealign();
      };
    };
    this.SetCursor = function (Value) {
      this.FCursor = Value;
      this.UpdateElement();
    };
    this.GetBoundsRect = function () {
      var Result = new pas.Types.TRect();
      Result.Left = this.GetLeft();
      Result.Top = this.GetTop();
      Result.Right = this.GetLeft() + this.GetWidth();
      Result.Bottom = this.GetTop() + this.GetHeight();
      return Result;
    };
    this.SetBoundsRect = function (Value) {
      this.SetBounds(Value.Left,Value.Top,Value.Right - Value.Left,Value.Bottom - Value.Top);
    };
    this.SetID = function (Value) {
      this.FID = Value;
      if (this.FContainer != null) this.FContainer.setAttribute("id",Value);
    };
    this.SetMargins = function (Value) {
      this.FMargins.Assign(Value);
    };
    this.SetAnchors = function (Value) {
      if (rtl.neSet(this.FAnchors,Value)) {
        this.FAnchors = rtl.refSet(Value);
        this.UpdateAnchoring();
      };
    };
    this.GetElementEvent = function () {
      var Result = null;
      Result = this.FElementEvent;
      return Result;
    };
    this.GetClientOrigin = function () {
      var Result = new pas.Types.TPoint();
      var r = null;
      Result = new pas.Types.TPoint(pas.Types.Point(0,0));
      if (this.GetElementHandle() != null) {
        r = this.GetElementHandle().getBoundingClientRect();
        Result = new pas.Types.TPoint(pas.Types.Point(Math.round(r.left),Math.round(r.top)));
      };
      return Result;
    };
    this.SetHeightStyle = function (Value) {
      if (this.FHeightStyle !== Value) {
        this.FHeightStyle = Value;
        this.UpdateElementSize();
      };
    };
    this.SetWidthStyle = function (Value) {
      if (this.FWidthStyle !== Value) {
        this.FWidthStyle = Value;
        this.UpdateElementSize();
      };
    };
    this.SetShowFocus = function (Value) {
      if (this.FShowFocus !== Value) {
        this.FShowFocus = Value;
        this.UpdateElement();
      };
    };
    this.GetIsLinked = function () {
      var Result = false;
      Result = !this.FNew;
      return Result;
    };
    this.SetElementFont = function (Value) {
      if (this.FElementFont !== Value) {
        this.FElementFont = Value;
        this.UpdateElement();
      };
    };
    this.SetElementPosition = function (Value) {
      if (this.FElementPosition !== Value) {
        this.FElementPosition = Value;
        this.UpdateElementSize();
        this.RecreateCanvas();
        this.InternalResize();
      };
    };
    this.SetEnabled = function (Value) {
      if (this.FEnabled !== Value) {
        this.FEnabled = Value;
        this.UpdateElement();
      };
    };
    this.SetBounds = function (X, Y, AWidth, AHeight) {
      if ((((X !== this.GetLeft()) || (Y !== this.GetTop())) || (AWidth !== this.GetWidth())) || (AHeight !== this.GetHeight())) {
        this.FBlockUpdateElement = true;
        this.SetLeft(X);
        this.SetTop(Y);
        this.SetWidth(AWidth);
        this.SetHeight(AHeight);
        this.Realign();
        this.FBlockUpdateElement = false;
        this.UpdateElementSize();
        this.RecreateCanvas();
        this.InternalResize();
      };
    };
    this.RecreateCanvas = function () {
    };
    this.VisibleChanging = function () {
    };
    this.GetWidth = function () {
      var Result = 0;
      Result = this.FWidth;
      if (((Result === -1) && (this.GetElementHandle() != null)) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        Result = Math.round(this.GetElementHandle().offsetWidth);
      };
      return Result;
    };
    this.GetHeight = function () {
      var Result = 0;
      Result = this.FHeight;
      if (((Result === -1) && (this.GetElementHandle() != null)) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        Result = Math.round(this.GetElementHandle().offsetHeight);
      };
      return Result;
    };
    this.GetOuterWidth = function () {
      var Result = 0;
      Result = this.FWidth - this.FBorderWidth;
      return Result;
    };
    this.GetOuterHeight = function () {
      var Result = 0;
      Result = this.FHeight - this.FBorderWidth;
      return Result;
    };
    this.GetLeft = function () {
      var Result = 0;
      Result = this.FLeft;
      if (((Result === -1) && (this.GetElementHandle() != null)) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) Result = Math.round(this.GetElementHandle().offsetLeft);
      return Result;
    };
    this.GetTop = function () {
      var Result = 0;
      Result = this.FTop;
      if (((Result === -1) && (this.GetElementHandle() != null)) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) Result = Math.round(this.GetElementHandle().offsetTop);
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.ContainerElement = function () {
      var Result = null;
      Result = document.body;
      return Result;
    };
    this.BindElement = function () {
    };
    this.CreateInitialize = function () {
      this.FRequiredScripts = pas.Classes.TStringList.$create("Create$1");
    };
    this.ClearControls = function () {
      this.FControls = rtl.arraySetLength(this.FControls,null,0);
    };
    this.GetMouseEventButton = function (Event) {
      var Result = 0;
      Result = $mod.TMouseButton.mbLeft;
      var $tmp1 = Event.button;
      if ($tmp1 === 0) {
        Result = $mod.TMouseButton.mbLeft}
       else if ($tmp1 === 1) {
        Result = $mod.TMouseButton.mbMiddle}
       else if ($tmp1 === 2) Result = $mod.TMouseButton.mbRight;
      return Result;
    };
    this.GetMouseEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      return Result;
    };
    this.GetKeyBoardEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      return Result;
    };
    this.GetMouseWheelEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      return Result;
    };
    this.GetTouchEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      return Result;
    };
    this.HandleDoClick = function (Event) {
      var Result = false;
      this.FElementEvent = Event;
      this.StopPropagation();
      this.Click();
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoWheel = function (Event) {
      var Result = false;
      var ss = {};
      var h = false;
      this.FElementEvent = Event;
      this.StopPropagation();
      ss = rtl.refSet(this.GetMouseWheelEventShiftState(Event));
      h = true;
      this.MouseWheel(rtl.refSet(ss),pas.System.Trunc(-Event.deltaY),{get: function () {
          return h;
        }, set: function (v) {
          h = v;
        }});
      if (this.FOnMouseWheel != null) this.FOnMouseWheel(this,rtl.refSet(ss),pas.System.Trunc(-Event.deltaY),new pas.Types.TPoint(pas.Types.Point(0,0)),{get: function () {
          return h;
        }, set: function (v) {
          h = v;
        }});
      Result = h;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoDblClick = function (Event) {
      var Result = false;
      this.FElementEvent = Event;
      this.StopPropagation();
      this.DblClick();
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseDown = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var p = null;
      var ss = {};
      var mb = 0;
      this.FElementEvent = Event;
      this.StopPropagation();
      l = ((Event.clientX - this.GetLeft()) + document.body.scrollLeft) + document.documentElement.scrollLeft;
      t = ((Event.clientY - this.GetTop()) + document.body.scrollTop) + document.documentElement.scrollTop;
      p = this.FParent;
      while (p != null) {
        l = l - p.GetLeft();
        t = t - p.GetTop();
        p = p.FParent;
      };
      ss = rtl.refSet(this.GetMouseEventShiftState(Event));
      mb = this.GetMouseEventButton(Event);
      this.MouseDown(mb,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      if (this.FOnMouseDown != null) this.FOnMouseDown(this,mb,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseUp = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var p = null;
      var ss = {};
      var mb = 0;
      this.FElementEvent = Event;
      this.StopPropagation();
      l = ((Event.clientX - this.GetLeft()) + document.body.scrollLeft) + document.documentElement.scrollLeft;
      t = ((Event.clientY - this.GetTop()) + document.body.scrollTop) + document.documentElement.scrollTop;
      p = this.FParent;
      while (p != null) {
        l = l - p.GetLeft();
        t = t - p.GetTop();
        p = p.FParent;
      };
      ss = rtl.refSet(this.GetMouseEventShiftState(Event));
      mb = this.GetMouseEventButton(Event);
      this.MouseUp(mb,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      if (this.FOnMouseUp != null) this.FOnMouseUp(this,mb,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseMove = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var p = null;
      var ss = {};
      this.FElementEvent = Event;
      this.StopPropagation();
      l = ((Event.clientX - this.GetLeft()) + document.body.scrollLeft) + document.documentElement.scrollLeft;
      t = ((Event.clientY - this.GetTop()) + document.body.scrollTop) + document.documentElement.scrollTop;
      p = this.FParent;
      while (p != null) {
        l = l - p.GetLeft();
        t = t - p.GetTop();
        p = p.FParent;
      };
      ss = rtl.refSet(this.GetMouseEventShiftState(Event));
      this.MouseMove(rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      if (this.FOnMouseMove != null) this.FOnMouseMove(this,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseLeave = function (Event) {
      var Result = false;
      if (this.Captured()) return Result;
      Event.stopPropagation();
      this.DoMouseLeave();
      if (this.FOnMouseLeave != null) this.FOnMouseLeave(this);
      Result = true;
      return Result;
    };
    this.LayerHandleDoMouseEnter = function (Event) {
      var Result = false;
      if (((Event.buttons === 0) && this.Captured()) && !this.FMouseInsideLayer) {
        this.ReleaseCapture();
        this.HandleDoMouseUp(Event);
        this.HandleDoMouseLeave(Event);
      };
      this.FMouseInsideLayer = true;
      Result = true;
      return Result;
    };
    this.LayerHandleDoMouseLeave = function (Event) {
      var Result = false;
      this.FMouseInsideLayer = false;
      Result = true;
      return Result;
    };
    this.HandleDoMouseEnter = function (Event) {
      var Result = false;
      if (this.Captured()) return Result;
      Event.stopPropagation();
      this.DoMouseEnter();
      if (this.FOnMouseEnter != null) this.FOnMouseEnter(this);
      Result = true;
      return Result;
    };
    this.HandleDoKeyDown = function (Event) {
      var Result = false;
      var k = 0;
      var ss = {};
      this.FElementEvent = Event;
      this.StopPropagation();
      k = this.GetKeyCode(Event.key);
      ss = rtl.refSet(this.GetKeyBoardEventShiftState(Event));
      this.KeyDown({get: function () {
          return k;
        }, set: function (v) {
          k = v;
        }},rtl.refSet(ss));
      if (this.FOnKeyDown != null) this.FOnKeyDown(this,{get: function () {
          return k;
        }, set: function (v) {
          k = v;
        }},rtl.refSet(ss));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoKeyUp = function (Event) {
      var Result = false;
      var k = 0;
      var ss = {};
      var c = "";
      this.FElementEvent = Event;
      this.StopPropagation();
      k = this.GetKeyCode(Event.key);
      ss = rtl.refSet(this.GetKeyBoardEventShiftState(Event));
      if (k === 27) {
        c = "\x1B";
        if (this.FOnKeyPress != null) this.FOnKeyPress(this,{get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }});
      };
      this.KeyUp({get: function () {
          return k;
        }, set: function (v) {
          k = v;
        }},rtl.refSet(ss));
      if (this.FOnKeyUp != null) this.FOnKeyUp(this,{get: function () {
          return k;
        }, set: function (v) {
          k = v;
        }},rtl.refSet(ss));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoKeyPress = function (Event) {
      var Result = false;
      var c = "";
      this.FElementEvent = Event;
      this.StopPropagation();
      if (this.IsKeyCharacter(Event.key)) {
        c = String.fromCharCode(this.GetKeyCode(Event.key));
        this.KeyPress({get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }});
        if (this.FOnKeyPress != null) this.FOnKeyPress(this,{get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }});
      };
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoExit = function (Event) {
      var Result = false;
      this.DoExit();
      if (this.FOnExit != null) this.FOnExit(this);
      Result = true;
      return Result;
    };
    this.HandleDoEnter = function (Event) {
      var Result = false;
      this.FElementEvent = Event;
      this.StopPropagation();
      this.DoEnter();
      if (this.FOnEnter != null) this.FOnEnter(this);
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoTouchStart = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var touch = null;
      var p = null;
      var ss = {};
      this.FElementEvent = Event;
      this.StopPropagation();
      if (this.IsFocused()) this.PreventDefault();
      if (Event.touches.length > 0) {
        touch = Event.touches.item(0);
        l = ((touch.clientX - this.GetLeft()) + document.body.scrollLeft) + document.documentElement.scrollLeft;
        t = ((touch.clientY - this.GetTop()) + document.body.scrollTop) + document.documentElement.scrollTop;
        p = this.FParent;
        while (p != null) {
          l = l - p.GetLeft();
          t = t - p.GetTop();
          p = p.FParent;
        };
        ss = rtl.refSet(this.GetTouchEventShiftState(Event));
        if (this.FLinkTouchEvents) {
          this.MouseDown($mod.TMouseButton.mbLeft,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
          if (this.FOnMouseDown != null) this.FOnMouseDown(this,$mod.TMouseButton.mbLeft,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
        };
        this.TouchStart(pas.System.Trunc(l),pas.System.Trunc(t));
        if (this.FOnTouchStart != null) this.FOnTouchStart(this,pas.System.Trunc(l),pas.System.Trunc(t));
      };
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoTouchMove = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var touch = null;
      var p = null;
      var ss = {};
      this.FElementEvent = Event;
      this.StopPropagation();
      if (this.IsFocused()) this.PreventDefault();
      if (Event.touches.length > 0) {
        touch = Event.touches.item(0);
        l = ((touch.clientX - this.GetLeft()) + document.body.scrollLeft) + document.documentElement.scrollLeft;
        t = ((touch.clientY - this.GetTop()) + document.body.scrollTop) + document.documentElement.scrollTop;
        p = this.FParent;
        while (p != null) {
          l = l - p.GetLeft();
          t = t - p.GetTop();
          p = p.FParent;
        };
        ss = rtl.refSet(this.GetTouchEventShiftState(Event));
        if (this.FLinkTouchEvents) {
          this.MouseMove(rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
          if (this.FOnMouseMove != null) this.FOnMouseMove(this,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
        };
        this.TouchMove(pas.System.Trunc(l),pas.System.Trunc(t));
        if (this.FOnTouchMove != null) this.FOnTouchMove(this,pas.System.Trunc(l),pas.System.Trunc(t));
      };
      this.FElementEvent = null;
      Result = true;
      return Result;
    };
    this.HandleDoTouchEnd = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var touch = null;
      var p = null;
      var ss = {};
      this.FElementEvent = Event;
      this.StopPropagation();
      if (this.IsFocused()) this.PreventDefault();
      if (Event.touches.length > 0) {
        touch = Event.touches.item(0);
        l = ((touch.clientX - this.GetLeft()) + document.body.scrollLeft) + document.documentElement.scrollLeft;
        t = ((touch.clientY - this.GetTop()) + document.body.scrollTop) + document.documentElement.scrollTop;
        p = this.FParent;
        while (p != null) {
          l = l - p.GetLeft();
          t = t - p.GetTop();
          p = p.FParent;
        };
        ss = rtl.refSet(this.GetTouchEventShiftState(Event));
        if (this.FLinkTouchEvents) {
          this.MouseUp($mod.TMouseButton.mbLeft,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
          if (this.FOnMouseUp != null) this.FOnMouseUp(this,$mod.TMouseButton.mbLeft,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
        };
        this.TouchEnd(pas.System.Trunc(l),pas.System.Trunc(t));
        if (this.FOnTouchEnd != null) this.FOnTouchEnd(this,pas.System.Trunc(l),pas.System.Trunc(t));
      };
      this.FElementEvent = null;
      Result = true;
      return Result;
    };
    this.HandleFontChanged = function (Sender) {
      var i = 0;
      if (this.FUpdateCount === 0) {
        this.FParentFont = false;
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (this.GetControls(i).FParentFont) {
            this.GetControls(i).FFont.Assign(this.FFont);
            this.GetControls(i).FontChanged();
          };
        };
      };
      this.FontChanged();
    };
    this.DoExit = function () {
    };
    this.DoEnter = function () {
    };
    this.Click = function () {
      if (this.FOnClick != null) this.FOnClick(this);
    };
    this.UpdateElement = function () {
      if (this.FBlockUpdateElement || (this.FUpdateCount > 0)) return;
      if (((this.GetElementHandle() != null) && (this.GetElementHandle() !== this.ContainerElement())) && !this.IsUpdating()) {
        if (!this.GetIsLinked()) this.UpdateElementVisual();
        this.UpdateElementData();
      };
    };
    this.UpdateElementSize = function () {
      var eh = null;
      if (this.FBlockUpdateElement || (this.FUpdateCount > 0)) return;
      if ((this.GetElementHandle() != null) && (this.GetElementHandle() !== this.ContainerElement())) {
        eh = this.GetElementHandle();
        if (this.FElementPosition === $mod.TElementPosition.epAbsolute) {
          if (this.FTop !== -1) {
            eh.style.setProperty("top",pas.SysUtils.IntToStr(this.FTop) + "px")}
           else eh.style.setProperty("top","");
          if (this.FLeft !== -1) {
            eh.style.setProperty("left",pas.SysUtils.IntToStr(this.FLeft) + "px")}
           else eh.style.setProperty("left","");
        };
        if (this.FWidthStyle === $mod.TSizeStyle.ssAbsolute) {
          if (this.FWidth !== -1) {
            eh.style.setProperty("width",pas.SysUtils.IntToStr(this.GetOuterWidth()) + "px")}
           else eh.style.setProperty("width","");
        };
        if (this.FWidthStyle === $mod.TSizeStyle.ssAuto) {
          eh.style.setProperty("width","");
        };
        if (this.FHeightStyle === $mod.TSizeStyle.ssAbsolute) {
          if (this.FHeight !== -1) {
            eh.style.setProperty("height",pas.SysUtils.IntToStr(this.GetOuterHeight()) + "px")}
           else eh.style.setProperty("height","");
        };
        if (this.FHeightStyle === $mod.TSizeStyle.ssAuto) {
          eh.style.setProperty("height","");
        };
        if (this.FWidthStyle === $mod.TSizeStyle.ssPercent) {
          if (this.FWidth !== -1) {
            eh.style.setProperty("width",pas.SysUtils.IntToStr(this.FWidthPercent) + "%")}
           else eh.style.setProperty("width","");
        };
        if (this.FHeightStyle === $mod.TSizeStyle.ssPercent) {
          if (this.FHeight !== -1) {
            eh.style.setProperty("height",pas.SysUtils.IntToStr(this.FHeightPercent) + "%")}
           else eh.style.setProperty("height","");
        };
        if (this.FElementPosition === $mod.TElementPosition.epAbsolute) {
          eh.style.setProperty("position","absolute")}
         else if (this.FElementPosition === $mod.TElementPosition.epRelative) {
          eh.style.setProperty("position","relative")}
         else eh.style.setProperty("position","");
      };
    };
    this.UpdateElementVisual = function () {
      var eh = null;
      eh = this.GetElementHandle();
      if (this.FParentFont && (this.FParent != null)) this.FFont.Assign(this.FParent.FFont);
      eh.style.setProperty("overflow","hidden");
      var $tmp1 = this.FCursor;
      if ($tmp1 === 0) {
        eh.style.setProperty("cursor","default")}
       else if ($tmp1 === 2) {
        eh.style.setProperty("cursor","auto")}
       else if ($tmp1 === 1) {
        eh.style.setProperty("cursor","none")}
       else if ($tmp1 === 3) {
        eh.style.setProperty("cursor","crosshair")}
       else if ($tmp1 === 4) {
        eh.style.setProperty("cursor","text")}
       else if ($tmp1 === 6) {
        eh.style.setProperty("cursor","nesw-resize")}
       else if ($tmp1 === 7) {
        eh.style.setProperty("cursor","ns-resize")}
       else if ($tmp1 === 8) {
        eh.style.setProperty("cursor","nwse-resize")}
       else if ($tmp1 === 9) {
        eh.style.setProperty("cursor","ew-resize")}
       else if ($tmp1 === 10) {
        eh.style.setProperty("cursor","")}
       else if ($tmp1 === 11) {
        eh.style.setProperty("cursor","wait")}
       else if ($tmp1 === 12) {
        eh.style.setProperty("cursor","")}
       else if ($tmp1 === 13) {
        eh.style.setProperty("cursor","no-drop")}
       else if ($tmp1 === 14) {
        eh.style.setProperty("cursor","col-resize")}
       else if ($tmp1 === 15) {
        eh.style.setProperty("cursor","row-resize")}
       else if ($tmp1 === 16) {
        eh.style.setProperty("cursor","")}
       else if ($tmp1 === 17) {
        eh.style.setProperty("cursor","progress")}
       else if ($tmp1 === 18) {
        eh.style.setProperty("cursor","not-allowed")}
       else if ($tmp1 === 19) {
        eh.style.setProperty("cursor","wait")}
       else if ($tmp1 === 20) {
        eh.style.setProperty("cursor","help")}
       else if ($tmp1 === 21) {
        eh.style.setProperty("cursor","pointer")}
       else if ($tmp1 === 22) eh.style.setProperty("cursor","move");
      if (this.Captured()) this.FLayer.style.setProperty("cursor",eh.style.getPropertyValue("cursor"));
      if ((this.FElementClassName !== "") || this.CanShowFocus()) {
        eh.style.setProperty("outline","")}
       else eh.style.setProperty("outline","none");
      this.UpdateElementSize();
      eh.style.setProperty("webkit-user-select","none");
      eh.style.setProperty("moz-user-select","none");
      eh.style.setProperty("khtml-user-select","none");
      eh.style.setProperty("ms-user-select","none");
      eh.style.setProperty("user-select","none");
      if ((this.FElementClassName === "") && (this.FElementFont === $mod.TElementFont.efProperty)) {
        if (this.FEnabled) eh.style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML(this.FFont.FColor));
        this.SetHTMLElementFont(eh,this.FFont);
      } else {
        eh.style.setProperty("color","");
        eh.style.setProperty("font-family","");
        eh.style.setProperty("font-style","");
        eh.style.setProperty("font-size","");
      };
    };
    this.UpdateElementData = function () {
      var eh = null;
      eh = this.GetElementHandle();
      if (this.FVisible) {
        eh.style.setProperty("visibility","")}
       else eh.style.setProperty("visibility","hidden");
      if (this.FTabStop) {
        this.FContainer.setAttribute("tabindex",pas.SysUtils.IntToStr(this.FTabOrder + 1))}
       else this.FContainer.setAttribute("tabindex","");
      if (this.FEnabled) {
        this.FContainer.removeAttribute("disabled")}
       else this.FContainer.setAttribute("disabled","disabled");
      if (this.FShowHint && (this.FHint !== "")) {
        this.FContainer.setAttribute("title",this.FHint)}
       else this.FContainer.setAttribute("title","");
    };
    this.UpdateParent = function () {
      this.InternalUpdateParent();
      if (((pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && (this.FParent != null)) && !(pas.Classes.TComponentStateItem.csLoading in this.FParent.FComponentState)) this.Loaded();
      this.UpdateChildren(this.FPrevParent);
      this.UpdateChildren(this.FParent);
    };
    this.InternalUpdateParent = function () {
      var p = null;
      p = this.FPrevParent;
      if (this.FNew) {
        this.CreateControl();
        if (this.FContainer != null) {
          if ((this.FParent != null) && !(this.FParent.FContainer != null)) this.FParent.CreateControl();
          if (((this.FParent !== p) && (p != null)) && (p.FContainer != null)) p.FContainer.removeChild(this.FContainer);
          if ((this.FParent != null) && (this.FParent.FContainer != null)) this.FParent.FContainer.appendChild(this.FContainer);
        };
      };
    };
    this.UpdateChildren = function (AControl) {
      var I = 0;
      var c = null;
      if (AControl != null) {
        AControl.DoRealign();
        if ($mod.TCustomControl.isPrototypeOf(AControl)) {
          rtl.as(AControl,$mod.TCustomControl).RecreateCanvas();
          rtl.as(AControl,$mod.TCustomControl).Invalidate();
        };
        for (var $l1 = 0, $end2 = AControl.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = AControl.GetControls(I);
          this.UpdateChildren(c);
        };
      };
    };
    this.PersistinHTML = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).PersistinHTML();
      };
    };
    this.InitFromHTML = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).InitFromHTML();
      };
    };
    this.DisableTab = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).DisableTab();
      };
    };
    this.SetElementClassName = function (AValue) {
      this.FElementClassName = AValue;
      if (this.FContainer != null) this.FContainer.setAttribute("class",AValue);
    };
    this.SetColor = function (AValue) {
      this.FColor = AValue;
      this.UpdateElement();
    };
    this.SetFont = function (AValue) {
      this.FFont.SetName(AValue.FName);
      this.FFont.SetSize(AValue.FSize);
      this.FFont.SetStyle(rtl.refSet(AValue.FStyle));
      this.FFont.SetColor(AValue.FColor);
    };
    this.SetParent = function (AValue) {
      if (this.FParent !== AValue) {
        if (this.FParent != null) this.FParent.UnRegisterParent(this);
        this.FPrevParent = this.FParent;
        this.FParent = AValue;
        if (this.FParent != null) this.FParent.RegisterParent(this);
        this.UpdateParent();
        this.UpdateElement();
        this.InitScript();
      };
    };
    this.RegisterParent = function (AValue) {
      this.FControls = rtl.arraySetLength(this.FControls,null,rtl.length(this.FControls) + 1);
      this.FControls[rtl.length(this.FControls) - 1] = AValue;
    };
    this.UnRegisterParent = function (AValue) {
      var i = 0;
      var flg = false;
      flg = false;
      for (var $l1 = 0, $end2 = rtl.length(this.FControls) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FControls[i] === AValue) {
          flg = true;
        };
        if (flg && (i < (rtl.length(this.FControls) - 1))) this.FControls[i] = this.FControls[i + 1];
      };
      if (flg) this.FControls = rtl.arraySetLength(this.FControls,null,rtl.length(this.FControls) - 1);
    };
    this.SetLeft = function (AValue) {
      if (this.FLeft !== AValue) {
        this.FLeft = AValue;
        if (!this.FUpdateTopLeft) this.FOrigLeft = AValue;
        this.UpdateElementSize();
        this.RecreateCanvas();
        this.InternalResize();
      };
    };
    this.SetTop = function (AValue) {
      if (this.FTop !== AValue) {
        this.FTop = AValue;
        if (!this.FUpdateTopLeft) this.FOrigTop = AValue;
        this.UpdateElementSize();
        this.RecreateCanvas();
        this.InternalResize();
      };
    };
    this.MouseUp = function (Button, Shift, X, Y) {
    };
    this.MouseDown = function (Button, Shift, X, Y) {
    };
    this.MouseMove = function (Shift, X, Y) {
    };
    this.TouchStart = function (X, Y) {
    };
    this.TouchMove = function (X, Y) {
    };
    this.TouchEnd = function (X, Y) {
    };
    this.DoMouseEnter = function () {
    };
    this.DoMouseLeave = function () {
    };
    this.MouseWheel = function (Shift, WheelDelta, Handled) {
    };
    this.DblClick = function () {
      if (this.FOnDblClick != null) this.FOnDblClick(this);
    };
    this.KeyDown = function (Key, Shift) {
    };
    this.KeyPress = function (Key) {
    };
    this.KeyUp = function (Key, Shift) {
    };
    this.SetFocus = function () {
      var e = null;
      if (this.GetElementHandle() != null) {
        e = this.GetElementHandle();
        setTimeout(function() {e.focus();}, 1);
      };
    };
    this.DoMarginsChanged = function (Sender) {
      this.DoRealign();
    };
    this.DoRealign = function () {
      if ((this.FParent != null) && !this.FParent.IsUpdating()) {
        this.FParent.AlignControl(this.FParent);
      };
    };
    this.DoBoundsChange = function () {
      var b = false;
      var frm = null;
      this.UpdateElementSize();
      this.RecreateCanvas();
      if (this.FIsResizing) return;
      this.FIsResizing = true;
      this.InternalResize();
      this.DoRealign();
      b = false;
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if (frm != null) {
        b = frm.FIsResizing$1;
        b = b || (frm.FUpdateCount > 0);
      };
      b = b || (this.FUpdateCount > 0);
      b = b || this.FIsAligning;
      if (!b) this.UpdateChildAnchoring();
      this.FIsResizing = false;
    };
    this.IsFocused = function () {
      var Result = false;
      Result = this.FContainer === document.activeElement;
      return Result;
    };
    this.GetID = function () {
      var Result = "";
      Result = this.FID;
      return Result;
    };
    this.GetElementHandle = function () {
      var Result = null;
      Result = null;
      if ((this.FContainer != null) && this.FControlCreated) Result = this.FContainer;
      return Result;
    };
    this.GetElementBindHandle = function () {
      var Result = null;
      Result = this.GetElementHandle();
      return Result;
    };
    this.GetElement = function () {
      var Result = null;
      Result = document.getElementById(this.GetID());
      return Result;
    };
    this.GetKeyCode = function (AValue) {
      var Result = 0;
      var i = 0;
      i = -1;
      var $tmp1 = AValue;
      if ($tmp1 === "Up") {
        i = 38}
       else if ($tmp1 === "Down") {
        i = 40}
       else if ($tmp1 === "Left") {
        i = 37}
       else if ($tmp1 === "Right") {
        i = 39}
       else if ($tmp1 === pas.Web.TJSKeyNames.BackSpace) {
        i = 8}
       else if ($tmp1 === pas.Web.TJSKeyNames.Tab) {
        i = 9}
       else if ($tmp1 === pas.Web.TJSKeyNames.Enter) {
        i = 13}
       else if ($tmp1 === pas.Web.TJSKeyNames.Shift) {
        i = 16}
       else if ($tmp1 === pas.Web.TJSKeyNames.Control) {
        i = 17}
       else if ($tmp1 === pas.Web.TJSKeyNames.Alt) {
        i = 18}
       else if ($tmp1 === pas.Web.TJSKeyNames.Pause) {
        i = 19}
       else if ($tmp1 === pas.Web.TJSKeyNames.CapsLock) {
        i = 20}
       else if ($tmp1 === pas.Web.TJSKeyNames.Escape) {
        i = 27}
       else if ($tmp1 === pas.Web.TJSKeyNames.PageUp) {
        i = 33}
       else if ($tmp1 === pas.Web.TJSKeyNames.PageDown) {
        i = 34}
       else if ($tmp1 === pas.Web.TJSKeyNames._End) {
        i = 35}
       else if ($tmp1 === pas.Web.TJSKeyNames.Home) {
        i = 36}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowLeft) {
        i = 37}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowUp) {
        i = 38}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowRight) {
        i = 39}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowDown) {
        i = 40}
       else if ($tmp1 === pas.Web.TJSKeyNames.Insert) {
        i = 45}
       else if ($tmp1 === pas.Web.TJSKeyNames.Delete) {
        i = 46}
       else if ($tmp1 === pas.Web.TJSKeyNames.F1) {
        i = 112}
       else if ($tmp1 === pas.Web.TJSKeyNames.F2) {
        i = 113}
       else if ($tmp1 === pas.Web.TJSKeyNames.F3) {
        i = 114}
       else if ($tmp1 === pas.Web.TJSKeyNames.F4) {
        i = 115}
       else if ($tmp1 === pas.Web.TJSKeyNames.F5) {
        i = 116}
       else if ($tmp1 === pas.Web.TJSKeyNames.F6) {
        i = 117}
       else if ($tmp1 === pas.Web.TJSKeyNames.F7) {
        i = 118}
       else if ($tmp1 === pas.Web.TJSKeyNames.F8) {
        i = 119}
       else if ($tmp1 === pas.Web.TJSKeyNames.F9) {
        i = 120}
       else if ($tmp1 === pas.Web.TJSKeyNames.F10) {
        i = 121}
       else if ($tmp1 === pas.Web.TJSKeyNames.F11) {
        i = 122}
       else if ($tmp1 === pas.Web.TJSKeyNames.F12) {
        i = 123}
       else if ($tmp1 === pas.Web.TJSKeyNames.F13) {
        i = 124}
       else if ($tmp1 === pas.Web.TJSKeyNames.F14) {
        i = 125}
       else if ($tmp1 === pas.Web.TJSKeyNames.F15) {
        i = 126}
       else if ($tmp1 === pas.Web.TJSKeyNames.F16) {
        i = 127}
       else if ($tmp1 === pas.Web.TJSKeyNames.F17) {
        i = 128}
       else if ($tmp1 === pas.Web.TJSKeyNames.F18) {
        i = 129}
       else if ($tmp1 === pas.Web.TJSKeyNames.F19) {
        i = 130}
       else if ($tmp1 === pas.Web.TJSKeyNames.F20) {
        i = 131}
       else {
        i = AValue.charCodeAt(1 - 1);
      };
      Result = i;
      return Result;
    };
    this.IsKeyCharacter = function (AValue) {
      var Result = false;
      var $tmp1 = AValue;
      if ((((((((((((((((((((((((((((((((((((((($tmp1 === "Up") || ($tmp1 === "Down")) || ($tmp1 === "Left")) || ($tmp1 === "Right")) || ($tmp1 === pas.Web.TJSKeyNames.Shift)) || ($tmp1 === pas.Web.TJSKeyNames.Control)) || ($tmp1 === pas.Web.TJSKeyNames.Alt)) || ($tmp1 === pas.Web.TJSKeyNames.Pause)) || ($tmp1 === pas.Web.TJSKeyNames.CapsLock)) || ($tmp1 === pas.Web.TJSKeyNames.PageUp)) || ($tmp1 === pas.Web.TJSKeyNames.PageDown)) || ($tmp1 === pas.Web.TJSKeyNames._End)) || ($tmp1 === pas.Web.TJSKeyNames.Home)) || ($tmp1 === pas.Web.TJSKeyNames.ArrowLeft)) || ($tmp1 === pas.Web.TJSKeyNames.ArrowUp)) || ($tmp1 === pas.Web.TJSKeyNames.ArrowRight)) || ($tmp1 === pas.Web.TJSKeyNames.ArrowDown)) || ($tmp1 === pas.Web.TJSKeyNames.Insert)) || ($tmp1 === pas.Web.TJSKeyNames.Delete)) || ($tmp1 === pas.Web.TJSKeyNames.F1)) || ($tmp1 === pas.Web.TJSKeyNames.F2)) || ($tmp1 === pas.Web.TJSKeyNames.F3)) || ($tmp1 === pas.Web.TJSKeyNames.F4)) || ($tmp1 === pas.Web.TJSKeyNames.F5)) || ($tmp1 === pas.Web.TJSKeyNames.F6)) || ($tmp1 === pas.Web.TJSKeyNames.F7)) || ($tmp1 === pas.Web.TJSKeyNames.F8)) || ($tmp1 === pas.Web.TJSKeyNames.F9)) || ($tmp1 === pas.Web.TJSKeyNames.F10)) || ($tmp1 === pas.Web.TJSKeyNames.F11)) || ($tmp1 === pas.Web.TJSKeyNames.F12)) || ($tmp1 === pas.Web.TJSKeyNames.F13)) || ($tmp1 === pas.Web.TJSKeyNames.F14)) || ($tmp1 === pas.Web.TJSKeyNames.F15)) || ($tmp1 === pas.Web.TJSKeyNames.F16)) || ($tmp1 === pas.Web.TJSKeyNames.F17)) || ($tmp1 === pas.Web.TJSKeyNames.F18)) || ($tmp1 === pas.Web.TJSKeyNames.F19)) || ($tmp1 === pas.Web.TJSKeyNames.F20)) {
        Result = false}
       else {
        Result = true;
      };
      return Result;
    };
    this.GetClientRect = function () {
      var Result = new pas.Types.TRect();
      Result = new pas.Types.TRect(pas.Types.Rect(0,0,this.GetWidth(),this.GetHeight()));
      return Result;
    };
    this.CreateControl = function () {
      if (!(this.FElement != null)) {
        this.FElement = this.CreateElement();
        if (this.FElement != null) {
          this.FControlCreated = true;
          this.FContainer = this.FElement;
          this.FContainer.setAttribute("id",this.GetID());
          this.FContainer.setAttribute("zindex","0");
          this.BindEvents();
          this.UpdateElement();
        };
      };
    };
    this.BindEvents = function () {
      var eh = null;
      if (this.GetElementBindHandle() != null) {
        eh = this.GetElementBindHandle();
        eh.addEventListener("wheel",rtl.createCallback(this,"HandleDoWheel"));
        eh.addEventListener("click",rtl.createCallback(this,"HandleDoClick"));
        eh.addEventListener("dblclick",rtl.createCallback(this,"HandleDoDblClick"));
        eh.addEventListener("mousedown",rtl.createCallback(this,"HandleDoMouseDown"));
        eh.addEventListener("mouseup",rtl.createCallback(this,"HandleDoMouseUp"));
        eh.addEventListener("mousemove",rtl.createCallback(this,"HandleDoMouseMove"));
        eh.addEventListener("mouseleave",rtl.createCallback(this,"HandleDoMouseLeave"));
        eh.addEventListener("mouseenter",rtl.createCallback(this,"HandleDoMouseEnter"));
        eh.addEventListener("keydown",rtl.createCallback(this,"HandleDoKeyDown"));
        eh.addEventListener("keyup",rtl.createCallback(this,"HandleDoKeyUp"));
        eh.addEventListener("keypress",rtl.createCallback(this,"HandleDoKeyPress"));
        eh.addEventListener("focus",rtl.createCallback(this,"HandleDoEnter"));
        eh.addEventListener("blur",rtl.createCallback(this,"HandleDoExit"));
        eh.addEventListener("touchstart",rtl.createCallback(this,"HandleDoTouchStart"));
        eh.addEventListener("touchmove",rtl.createCallback(this,"HandleDoTouchMove"));
        eh.addEventListener("touchend",rtl.createCallback(this,"HandleDoTouchEnd"));
      };
    };
    this.UnbindEvents = function () {
      var eh = null;
      if (this.GetElementBindHandle() != null) {
        eh = this.GetElementBindHandle();
        eh.removeEventListener("wheel",rtl.createCallback(this,"HandleDoWheel"));
        eh.removeEventListener("click",rtl.createCallback(this,"HandleDoClick"));
        eh.removeEventListener("dblclick",rtl.createCallback(this,"HandleDoDblClick"));
        eh.removeEventListener("mousedown",rtl.createCallback(this,"HandleDoMouseDown"));
        eh.removeEventListener("mouseup",rtl.createCallback(this,"HandleDoMouseUp"));
        eh.removeEventListener("mousemove",rtl.createCallback(this,"HandleDoMouseMove"));
        eh.removeEventListener("mouseleave",rtl.createCallback(this,"HandleDoMouseLeave"));
        eh.removeEventListener("mouseenter",rtl.createCallback(this,"HandleDoMouseEnter"));
        eh.removeEventListener("keydown",rtl.createCallback(this,"HandleDoKeyDown"));
        eh.removeEventListener("keyup",rtl.createCallback(this,"HandleDoKeyUp"));
        eh.removeEventListener("keypress",rtl.createCallback(this,"HandleDoKeyPress"));
        eh.removeEventListener("focus",rtl.createCallback(this,"HandleDoEnter"));
        eh.removeEventListener("blur",rtl.createCallback(this,"HandleDoExit"));
        eh.removeEventListener("touchstart",rtl.createCallback(this,"HandleDoTouchStart"));
        eh.removeEventListener("touchmove",rtl.createCallback(this,"HandleDoTouchMove"));
        eh.removeEventListener("touchend",rtl.createCallback(this,"HandleDoTouchEnd"));
      };
    };
    this.SetHTMLElementFont = function (he, Font) {
      var s = "";
      he.style.setProperty("font-family",Font.FName);
      he.style.setProperty("font-style","normal");
      if (pas["WEBLib.Graphics"].TFontStyle.fsBold in Font.FStyle) {
        he.style.setProperty("font-weight","bold")}
       else he.style.setProperty("font-weight","");
      if (pas["WEBLib.Graphics"].TFontStyle.fsItalic in Font.FStyle) he.style.setProperty("font-style","italic");
      s = "";
      if (pas["WEBLib.Graphics"].TFontStyle.fsUnderline in Font.FStyle) s = "underline";
      if (pas["WEBLib.Graphics"].TFontStyle.fsStrikeOut in Font.FStyle) {
        if (s !== "") s = s + " ";
        s = s + "line-through";
      };
      if (s !== "") he.style.setProperty("text-decoration",s);
      he.style.setProperty("font-size",pas.SysUtils.IntToStr(Font.FSize) + "pt");
    };
    this.AlignControls = function (AControl, Rect) {
      var Self = this;
      var j = 0;
      function DoPosition(Control, AAlign) {
        var dl = 0;
        var dt = 0;
        var dr = 0;
        var db = 0;
        Control.FUpdateTopLeft = true;
        if (Control.FAlignWithMargins) {
          dl = Control.FMargins.FLeft;
          dt = Control.FMargins.FTop;
          db = Control.FMargins.FBottom;
          dr = Control.FMargins.FRight;
        } else {
          dl = 0;
          dt = 0;
          db = 0;
          dr = 0;
        };
        var $tmp1 = AAlign;
        if ($tmp1 === $mod.TAlign.alTop) {
          Control.SetWidth(((Rect.get().Right - Rect.get().Left) - dl) - dr);
          Control.SetTop(Rect.get().Top + dt);
          Control.SetLeft(Rect.get().Left + dl);
          Rect.get().Top = ((Rect.get().Top + Control.GetHeight()) + dt) + db;
        } else if ($tmp1 === $mod.TAlign.alBottom) {
          Control.SetWidth((((Rect.get().Right - Rect.get().Left) - dl) - dr) - 1);
          Control.SetTop(((Rect.get().Bottom - Control.GetHeight()) - db) - 1);
          Control.SetLeft(Rect.get().Left + dl);
          Rect.get().Bottom = ((Rect.get().Bottom - Control.GetHeight()) - dt) - db;
        } else if ($tmp1 === $mod.TAlign.alLeft) {
          Control.SetHeight(((Rect.get().Bottom - Rect.get().Top) - dt) - db);
          Control.SetLeft(Rect.get().Left + dl);
          Control.SetTop(Rect.get().Top + dt);
          Rect.get().Left = ((Rect.get().Left + Control.GetWidth()) + dl) + dr;
        } else if ($tmp1 === $mod.TAlign.alRight) {
          Control.SetHeight((((Rect.get().Bottom - Rect.get().Top) - db) - dt) - 1);
          Control.SetLeft(((Rect.get().Right - Control.GetWidth()) - dr) - 2);
          Control.SetTop(Rect.get().Top + dt);
          Rect.get().Right = ((Rect.get().Right - Control.GetWidth()) - dr) - dl;
        } else if ($tmp1 === $mod.TAlign.alClient) {
          Control.SetTop(Rect.get().Top + dt);
          Control.SetLeft(Rect.get().Left + dl);
          Control.SetWidth(((Rect.get().Right - Rect.get().Left) - dl) - dr);
          Control.SetHeight(((Rect.get().Bottom - Rect.get().Top) - db) - dt);
          Rect.get().Left = 0;
          Rect.get().Top = 0;
          Rect.get().Right = 0;
          Rect.get().Bottom = 0;
        };
        Control.FUpdateTopLeft = false;
      };
      function DoAlign(AAlign) {
        var i = 0;
        var j = 0;
        var ins = 0;
        var il = null;
        il = pas.Classes.TList.$create("Create$1");
        for (var $l1 = 0, $end2 = Self.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if ((Self.GetControls(i).FAlign === AAlign) && Self.GetControls(i).FVisible) {
            ins = il.GetCount();
            for (var $l3 = il.GetCount() - 1; $l3 >= 0; $l3--) {
              j = $l3;
              var $tmp4 = AAlign;
              if ($tmp4 === $mod.TAlign.alTop) {
                if (Self.GetControls(i).FOrigTop < rtl.getObject(il.Get(j)).FOrigTop) ins = j}
               else if ($tmp4 === $mod.TAlign.alLeft) {
                if (Self.GetControls(i).FOrigLeft < rtl.getObject(il.Get(j)).FOrigLeft) ins = j}
               else if ($tmp4 === $mod.TAlign.alRight) {
                if ((Self.GetControls(i).FOrigLeft + Self.GetControls(i).GetWidth()) > (rtl.getObject(il.Get(j)).FOrigLeft + rtl.getObject(il.Get(j)).GetWidth())) ins = j}
               else if ($tmp4 === $mod.TAlign.alBottom) if ((Self.GetControls(i).FOrigTop + Self.GetControls(i).GetHeight()) > (rtl.getObject(il.Get(j)).FOrigTop + rtl.getObject(il.Get(j)).GetHeight())) ins = j;
            };
            il.Insert(ins,Self.GetControls(i));
          };
        };
        for (var $l5 = 0, $end6 = il.GetCount() - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          DoPosition(rtl.getObject(il.Get(i)),AAlign);
        };
        il = rtl.freeLoc(il);
      };
      DoAlign($mod.TAlign.alTop);
      DoAlign($mod.TAlign.alBottom);
      DoAlign($mod.TAlign.alLeft);
      DoAlign($mod.TAlign.alRight);
      DoAlign($mod.TAlign.alClient);
      DoAlign($mod.TAlign.alCustom);
      for (var $l1 = 0, $end2 = Self.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Self.GetControls(j).AlignControl(Self.GetControls(j));
      };
    };
    this.AlignControl = function (AControl) {
      var r = new pas.Types.TRect();
      var cr = null;
      var ovf = "";
      var ovfx = "";
      var ovfy = "";
      var eh = null;
      var el = null;
      var frm = null;
      var ctop = 0;
      if (this.FIsAligning) return;
      if (this.IsUpdating()) return;
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if ((frm != null) && frm.IsUpdating()) return;
      ctop = 0;
      if (((frm != null) && (frm.FFormContainer !== "")) && pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(AControl)) {
        el = document.getElementById(frm.FFormContainer);
        if (el != null) {
          cr = el.getBoundingClientRect();
          ctop = Math.round(cr.top);
        };
      };
      this.FIsAligning = true;
      if (!(AControl != null)) return;
      eh = AControl.GetElementHandle();
      if (eh != null) {
        ovf = eh.style.getPropertyValue("overflow");
        ovfx = eh.style.getPropertyValue("overflow-x");
        ovfy = eh.style.getPropertyValue("overflow-y");
        eh.style.setProperty("overflow","hidden");
      };
      r = new pas.Types.TRect(this.GetClientRect());
      if ((r.Bottom + ctop) > window.innerHeight) r.Bottom = window.innerHeight - ctop;
      this.AlignControls(AControl,{get: function () {
          return r;
        }, set: function (v) {
          r = v;
        }});
      if (eh != null) {
        eh.style.setProperty("overflow",ovf);
        eh.style.setProperty("overflow-x",ovfx);
        eh.style.setProperty("overflow-y",ovfy);
      };
      this.FIsAligning = false;
    };
    this.InitAnchoring = function () {
      var i = 0;
      this.FOrigRect = new pas.Types.TRect(this.GetBoundsRect());
      if (this.FParent != null) this.FOrigParentRect = new pas.Types.TRect(this.FParent.GetBoundsRect());
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).InitAnchoring();
      };
    };
    this.InitScript = function () {
    };
    this.Realign = function () {
      this.AlignControl(this);
    };
    this.Loaded = function () {
      var i = 0;
      pas.Classes.TComponent.Loaded.apply(this,arguments);
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).Loaded();
      };
      var $tmp3 = this.FAlign;
      if ($tmp3 === $mod.TAlign.alClient) {
        if (this.FParent != null) this.SetBounds(0,0,this.FParent.FWidth,this.FParent.FHeight);
      };
      this.Resize();
      this.UpdateElement();
    };
    this.InternalResize = function () {
      if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
      this.Resize();
    };
    this.FontChanged = function () {
      this.UpdateElement();
    };
    this.DisposeOf = function () {
      var t = null;
      t = this;
      t = rtl.freeLoc(t);
    };
    this.HookElement = function () {
      var el = null;
      var i = 0;
      el = document.getElementById(this.FID);
      this.FContainer = el;
      this.BindElement();
      this.BindEvents();
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).HookElement();
      };
    };
    this.CreateWithID = function (AID) {
      var el = null;
      this.FUpdateCount = 0;
      this.FControlCreated = false;
      this.FLinkTouchEvents = true;
      this.FIsResizing = false;
      if (((this.FOwner != null) && (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState)) || !(this.FOwner != null)) this.Loading();
      this.FElementPosition = $mod.TElementPosition.epAbsolute;
      this.FWidthStyle = $mod.TSizeStyle.ssAbsolute;
      this.FHeightStyle = $mod.TSizeStyle.ssAbsolute;
      el = document.getElementById(AID);
      if (!(el != null)) {
        this.FContainer = null;
        this.FNew = true;
      } else {
        this.FContainer = el;
        this.FNew = false;
        this.FControlCreated = true;
        this.FElementPosition = $mod.TElementPosition.epRelative;
        this.BindElement();
        this.BindEvents();
      };
      this.FID = AID;
      this.FFont = pas["WEBLib.Graphics"].TFont.$create("Create$1");
      this.FFont.FOnChange = rtl.createCallback(this,"HandleFontChanged");
      this.FEnabled = true;
      this.FVisible = true;
      this.FLeft = 0;
      this.FTop = 0;
      this.FTabStop = true;
      this.FAlign = $mod.TAlign.alNone;
      this.FAlignWithMargins = false;
      this.FIsAligning = false;
      this.FParentFont = true;
      this.FAnchors = rtl.createSet($mod.TAnchorKind.akLeft,$mod.TAnchorKind.akTop);
      this.FOrigRect = new pas.Types.TRect(pas.Types.Rect(-1,-1,-1,-1));
      this.FShowFocus = false;
      this.FBorderWidth = 0;
      this.FEnablePropagation = false;
      this.FColor = 16777215;
      this.FMargins = $mod.TMargins.$create("Create$1");
      this.FMargins.FOnChange = rtl.createCallback(this,"DoMarginsChanged");
      this.FParent = null;
      this.FPrevParent = null;
      this.ClearControls();
      this.CreateInitialize();
    };
    this.UpdateAnchoring = function () {
      var dxr = 0;
      var dyr = 0;
      var dxo = 0;
      var dyo = 0;
      var dxw = 0;
      var dyw = 0;
      var br = new pas.Types.TRect();
      var r = new pas.Types.TRect();
      if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
      if (!this.FControlCreated) return;
      if (this.FAlign !== $mod.TAlign.alNone) return;
      if ((this.FOrigRect.Left === -1) && (this.FOrigRect.Top === -1)) this.InitAnchoring();
      if ((this.FParent != null) && !pas["WEBLib.Forms"].TForm.isPrototypeOf(this)) {
        r = new pas.Types.TRect(this.FParent.GetBoundsRect());
        dxr = (r.Right - r.Left) - (this.FOrigParentRect.Right - this.FOrigParentRect.Left);
        dyr = (r.Bottom - r.Top) - (this.FOrigParentRect.Bottom - this.FOrigParentRect.Top);
        br = new pas.Types.TRect(this.FOrigRect);
        dxo = 0;
        dyo = 0;
        dxw = 0;
        dyw = 0;
        if ($mod.TAnchorKind.akRight in this.FAnchors) {
          if ($mod.TAnchorKind.akLeft in this.FAnchors) {
            dxw = dxr}
           else dxo = dxr;
        };
        if ($mod.TAnchorKind.akBottom in this.FAnchors) {
          if ($mod.TAnchorKind.akTop in this.FAnchors) {
            dyw = dyr}
           else dyo = dyr;
        };
        if (($mod.TAnchorKind.akBottom in this.FAnchors) || ($mod.TAnchorKind.akRight in this.FAnchors)) this.SetBounds(br.Left + dxo,br.Top + dyo,(br.Right - br.Left) + dxw,(br.Bottom - br.Top) + dyw);
      };
      this.UpdateChildAnchoring();
    };
    this.UpdateChildAnchoring = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).UpdateAnchoring();
      };
    };
    this.IsUpdating = function () {
      var Result = false;
      Result = this.FUpdateCount > 0;
      return Result;
    };
    this.CanShowFocus = function () {
      var Result = false;
      Result = this.FShowFocus;
      return Result;
    };
    this.Create$2 = function (ID) {
      this.CreateWithID(ID);
    };
    this.Create$1 = function (AOwner) {
      var s = "";
      var prefix = "";
      var frm = null;
      pas.Classes.TComponent.Create$1.call(this,AOwner);
      this.FScriptLoaded = false;
      this.FElementFont = $mod.TElementFont.efProperty;
      this.FElementPosition = $mod.TElementPosition.epAbsolute;
      s = this.$classname;
      pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,1);
      prefix = "";
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if (frm != null) prefix = frm.$classname;
      this.CreateWithID((prefix + "_") + $impl.FindUniqueName(s));
    };
    this.Destroy = function () {
      var i = 0;
      var ctrl = null;
      this.UnbindEvents();
      for (var $l1 = this.GetControlsCount() - 1; $l1 >= 0; $l1--) {
        i = $l1;
        ctrl = this.GetControls(i);
        ctrl = rtl.freeLoc(ctrl);
      };
      if (((this.FContainer != null) && (this.FParent != null)) && (this.FParent.FContainer != null)) {
        this.FParent.FContainer.removeChild(this.FContainer);
        this.FContainer = null;
        this.FControlCreated = false;
      };
      rtl.free(this,"FRequiredScripts");
      rtl.free(this,"FMargins");
      rtl.free(this,"FFont");
      pas.Classes.TComponent.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
    };
    this.Resize = function () {
    };
    this.Capture = function () {
      var eh = null;
      if (this.Captured()) this.ReleaseCapture();
      this.FMouseInsideLayer = true;
      this.FLayer = document.createElement("SPAN");
      document.body.appendChild(this.FLayer);
      eh = this.FLayer;
      eh.addEventListener("mouseenter",rtl.createCallback(this,"LayerHandleDoMouseEnter"));
      eh.addEventListener("mouseleave",rtl.createCallback(this,"LayerHandleDoMouseLeave"));
      eh.addEventListener("mousedown",rtl.createCallback(this,"HandleDoMouseDown"));
      eh.addEventListener("mouseup",rtl.createCallback(this,"HandleDoMouseUp"));
      eh.addEventListener("mousemove",rtl.createCallback(this,"HandleDoMouseMove"));
      eh.style.setProperty("top","0");
      eh.style.setProperty("left","0");
      eh.style.setProperty("right","0");
      eh.style.setProperty("bottom","0");
      eh.style.setProperty("webkit-user-select","none");
      eh.style.setProperty("moz-user-select","none");
      eh.style.setProperty("khtml-user-select","none");
      eh.style.setProperty("ms-user-select","none");
      eh.style.setProperty("user-select","none");
      eh.style.setProperty("position","absolute");
      this.FCaptured = true;
      this.UpdateElement();
    };
    this.ReleaseCapture = function () {
      var eh = null;
      if (this.FCaptured && (this.FLayer != null)) {
        eh = this.FLayer;
        eh.removeEventListener("mouseenter",rtl.createCallback(this,"LayerHandleDoMouseEnter"));
        eh.removeEventListener("mouseleave",rtl.createCallback(this,"LayerHandleDoMouseLeave"));
        eh.removeEventListener("mousedown",rtl.createCallback(this,"HandleDoMouseDown"));
        eh.removeEventListener("mouseup",rtl.createCallback(this,"HandleDoMouseUp"));
        eh.removeEventListener("mousemove",rtl.createCallback(this,"HandleDoMouseMove"));
        document.body.removeChild(eh);
        this.FCaptured = false;
        this.FLayer = null;
        this.UpdateElement();
      };
    };
    this.PreventDefault = function () {
      if (this.GetElementEvent() != null) this.GetElementEvent().preventDefault();
    };
    this.StopPropagation = function () {
      if ((this.GetElementEvent() != null) && !this.FEnablePropagation) this.GetElementEvent().stopPropagation();
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) {
        this.FUpdateCount -= 1;
        if (this.FUpdateCount === 0) this.UpdateElement();
      };
    };
    this.Invalidate = function () {
    };
    this.SetParentComponent = function (Value) {
      if ((this.FParent !== Value) && $mod.TControl.isPrototypeOf(Value)) this.SetParent(Value);
    };
    this.Captured = function () {
      var Result = false;
      Result = this.FCaptured && (this.FLayer != null);
      return Result;
    };
    this.MakeScreenshot = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.ClientToScreen = function (Point) {
      var Result = new pas.Types.TPoint();
      var Origin = new pas.Types.TPoint();
      Origin = new pas.Types.TPoint(this.GetClientOrigin());
      Result.x = Point.x + Origin.x;
      Result.y = Point.y + Origin.y;
      return Result;
    };
    this.ScreenToClient = function (Point) {
      var Result = new pas.Types.TPoint();
      var Origin = new pas.Types.TPoint();
      Origin = new pas.Types.TPoint(this.GetClientOrigin());
      Result.x = Point.x - Origin.x;
      Result.y = Point.y - Origin.y;
      return Result;
    };
    this.CanFocus = function () {
      var Result = false;
      Result = true;
      return Result;
    };
  });
  rtl.createClass($mod,"TWinControl",$mod.TControl,function () {
    var $r = this.$rtti;
    $r.addProperty("Align",2,$mod.$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,$mod.$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("Cursor",2,rtl.longint,"FCursor","SetCursor");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightStyle",2,$mod.$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("Tag",0,rtl.longint,"FTag$1","FTag$1");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthStyle",2,$mod.$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle");
    $r.addProperty("OnMouseDown",0,$mod.$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,$mod.$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,$mod.$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseEnter",0,$mod.$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseLeave",0,$mod.$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnKeyUp",0,$mod.$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnKeyDown",0,$mod.$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,$mod.$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnEnter",0,$mod.$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,$mod.$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TCustomControl",$mod.TWinControl,function () {
    this.$init = function () {
      $mod.TWinControl.$init.call(this);
      this.FPixelRatio = 0.0;
      this.FPainting = false;
      this.FCanvas = null;
      this.FElementCanvas = null;
      this.FBorderStyle = 0;
      this.FBorderColor = 0;
      this.FCustomBorder = false;
    };
    this.$final = function () {
      this.FCanvas = undefined;
      this.FElementCanvas = undefined;
      $mod.TWinControl.$final.call(this);
    };
    this.GetCanvas = function () {
      var Result = null;
      if (!(this.FCanvas != null)) this.CreateControl();
      Result = this.FCanvas;
      return Result;
    };
    this.GetPixelRatio = function () {
      var Result = 0.0;
      var res = 0.0;
      var ctx = document.createElement("canvas").getContext("2d"),
          dpr = window.devicePixelRatio || 1,
          bsr = ctx.webkitBackingStorePixelRatio ||
                ctx.mozBackingStorePixelRatio ||
                ctx.msBackingStorePixelRatio ||
                ctx.oBackingStorePixelRatio ||
                ctx.backingStorePixelRatio || 1;
      res = dpr / bsr;
      Result = res;
      return Result;
    };
    this.RecreateCanvas = function () {
      var px = 0.0;
      var el = null;
      var h = 0;
      var w = 0;
      if (this.FElementCanvas != null) {
        if (!this.FPainting) {
          el = document.getElementById(this.GetID() + "_Canvas");
          if (el != null) {
            this.FElementCanvas = el;
            rtl.free(this,"FCanvas");
            this.FCanvas = null;
          };
          px = this.GetPixelRatio();
          h = this.GetHeight() - this.GetCanvasHeightOffset();
          w = this.GetWidth() - this.GetCanvasWidthOffset();
          this.FElementCanvas.style.setProperty("height",pas.SysUtils.IntToStr(h) + "px");
          this.FElementCanvas.style.setProperty("width",pas.SysUtils.IntToStr(w) + "px");
          this.FElementCanvas.height = Math.round(h * px);
          this.FElementCanvas.width = Math.round(w * px);
          this.FElementCanvas.getContext("2d").scale(px,px);
        };
        if (!(this.FCanvas != null)) this.FCanvas = pas["WEBLib.Graphics"].TCanvas.$create("Create$1",[this.FElementCanvas]);
      };
    };
    this.SetBorderStyle = function (AValue) {
      if (this.FBorderStyle !== AValue) {
        this.FBorderStyle = AValue;
        this.UpdateElement();
      };
    };
    this.SetBorderColor = function (AValue) {
      if (this.FBorderColor !== AValue) {
        this.FBorderColor = AValue;
        this.UpdateElement();
      };
    };
    this.CreateControl = function () {
      $mod.TControl.CreateControl.apply(this,arguments);
      this.RecreateCanvas();
    };
    this.Loaded = function () {
      $mod.TControl.Loaded.apply(this,arguments);
      this.Invalidate();
    };
    this.UpdateElementVisual = function () {
      $mod.TControl.UpdateElementVisual.apply(this,arguments);
      if (this.GetElementHandle() != null) {
        if (this.FBorderStyle === $mod.TBorderStyle.bsSingle) {
          if (this.FCustomBorder) {
            this.GetElementHandle().style.setProperty("border-style","solid");
            this.GetElementHandle().style.setProperty("border-width","1px");
            this.GetElementHandle().style.setProperty("border-color",pas["WEBLib.Graphics"].ColorToHTML(this.FBorderColor));
          } else this.GetElementHandle().style.setProperty("border-style","");
        } else this.GetElementHandle().style.setProperty("border-style","none");
      };
    };
    this.CreateElement = function () {
      var Result = null;
      this.FElementCanvas = document.createElement("CANVAS");
      if ($mod.TControlStyleValue.csAcceptsControls in this.FControlStyle) {
        Result = document.createElement("SPAN");
        Result.appendChild(this.FElementCanvas);
        this.FElementCanvas.setAttribute("id",this.GetID() + "_Canvas");
        this.FElementCanvas.setAttribute("zindex","-1");
      } else Result = this.FElementCanvas;
      return Result;
    };
    this.GetCanvasHeightOffset = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.GetCanvasWidthOffset = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.BindEvents = function () {
      $mod.TControl.BindEvents.apply(this,arguments);
    };
    this.Paint = function () {
    };
    this.CreateInitialize = function () {
      $mod.TControl.CreateInitialize.apply(this,arguments);
      this.FBorderStyle = $mod.TBorderStyle.bsSingle;
      this.FBorderColor = 12632256;
      this.FPainting = false;
      this.FWidth = 100;
      this.FHeight = 25;
      this.FWidthPercent = 100;
      this.FHeightPercent = 100;
      this.FCustomBorder = false;
    };
    this.Destroy = function () {
      if (this.FCanvas != null) rtl.free(this,"FCanvas");
      $mod.TControl.Destroy.apply(this,arguments);
    };
    this.MakeScreenshot = function () {
      var Result = null;
      Result = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      Result.LoadFromCanvas(this.GetCanvas());
      return Result;
    };
    this.Resize = function () {
      $mod.TControl.Resize.apply(this,arguments);
      this.Invalidate();
    };
    this.Invalidate = function () {
      var px = 0.0;
      $mod.TControl.Invalidate.apply(this,arguments);
      if (this.FParent === null) return;
      px = this.GetPixelRatio();
      if (px !== this.FPixelRatio) this.RecreateCanvas();
      this.FPixelRatio = this.GetPixelRatio();
      this.FPainting = true;
      if (this.FCanvas != null) this.FCanvas.Clear();
      this.Paint();
      this.FPainting = false;
    };
  });
  rtl.createClass($mod,"TControlManager",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FInstanceCount = 0;
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      this.FInstanceCount = 0;
    };
    this.GetInstanceNumber = function () {
      var Result = 0;
      this.FInstanceCount += 1;
      Result = this.FInstanceCount;
      return Result;
    };
  });
  rtl.createClass($mod,"TCSSCodeFragment",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FControlClassname = "";
      this.FCSS = null;
    };
    this.$final = function () {
      this.FCSS = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetCSS = function (Value) {
      this.FCSS.Assign(Value);
    };
    this.Create$1 = function (Collection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FCSS = pas.Classes.TStringList.$create("Create$1");
    };
    this.Destroy = function () {
      rtl.free(this,"FCSS");
      pas.Classes.TCollectionItem.Destroy.apply(this,arguments);
    };
    var $r = this.$rtti;
    $r.addProperty("ControlClassname",0,rtl.string,"FControlClassname","FControlClassname");
    $r.addProperty("CSS",2,pas.Classes.$rtti["TStringList"],"FCSS","SetCSS");
  });
  rtl.createClass($mod,"TCSSCodeFragments",pas.Classes.TOwnedCollection,function () {
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TCSSCodeFragment);
    };
  });
  rtl.createClass($mod,"TCSSCodeManager",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FCSSFragments = null;
    };
    this.$final = function () {
      this.FCSSFragments = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.SetCSSFragments = function (Value) {
      this.FCSSFragments.Assign(Value);
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      this.FCSSFragments = $mod.TCSSCodeFragments.$create("Create$3",[this]);
    };
    this.Destroy = function () {
      rtl.free(this,"FCSSFragments");
      pas.Classes.TComponent.Destroy.apply(this,arguments);
    };
    var $r = this.$rtti;
    $r.addProperty("CSSFragments",2,$mod.$rtti["TCSSCodeFragments"],"FCSSFragments","SetCSSFragments");
  });
  this.FindGlobalComponent = function (Name) {
    var Result = null;
    Result = null;
    return Result;
  };
  $mod.$init = function () {
    $impl.ControlManager = $mod.TControlManager.$create("Create$1",[null]);
  };
},["WEBLib.Forms","WEBLib.StdCtrls"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.ControlManager = null;
  $impl.FindUniqueName = function (Name) {
    var Result = "";
    Result = Name + pas.SysUtils.IntToStr($impl.ControlManager.GetInstanceNumber());
    return Result;
  };
});
rtl.module("WEBLib.Lang",["System"],function () {
  "use strict";
  var $mod = this;
  this.TUILanguage = {"0": "lNone", lNone: 0, "1": "lAfar", lAfar: 1, "2": "lAbkhazian", lAbkhazian: 2, "3": "lAvestan", lAvestan: 3, "4": "lAfrikaans", lAfrikaans: 4, "5": "lAkan", lAkan: 5, "6": "lAmharic", lAmharic: 6, "7": "lAragonese", lAragonese: 7, "8": "lArabic", lArabic: 8, "9": "lAssamese", lAssamese: 9, "10": "lAvaric", lAvaric: 10, "11": "lAymara", lAymara: 11, "12": "lAzerbaijani", lAzerbaijani: 12, "13": "lBashkir", lBashkir: 13, "14": "lBelarusian", lBelarusian: 14, "15": "lBulgarian", lBulgarian: 15, "16": "lBihari", lBihari: 16, "17": "lBislama", lBislama: 17, "18": "lBambara", lBambara: 18, "19": "lBengali", lBengali: 19, "20": "lTibetan", lTibetan: 20, "21": "lBreton", lBreton: 21, "22": "lBosnian", lBosnian: 22, "23": "lCatalan", lCatalan: 23, "24": "lChechen", lChechen: 24, "25": "lChamorro", lChamorro: 25, "26": "lCorsican", lCorsican: 26, "27": "lCree", lCree: 27, "28": "lCzech", lCzech: 28, "29": "lOldSlavic", lOldSlavic: 29, "30": "lChuvash", lChuvash: 30, "31": "lWelsh", lWelsh: 31, "32": "lDanish", lDanish: 32, "33": "lGerman", lGerman: 33, "34": "lDivehi", lDivehi: 34, "35": "lDzongkha", lDzongkha: 35, "36": "lEwe", lEwe: 36, "37": "lEnglish", lEnglish: 37, "38": "lEsperanto", lEsperanto: 38, "39": "lSpanish", lSpanish: 39, "40": "lEstonian", lEstonian: 40, "41": "lBasque", lBasque: 41, "42": "lPersian", lPersian: 42, "43": "lFulah", lFulah: 43, "44": "lFinnish", lFinnish: 44, "45": "lFijian", lFijian: 45, "46": "lFaroese", lFaroese: 46, "47": "lFrench", lFrench: 47, "48": "lWesternFrisian", lWesternFrisian: 48, "49": "lIrish", lIrish: 49, "50": "lGaelic", lGaelic: 50, "51": "lGalician", lGalician: 51, "52": "lGuarani", lGuarani: 52, "53": "lGujarati", lGujarati: 53, "54": "lManx", lManx: 54, "55": "lHausa", lHausa: 55, "56": "lHebrew", lHebrew: 56, "57": "lHindi", lHindi: 57, "58": "lHiriMotu", lHiriMotu: 58, "59": "lCroatian", lCroatian: 59, "60": "lHaitian", lHaitian: 60, "61": "lHungarian", lHungarian: 61, "62": "lArmenian", lArmenian: 62, "63": "lHerero", lHerero: 63, "64": "lInterlingua", lInterlingua: 64, "65": "lIndonesian", lIndonesian: 65, "66": "lInterlingue", lInterlingue: 66, "67": "lIgbo", lIgbo: 67, "68": "lSichuanYi", lSichuanYi: 68, "69": "lInupiaq", lInupiaq: 69, "70": "lIdo", lIdo: 70, "71": "lIcelandic", lIcelandic: 71, "72": "lItalian", lItalian: 72, "73": "lInuktitut", lInuktitut: 73, "74": "lJapanese", lJapanese: 74, "75": "lJavanese", lJavanese: 75, "76": "lGeorgian", lGeorgian: 76, "77": "lKongo", lKongo: 77, "78": "lKikuyu", lKikuyu: 78, "79": "lKuanyama", lKuanyama: 79, "80": "lKazakh", lKazakh: 80, "81": "lKalaallisut", lKalaallisut: 81, "82": "lCentralKhmer", lCentralKhmer: 82, "83": "lKannada", lKannada: 83, "84": "lKorean", lKorean: 84, "85": "lKanuri", lKanuri: 85, "86": "lKashmiri", lKashmiri: 86, "87": "lKurdish", lKurdish: 87, "88": "lKomi", lKomi: 88, "89": "lCornish", lCornish: 89, "90": "lKirghiz", lKirghiz: 90, "91": "lLatin", lLatin: 91, "92": "lLuxembourgish", lLuxembourgish: 92, "93": "lGanda", lGanda: 93, "94": "lLimburgan", lLimburgan: 94, "95": "lLingala", lLingala: 95, "96": "lLao", lLao: 96, "97": "lLithuanian", lLithuanian: 97, "98": "lLubaKatanga", lLubaKatanga: 98, "99": "lLatvian", lLatvian: 99, "100": "lMalagasy", lMalagasy: 100, "101": "lMarshallese", lMarshallese: 101, "102": "lMaori", lMaori: 102, "103": "lMacedonian", lMacedonian: 103, "104": "lMalayalam", lMalayalam: 104, "105": "lMongolian", lMongolian: 105, "106": "lMarathi", lMarathi: 106, "107": "lMalay", lMalay: 107, "108": "lMaltese", lMaltese: 108, "109": "lBurmese", lBurmese: 109, "110": "lNauru", lNauru: 110, "111": "lNdebele", lNdebele: 111, "112": "lNepali", lNepali: 112, "113": "lNdonga", lNdonga: 113, "114": "lDutch", lDutch: 114, "115": "lNorwegian", lNorwegian: 115, "116": "lNavajo", lNavajo: 116, "117": "lChichewa", lChichewa: 117, "118": "lOccitan", lOccitan: 118, "119": "lOjibwa", lOjibwa: 119, "120": "lOromo", lOromo: 120, "121": "lOriya", lOriya: 121, "122": "lOssetian", lOssetian: 122, "123": "lPanjabi", lPanjabi: 123, "124": "lPali", lPali: 124, "125": "lPolish", lPolish: 125, "126": "lPushto", lPushto: 126, "127": "lPortuguese", lPortuguese: 127, "128": "lQuechua", lQuechua: 128, "129": "lRomansh", lRomansh: 129, "130": "lRundi", lRundi: 130, "131": "lRomanian", lRomanian: 131, "132": "lRussian", lRussian: 132, "133": "lKinyarwanda", lKinyarwanda: 133, "134": "lSanskrit", lSanskrit: 134, "135": "lSardinian", lSardinian: 135, "136": "lSindhi", lSindhi: 136, "137": "lNorthernSami", lNorthernSami: 137, "138": "lSango", lSango: 138, "139": "lSinhala", lSinhala: 139, "140": "lSlovak", lSlovak: 140, "141": "lSlovenian", lSlovenian: 141, "142": "lSamoan", lSamoan: 142, "143": "lShona", lShona: 143, "144": "lSomali", lSomali: 144, "145": "lAlbanian", lAlbanian: 145, "146": "lSerbian", lSerbian: 146, "147": "lSwati", lSwati: 147, "148": "lSotho", lSotho: 148, "149": "lSundanese", lSundanese: 149, "150": "lSwedish", lSwedish: 150, "151": "lSwahili", lSwahili: 151, "152": "lTamil", lTamil: 152, "153": "lTelugu", lTelugu: 153, "154": "lTajik", lTajik: 154, "155": "lThai", lThai: 155, "156": "lTigrinya", lTigrinya: 156, "157": "lTurkmen", lTurkmen: 157, "158": "lTagalog", lTagalog: 158, "159": "lTswana", lTswana: 159, "160": "lTonga", lTonga: 160, "161": "lTurkish", lTurkish: 161, "162": "lTsonga", lTsonga: 162, "163": "lTatar", lTatar: 163, "164": "lTwi", lTwi: 164, "165": "lTahitian", lTahitian: 165, "166": "lUighur", lUighur: 166, "167": "lUkrainian", lUkrainian: 167, "168": "lUrdu", lUrdu: 168, "169": "lUzbek", lUzbek: 169, "170": "lVenda", lVenda: 170, "171": "lVietnamese", lVietnamese: 171, "172": "lWalloon", lWalloon: 172, "173": "lWolof", lWolof: 173, "174": "lXhosa", lXhosa: 174, "175": "lYiddish", lYiddish: 175, "176": "lYoruba", lYoruba: 176, "177": "lZhuang", lZhuang: 177, "178": "lChinese", lChinese: 178, "179": "lZulu", lZulu: 179};
  this.GetLanguageISO639_1Code = function (ALang) {
    var Result = "";
    var $tmp1 = ALang;
    if ($tmp1 === $mod.TUILanguage.lNone) {
      Result = ""}
     else if ($tmp1 === $mod.TUILanguage.lAfar) {
      Result = "aa"}
     else if ($tmp1 === $mod.TUILanguage.lAbkhazian) {
      Result = "ab"}
     else if ($tmp1 === $mod.TUILanguage.lAvestan) {
      Result = "ae"}
     else if ($tmp1 === $mod.TUILanguage.lAfrikaans) {
      Result = "af"}
     else if ($tmp1 === $mod.TUILanguage.lAkan) {
      Result = "ak"}
     else if ($tmp1 === $mod.TUILanguage.lAmharic) {
      Result = "am"}
     else if ($tmp1 === $mod.TUILanguage.lAragonese) {
      Result = "an"}
     else if ($tmp1 === $mod.TUILanguage.lArabic) {
      Result = "ar"}
     else if ($tmp1 === $mod.TUILanguage.lAssamese) {
      Result = "as"}
     else if ($tmp1 === $mod.TUILanguage.lAvaric) {
      Result = "av"}
     else if ($tmp1 === $mod.TUILanguage.lAymara) {
      Result = "ay"}
     else if ($tmp1 === $mod.TUILanguage.lAzerbaijani) {
      Result = "az"}
     else if ($tmp1 === $mod.TUILanguage.lBashkir) {
      Result = "ba"}
     else if ($tmp1 === $mod.TUILanguage.lBelarusian) {
      Result = "be"}
     else if ($tmp1 === $mod.TUILanguage.lBulgarian) {
      Result = "bg"}
     else if ($tmp1 === $mod.TUILanguage.lBihari) {
      Result = "bh"}
     else if ($tmp1 === $mod.TUILanguage.lBislama) {
      Result = "bi"}
     else if ($tmp1 === $mod.TUILanguage.lBambara) {
      Result = "bm"}
     else if ($tmp1 === $mod.TUILanguage.lBengali) {
      Result = "bn"}
     else if ($tmp1 === $mod.TUILanguage.lTibetan) {
      Result = "bo"}
     else if ($tmp1 === $mod.TUILanguage.lBreton) {
      Result = "br"}
     else if ($tmp1 === $mod.TUILanguage.lBosnian) {
      Result = "bd"}
     else if ($tmp1 === $mod.TUILanguage.lCatalan) {
      Result = "ca"}
     else if ($tmp1 === $mod.TUILanguage.lChechen) {
      Result = "ce"}
     else if ($tmp1 === $mod.TUILanguage.lChamorro) {
      Result = "ch"}
     else if ($tmp1 === $mod.TUILanguage.lCorsican) {
      Result = "co"}
     else if ($tmp1 === $mod.TUILanguage.lCree) {
      Result = "cr"}
     else if ($tmp1 === $mod.TUILanguage.lCzech) {
      Result = "cs"}
     else if ($tmp1 === $mod.TUILanguage.lOldSlavic) {
      Result = "cu"}
     else if ($tmp1 === $mod.TUILanguage.lChuvash) {
      Result = "cv"}
     else if ($tmp1 === $mod.TUILanguage.lWelsh) {
      Result = "cy"}
     else if ($tmp1 === $mod.TUILanguage.lDanish) {
      Result = "da"}
     else if ($tmp1 === $mod.TUILanguage.lGerman) {
      Result = "de"}
     else if ($tmp1 === $mod.TUILanguage.lDivehi) {
      Result = "dv"}
     else if ($tmp1 === $mod.TUILanguage.lDzongkha) {
      Result = "dz"}
     else if ($tmp1 === $mod.TUILanguage.lEwe) {
      Result = "ee"}
     else if ($tmp1 === $mod.TUILanguage.lEnglish) {
      Result = "en"}
     else if ($tmp1 === $mod.TUILanguage.lEsperanto) {
      Result = "eo"}
     else if ($tmp1 === $mod.TUILanguage.lSpanish) {
      Result = "es"}
     else if ($tmp1 === $mod.TUILanguage.lEstonian) {
      Result = "et"}
     else if ($tmp1 === $mod.TUILanguage.lBasque) {
      Result = "eu"}
     else if ($tmp1 === $mod.TUILanguage.lPersian) {
      Result = "fa"}
     else if ($tmp1 === $mod.TUILanguage.lFulah) {
      Result = "ff"}
     else if ($tmp1 === $mod.TUILanguage.lFinnish) {
      Result = "fi"}
     else if ($tmp1 === $mod.TUILanguage.lFijian) {
      Result = "fj"}
     else if ($tmp1 === $mod.TUILanguage.lFaroese) {
      Result = "fo"}
     else if ($tmp1 === $mod.TUILanguage.lFrench) {
      Result = "fr"}
     else if ($tmp1 === $mod.TUILanguage.lWesternFrisian) {
      Result = "fy"}
     else if ($tmp1 === $mod.TUILanguage.lIrish) {
      Result = "ga"}
     else if ($tmp1 === $mod.TUILanguage.lGaelic) {
      Result = "gd"}
     else if ($tmp1 === $mod.TUILanguage.lGalician) {
      Result = "gl"}
     else if ($tmp1 === $mod.TUILanguage.lGuarani) {
      Result = "gn"}
     else if ($tmp1 === $mod.TUILanguage.lGujarati) {
      Result = "gu"}
     else if ($tmp1 === $mod.TUILanguage.lManx) {
      Result = "gv"}
     else if ($tmp1 === $mod.TUILanguage.lHausa) {
      Result = "ha"}
     else if ($tmp1 === $mod.TUILanguage.lHebrew) {
      Result = "he"}
     else if ($tmp1 === $mod.TUILanguage.lHindi) {
      Result = "hi"}
     else if ($tmp1 === $mod.TUILanguage.lHiriMotu) {
      Result = "ho"}
     else if ($tmp1 === $mod.TUILanguage.lCroatian) {
      Result = "hr"}
     else if ($tmp1 === $mod.TUILanguage.lHaitian) {
      Result = "ht"}
     else if ($tmp1 === $mod.TUILanguage.lHungarian) {
      Result = "hu"}
     else if ($tmp1 === $mod.TUILanguage.lArmenian) {
      Result = "hy"}
     else if ($tmp1 === $mod.TUILanguage.lHerero) {
      Result = "hz"}
     else if ($tmp1 === $mod.TUILanguage.lInterlingua) {
      Result = "ia"}
     else if ($tmp1 === $mod.TUILanguage.lIndonesian) {
      Result = "id"}
     else if ($tmp1 === $mod.TUILanguage.lInterlingue) {
      Result = "ie"}
     else if ($tmp1 === $mod.TUILanguage.lIgbo) {
      Result = "ig"}
     else if ($tmp1 === $mod.TUILanguage.lSichuanYi) {
      Result = "ii"}
     else if ($tmp1 === $mod.TUILanguage.lInupiaq) {
      Result = "ik"}
     else if ($tmp1 === $mod.TUILanguage.lIdo) {
      Result = "id"}
     else if ($tmp1 === $mod.TUILanguage.lIcelandic) {
      Result = "is"}
     else if ($tmp1 === $mod.TUILanguage.lItalian) {
      Result = "it"}
     else if ($tmp1 === $mod.TUILanguage.lInuktitut) {
      Result = "iu"}
     else if ($tmp1 === $mod.TUILanguage.lJapanese) {
      Result = "ja"}
     else if ($tmp1 === $mod.TUILanguage.lJavanese) {
      Result = "jv"}
     else if ($tmp1 === $mod.TUILanguage.lGeorgian) {
      Result = "ka"}
     else if ($tmp1 === $mod.TUILanguage.lKongo) {
      Result = "kg"}
     else if ($tmp1 === $mod.TUILanguage.lKikuyu) {
      Result = "ki"}
     else if ($tmp1 === $mod.TUILanguage.lKuanyama) {
      Result = "kj"}
     else if ($tmp1 === $mod.TUILanguage.lKazakh) {
      Result = "kk"}
     else if ($tmp1 === $mod.TUILanguage.lKalaallisut) {
      Result = "kl"}
     else if ($tmp1 === $mod.TUILanguage.lCentralKhmer) {
      Result = "km"}
     else if ($tmp1 === $mod.TUILanguage.lKannada) {
      Result = "kn"}
     else if ($tmp1 === $mod.TUILanguage.lKorean) {
      Result = "ko"}
     else if ($tmp1 === $mod.TUILanguage.lKanuri) {
      Result = "kr"}
     else if ($tmp1 === $mod.TUILanguage.lKashmiri) {
      Result = "ks"}
     else if ($tmp1 === $mod.TUILanguage.lKurdish) {
      Result = "ku"}
     else if ($tmp1 === $mod.TUILanguage.lKomi) {
      Result = "kv"}
     else if ($tmp1 === $mod.TUILanguage.lCornish) {
      Result = "kw"}
     else if ($tmp1 === $mod.TUILanguage.lKirghiz) {
      Result = "ky"}
     else if ($tmp1 === $mod.TUILanguage.lLatin) {
      Result = "la"}
     else if ($tmp1 === $mod.TUILanguage.lLuxembourgish) {
      Result = "lb"}
     else if ($tmp1 === $mod.TUILanguage.lGanda) {
      Result = "lg"}
     else if ($tmp1 === $mod.TUILanguage.lLimburgan) {
      Result = "li"}
     else if ($tmp1 === $mod.TUILanguage.lLingala) {
      Result = "ln"}
     else if ($tmp1 === $mod.TUILanguage.lLao) {
      Result = "lo"}
     else if ($tmp1 === $mod.TUILanguage.lLithuanian) {
      Result = "lt"}
     else if ($tmp1 === $mod.TUILanguage.lLubaKatanga) {
      Result = "lu"}
     else if ($tmp1 === $mod.TUILanguage.lLatvian) {
      Result = "lv"}
     else if ($tmp1 === $mod.TUILanguage.lMalagasy) {
      Result = "mg"}
     else if ($tmp1 === $mod.TUILanguage.lMarshallese) {
      Result = "mh"}
     else if ($tmp1 === $mod.TUILanguage.lMaori) {
      Result = "mi"}
     else if ($tmp1 === $mod.TUILanguage.lMacedonian) {
      Result = "mk"}
     else if ($tmp1 === $mod.TUILanguage.lMalayalam) {
      Result = "ml"}
     else if ($tmp1 === $mod.TUILanguage.lMongolian) {
      Result = "mn"}
     else if ($tmp1 === $mod.TUILanguage.lMarathi) {
      Result = "mr"}
     else if ($tmp1 === $mod.TUILanguage.lMalay) {
      Result = "ms"}
     else if ($tmp1 === $mod.TUILanguage.lMaltese) {
      Result = "mt"}
     else if ($tmp1 === $mod.TUILanguage.lBurmese) {
      Result = "my"}
     else if ($tmp1 === $mod.TUILanguage.lNauru) {
      Result = "na"}
     else if ($tmp1 === $mod.TUILanguage.lNdebele) {
      Result = "nb"}
     else if ($tmp1 === $mod.TUILanguage.lNepali) {
      Result = "nd"}
     else if ($tmp1 === $mod.TUILanguage.lNdonga) {
      Result = "ng"}
     else if ($tmp1 === $mod.TUILanguage.lDutch) {
      Result = "nl"}
     else if ($tmp1 === $mod.TUILanguage.lNorwegian) {
      Result = "no"}
     else if ($tmp1 === $mod.TUILanguage.lNavajo) {
      Result = "nv"}
     else if ($tmp1 === $mod.TUILanguage.lChichewa) {
      Result = "ny"}
     else if ($tmp1 === $mod.TUILanguage.lOccitan) {
      Result = "oc"}
     else if ($tmp1 === $mod.TUILanguage.lOjibwa) {
      Result = "oj"}
     else if ($tmp1 === $mod.TUILanguage.lOromo) {
      Result = "om"}
     else if ($tmp1 === $mod.TUILanguage.lOriya) {
      Result = "or"}
     else if ($tmp1 === $mod.TUILanguage.lOssetian) {
      Result = "os"}
     else if ($tmp1 === $mod.TUILanguage.lPanjabi) {
      Result = "pa"}
     else if ($tmp1 === $mod.TUILanguage.lPali) {
      Result = "pi"}
     else if ($tmp1 === $mod.TUILanguage.lPolish) {
      Result = "pl"}
     else if ($tmp1 === $mod.TUILanguage.lPushto) {
      Result = "ps"}
     else if ($tmp1 === $mod.TUILanguage.lPortuguese) {
      Result = "pt"}
     else if ($tmp1 === $mod.TUILanguage.lQuechua) {
      Result = "qu"}
     else if ($tmp1 === $mod.TUILanguage.lRomansh) {
      Result = "rm"}
     else if ($tmp1 === $mod.TUILanguage.lRundi) {
      Result = "rn"}
     else if ($tmp1 === $mod.TUILanguage.lRomanian) {
      Result = "ro"}
     else if ($tmp1 === $mod.TUILanguage.lRussian) {
      Result = "ru"}
     else if ($tmp1 === $mod.TUILanguage.lKinyarwanda) {
      Result = "rw"}
     else if ($tmp1 === $mod.TUILanguage.lSanskrit) {
      Result = "sa"}
     else if ($tmp1 === $mod.TUILanguage.lSardinian) {
      Result = "sc"}
     else if ($tmp1 === $mod.TUILanguage.lSindhi) {
      Result = "sd"}
     else if ($tmp1 === $mod.TUILanguage.lNorthernSami) {
      Result = "se"}
     else if ($tmp1 === $mod.TUILanguage.lSango) {
      Result = "sg"}
     else if ($tmp1 === $mod.TUILanguage.lSinhala) {
      Result = "si"}
     else if ($tmp1 === $mod.TUILanguage.lSlovak) {
      Result = "sk"}
     else if ($tmp1 === $mod.TUILanguage.lSlovenian) {
      Result = "sl"}
     else if ($tmp1 === $mod.TUILanguage.lSamoan) {
      Result = "sm"}
     else if ($tmp1 === $mod.TUILanguage.lShona) {
      Result = "sn"}
     else if ($tmp1 === $mod.TUILanguage.lSomali) {
      Result = "so"}
     else if ($tmp1 === $mod.TUILanguage.lAlbanian) {
      Result = "sq"}
     else if ($tmp1 === $mod.TUILanguage.lSerbian) {
      Result = "sr"}
     else if ($tmp1 === $mod.TUILanguage.lSwati) {
      Result = "ss"}
     else if ($tmp1 === $mod.TUILanguage.lSotho) {
      Result = "st"}
     else if ($tmp1 === $mod.TUILanguage.lSundanese) {
      Result = "su"}
     else if ($tmp1 === $mod.TUILanguage.lSwedish) {
      Result = "sv"}
     else if ($tmp1 === $mod.TUILanguage.lSwahili) {
      Result = "sw"}
     else if ($tmp1 === $mod.TUILanguage.lTamil) {
      Result = "ta"}
     else if ($tmp1 === $mod.TUILanguage.lTelugu) {
      Result = "te"}
     else if ($tmp1 === $mod.TUILanguage.lTajik) {
      Result = "tg"}
     else if ($tmp1 === $mod.TUILanguage.lThai) {
      Result = "th"}
     else if ($tmp1 === $mod.TUILanguage.lTigrinya) {
      Result = "ti"}
     else if ($tmp1 === $mod.TUILanguage.lTurkmen) {
      Result = "tk"}
     else if ($tmp1 === $mod.TUILanguage.lTagalog) {
      Result = "tl"}
     else if ($tmp1 === $mod.TUILanguage.lTswana) {
      Result = "tn"}
     else if ($tmp1 === $mod.TUILanguage.lTonga) {
      Result = "to"}
     else if ($tmp1 === $mod.TUILanguage.lTurkish) {
      Result = "tr"}
     else if ($tmp1 === $mod.TUILanguage.lTsonga) {
      Result = "ts"}
     else if ($tmp1 === $mod.TUILanguage.lTatar) {
      Result = "tt"}
     else if ($tmp1 === $mod.TUILanguage.lTwi) {
      Result = "tw"}
     else if ($tmp1 === $mod.TUILanguage.lTahitian) {
      Result = "ty"}
     else if ($tmp1 === $mod.TUILanguage.lUighur) {
      Result = "ug"}
     else if ($tmp1 === $mod.TUILanguage.lUkrainian) {
      Result = "uk"}
     else if ($tmp1 === $mod.TUILanguage.lUrdu) {
      Result = "ur"}
     else if ($tmp1 === $mod.TUILanguage.lUzbek) {
      Result = "uz"}
     else if ($tmp1 === $mod.TUILanguage.lVenda) {
      Result = "ve"}
     else if ($tmp1 === $mod.TUILanguage.lVietnamese) {
      Result = "vi"}
     else if ($tmp1 === $mod.TUILanguage.lWalloon) {
      Result = "wa"}
     else if ($tmp1 === $mod.TUILanguage.lWolof) {
      Result = "wo"}
     else if ($tmp1 === $mod.TUILanguage.lXhosa) {
      Result = "xh"}
     else if ($tmp1 === $mod.TUILanguage.lYiddish) {
      Result = "yi"}
     else if ($tmp1 === $mod.TUILanguage.lYoruba) {
      Result = "yo"}
     else if ($tmp1 === $mod.TUILanguage.lZhuang) {
      Result = "za"}
     else if ($tmp1 === $mod.TUILanguage.lChinese) {
      Result = "zh"}
     else if ($tmp1 === $mod.TUILanguage.lZulu) Result = "zu";
    return Result;
  };
});
rtl.module("WEBLib.ExtCtrls",["System","Classes","SysUtils","Types","WEBLib.Controls","WEBLib.StdCtrls","WEBLib.Graphics","Web"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTimer",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FInterval = 0;
      this.FTimerID = 0;
      this.FOnTimer = null;
    };
    this.$final = function () {
      this.FOnTimer = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.CreateElement = function () {
      var Result = null;
      Result = null;
      this.DoUpdateTimer();
      return Result;
    };
    this.SetEnabled = function (Value) {
      pas["WEBLib.Controls"].TControl.SetEnabled.call(this,Value);
      this.DoUpdateTimer();
    };
    this.SetInterval = function (AValue) {
      this.FInterval = AValue;
      this.DoUpdateTimer();
    };
    this.DoTimer = function () {
      if (this.FOnTimer != null) this.FOnTimer(this);
    };
    this.DoUpdateTimer = function () {
      this.DoClearTimer();
      if (this.FEnabled) this.FTimerID = window.setInterval(rtl.createCallback(this,"DoTimer"),this.FInterval);
    };
    this.DoClearTimer = function () {
      window.clearInterval(this.FTimerID);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FInterval = 1000;
      this.FTimerID = -1;
      this.SetEnabled(true);
    };
    var $r = this.$rtti;
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Interval",2,rtl.longint,"FInterval","SetInterval");
    $r.addProperty("OnTimer",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnTimer","FOnTimer");
  });
  rtl.createClass($mod,"TCustomPanel",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FAutoSize = false;
      this.FCaption = "";
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    this.SetBorderStyle = function (AValue) {
      pas["WEBLib.Controls"].TCustomControl.SetBorderStyle.apply(this,arguments);
      this.UpdateElement();
    };
    this.SetAutoSize = function (AValue) {
      if (this.FAutoSize !== AValue) {
        this.FAutoSize = AValue;
        if (this.FAutoSize) {
          this.SetWidth(-1);
          this.SetHeight(-1);
        };
        this.UpdateElement();
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.apply(this,arguments);
      if (this.GetElementHandle() != null) {
        if (this.FAutoSize) {
          this.GetElementHandle().style.setProperty("overflow","");
          this.GetElementHandle().style.setProperty("white-space","normal");
          this.GetElementHandle().style.setProperty("display","inline");
        } else {
          this.GetElementHandle().style.setProperty("overflow","hidden");
          this.GetElementHandle().style.setProperty("white-space","nowrap");
          this.GetElementHandle().style.setProperty("display","inline-block");
        };
        this.GetElementHandle().style.setProperty("background-color",pas["WEBLib.Graphics"].ColorToHTML(this.FColor));
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FAutoSize = false;
      this.SetColor(15790320);
      this.SetTabStop(false);
      this.FCustomBorder = true;
    };
  });
  rtl.createClass($mod,"TPanel",$mod.TCustomPanel,function () {
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors");
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize");
    $r.addProperty("BorderColor",2,rtl.longint,"FBorderColor","SetBorderColor",{Default: 12632256});
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Caption",0,rtl.string,"FCaption","FCaption");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("ElementClassName",2,rtl.string,"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,rtl.string,"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
  });
});
rtl.module("WEBLib.WebTools",["System"],function () {
  "use strict";
  var $mod = this;
  this.GetLocaleShortDateFormat = function (ALocale) {
    var Result = "";
    var res = "";
    var formats = {
         "ar-SA" : "dd/MM/yy",
         "bg-BG" : "dd.M.yyyy",
         "ca-ES" : "dd/MM/yyyy",
         "zh-TW" : "yyyy/M/d",
         "cs-CZ" : "d.M.yyyy",
         "da-DK" : "dd-MM-yyyy",
         "de-DE" : "dd.MM.yyyy",
         "el-GR" : "d/M/yyyy",
         "en-US" : "M/d/yyyy",
         "fi-FI" : "d.M.yyyy",
         "fr-FR" : "dd/MM/yyyy",
         "he-IL" : "dd/MM/yyyy",
         "hu-HU" : "yyyy. MM. dd.",
         "is-IS" : "d.M.yyyy",
         "it-IT" : "dd/MM/yyyy",
         "ja-JP" : "yyyy/MM/dd",
         "ko-KR" : "yyyy-MM-dd",
         "nl-NL" : "d-M-yyyy",
         "nb-NO" : "dd.MM.yyyy",
         "pl-PL" : "yyyy-MM-dd",
         "pt-BR" : "d/M/yyyy",
         "ro-RO" : "dd.MM.yyyy",
         "ru-RU" : "dd.MM.yyyy",
         "hr-HR" : "d.M.yyyy",
         "sk-SK" : "d. M. yyyy",
         "sq-AL" : "yyyy-MM-dd",
         "sv-SE" : "yyyy-MM-dd",
         "th-TH" : "d/M/yyyy",
         "tr-TR" : "dd.MM.yyyy",
         "ur-PK" : "dd/MM/yyyy",
         "id-ID" : "dd/MM/yyyy",
         "uk-UA" : "dd.MM.yyyy",
         "be-BY" : "dd.MM.yyyy",
         "sl-SI" : "d.M.yyyy",
         "et-EE" : "d.MM.yyyy",
         "lv-LV" : "yyyy.MM.dd.",
         "lt-LT" : "yyyy.MM.dd",
         "fa-IR" : "MM/dd/yyyy",
         "vi-VN" : "dd/MM/yyyy",
         "hy-AM" : "dd.MM.yyyy",
         "az-Latn-AZ" : "dd.MM.yyyy",
         "eu-ES" : "yyyy/MM/dd",
         "mk-MK" : "dd.MM.yyyy",
         "af-ZA" : "yyyy/MM/dd",
         "ka-GE" : "dd.MM.yyyy",
         "fo-FO" : "dd-MM-yyyy",
         "hi-IN" : "dd-MM-yyyy",
         "ms-MY" : "dd/MM/yyyy",
         "kk-KZ" : "dd.MM.yyyy",
         "ky-KG" : "dd.MM.yy",
         "sw-KE" : "M/d/yyyy",
         "uz-Latn-UZ" : "dd/MM yyyy",
         "tt-RU" : "dd.MM.yyyy",
         "pa-IN" : "dd-MM-yy",
         "gu-IN" : "dd-MM-yy",
         "ta-IN" : "dd-MM-yyyy",
         "te-IN" : "dd-MM-yy",
         "kn-IN" : "dd-MM-yy",
         "mr-IN" : "dd-MM-yyyy",
         "sa-IN" : "dd-MM-yyyy",
         "mn-MN" : "yy.MM.dd",
         "gl-ES" : "dd/MM/yy",
         "kok-IN" : "dd-MM-yyyy",
         "syr-SY" : "dd/MM/yyyy",
         "dv-MV" : "dd/MM/yy",
         "ar-IQ" : "dd/MM/yyyy",
         "zh-CN" : "yyyy/M/d",
         "de-CH" : "dd.MM.yyyy",
         "en-GB" : "dd/MM/yyyy",
         "es-MX" : "dd/MM/yyyy",
         "fr-BE" : "d/MM/yyyy",
         "it-CH" : "dd.MM.yyyy",
         "nl-BE" : "d/MM/yyyy",
         "nn-NO" : "dd.MM.yyyy",
         "pt-PT" : "dd-MM-yyyy",
         "sr-Latn-CS" : "d.M.yyyy",
         "sv-FI" : "d.M.yyyy",
         "az-Cyrl-AZ" : "dd.MM.yyyy",
         "ms-BN" : "dd/MM/yyyy",
         "uz-Cyrl-UZ" : "dd.MM.yyyy",
         "ar-EG" : "dd/MM/yyyy",
         "zh-HK" : "d/M/yyyy",
         "de-AT" : "dd.MM.yyyy",
         "en-AU" : "d/MM/yyyy",
         "es-ES" : "dd/MM/yyyy",
         "fr-CA" : "yyyy-MM-dd",
         "sr-Cyrl-CS" : "d.M.yyyy",
         "ar-LY" : "dd/MM/yyyy",
         "zh-SG" : "d/M/yyyy",
         "de-LU" : "dd.MM.yyyy",
         "en-CA" : "dd/MM/yyyy",
         "es-GT" : "dd/MM/yyyy",
         "fr-CH" : "dd.MM.yyyy",
         "ar-DZ" : "dd-MM-yyyy",
         "zh-MO" : "d/M/yyyy",
         "de-LI" : "dd.MM.yyyy",
         "en-NZ" : "d/MM/yyyy",
         "es-CR" : "dd/MM/yyyy",
         "fr-LU" : "dd/MM/yyyy",
         "ar-MA" : "dd-MM-yyyy",
         "en-IE" : "dd/MM/yyyy",
         "es-PA" : "MM/dd/yyyy",
         "fr-MC" : "dd/MM/yyyy",
         "ar-TN" : "dd-MM-yyyy",
         "en-ZA" : "yyyy/MM/dd",
         "es-DO" : "dd/MM/yyyy",
         "ar-OM" : "dd/MM/yyyy",
         "en-JM" : "dd/MM/yyyy",
         "es-VE" : "dd/MM/yyyy",
         "ar-YE" : "dd/MM/yyyy",
         "en-029" : "MM/dd/yyyy",
         "es-CO" : "dd/MM/yyyy",
         "ar-SY" : "dd/MM/yyyy",
         "en-BZ" : "dd/MM/yyyy",
         "es-PE" : "dd/MM/yyyy",
         "ar-JO" : "dd/MM/yyyy",
         "en-TT" : "dd/MM/yyyy",
         "es-AR" : "dd/MM/yyyy",
         "ar-LB" : "dd/MM/yyyy",
         "en-ZW" : "M/d/yyyy",
         "es-EC" : "dd/MM/yyyy",
         "ar-KW" : "dd/MM/yyyy",
         "en-PH" : "M/d/yyyy",
         "es-CL" : "dd-MM-yyyy",
         "ar-AE" : "dd/MM/yyyy",
         "es-UY" : "dd/MM/yyyy",
         "ar-BH" : "dd/MM/yyyy",
         "es-PY" : "dd/MM/yyyy",
         "ar-QA" : "dd/MM/yyyy",
         "es-BO" : "dd/MM/yyyy",
         "es-SV" : "dd/MM/yyyy",
         "es-HN" : "dd/MM/yyyy",
         "es-NI" : "dd/MM/yyyy",
         "es-PR" : "dd/MM/yyyy",
         "am-ET" : "d/M/yyyy",
         "tzm-Latn-DZ" : "dd-MM-yyyy",
         "iu-Latn-CA" : "d/MM/yyyy",
         "sma-NO" : "dd.MM.yyyy",
         "mn-Mong-CN" : "yyyy/M/d",
         "gd-GB" : "dd/MM/yyyy",
         "en-MY" : "d/M/yyyy",
         "prs-AF" : "dd/MM/yy",
         "bn-BD" : "dd-MM-yy",
         "wo-SN" : "dd/MM/yyyy",
         "rw-RW" : "M/d/yyyy",
         "qut-GT" : "dd/MM/yyyy",
         "sah-RU" : "MM.dd.yyyy",
         "gsw-FR" : "dd/MM/yyyy",
         "co-FR" : "dd/MM/yyyy",
         "oc-FR" : "dd/MM/yyyy",
         "mi-NZ" : "dd/MM/yyyy",
         "ga-IE" : "dd/MM/yyyy",
         "se-SE" : "yyyy-MM-dd",
         "br-FR" : "dd/MM/yyyy",
         "smn-FI" : "d.M.yyyy",
         "moh-CA" : "M/d/yyyy",
         "arn-CL" : "dd-MM-yyyy",
         "ii-CN" : "yyyy/M/d",
         "dsb-DE" : "d. M. yyyy",
         "ig-NG" : "d/M/yyyy",
         "kl-GL" : "dd-MM-yyyy",
         "lb-LU" : "dd/MM/yyyy",
         "ba-RU" : "dd.MM.yy",
         "nso-ZA" : "yyyy/MM/dd",
         "quz-BO" : "dd/MM/yyyy",
         "yo-NG" : "d/M/yyyy",
         "ha-Latn-NG" : "d/M/yyyy",
         "fil-PH" : "M/d/yyyy",
         "ps-AF" : "dd/MM/yy",
         "fy-NL" : "d-M-yyyy",
         "ne-NP" : "M/d/yyyy",
         "se-NO" : "dd.MM.yyyy",
         "iu-Cans-CA" : "d/M/yyyy",
         "sr-Latn-RS" : "d.M.yyyy",
         "si-LK" : "yyyy-MM-dd",
         "sr-Cyrl-RS" : "d.M.yyyy",
         "lo-LA" : "dd/MM/yyyy",
         "km-KH" : "yyyy-MM-dd",
         "cy-GB" : "dd/MM/yyyy",
         "bo-CN" : "yyyy/M/d",
         "sms-FI" : "d.M.yyyy",
         "as-IN" : "dd-MM-yyyy",
         "ml-IN" : "dd-MM-yy",
         "en-IN" : "dd-MM-yyyy",
         "or-IN" : "dd-MM-yy",
         "bn-IN" : "dd-MM-yy",
         "tk-TM" : "dd.MM.yy",
         "bs-Latn-BA" : "d.M.yyyy",
         "mt-MT" : "dd/MM/yyyy",
         "sr-Cyrl-ME" : "d.M.yyyy",
         "se-FI" : "d.M.yyyy",
         "zu-ZA" : "yyyy/MM/dd",
         "xh-ZA" : "yyyy/MM/dd",
         "tn-ZA" : "yyyy/MM/dd",
         "hsb-DE" : "d. M. yyyy",
         "bs-Cyrl-BA" : "d.M.yyyy",
         "tg-Cyrl-TJ" : "dd.MM.yy",
         "sr-Latn-BA" : "d.M.yyyy",
         "smj-NO" : "dd.MM.yyyy",
         "rm-CH" : "dd/MM/yyyy",
         "smj-SE" : "yyyy-MM-dd",
         "quz-EC" : "dd/MM/yyyy",
         "quz-PE" : "dd/MM/yyyy",
         "hr-BA" : "d.M.yyyy.",
         "sr-Latn-ME" : "d.M.yyyy",
         "sma-SE" : "yyyy-MM-dd",
         "en-SG" : "d/M/yyyy",
         "ug-CN" : "yyyy-M-d",
         "sr-Cyrl-BA" : "d.M.yyyy",
         "es-US" : "M/d/yyyy"
      };
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = formats[loc] || 'dd/MM/yyyy';
    Result = res;
    return Result;
  };
  this.GetLocaleLongDayName = function (DayOfWeek, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(Date.UTC(2017, 0, 1)); // Sunday
        baseDate.setDate(baseDate.getDate() + DayOfWeek - 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { weekday: 'long' });
    Result = res;
    return Result;
  };
  this.GetLocaleShortDayName = function (DayOfWeek, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(Date.UTC(2017, 0, 1)); // Sunday
        baseDate.setDate(baseDate.getDate() + DayOfWeek - 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { weekday: 'short' });
    Result = res;
    return Result;
  };
  this.GetLocaleLongMonthName = function (Month, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(Date.UTC(2017, 0, 1)); // January
        baseDate.setMonth(baseDate.getMonth() + Month - 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { month: 'long' });
    Result = res;
    return Result;
  };
  this.GetLocaleShortMonthName = function (Month, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(Date.UTC(2017, 0, 1)); // January
        baseDate.setMonth(baseDate.getMonth() + Month - 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { month: 'short' });
    Result = res;
    return Result;
  };
  this.GetLocaleDecimalSeparator = function () {
    var Result = "";
    var res = "";
    var n = 1.1;
    n = n.toLocaleString().substring(1, 2);
    res = n;
    Result = res;
    return Result;
  };
  this.GetBrowserLocale = function () {
    var Result = "";
    var res = "";
    res = navigator.language;
    Result = res;
    return Result;
  };
},["SysUtils"]);
rtl.module("WEBLib.Dialogs",["System","Classes","WEBLib.Controls","Web","SysUtils","WEBLib.ExtCtrls","WEBLib.WebTools"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TMsgDlgType = {"0": "mtWarning", mtWarning: 0, "1": "mtError", mtError: 1, "2": "mtInformation", mtInformation: 2, "3": "mtConfirmation", mtConfirmation: 3, "4": "mtCustom", mtCustom: 4};
  rtl.createClass($mod,"TMessageDlg",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FOpacity = 0.0;
      this.FMessage = "";
      this.FMsgDlgType = 0;
      this.FOnButtonClick = null;
      this.FOnClose = null;
    };
    this.$final = function () {
      this.FOnButtonClick = undefined;
      this.FOnClose = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.BindEvents = function () {
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.apply(this,arguments);
      this.FOpacity = 0.2;
      this.FMessage = "";
      this.FMsgDlgType = $mod.TMsgDlgType.mtInformation;
    };
    var $r = this.$rtti;
    $r.addProperty("Opacity",0,rtl.double,"FOpacity","FOpacity");
    $r.addProperty("OnButtonClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnButtonClick","FOnButtonClick");
    $r.addProperty("OnClose",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClose","FOnClose");
  });
  $mod.$init = function () {
    $impl.WebLibDlg = null;
  };
},["WEBLib.Forms"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.WebLibDlg = null;
});
rtl.module("WEBLib.Forms",["System","Classes","SysUtils","WEBLib.Graphics","WEBLib.Controls","WEBLib.Lang","Web"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.idCancel = 2;
  this.mrNone = 0;
  this.mrCancel = 2;
  this.TCloseAction = {"0": "caNone", caNone: 0, "1": "caHide", caHide: 1, "2": "caFree", caFree: 2, "3": "caMinimize", caMinimize: 3};
  $mod.$rtti.$Enum("TCloseAction",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TCloseAction});
  this.TFormStyle = {"0": "fsNormal", fsNormal: 0, "1": "fsStayOnTop", fsStayOnTop: 1};
  $mod.$rtti.$Enum("TFormStyle",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TFormStyle});
  $mod.$rtti.$MethodVar("TCloseEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Action",$mod.$rtti["TCloseAction"],1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TCloseQueryEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["CanClose",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TCustomForm",pas["WEBLib.Controls"].TWinControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TWinControl.$init.call(this);
      this.FLayer$1 = null;
      this.FPopup = false;
      this.FFormFileName = "";
      this.FFormContent = "";
      this.FFormContainer = "";
      this.FFormElement = "";
      this.FFormStyle = 0;
      this.FOnCreate = null;
      this.FOnResize = null;
      this.FOnShow = null;
      this.FModalResult = 0;
      this.FOnPaint = null;
      this.FOnDeactivate = null;
      this.FOnCloseQuery = null;
      this.FOnClose = null;
      this.FModalProc = null;
      this.FCaption = "";
      this.FIsResizing$1 = false;
      this.FOnScroll = null;
      this.FOnUnload = null;
    };
    this.$final = function () {
      this.FLayer$1 = undefined;
      this.FOnCreate = undefined;
      this.FOnResize = undefined;
      this.FOnShow = undefined;
      this.FOnPaint = undefined;
      this.FOnDeactivate = undefined;
      this.FOnCloseQuery = undefined;
      this.FOnClose = undefined;
      this.FModalProc = undefined;
      this.FOnScroll = undefined;
      this.FOnUnload = undefined;
      pas["WEBLib.Controls"].TWinControl.$final.call(this);
    };
    this.DoResize = function (Event) {
      var Result = false;
      this.CreateControl();
      this.Resize$1();
      Result = true;
      return Result;
    };
    this.DoLoaded = function (Event) {
      var Result = false;
      this.Resize$1();
      this.InitAnchoring();
      Result = true;
      return Result;
    };
    this.DoScroll = function (Event) {
      var Result = false;
      if (this.FOnScroll != null) this.FOnScroll(this);
      Result = true;
      return Result;
    };
    this.DoUnload = function (Event) {
      var Result = false;
      if (this.FOnUnload != null) this.FOnUnload(this);
      Result = true;
      return Result;
    };
    this.SetModalResult = function (Value) {
      this.FModalResult = Value;
      if (this.FModalResult !== 0) this.Close();
    };
    this.GetFormStyle = function () {
      var Result = 0;
      Result = this.FFormStyle;
      return Result;
    };
    this.SetFormStyle = function (Value) {
      this.FFormStyle = Value;
    };
    this.GetCanvas = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        this.FCaption = AValue;
        this.UpdateElement();
      };
    };
    this.Resize$1 = function () {
      var i = 0;
      this.FIsResizing$1 = true;
      this.AlignControl(this);
      if (this.FOnResize != null) this.FOnResize(this);
      this.FIsResizing$1 = false;
      if (!this.IsUpdating()) {
        if ((this.FOrigRect.Left === -1) && (this.FOrigRect.Top === -1)) this.InitAnchoring();
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.GetControls(i).UpdateAnchoring();
        };
      };
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TControl.Loaded.apply(this,arguments);
    };
    this.DoClose = function (CloseAction) {
      if ((this.FModalProc != null) && (CloseAction.get() !== $mod.TCloseAction.caNone)) {
        this.FModalProc(this.FModalResult);
        this.FModalProc = null;
      };
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TControl.BindEvents.apply(this,arguments);
      window.addEventListener("resize",rtl.createCallback(this,"DoResize"));
      window.addEventListener("load",rtl.createCallback(this,"DoLoaded"));
      document.addEventListener("scroll",rtl.createCallback(this,"DoScroll"));
      window.addEventListener("unload",rtl.createCallback(this,"DoUnload"));
    };
    this.UnbindEvents = function () {
      pas["WEBLib.Controls"].TControl.UnbindEvents.apply(this,arguments);
      if (this.FLayer$1 != null) this.FLayer$1.removeEventListener("click",rtl.createCallback(this,"HandleDoClick$1"));
      window.removeEventListener("resize",rtl.createCallback(this,"DoResize"));
      window.removeEventListener("load",rtl.createCallback(this,"DoLoaded"));
      document.removeEventListener("scroll",rtl.createCallback(this,"DoScroll"));
      window.removeEventListener("unload",rtl.createCallback(this,"DoUnload"));
    };
    this.DoExit = function () {
      pas["WEBLib.Controls"].TControl.DoExit.apply(this,arguments);
      if (this.FPopup) this.Close();
    };
    this.DoCreate = function () {
      this.BeginUpdate();
      this.LoadDFMValues();
      this.Loaded();
      if (this.FOnCreate != null) this.FOnCreate(this);
      this.EndUpdate();
      this.AlignControl(this);
      if (this.FOnShow != null) this.FOnShow(this);
    };
    this.DoShow = function () {
      if (this.FOnShow != null) this.FOnShow(this);
    };
    this.HandleDoClick$1 = function (Event) {
      var Result = false;
      Event.stopPropagation();
      this.Close();
      Result = true;
      return Result;
    };
    this.GetWidth = function () {
      var Result = 0;
      var d = 0;
      var dr = null;
      var s = "";
      var el = null;
      var css = null;
      if (this.FFormElement !== "") {
        el = document.getElementById(this.FFormElement);
        if (el != null) {
          dr = el.getBoundingClientRect();
          Result = Math.round(dr.right - dr.left);
          return Result;
        };
      };
      if (this.GetElementHandle() === document.body) {
        css = window.getComputedStyle(this.GetElementHandle());
        s = css.getPropertyValue("margin-left");
        s = pas.System.Copy(s,1,s.length - 2);
        d = pas.SysUtils.StrToInt(s) - 2;
        Result = (window.innerWidth - d) + 4;
      } else {
        if (this.FPopup) {
          Result = pas["WEBLib.Controls"].TControl.GetWidth.call(this)}
         else {
          Result = Math.round(this.GetElementHandle().offsetWidth);
          if (Result === 0) Result = window.innerWidth;
        };
      };
      return Result;
    };
    this.GetHeight = function () {
      var Result = 0;
      var d = 0;
      var s = "";
      var css = null;
      var el = null;
      var dr = null;
      if (this.FFormElement !== "") {
        el = document.getElementById(this.FFormElement);
        if (el != null) {
          dr = el.getBoundingClientRect();
          Result = Math.round(dr.bottom - dr.top);
          return Result;
        };
      };
      if (this.GetElementHandle() === document.body) {
        css = window.getComputedStyle(this.GetElementHandle());
        s = css.getPropertyValue("margin-top");
        s = pas.System.Copy(s,1,s.length - 2);
        d = pas.SysUtils.StrToInt(s) - 2;
        Result = window.innerHeight - d;
      } else {
        if (this.FPopup) {
          Result = pas["WEBLib.Controls"].TControl.GetHeight.call(this)}
         else {
          Result = Math.round(this.GetElementHandle().offsetHeight);
          if (Result === 0) Result = window.innerHeight;
        };
      };
      return Result;
    };
    this.GetLeft = function () {
      var Result = 0;
      if (this.FPopup) {
        Result = pas["WEBLib.Controls"].TControl.GetLeft.call(this)}
       else Result = Math.round(this.GetElementHandle().offsetLeft);
      return Result;
    };
    this.GetTop = function () {
      var Result = 0;
      if (this.FPopup) {
        Result = pas["WEBLib.Controls"].TControl.GetTop.call(this)}
       else Result = Math.round(this.GetElementHandle().offsetTop);
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      var eh = null;
      if (this.FPopup) {
        Result = document.createElement("SPAN");
        this.FLayer$1 = document.createElement("SPAN");
        document.body.appendChild(this.FLayer$1);
        eh = this.FLayer$1;
        eh.addEventListener("click",rtl.createCallback(this,"HandleDoClick$1"));
        eh.style.setProperty("top","0");
        eh.style.setProperty("left","0");
        eh.style.setProperty("right","0");
        eh.style.setProperty("bottom","0");
        eh.style.setProperty("webkit-user-select","none");
        eh.style.setProperty("moz-user-select","none");
        eh.style.setProperty("khtml-user-select","none");
        eh.style.setProperty("ms-user-select","none");
        eh.style.setProperty("user-select","none");
        eh.style.setProperty("position","absolute");
      } else {
        Result = this.FormContainerElement();
      };
      return Result;
    };
    this.UpdateElement = function () {
      var clr = "";
      var i = 0;
      pas["WEBLib.Controls"].TControl.UpdateElement.apply(this,arguments);
      if (this.IsUpdating()) return;
      if (this.GetElementHandle() != null) {
        if (this.FCaption !== "") window.document.title = this.FCaption;
        clr = pas["WEBLib.Graphics"].ColorToHTML(this.FColor);
        this.GetElementHandle().style.setProperty("background-Color",clr);
        for (var $l1 = 0, $end2 = this.GetComponentCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (pas["WEBLib.Controls"].TCSSCodeManager.isPrototypeOf(this.GetComponent(i))) ;
        };
      };
    };
    this.ContainerElement = function () {
      var Result = null;
      Result = this.FormContainerElement();
      return Result;
    };
    this.FormContainerElement = function () {
      var Result = null;
      if (this.FFormContainer !== "") {
        this.SetID(this.FFormContainer);
        Result = document.getElementById(this.FFormContainer);
        if (!(Result != null)) Result = document.body;
      } else {
        Result = document.body;
      };
      return Result;
    };
    this.GetElementBindHandle = function () {
      var Result = null;
      Result = window;
      return Result;
    };
    this.GetElementHandle = function () {
      var Result = null;
      if (this.FPopup) {
        Result = pas["WEBLib.Controls"].TControl.GetElementHandle.call(this)}
       else Result = this.FormContainerElement();
      return Result;
    };
    this.CloseQuery = function () {
      var Result = false;
      Result = true;
      if (this.FOnCloseQuery != null) this.FOnCloseQuery(this,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.LoadDFMValues = function () {
    };
    this.Init = function () {
    };
    this.IsFocused = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TControl.CreateInitialize.apply(this,arguments);
      this.FModalResult = 0;
      this.FFormStyle = $mod.TFormStyle.fsNormal;
      this.SetColor(16777215);
      window.addEventListener("load",rtl.createCallback(this,"DoLoaded"));
    };
    this.Create$2 = function (id) {
      pas["WEBLib.Controls"].TControl.Create$2.call(this,id);
      this.FFormElement = "";
      this.FModalResult = 0;
      this.FFormStyle = $mod.TFormStyle.fsNormal;
      this.DoCreate();
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.FFormFileName = "";
      this.FPopup = true;
    };
    this.CreateNew = function (AOwner, Dummy) {
      this.Create$1(AOwner);
    };
    this.Destroy = function () {
      if (this.FVisible) this.Close();
      pas["WEBLib.Controls"].TControl.Destroy.apply(this,arguments);
      if (this.FLayer$1 != null) {
        this.FormContainerElement().removeChild(this.FLayer$1);
        this.FLayer$1 = null;
      };
    };
    this.Close = function () {
      var lAction = 0;
      if (this.CloseQuery()) {
        this.ClearControls();
        this.UnbindEvents();
        lAction = $mod.TCloseAction.caHide;
        if (this.FOnClose != null) this.FOnClose(this,{get: function () {
            return lAction;
          }, set: function (v) {
            lAction = v;
          }});
        if (lAction !== $mod.TCloseAction.caNone) {
          if (this.FFormFileName === "") {
            if (this.FLayer$1 != null) {
              this.FormContainerElement().removeChild(this.FLayer$1);
              this.FLayer$1 = null;
            };
            if (this.FFormElement !== "") {
              this.FContainer.innerHTML = "";
              this.FContainer = null;
            } else if (this.FContainer != null) {
              this.FormContainerElement().removeChild(this.FContainer);
              this.FContainer = null;
            };
          } else {
            if (this.FFormElement !== "") {
              this.FContainer.innerHTML = "";
              this.FContainer = null;
            };
          };
          if (this.FFormElement === "") $mod.Application.PopForm();
          this.DoClose({get: function () {
              return lAction;
            }, set: function (v) {
              lAction = v;
            }});
          if ((lAction === $mod.TCloseAction.caFree) && !(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) $impl.ReleaseForm(this);
          this.SetVisible(false);
        };
      };
    };
    this.Show = function () {
      if (this.FFormFileName === "") {
        document.body.appendChild(this.FContainer);
      };
      this.SetVisible(true);
      this.DoShow();
    };
    this.ShowModal = function () {
      var Result = 0;
      Result = 0;
      this.Show();
      return Result;
    };
  });
  rtl.createClass($mod,"TForm",$mod.TCustomForm,function () {
    var $r = this.$rtti;
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnResize",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnResize","FOnResize");
    $r.addProperty("OnShow",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnShow","FOnShow");
    $r.addProperty("OnScroll",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnScroll","FOnScroll");
    $r.addProperty("OnPaint",0,$mod.$rtti["TNotifyEvent"],"FOnPaint","FOnPaint");
    $r.addProperty("FormStyle",3,$mod.$rtti["TFormStyle"],"GetFormStyle","SetFormStyle");
    $r.addProperty("OnDeactivate",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDeactivate","FOnDeactivate");
    $r.addProperty("OnClose",0,$mod.$rtti["TCloseEvent"],"FOnClose","FOnClose");
    $r.addProperty("OnCloseQuery",0,$mod.$rtti["TCloseQueryEvent"],"FOnCloseQuery","FOnCloseQuery");
    $r.addProperty("OnTouchStart",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchStart","FOnTouchStart");
    $r.addProperty("OnTouchMove",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchMove","FOnTouchMove");
    $r.addProperty("OnTouchEnd",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchEnd","FOnTouchEnd");
    $r.addProperty("OnUnload",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnUnload","FOnUnload");
  });
  rtl.createClass($mod,"TApplication",pas["WEBLib.Controls"].TControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TControl.$init.call(this);
      this.FMainFormOnTaskBar = false;
      this.FLastReq = null;
      this.FMainForm = null;
      this.FFormStack = null;
      this.FParameters = null;
      this.FIsRedirect = false;
      this.FLanguage = 0;
      this.FOnImageCacheReady = null;
    };
    this.$final = function () {
      this.FLastReq = undefined;
      this.FMainForm = undefined;
      this.FFormStack = undefined;
      this.FParameters = undefined;
      this.FOnImageCacheReady = undefined;
      pas["WEBLib.Controls"].TControl.$final.call(this);
    };
    this.GetFormExtension = function () {
      var Result = "";
      if (this.FLanguage !== pas["WEBLib.Lang"].TUILanguage.lNone) {
        Result = ("_" + pas["WEBLib.Lang"].GetLanguageISO639_1Code(this.FLanguage)) + $impl.cHTMLExt}
       else Result = $impl.cHTMLExt;
      return Result;
    };
    this.PushForm = function (AForm) {
      var i = 0;
      for (var $l1 = 0, $end2 = AForm.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        AForm.GetControls(i).PersistinHTML();
      };
      AForm.FFormContent = document.body.innerHTML;
      for (var $l3 = 0, $end4 = AForm.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        AForm.GetControls(i).DisableTab();
      };
      this.FFormStack.Add(AForm);
    };
    this.PopForm = function () {
      var Result = null;
      var i = 0;
      var frm = "";
      if (this.FFormStack.GetCount() > 0) {
        Result = rtl.getObject(this.FFormStack.Get(this.FFormStack.GetCount() - 1));
        frm = Result.FFormContent;
        this.FFormStack.Delete(this.FFormStack.GetCount() - 1);
        document.body.innerHTML = frm;
        Result.InitFromHTML();
        Result.BindEvents();
        for (var $l1 = 0, $end2 = Result.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Result.GetControls(i).HookElement();
        };
        for (var $l3 = 0, $end4 = Result.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          Result.GetControls(i).RecreateCanvas();
          Result.GetControls(i).InternalResize();
        };
        $mod.Application.FMainForm = Result;
      };
      return Result;
    };
    this.Create$1 = function (AOwner) {
      this.FFormStack = pas.Classes.TList.$create("Create$1");
      this.FParameters = pas.Classes.TStringList.$create("Create$1");
      this.FMainForm = null;
      this.FIsRedirect = false;
    };
    this.Destroy = function () {
      rtl.free(this,"FFormStack");
      rtl.free(this,"FParameters");
      pas["WEBLib.Controls"].TControl.Destroy.call(this);
    };
    this.CreateForm = function (AInstanceClass, AReference) {
      var Self = this;
      var lFileName = "";
      function DoStatusCreate(Event) {
        var Result = false;
        document.body.innerHTML = Self.FLastReq.responseText;
        if (Self.FMainForm != null) Self.PushForm(Self.FMainForm);
        Self.FMainForm = AInstanceClass.$create("Create$2",[$impl.cBodyTag]);
        Self.FMainForm.FFormFileName = lFileName;
        Self.FMainForm.CreateControl();
        Self.FMainForm.Init();
        AReference.set(Self.FMainForm);
        Result = true;
        return Result;
      };
      if (Self.FIsRedirect) return;
      lFileName = AInstanceClass.$module.$name + Self.GetFormExtension();
      Self.FLastReq = new XMLHttpRequest();
      Self.FLastReq.addEventListener("load",DoStatusCreate);
      Self.FLastReq.open("GET",lFileName);
      Self.FLastReq.setRequestHeader("Cache-Control","no-cache");
      Self.FLastReq.send();
    };
    this.Initialize = function () {
      var query = "";
      var token = "";
      this.FParameters.Clear();
      query = window.location.href;
      this.InitFormatSettings(pas["WEBLib.WebTools"].GetBrowserLocale());
      this.FParameters.SetDelimiter("&");
      this.FParameters.FStrictDelimiter = true;
      this.FParameters.SetDelimitedText(query);
      if (this.FParameters.IndexOfName("code") !== -1) {
        this.FIsRedirect = true;
        token = this.FParameters.GetValue("code");
        window.opener.processAuthData(token);
        window.close();
      };
      if (this.FParameters.IndexOfName("access_token") !== -1) {
        this.FIsRedirect = true;
        token = this.FParameters.GetValue("access_token");
        window.opener.processAuthData(token);
        window.close();
      };
    };
    this.InitFormatSettings = function (BrowserLocale) {
      var timestr = "";
      var i = 0;
      var locale = "";
      locale = BrowserLocale;
      pas.SysUtils.FormatSettings.SetShortDateFormat(pas["WEBLib.WebTools"].GetLocaleShortDateFormat(locale));
      if (pas.System.Pos("\/",pas.SysUtils.FormatSettings.GetShortDateFormat()) > 0) pas.SysUtils.FormatSettings.SetDateSeparator("\/");
      if (pas.System.Pos(".",pas.SysUtils.FormatSettings.GetShortDateFormat()) > 0) pas.SysUtils.FormatSettings.SetDateSeparator(".");
      if (pas.System.Pos("-",pas.SysUtils.FormatSettings.GetShortDateFormat()) > 0) pas.SysUtils.FormatSettings.SetDateSeparator("-");
      var event = new Date('Jan 1, 1980 06:07:08 GMT+00:00');
      var loc = "";
      if (locale == "") { loc = navigator.language; } else
      { loc = locale; }
      timestr = event.toLocaleTimeString(loc);
      if (pas.System.Pos(":",timestr) > 0) pas.SysUtils.FormatSettings.SetTimeSeparator(":");
      if (pas.System.Pos("-",timestr) > 0) pas.SysUtils.FormatSettings.SetTimeSeparator(".");
      if (pas.System.Pos("-",timestr) > 0) pas.SysUtils.FormatSettings.SetTimeSeparator("-");
      for (i = 1; i <= 7; i++) {
        pas.SysUtils.ShortDayNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleShortDayName(i,locale);
        pas.SysUtils.LongDayNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleLongDayName(i,locale);
      };
      for (i = 1; i <= 12; i++) {
        pas.SysUtils.ShortMonthNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleShortMonthName(i,locale);
        pas.SysUtils.LongMonthNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleLongMonthName(i,locale);
      };
      pas.SysUtils.FormatSettings.SetDecimalSeparator(pas["WEBLib.WebTools"].GetLocaleDecimalSeparator());
      if (pas.SysUtils.FormatSettings.GetDecimalSeparator() === ".") {
        pas.SysUtils.FormatSettings.SetThousandSeparator(",")}
       else pas.SysUtils.FormatSettings.SetThousandSeparator(".");
    };
    this.Run = function () {
    };
  });
  this.GetParentForm = function (AControl) {
    var Result = null;
    var FOwner = null;
    Result = null;
    FOwner = AControl;
    while ((FOwner != null) && !$mod.TCustomForm.isPrototypeOf(FOwner)) {
      FOwner = FOwner.FOwner;
    };
    if ((FOwner != null) && $mod.TCustomForm.isPrototypeOf(FOwner)) Result = rtl.as(FOwner,$mod.TCustomForm);
    return Result;
  };
  this.Application = null;
  $mod.$init = function () {
    $mod.Application = $mod.TApplication.$create("Create$1",[null]);
  };
},["WEBLib.Dialogs","WEBLib.WebTools"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.cBodyTag = "body";
  $impl.cHTMLExt = ".html";
  $impl.ReleaseForm = function (AForm) {
    AForm = rtl.freeLoc(AForm);
    AForm = null;
  };
});
rtl.module("WEBLib.TMSFNCTypes",["System","Types","Classes","WEBLib.Graphics","SysUtils","WEBLib.Controls","math"],function () {
  "use strict";
  var $mod = this;
  this.KEY_ESCAPE = 27;
  this.KEY_INSERT = 45;
  this.KEY_DELETE = 46;
  this.KEY_TAB = 9;
  this.KEY_PRIOR = 33;
  this.KEY_NEXT = 34;
  this.KEY_UP = 38;
  this.KEY_DOWN = 40;
  this.KEY_RIGHT = 39;
  this.KEY_LEFT = 37;
  this.KEY_HOME = 36;
  this.KEY_END = 35;
  this.KEY_RETURN = 13;
  this.KEY_SPACE = 32;
  this.KEY_F2 = 113;
  this.KEY_F4 = 115;
  rtl.createClass($mod,"TPopupMenu",pas.Classes.TComponent,function () {
  });
  this.TSizeF = function (s) {
    if (s) {
      this.cx = s.cx;
      this.cy = s.cy;
    } else {
      this.cx = 0.0;
      this.cy = 0.0;
    };
    this.$equal = function (b) {
      return (this.cx === b.cx) && (this.cy === b.cy);
    };
  };
  this.TPointF = function (s) {
    if (s) {
      this.X = s.X;
      this.Y = s.Y;
    } else {
      this.X = 0.0;
      this.Y = 0.0;
    };
    this.$equal = function (b) {
      return (this.X === b.X) && (this.Y === b.Y);
    };
  };
  this.TRectF = function (s) {
    if (s) {
      this.Left = s.Left;
      this.Top = s.Top;
      this.Right = s.Right;
      this.Bottom = s.Bottom;
    } else {
      this.Left = 0.0;
      this.Top = 0.0;
      this.Right = 0.0;
      this.Bottom = 0.0;
    };
    this.$equal = function (b) {
      return (this.Left === b.Left) && ((this.Top === b.Top) && ((this.Right === b.Right) && (this.Bottom === b.Bottom)));
    };
  };
  $mod.$rtti.$Record("TRectF",{}).addFields("Left",rtl.double,"Top",rtl.double,"Right",rtl.double,"Bottom",rtl.double);
  rtl.createClass($mod,"TTMSFNCBitmap",pas["WEBLib.Graphics"].TBitmap,function () {
  });
  rtl.createClass($mod,"TTMSFNCMargins",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FRight = 0.0;
      this.FBottom = 0.0;
      this.FTop = 0.0;
      this.FLeft = 0.0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetBottom = function (Value) {
      if (this.FBottom !== Value) {
        this.FBottom = Value;
        this.Changed();
      };
    };
    this.SetLeft = function (Value) {
      if (this.FLeft !== Value) {
        this.FLeft = Value;
        this.Changed();
      };
    };
    this.SetRight = function (Value) {
      if (this.FRight !== Value) {
        this.FRight = Value;
        this.Changed();
      };
    };
    this.SetTop = function (Value) {
      if (this.FTop !== Value) {
        this.FTop = Value;
        this.Changed();
      };
    };
    this.IsLeftStored = function () {
      var Result = false;
      Result = this.FLeft !== 0;
      return Result;
    };
    this.IsTopStored = function () {
      var Result = false;
      Result = this.FTop !== 0;
      return Result;
    };
    this.IsRightStored = function () {
      var Result = false;
      Result = this.FRight !== 0;
      return Result;
    };
    this.IsBottomStored = function () {
      var Result = false;
      Result = this.FBottom !== 0;
      return Result;
    };
    this.Changed = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function () {
      this.FLeft = 0;
      this.FBottom = 0;
      this.FRight = 0;
      this.FTop = 0;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCMargins.isPrototypeOf(Source)) {
        this.FLeft = rtl.as(Source,$mod.TTMSFNCMargins).FLeft;
        this.FTop = rtl.as(Source,$mod.TTMSFNCMargins).FTop;
        this.FRight = rtl.as(Source,$mod.TTMSFNCMargins).FRight;
        this.FBottom = rtl.as(Source,$mod.TTMSFNCMargins).FBottom;
      };
    };
    this.Empty = function () {
      var Result = false;
      var r = new $mod.TRectF();
      r = new $mod.TRectF($mod.RectF(this.FLeft,this.FTop,this.FRight,this.FBottom));
      Result = $mod.RectIsEmpty(r);
      return Result;
    };
    this.Rect = function () {
      var Result = new $mod.TRectF();
      Result = new $mod.TRectF($mod.RectF(this.FLeft,this.FTop,this.FRight,this.FBottom));
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Left",14,rtl.double,"FLeft","SetLeft",{stored: "IsLeftStored"});
    $r.addProperty("Top",14,rtl.double,"FTop","SetTop",{stored: "IsTopStored"});
    $r.addProperty("Right",14,rtl.double,"FRight","SetRight",{stored: "IsRightStored"});
    $r.addProperty("Bottom",14,rtl.double,"FBottom","SetBottom",{stored: "IsBottomStored"});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TTMSFNCScaledBitmap",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FBitmap = null;
      this.FScale = 0.0;
      this.FBitmapName = "";
    };
    this.$final = function () {
      this.FBitmap = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.IsScaleStored = function () {
      var Result = false;
      Result = this.FScale !== 1.0;
      return Result;
    };
    this.SetBitmap = function (Value) {
      if (this.FBitmap !== Value) {
        this.FBitmap.Assign(Value);
        this.Changed(false);
      };
    };
    this.SetScale = function (Value) {
      if (this.FScale !== Value) {
        this.FScale = Value;
        this.Changed(false);
      };
    };
    this.SetBitmapName = function (Value) {
      if (this.FBitmapName !== Value) {
        this.FBitmapName = Value;
        this.Changed(false);
      };
    };
    this.BitmapChanged = function (Sender) {
      this.Changed(false);
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FBitmap = $mod.TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FScale = 1.0;
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas.Classes.TCollectionItem.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCScaledBitmap.isPrototypeOf(Source)) {
        this.FBitmap.Assign(rtl.as(Source,$mod.TTMSFNCScaledBitmap).FBitmap);
        this.FBitmapName = rtl.as(Source,$mod.TTMSFNCScaledBitmap).FBitmapName;
        this.FScale = rtl.as(Source,$mod.TTMSFNCScaledBitmap).FScale;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Bitmap",2,$mod.$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("BitmapName",2,rtl.string,"FBitmapName","SetBitmapName");
    $r.addProperty("Scale",14,rtl.double,"FScale","SetScale",{stored: "IsScaleStored"});
  });
  rtl.createClass($mod,"TTMSFNCScaledBitmaps",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItems = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.Update = function (Item) {
      pas.Classes.TCollection.Update.apply(this,arguments);
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TTMSFNCScaledBitmap);
    };
    this.Add$1 = function (Scale) {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      Result.SetScale(Scale);
      return Result;
    };
    this.AddBitmapFromResource$1 = function (ResourceName, AInstance, Scale) {
      var Result = null;
      Result = this.Add$1(Scale);
      Result.FBitmap.LoadFromResource$1(ResourceName,AInstance);
      return Result;
    };
    this.AddBitmap = function (Bitmap, Scale) {
      var Result = null;
      Result = this.Add$1(Scale);
      Result.FBitmap.Assign(Bitmap);
      return Result;
    };
    this.GetItemByScale = function (Scale) {
      var Result = null;
      var I = 0;
      var cl = null;
      var it = null;
      var mx = 0.0;
      Result = null;
      cl = null;
      mx = 0;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.GetItems(I);
        if (it.FScale === Scale) {
          Result = it;
          break;
        } else if ((it.FScale !== Scale) && (it.FScale > mx)) {
          cl = it;
          mx = it.FScale;
        };
      };
      if (Result === null) Result = cl;
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCOwnedCollection",pas.Classes.TOwnedCollection,function () {
  });
  this.InflateRectEx = function (R, DX, DY) {
    R.get().Left = R.get().Left - DX;
    R.get().Right = R.get().Right + DX;
    R.get().Top = R.get().Top - DY;
    R.get().Bottom = R.get().Bottom + DY;
  };
  this.OffsetRectEx$1 = function (R, DX, DY) {
    var Result = false;
    R.get().Left = R.get().Left + DX;
    R.get().Right = R.get().Right + DX;
    R.get().Top = R.get().Top + DY;
    R.get().Bottom = R.get().Bottom + DY;
    Result = true;
    return Result;
  };
  this.PtInRectEx = function (Rect, P) {
    var Result = false;
    Result = (((P.X >= Rect.Left) && (P.X < Rect.Right)) && (P.Y >= Rect.Top)) && (P.Y < Rect.Bottom);
    return Result;
  };
  this.IntersectRectEx = function (Rect1, Rect2) {
    var Result = false;
    Result = (((Rect1.Left < Rect2.Right) && (Rect1.Right > Rect2.Left)) && (Rect1.Top < Rect2.Bottom)) && (Rect1.Bottom > Rect2.Top);
    return Result;
  };
  this.IntersectRectEx$1 = function (Rect, R1, R2) {
    var Result = false;
    var tmpRect = new $mod.TRectF();
    tmpRect = new $mod.TRectF(R1);
    if (R2.Left > R1.Left) tmpRect.Left = R2.Left;
    if (R2.Top > R1.Top) tmpRect.Top = R2.Top;
    if (R2.Right < R1.Right) tmpRect.Right = R2.Right;
    if (R2.Bottom < R1.Bottom) tmpRect.Bottom = R2.Bottom;
    Result = !$mod.RectIsEmpty(tmpRect);
    if (!Result) {
      tmpRect.Top = 0.0;
      tmpRect.Bottom = 0.0;
      tmpRect.Left = 0.0;
      tmpRect.Right = 0.0;
    };
    Rect.set(new $mod.TRectF(tmpRect));
    return Result;
  };
  this.RectWidthEx$1 = function (Rect) {
    var Result = 0.0;
    Result = Rect.Right - Rect.Left;
    return Result;
  };
  this.RectHeightEx$1 = function (Rect) {
    var Result = 0.0;
    Result = Rect.Bottom - Rect.Top;
    return Result;
  };
  this.RectCenterEx$1 = function (R, B) {
    var Result = new $mod.TRectF();
    $mod.OffsetRectEx$1(R,-R.get().Left,-R.get().Top);
    $mod.OffsetRectEx$1(R,Math.round(($mod.RectWidthEx$1(B) - $mod.RectWidthEx$1(R.get())) / 2),Math.round(($mod.RectHeightEx$1(B) - $mod.RectHeightEx$1(R.get())) / 2));
    $mod.OffsetRectEx$1(R,B.Left,B.Top);
    Result = new $mod.TRectF(R.get());
    return Result;
  };
  this.RectCenterAtEx = function (Rect, ADesignatedArea) {
    var Result = new $mod.TRectF();
    Result = new $mod.TRectF(Rect);
    $mod.RectCenterEx$1({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},ADesignatedArea);
    return Result;
  };
  this.RectSnapToPixelEx = function (Rect, AScale, APlaceBetweenPixels) {
    var Result = new $mod.TRectF();
    var LScale = 0.0;
    var HalfPixel = 0.0;
    if (AScale <= 0) {
      LScale = 1}
     else LScale = AScale;
    Result.Left = pas.System.Trunc(Rect.Left * LScale) / LScale;
    Result.Top = pas.System.Trunc(Rect.Top * LScale) / LScale;
    Result.Right = Result.Left + (Math.round((Rect.Right - Rect.Left) * LScale) / LScale);
    Result.Bottom = Result.Top + (Math.round((Rect.Bottom - Rect.Top) * LScale) / LScale);
    if (APlaceBetweenPixels) {
      HalfPixel = 1 / (2 * LScale);
      $mod.OffsetRectEx$1({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},HalfPixel,HalfPixel);
    };
    return Result;
  };
  this.RectFitIntoEx = function (Rect, ADesignatedArea, Ratio) {
    var Result = new $mod.TRectF();
    if (((ADesignatedArea.Right - ADesignatedArea.Left) <= 0) || ((ADesignatedArea.Bottom - ADesignatedArea.Top) <= 0)) {
      Ratio.set(1);
      return Rect;
    };
    if (((Rect.Right - Rect.Left) / (ADesignatedArea.Right - ADesignatedArea.Left)) > ((Rect.Bottom - Rect.Top) / (ADesignatedArea.Bottom - ADesignatedArea.Top))) {
      Ratio.set((Rect.Right - Rect.Left) / (ADesignatedArea.Right - ADesignatedArea.Left))}
     else Ratio.set((Rect.Bottom - Rect.Top) / (ADesignatedArea.Bottom - ADesignatedArea.Top));
    Result = new $mod.TRectF($mod.RectF(0,0,(Rect.Right - Rect.Left) / Ratio.get(),(Rect.Bottom - Rect.Top) / Ratio.get()));
    $mod.RectCenterEx$1({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},ADesignatedArea);
    return Result;
  };
  this.RectFitIntoEx$1 = function (Rect, ADesignatedArea) {
    var Result = new $mod.TRectF();
    var Ratio = 0.0;
    Result = new $mod.TRectF($mod.RectFitIntoEx(Rect,ADesignatedArea,{get: function () {
        return Ratio;
      }, set: function (v) {
        Ratio = v;
      }}));
    return Result;
  };
  this.GetPointLength = function (Point) {
    var Result = 0.0;
    Result = Math.sqrt(pas.System.Sqr$1(Point.X) + pas.System.Sqr$1(Point.Y));
    return Result;
  };
  this.CenterPointEx = function (R) {
    var Result = new $mod.TPointF();
    Result.X = ((R.Right - R.Left) / 2.0) + R.Left;
    Result.Y = ((R.Bottom - R.Top) / 2.0) + R.Top;
    return Result;
  };
  this.CompareValueEx = function (A, B, Epsilon) {
    var Result = -1;
    if (pas.math.SameValue(A,B,Epsilon)) {
      Result = 0}
     else if (A < B) {
      Result = -1}
     else Result = 1;
    return Result;
  };
  this.RectIsEmpty = function (R) {
    var Result = false;
    Result = (((R.Right < R.Left) || pas.math.SameValue(R.Right,R.Left,0.0)) || (R.Bottom < R.Top)) || pas.math.SameValue(R.Bottom,R.Top,0.0);
    return Result;
  };
  this.EmptyRect = function () {
    var Result = new $mod.TRectF();
    Result = new $mod.TRectF($mod.RectF(0,0,0,0));
    return Result;
  };
  this.RectIntersectsWithEx = function (ARect, R) {
    var Result = false;
    Result = (((ARect.Left < R.Right) && (ARect.Right > R.Left)) && (ARect.Top < R.Bottom)) && (ARect.Bottom > R.Top);
    return Result;
  };
  this.RectF = function (Left, Top, Right, Bottom) {
    var Result = new $mod.TRectF();
    Result.Left = Left;
    Result.Top = Top;
    Result.Bottom = Bottom;
    Result.Right = Right;
    return Result;
  };
  this.PointF = function (X, Y) {
    var Result = new $mod.TPointF();
    Result.X = X;
    Result.Y = Y;
    return Result;
  };
  this.BitmapToDrawBitmap = function (ABitmap) {
    var Result = null;
    Result = null;
    if (ABitmap != null) {
      Result = ABitmap;
    };
    return Result;
  };
  this.IsBitmapEmpty = function (ABitmap) {
    var Result = false;
    var b = null;
    Result = true;
    if (ABitmap != null) {
      b = $mod.BitmapToDrawBitmap(ABitmap);
      if (b != null) {
        Result = b.Empty();
      };
    };
    return Result;
  };
  this.AnsiPos = function (Substr, S) {
    var Result = 0;
    Result = pas.System.Pos(Substr,S);
    return Result;
  };
  this.HInstance = function () {
    var Result = 0;
    Result = 0;
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCUtils",["System","Classes","SysUtils","Types","WEBLib.TMSFNCTypes","WEBLib.Controls","WEBLib.Graphics","WEBLib.Forms","WEBLib.Dialogs"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TTMSFNCUtils",pas.System.TObject,function () {
    this.OpenURL = function (AURL) {
      window.open(AURL, '_blank');
    };
    this.SetFontSize = function (AFont, ASize) {
      AFont.SetSize(Math.round((ASize / 96) * 72));
    };
    this.IsHTML = function (AValue) {
      var Result = false;
      Result = ((pas.System.Pos("<\/",AValue) > 0) || (pas.System.Pos("\/>",AValue) > 0)) || (pas.System.Pos("<BR>",pas.SysUtils.UpperCase(AValue)) > 0);
      return Result;
    };
    this.GetMousePos = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TPointF();
      Result = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(-1,-1));
      return Result;
    };
    this.GetDPIScale = function (AOwner) {
      var Result = 0.0;
      Result = 1.0;
      return Result;
    };
    this.GetResourceStream$1 = function (AResourceName, AInstance) {
      var Result = null;
      Result = null;
      return Result;
    };
    this.Clone = function (AComponent) {
      var Result = null;
      throw pas.SysUtils.Exception.$create("Create$1",["Implement Clone"]);
      return Result;
    };
    this.VarPos = function (ASubValue, AValue, AResult) {
      var Result = 0;
      AResult.set(pas.System.Pos(ASubValue,AValue));
      Result = AResult.get();
      return Result;
    };
    this.MulDivInt = function (nNumber, nNumerator, nDenominator) {
      var Self = this;
      var Result = 0;
      function MathRound(AValue) {
        var Result = 0;
        if (AValue >= 0) {
          Result = pas.System.Trunc(AValue + 0.5)}
         else Result = pas.System.Trunc(AValue - 0.5);
        return Result;
      };
      if (nDenominator === 0) {
        Result = -1}
       else Result = MathRound((nNumber * nNumerator) / nDenominator);
      return Result;
    };
    this.IPos = function (su, s) {
      var Result = 0;
      Result = pas.System.Pos(pas.SysUtils.UpperCase(su),pas.SysUtils.UpperCase(s));
      return Result;
    };
    this.UnFixMarkup = function (su, SpecialChars) {
      var Result = "";
      var i = 0;
      while (pas.System.Pos("&lt;",su) > 0) {
        this.TagReplaceString("&lt;","<",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("&gt;",su) > 0) {
        this.TagReplaceString("&gt;",">",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("&amp;",su) > 0) {
        this.TagReplaceString("&amp;","&",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("&quot;",su) > 0) {
        this.TagReplaceString("&quot;",'"',{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      if (SpecialChars) {
        for (i = 4; i <= 64; i++) {
          while (pas.System.Pos($impl.HTMLSpecialChar[i - 1],su) > 0) {
            this.TagReplaceString($impl.HTMLSpecialChar[i - 1],$impl.HTMLEncodedChar[i - 1],{get: function () {
                return su;
              }, set: function (v) {
                su = v;
              }});
          };
        };
      };
      Result = su;
      return Result;
    };
    this.TagReplaceString = function (Srch, Repl, Dest) {
      var Result = false;
      var i = 0;
      i = this.IPos(Srch,Dest.get());
      if (i > 0) {
        Result = true;
        pas.System.Delete(Dest,i,Srch.length);
        Dest.set((pas.System.Copy(Dest.get(),1,i - 1) + Repl) + pas.System.Copy(Dest.get(),i,Dest.get().length));
      } else Result = false;
      return Result;
    };
    this.GetParentForm = function (AControl) {
      var Result = null;
      var c = null;
      Result = null;
      c = AControl;
      if (!(c != null)) return Result;
      if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(c.FParent)) {
        Result = rtl.as(c.FParent,pas["WEBLib.Forms"].TCustomForm)}
       else Result = this.GetParentForm(c.FParent);
      return Result;
    };
    this.GetOwnerForm = function (AComponent) {
      var Result = null;
      var c = null;
      Result = null;
      c = AComponent;
      if (!(c != null)) return Result;
      if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(c.FOwner)) {
        Result = rtl.as(c.FOwner,pas["WEBLib.Forms"].TCustomForm)}
       else Result = this.GetOwnerForm(c.FOwner);
      return Result;
    };
  });
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.HTMLNumSpecialChar = 64;
  $impl.HTMLEncodedChar = ["&","<",">",'"'," ","é","è","ë","ê","ó","ò","ö","ô","í","ì","ï","î","ú","ù","ü","û","á","à","ä","â","É","È","Ë","Ê","Ó","Ò","Ö","Ô","Í","Ì","Ï","Î","Ú","Ù","Ü","Û","Á","À","Ä","Â","ç","Ç","ø","Ø","å","Å","©","®","€","«","»","ã","Ã","õ","Õ","™","§","¶","ß"];
  $impl.HTMLSpecialChar = ["amp;","lt;","gt;","quot;","&nbsp;","&eacute;","&egrave;","&euml;","&ecirc;","&oacute;","&ograve;","&ouml;","&ocirc;","&iacute;","&igrave;","&iuml;","&icirc;","&uacute;","&ugrave;","&uuml;","&ucirc;","&aacute;","&agrave;","&auml;","&acirc;","&Eacute;","&Egrave;","&Euml;","&Ecirc;","&Oacute;","&Ograve;","&Ouml;","&Ocirc;","&Iacute;","&Igrave;","&Iuml;","&Icirc;","&Uacute;","&Ugrave;","&Uuml;","&Ucirc;","&Aacute;","&Agrave;","&Auml;","&Acirc;","&ccedil;","&Ccedil;","&oslash;","&Oslash;","&aring;","&Aring;","&copy;","&reg;","&euro;","&laquo;","&raquo;","&atilde;","&Atilde;","&otilde;","&Otilde","&trade;","&sect;","&para;","&szlig;"];
});
rtl.module("WEBLib.TMSFNCGraphicsTypes",["System","Classes","Types","WEBLib.TMSFNCTypes","WEBLib.Graphics"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.PathPosition = 1E-3;
  this.gcBlack = 0x0;
  this.gcBlue = 0xFF0000;
  this.gcDarkgray = 0xA9A9A9;
  this.gcDarkslategray = 0x4F4F2F;
  this.gcGray = 0x808080;
  this.gcLightblue = 0xE6D8AD;
  this.gcLightgray = 0xD3D3D3;
  this.gcLightslategray = 0x998877;
  this.gcLightsteelblue = 0xDEC4B0;
  this.gcOrange = 0xA5FF;
  this.gcRed = 0xFF;
  this.gcSilver = 0xC0C0C0;
  this.gcSlategray = 0x908070;
  this.gcSteelblue = 0xB48246;
  this.gcWhite = 0xFFFFFF;
  this.gcWhitesmoke = 0xF5F5F5;
  this.gcNull = -1;
  this.TTMSFNCGraphicsStrokeKind = {"0": "gskNone", gskNone: 0, "1": "gskSolid", gskSolid: 1, "2": "gskDash", gskDash: 2, "3": "gskDot", gskDot: 3, "4": "gskDashDot", gskDashDot: 4, "5": "gskDashDotDot", gskDashDotDot: 5};
  $mod.$rtti.$Enum("TTMSFNCGraphicsStrokeKind",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TTMSFNCGraphicsStrokeKind});
  this.TTMSFNCGraphicsTextureMode = {"0": "gtmOriginal", gtmOriginal: 0, "1": "gtmFit", gtmFit: 1, "2": "gtmStretch", gtmStretch: 2, "3": "gtmCenter", gtmCenter: 3, "4": "gtmTile", gtmTile: 4};
  $mod.$rtti.$Enum("TTMSFNCGraphicsTextureMode",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TTMSFNCGraphicsTextureMode});
  this.TTMSFNCGraphicsFillKind = {"0": "gfkNone", gfkNone: 0, "1": "gfkSolid", gfkSolid: 1, "2": "gfkGradient", gfkGradient: 2, "3": "gfkTexture", gfkTexture: 3};
  $mod.$rtti.$Enum("TTMSFNCGraphicsFillKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCGraphicsFillKind});
  this.TTMSFNCGraphicsFillOrientation = {"0": "gfoHorizontal", gfoHorizontal: 0, "1": "gfoVertical", gfoVertical: 1};
  $mod.$rtti.$Enum("TTMSFNCGraphicsFillOrientation",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCGraphicsFillOrientation});
  this.TTMSFNCGraphicsTextAlign = {"0": "gtaCenter", gtaCenter: 0, "1": "gtaLeading", gtaLeading: 1, "2": "gtaTrailing", gtaTrailing: 2};
  $mod.$rtti.$Enum("TTMSFNCGraphicsTextAlign",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCGraphicsTextAlign});
  this.TTMSFNCGraphicsTextTrimming = {"0": "gttNone", gttNone: 0, "1": "gttCharacter", gttCharacter: 1, "2": "gttWord", gttWord: 2};
  $mod.$rtti.$Enum("TTMSFNCGraphicsTextTrimming",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCGraphicsTextTrimming});
  this.TTMSFNCGraphicsSide = {"0": "gsLeft", gsLeft: 0, "1": "gsTop", gsTop: 1, "2": "gsRight", gsRight: 2, "3": "gsBottom", gsBottom: 3};
  this.TTMSFNCGraphicsTextQuality = {"0": "gtqDefault", gtqDefault: 0, "1": "gtqAntiAliasing", gtqAntiAliasing: 1, "2": "gtqClearType", gtqClearType: 2};
  this.AllSides = rtl.createSet($mod.TTMSFNCGraphicsSide.gsLeft,$mod.TTMSFNCGraphicsSide.gsTop,$mod.TTMSFNCGraphicsSide.gsRight,$mod.TTMSFNCGraphicsSide.gsBottom);
  $mod.$rtti.$Class("TTMSFNCGraphicsStroke");
  $mod.$rtti.$Class("TTMSFNCGraphicsFill");
  $mod.$rtti.$Class("TTMSFNCGraphicsFont");
  rtl.createClass($mod,"TTMSFNCGraphicsSaveState",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FSaveDC = 0;
      this.FFont = null;
      this.FStroke = null;
      this.FFill = null;
    };
    this.$final = function () {
      this.FFont = undefined;
      this.FStroke = undefined;
      this.FFill = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.apply(this,arguments);
      this.FFill = $mod.TTMSFNCGraphicsFill.$create("Create$1",[$mod.TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FStroke = $mod.TTMSFNCGraphicsStroke.$create("Create$1",[$mod.TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FFont = $mod.TTMSFNCGraphicsFont.$create("Create$2");
    };
    this.Destroy = function () {
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      rtl.free(this,"FFont");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomGraphicsFill",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FUpdateCount = 0;
      this.FOnChanged = null;
      this.FOrientation = 0;
      this.FKind = 0;
      this.FColor = 0;
      this.FColorTo = 0;
      this.FColorMirror = 0;
      this.FColorMirrorTo = 0;
      this.FOpacity = 0.0;
      this.FTexture = null;
      this.FTextureMode = 0;
    };
    this.$final = function () {
      this.FOnChanged = undefined;
      this.FTexture = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetKind = function (Value) {
      if (this.FKind !== Value) {
        this.FKind = Value;
        this.Changed();
      };
    };
    this.SetOrientation = function (Value) {
      if (this.FOrientation !== Value) {
        this.FOrientation = Value;
        this.Changed();
      };
    };
    this.SetColor = function (Value) {
      if (this.FColor !== Value) {
        this.FColor = Value;
        if (this.FColor === -1) {
          this.FColor = -1}
         else if (this.FColor === 536870912) this.FColor = 15790320;
        this.Changed();
      };
    };
    this.SetColorTo = function (Value) {
      if (this.FColorTo !== Value) {
        this.FColorTo = Value;
        if (this.FColorTo === -1) {
          this.FColorTo = -1}
         else if (this.FColorTo === 536870912) this.FColorTo = 15790320;
        this.Changed();
      };
    };
    this.SetColorMirror = function (Value) {
      if (this.FColorMirror !== Value) {
        this.FColorMirror = Value;
        if (this.FColorMirror === -1) {
          this.FColorMirror = -1}
         else if (this.FColorMirror === 536870912) this.FColorMirror = 15790320;
        this.Changed();
      };
    };
    this.SetColorMirrorTo = function (Value) {
      if (this.FColorMirrorTo !== Value) {
        this.FColorMirrorTo = Value;
        if (this.FColorMirrorTo === -1) {
          this.FColorMirrorTo = -1}
         else if (this.FColorMirrorTo === 536870912) this.FColorMirrorTo = 15790320;
        this.Changed();
      };
    };
    this.SetTexture = function (Value) {
      if (this.FTexture !== Value) {
        this.FTexture.Assign(Value);
        this.Changed();
      };
    };
    this.SetTextureMode = function (Value) {
      if (this.FTextureMode !== Value) {
        this.FTextureMode = Value;
        this.Changed();
      };
    };
    this.Changed = function () {
      if ((this.FOnChanged != null) && (this.FUpdateCount === 0)) this.FOnChanged(this);
    };
    this.TextureChanged = function (Sender) {
      this.Changed();
    };
    this.Create$1 = function (AKind, AColor) {
      this.FKind = AKind;
      this.FColor = AColor;
      this.FOpacity = 1;
      this.FOrientation = $mod.TTMSFNCGraphicsFillOrientation.gfoVertical;
      this.FColorTo = 8421504;
      this.FColorMirror = -1;
      this.FColorMirrorTo = -1;
      this.FTextureMode = $mod.TTMSFNCGraphicsTextureMode.gtmStretch;
      this.FTexture = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FTexture.FOnChange = rtl.createCallback(this,"TextureChanged");
    };
    this.Destroy = function () {
      rtl.free(this,"FTexture");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomGraphicsFill.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColor;
        this.FColorTo = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColorTo;
        this.FColorMirror = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColorMirror;
        this.FColorMirrorTo = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColorMirrorTo;
        this.FKind = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FKind;
        this.FOrientation = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FOrientation;
        this.FOpacity = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FOpacity;
        this.FTexture.Assign(rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FTexture);
        this.FTextureMode = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FTextureMode;
      } else if ($mod.TTMSFNCCustomGraphicsStroke.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FColor;
        this.FColorTo = -1;
        this.FColorMirror = -1;
        this.FColorMirrorTo = -1;
        this.FKind = $mod.TTMSFNCGraphicsFillKind.gfkSolid;
        this.FOrientation = $mod.TTMSFNCGraphicsFillOrientation.gfoVertical;
        this.FOpacity = 1;
      };
      this.Changed();
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsFill",$mod.TTMSFNCCustomGraphicsFill,function () {
    var $r = this.$rtti;
    $r.addProperty("OnChanged",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChanged","FOnChanged");
    $r.addProperty("Kind",2,$mod.$rtti["TTMSFNCGraphicsFillKind"],"FKind","SetKind",{Default: $mod.TTMSFNCGraphicsFillKind.gfkSolid});
    $r.addProperty("Orientation",2,$mod.$rtti["TTMSFNCGraphicsFillOrientation"],"FOrientation","SetOrientation",{Default: $mod.TTMSFNCGraphicsFillOrientation.gfoVertical});
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor",{Default: 16777215});
    $r.addProperty("ColorTo",2,rtl.longint,"FColorTo","SetColorTo",{Default: 8421504});
    $r.addProperty("ColorMirror",2,rtl.longint,"FColorMirror","SetColorMirror",{Default: -1});
    $r.addProperty("ColorMirrorTo",2,rtl.longint,"FColorMirrorTo","SetColorMirrorTo",{Default: -1});
    $r.addProperty("TextureMode",2,$mod.$rtti["TTMSFNCGraphicsTextureMode"],"FTextureMode","SetTextureMode",{Default: $mod.TTMSFNCGraphicsTextureMode.gtmStretch});
    $r.addProperty("Texture",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FTexture","SetTexture");
  });
  rtl.createClass($mod,"TTMSFNCGraphicsFont",pas["WEBLib.Graphics"].TFont,function () {
    this.$init = function () {
      pas["WEBLib.Graphics"].TFont.$init.call(this);
      this.FUpdateCount = 0;
      this.FOnChanged = null;
    };
    this.$final = function () {
      this.FOnChanged = undefined;
      pas["WEBLib.Graphics"].TFont.$final.call(this);
    };
    this.DoChanged = function (Sender) {
      if ((this.FOnChanged != null) && (this.FUpdateCount === 0)) this.FOnChanged(this);
    };
    this.Create$2 = function () {
      pas["WEBLib.Graphics"].TFont.Create$1.call(this);
      this.FOnChange = rtl.createCallback(this,"DoChanged");
    };
    this.Assign = function (Source) {
      pas["WEBLib.Graphics"].TFont.Assign.call(this,Source);
      this.DoChanged(this);
    };
    this.AssignSource = function (Source) {
      this.Assign(Source);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomGraphicsStroke",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FUpdateCount = 0;
      this.FOnChanged = null;
      this.FKind = 0;
      this.FColor = 0;
      this.FWidth = 0.0;
      this.FOpacity = 0.0;
    };
    this.$final = function () {
      this.FOnChanged = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetKind = function (Value) {
      if (this.FKind !== Value) {
        this.FKind = Value;
        this.Changed();
      };
    };
    this.SetColor = function (Value) {
      if (this.FColor !== Value) {
        this.FColor = Value;
        if (this.FColor === -1) {
          this.FColor = -1}
         else if (this.FColor === 536870912) this.FColor = 15790320;
        this.Changed();
      };
    };
    this.SetWidth = function (Value) {
      if (this.FWidth !== Value) {
        this.FWidth = Value;
        this.Changed();
      };
    };
    this.IsWidthStored = function () {
      var Result = false;
      Result = this.FWidth !== 1;
      return Result;
    };
    this.Changed = function () {
      if ((this.FOnChanged != null) && (this.FUpdateCount === 0)) this.FOnChanged(this);
    };
    this.Create$1 = function (AKind, AColor) {
      this.FKind = AKind;
      this.FColor = AColor;
      this.FOpacity = 1;
      this.FWidth = 1;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomGraphicsStroke.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FColor;
        this.FKind = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FKind;
        this.FOpacity = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FOpacity;
        this.FWidth = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FWidth;
      } else if ($mod.TTMSFNCCustomGraphicsFill.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColor;
        this.FKind = $mod.TTMSFNCGraphicsStrokeKind.gskSolid;
        this.FOpacity = 1;
        this.FWidth = 1;
      };
      this.Changed();
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsStroke",$mod.TTMSFNCCustomGraphicsStroke,function () {
    var $r = this.$rtti;
    $r.addProperty("OnChanged",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChanged","FOnChanged");
    $r.addProperty("Kind",2,$mod.$rtti["TTMSFNCGraphicsStrokeKind"],"FKind","SetKind",{Default: $mod.TTMSFNCGraphicsStrokeKind.gskSolid});
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor",{Default: 12632256});
    $r.addProperty("Width",14,rtl.double,"FWidth","SetWidth",{stored: "IsWidthStored"});
  });
  this.TTMSFNCGraphicsPathPointKind = {"0": "gppMoveTo", gppMoveTo: 0, "1": "gppLineTo", gppLineTo: 1, "2": "gppCurveTo", gppCurveTo: 2, "3": "gppClose", gppClose: 3};
  this.TTMSFNCGraphicsPathCubicBezier$clone = function (a) {
    var r = [];
    for (var i = 0; i < 4; i++) r.push(new pas["WEBLib.TMSFNCTypes"].TPointF(a[i]));
    return r;
  };
  this.TTMSFNCGraphicsPathPoint = function (s) {
    if (s) {
      this.Kind = s.Kind;
      this.Point = new pas["WEBLib.TMSFNCTypes"].TPointF(s.Point);
    } else {
      this.Kind = 0;
      this.Point = new pas["WEBLib.TMSFNCTypes"].TPointF();
    };
    this.$equal = function (b) {
      return (this.Kind === b.Kind) && this.Point.$equal(b.Point);
    };
  };
  this.TTMSFNCGraphicsPathDrawMode = {"0": "pdmPolygon", pdmPolygon: 0, "1": "pdmPolyline", pdmPolyline: 1};
  rtl.createClass($mod,"TTMSFNCGraphicsPathPoints",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = new $mod.TTMSFNCGraphicsPathPoint();
      Result = new $mod.TTMSFNCGraphicsPathPoint(rtl.getObject(this.Get(Index)));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      pas.Classes.TList.Put.call(this,Index,new $mod.TTMSFNCGraphicsPathPoint(Value));
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsPath",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FStartPoint = new pas["WEBLib.TMSFNCTypes"].TPointF();
      this.FClippable = false;
      this.FPoints = null;
    };
    this.$final = function () {
      this.FStartPoint = undefined;
      this.FPoints = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.CalculateBezierCoefficients = function (Bezier, AX, BX, CX, AY, BY, CY) {
      CX.set(3 * (Bezier[1].X - Bezier[0].X));
      CY.set(3 * (Bezier[1].Y - Bezier[0].Y));
      BX.set((3 * (Bezier[2].X - Bezier[1].X)) - CX.get());
      BY.set((3 * (Bezier[2].Y - Bezier[1].Y)) - CY.get());
      AX.set(((Bezier[3].X - Bezier[0].X) - CX.get()) - BX.get());
      AY.set(((Bezier[3].Y - Bezier[0].Y) - CY.get()) - BY.get());
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FPoints.GetCount();
      return Result;
    };
    this.GetPoint = function (AIndex) {
      var Result = new $mod.TTMSFNCGraphicsPathPoint();
      Result = new $mod.TTMSFNCGraphicsPathPoint(this.FPoints.GetItem(AIndex));
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FPoints = $mod.TTMSFNCGraphicsPathPoints.$create("Create$1");
    };
    this.Destroy = function () {
      rtl.free(this,"FPoints");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      var I = 0;
      if ($mod.TTMSFNCGraphicsPath.isPrototypeOf(Source)) {
        this.FPoints.SetCount(Source.GetCount());
        for (var $l1 = 0, $end2 = Source.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.FPoints.SetItem(I,new $mod.TTMSFNCGraphicsPathPoint(Source.GetPoint(I)));
        };
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
    this.PointOnBezier = function (StartPoint, AX, BX, CX, AY, BY, CY, T) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var SquareT = 0.0;
      var CubeT = 0.0;
      SquareT = T * T;
      CubeT = SquareT * T;
      Result.X = (((AX * CubeT) + (BX * SquareT)) + (CX * T)) + StartPoint.X;
      Result.Y = (((AY * CubeT) + (BY * SquareT)) + (CY * T)) + StartPoint.Y;
      return Result;
    };
    this.CreateBezier = function (Bezier, PointCount) {
      var Result = [];
      var AX = 0.0;
      var BX = 0.0;
      var CX = 0.0;
      var AY = 0.0;
      var BY = 0.0;
      var CY = 0.0;
      var DT = 0.0;
      var T = 0.0;
      var I = 0;
      if (PointCount === 0) return Result;
      DT = 1 / ((1 * PointCount) - 1);
      T = 0;
      Result = rtl.arraySetLength(Result,pas["WEBLib.TMSFNCTypes"].TPointF,PointCount);
      this.CalculateBezierCoefficients(Bezier,{get: function () {
          return AX;
        }, set: function (v) {
          AX = v;
        }},{get: function () {
          return BX;
        }, set: function (v) {
          BX = v;
        }},{get: function () {
          return CX;
        }, set: function (v) {
          CX = v;
        }},{get: function () {
          return AY;
        }, set: function (v) {
          AY = v;
        }},{get: function () {
          return BY;
        }, set: function (v) {
          BY = v;
        }},{get: function () {
          return CY;
        }, set: function (v) {
          CY = v;
        }});
      for (var $l1 = 0, $end2 = PointCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        Result[I] = new pas["WEBLib.TMSFNCTypes"].TPointF(this.PointOnBezier(Bezier[0],AX,BX,CX,AY,BY,CY,T));
        T = T + DT;
      };
      return Result;
    };
    var SmallAmount = 0.001;
    this.GetBounds = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var I = 0;
      var pt = new $mod.TTMSFNCGraphicsPathPoint();
      if (this.FPoints.GetCount() < 1) return pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0);
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0xFFFF,0xFFFF,-0xFFFF,-0xFFFF));
      for (var $l1 = 0, $end2 = this.FPoints.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pt = new $mod.TTMSFNCGraphicsPathPoint(this.FPoints.GetItem(I));
        if (pt.Kind === $mod.TTMSFNCGraphicsPathPointKind.gppClose) continue;
        if (pt.Point.X < Result.Left) Result.Left = pt.Point.X;
        if (pt.Point.X > Result.Right) Result.Right = pt.Point.X;
        if (pt.Point.Y < Result.Top) Result.Top = pt.Point.Y;
        if (pt.Point.Y > Result.Bottom) Result.Bottom = pt.Point.Y;
      };
      if (pas.math.SameValue(Result.Right - Result.Left,0,0.001)) Result.Right = Result.Left + 0.001;
      if (pas.math.SameValue(Result.Bottom - Result.Top,0,0.001)) Result.Bottom = Result.Top + 0.001;
      return Result;
    };
    this.MoveTo = function (P) {
      var pt = new $mod.TTMSFNCGraphicsPathPoint();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppMoveTo;
      pt.Point = new pas["WEBLib.TMSFNCTypes"].TPointF(P);
      this.FPoints.Add(new $mod.TTMSFNCGraphicsPathPoint(pt));
      this.FStartPoint = new pas["WEBLib.TMSFNCTypes"].TPointF(this.FPoints.GetItem(this.FPoints.GetCount() - 1).Point);
    };
    this.LineTo = function (P) {
      var pt = new $mod.TTMSFNCGraphicsPathPoint();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppLineTo;
      pt.Point = new pas["WEBLib.TMSFNCTypes"].TPointF(P);
      this.FPoints.Add(new $mod.TTMSFNCGraphicsPathPoint(pt));
      if ((P.X === this.FStartPoint.X) && (P.Y === this.FStartPoint.Y)) this.FClippable = true;
    };
    this.CurveTo = function (ControlPoint1, ControlPoint2, EndPoint) {
      var pt = new $mod.TTMSFNCGraphicsPathPoint();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo;
      pt.Point = new pas["WEBLib.TMSFNCTypes"].TPointF(ControlPoint1);
      this.FPoints.Add(new $mod.TTMSFNCGraphicsPathPoint(pt));
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo;
      pt.Point = new pas["WEBLib.TMSFNCTypes"].TPointF(ControlPoint2);
      this.FPoints.Add(new $mod.TTMSFNCGraphicsPathPoint(pt));
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo;
      pt.Point = new pas["WEBLib.TMSFNCTypes"].TPointF(EndPoint);
      this.FPoints.Add(new $mod.TTMSFNCGraphicsPathPoint(pt));
    };
    this.AddPolygon = function (APolygon) {
      var I = 0;
      for (var $l1 = 0, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.LineTo(APolygon[I]);
      };
    };
    this.ClosePath = function () {
      var pt = new $mod.TTMSFNCGraphicsPathPoint();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppClose;
      pt.Point = new pas["WEBLib.TMSFNCTypes"].TPointF(this.FStartPoint);
      this.FPoints.Add(new $mod.TTMSFNCGraphicsPathPoint(pt));
      this.FClippable = true;
    };
    this.AddEllipse = function (ARect) {
      var CX = 0.0;
      var CY = 0.0;
      var PX = 0.0;
      var PY = 0.0;
      var c = 0.0;
      c = 0.5522847498;
      CX = (ARect.Left + ARect.Right) / 2;
      CY = (ARect.Top + ARect.Bottom) / 2;
      PX = c * ((ARect.Right - ARect.Left) / 2);
      PY = c * ((ARect.Bottom - ARect.Top) / 2);
      this.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY - PY),pas["WEBLib.TMSFNCTypes"].PointF(CX - PX,ARect.Top),pas["WEBLib.TMSFNCTypes"].PointF(CX,ARect.Top));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(CX + PX,ARect.Top),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,CY - PY),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,CY));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,CY + PY),pas["WEBLib.TMSFNCTypes"].PointF(CX + PX,ARect.Bottom),pas["WEBLib.TMSFNCTypes"].PointF(CX,ARect.Bottom));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(CX - PX,ARect.Bottom),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY + PY),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY));
      this.FClippable = true;
    };
    this.AddRectangle = function (ARect) {
      this.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top));
      this.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top));
      this.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom));
      this.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom));
      this.ClosePath();
      this.FClippable = true;
    };
    var BezierArcAngleEpsilon = 0.01;
    var MinSweepAngle = 1E-10;
    this.AddArc = function (Center, Radius, StartAngle, SweepAngle) {
      var UseMoveTo = false;
      var I = 0;
      var F = 0.0;
      var TotalSweep = 0.0;
      var LocalSweep = 0.0;
      var PrevSweep = 0.0;
      var Done = false;
      StartAngle = pas.math.DegToRad(StartAngle);
      SweepAngle = pas.math.DegToRad(SweepAngle);
      I = pas.System.Trunc(StartAngle / (2 * Math.PI));
      F = StartAngle - ((I * 2) * Math.PI);
      StartAngle = F;
      if (SweepAngle >= (2 * Math.PI)) SweepAngle = 2 * Math.PI;
      if (SweepAngle <= (-2 * Math.PI)) SweepAngle = -2 * Math.PI;
      if (Math.abs(SweepAngle) < 1.0E-10) return;
      TotalSweep = 0;
      Done = false;
      UseMoveTo = true;
      do {
        if (SweepAngle < 0) {
          PrevSweep = TotalSweep;
          LocalSweep = -Math.PI / 2;
          TotalSweep = TotalSweep - (Math.PI / 2);
          if (TotalSweep <= (SweepAngle + 0.01)) {
            LocalSweep = SweepAngle - PrevSweep;
            Done = true;
          };
        } else {
          PrevSweep = TotalSweep;
          LocalSweep = Math.PI / 2;
          TotalSweep = TotalSweep + (Math.PI / 2);
          if (TotalSweep >= (SweepAngle - 0.01)) {
            LocalSweep = SweepAngle - PrevSweep;
            Done = true;
          };
        };
        $impl.DrawArcWithBezier(this,Center.X,Center.Y,Radius.X,Radius.Y,StartAngle,LocalSweep,UseMoveTo);
        UseMoveTo = false;
        StartAngle = StartAngle + LocalSweep;
      } while (!Done);
    };
    this.FlattenToPolygon = function (Polygon, Flatness) {
      var Self = this;
      function AddPoint(P) {
        if ((rtl.length(Polygon.get()) > 0) && (pas.math.SameValue(P.X,Polygon.get()[rtl.length(Polygon.get()) - 1].X,0.001) && pas.math.SameValue(P.Y,Polygon.get()[rtl.length(Polygon.get()) - 1].Y,0.001))) return;
        Polygon.set(rtl.arraySetLength(Polygon.get(),pas["WEBLib.TMSFNCTypes"].TPointF,rtl.length(Polygon.get()) + 1));
        Polygon.get()[rtl.length(Polygon.get()) - 1] = new pas["WEBLib.TMSFNCTypes"].TPointF(P);
      };
      var J = 0;
      var I = 0;
      var BPts = [];
      var B = rtl.arraySetLength(null,new pas["WEBLib.TMSFNCTypes"].TPointF(),4);
      var SP = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var CurPoint = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var X = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var F = 0.0;
      var Len = 0.0;
      var SegCount = 0;
      Polygon.set(rtl.arraySetLength(Polygon.get(),pas["WEBLib.TMSFNCTypes"].TPointF,0));
      if (Self.FPoints.GetCount() > 0) {
        F = Math.max(Flatness,0.05);
        J = 0;
        while (J < Self.FPoints.GetCount()) {
          var $tmp1 = Self.FPoints.GetItem(J).Kind;
          if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppMoveTo) {
            if (rtl.length(Polygon.get()) > 0) AddPoint(pas["WEBLib.TMSFNCTypes"].PointF(0xFFFFFF,0xFFFFFF));
            AddPoint(Self.FPoints.GetItem(J).Point);
            CurPoint = new pas["WEBLib.TMSFNCTypes"].TPointF(Self.FPoints.GetItem(J).Point);
            SP = new pas["WEBLib.TMSFNCTypes"].TPointF(CurPoint);
          } else if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppLineTo) {
            AddPoint(Self.FPoints.GetItem(J).Point);
            CurPoint = new pas["WEBLib.TMSFNCTypes"].TPointF(Self.FPoints.GetItem(J).Point);
          } else if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo) {
            B[0] = new pas["WEBLib.TMSFNCTypes"].TPointF(CurPoint);
            B[1] = new pas["WEBLib.TMSFNCTypes"].TPointF(Self.FPoints.GetItem(J).Point);
            J += 1;
            B[2] = new pas["WEBLib.TMSFNCTypes"].TPointF(Self.FPoints.GetItem(J).Point);
            J += 1;
            B[3] = new pas["WEBLib.TMSFNCTypes"].TPointF(Self.FPoints.GetItem(J).Point);
            BPts = Self.CreateBezier(B,6);
            Len = 0;
            for (var $l2 = 0, $end3 = (rtl.length(BPts) - 1) - 1; $l2 <= $end3; $l2++) {
              I = $l2;
              X.X = BPts[I].X - BPts[I + 1].X;
              X.Y = BPts[I].Y - BPts[I + 1].Y;
              Len = Len + pas["WEBLib.TMSFNCTypes"].GetPointLength(X);
            };
            SegCount = Math.round(Len / F);
            if (SegCount < 2) {
              AddPoint(B[0]);
              AddPoint(B[3]);
            } else {
              BPts = Self.CreateBezier(B,SegCount);
              for (var $l4 = 0, $end5 = rtl.length(BPts) - 1; $l4 <= $end5; $l4++) {
                I = $l4;
                AddPoint(BPts[I]);
              };
            };
            CurPoint = new pas["WEBLib.TMSFNCTypes"].TPointF(Self.FPoints.GetItem(J).Point);
          } else if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppClose) {
            AddPoint(SP);
          };
          J += 1;
        };
      };
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsColorObject",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FColor = 0;
    };
  });
  this.TTMSFNCGraphicsModifyRectMode = {"0": "gcrmNone", gcrmNone: 0, "1": "gcrmExpandAll", gcrmExpandAll: 1, "2": "gcrmShrinkAll", gcrmShrinkAll: 2, "3": "gcrmShiftRightAndExpandHeight", gcrmShiftRightAndExpandHeight: 3, "4": "gcrmShiftDownAndExpandWidth", gcrmShiftDownAndExpandWidth: 4, "5": "gcrmShiftRightAndShrinkHeight", gcrmShiftRightAndShrinkHeight: 5, "6": "gcrmShiftRightDown", gcrmShiftRightDown: 6, "7": "gcrmShiftRightUp", gcrmShiftRightUp: 7, "8": "gcrmShiftLeftUp", gcrmShiftLeftUp: 8, "9": "gcrmShiftLeftDown", gcrmShiftLeftDown: 9, "10": "gcrmShiftUpAndExpandWidth", gcrmShiftUpAndExpandWidth: 10, "11": "gcrmShiftLeftAndExpandHeight", gcrmShiftLeftAndExpandHeight: 11};
  this.TTMSFNCGraphicsModifyPointMode = {"0": "gcpmNone", gcpmNone: 0, "1": "gcpmLeftUp", gcpmLeftUp: 1, "2": "gcpmRightDown", gcpmRightDown: 2, "3": "gcpmLeftDown", gcpmLeftDown: 3, "4": "gcpmRightUp", gcpmRightUp: 4};
  this.TTMSFNCGraphicsCorner = {"0": "gcTopLeft", gcTopLeft: 0, "1": "gcTopRight", gcTopRight: 1, "2": "gcBottomLeft", gcBottomLeft: 2, "3": "gcBottomRight", gcBottomRight: 3};
  $mod.$rtti.$Enum("TTMSFNCGraphicsCorner",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCGraphicsCorner});
  $mod.$rtti.$Set("TTMSFNCGraphicsCorners",{comptype: $mod.$rtti["TTMSFNCGraphicsCorner"]});
  this.ModifyRect = function (ARect, ARectMode) {
    var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
    Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
    var $tmp1 = ARectMode;
    if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmExpandAll) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightAndExpandHeight) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightDown) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightAndShrinkHeight) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftDownAndExpandWidth) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftUpAndExpandWidth) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightUp) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftUp) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftDown) {
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftAndExpandHeight) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) + 0.5));
    return Result;
  };
  this.MakeGraphicsColor = function (ARed, AGreen, ABlue) {
    var Result = 0;
    Result = pas["WEBLib.Graphics"].RGB(ARed,AGreen,ABlue);
    return Result;
  };
  this.Lighter = function (AColor, APercent) {
    var Result = 0;
    var r = 0;
    var g = 0;
    var b = 0;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    r = pas["WEBLib.Graphics"].GetRValue(AColor);
    g = pas["WEBLib.Graphics"].GetGValue(AColor);
    b = pas["WEBLib.Graphics"].GetBValue(AColor);
    r = r + Math.min(255,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - r,APercent,100));
    g = g + Math.min(255,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - g,APercent,100));
    b = b + Math.min(255,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - b,APercent,100));
    Result = $mod.MakeGraphicsColor(r,g,b);
    return Result;
  };
  this.Blend = function (AColor1, AColor2, ALevel) {
    var Result = 0;
    var c1 = 0;
    var c2 = 0;
    var r = 0;
    var g = 0;
    var b = 0;
    var v1 = 0;
    var v2 = 0;
    ALevel = Math.round(2.55 * ALevel);
    c1 = pas["WEBLib.Graphics"].ColorToRGB(AColor1);
    c2 = pas["WEBLib.Graphics"].ColorToRGB(AColor2);
    v1 = c1 & 255;
    v2 = c2 & 255;
    r = Math.max(0,Math.min(255,((ALevel * (v1 - v2)) >>> 8) + v2));
    v1 = (c1 >>> 8) & 255;
    v2 = (c2 >>> 8) & 255;
    g = Math.max(0,Math.min(255,((ALevel * (v1 - v2)) >>> 8) + v2));
    v1 = (c1 >>> 16) & 255;
    v2 = (c2 >>> 16) & 255;
    b = Math.max(0,Math.min(255,((ALevel * (v1 - v2)) >>> 8) + v2));
    Result = ((b << 16) + (g << 8)) + r;
    return Result;
  };
  this.ColorLookup = function () {
    var Result = null;
    Result = $impl.FColorLookup;
    return Result;
  };
  this.DrawGradient = function (ACanvas, AColor, AColorTo, ARect, ARounding, ACorners, ADirection) {
    var diffr = 0;
    var startr = 0;
    var endr = 0;
    var diffg = 0;
    var startg = 0;
    var endg = 0;
    var diffb = 0;
    var startb = 0;
    var endb = 0;
    var si = 0;
    var rstepr = 0.0;
    var rstepg = 0.0;
    var rstepb = 0.0;
    var rstepw = 0.0;
    var i = 0;
    var stepw = 0;
    var oldp = 0;
    var oldb = 0;
    var Steps = 0;
    var R = new pas["WEBLib.TMSFNCTypes"].TRectF();
    var dr = new pas["WEBLib.TMSFNCTypes"].TRectF();
    var iend = 0.0;
    var a = 0.0;
    var oldps = 0;
    var oldbs = 0;
    R = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
    if (ADirection) {
      Steps = Math.round(R.Right - R.Left)}
     else Steps = Math.round(R.Bottom - R.Top);
    if (Steps === 0) Steps = 1;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    AColorTo = pas["WEBLib.Graphics"].ColorToRGB(AColorTo);
    startr = AColor & 0xFF;
    startg = (AColor & 0xFF00) >>> 8;
    startb = (AColor & 0xFF0000) >>> 16;
    endr = AColorTo & 0xFF;
    endg = (AColorTo & 0xFF00) >>> 8;
    endb = (AColorTo & 0xFF0000) >>> 16;
    diffr = endr - startr;
    diffg = endg - startg;
    diffb = endb - startb;
    rstepr = diffr / Steps;
    rstepg = diffg / Steps;
    rstepb = diffb / Steps;
    if (ADirection) {
      rstepw = (R.Right - R.Left) / Steps}
     else rstepw = (R.Bottom - R.Top) / Steps;
    oldb = ACanvas.FBrush.FColor;
    oldbs = ACanvas.FBrush.FStyle;
    oldp = ACanvas.FPen.FColor;
    oldps = ACanvas.FPen.FStyle;
    ACanvas.FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psSolid;
    ACanvas.FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsSolid;
    for (var $l1 = 0, $end2 = Steps - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      endr = startr + Math.round(rstepr * i);
      endg = startg + Math.round(rstepg * i);
      endb = startb + Math.round(rstepb * i);
      stepw = Math.round(i * rstepw);
      ACanvas.FPen.SetColor((endr + (endg << 8)) + (endb << 16));
      ACanvas.FBrush.FColor = ACanvas.FPen.FColor;
      if (ADirection) {
        si = pas.System.Trunc(rstepw);
        iend = (R.Left + stepw) + si;
        iend = Math.min(iend,R.Right);
        dr = new pas["WEBLib.TMSFNCTypes"].TRectF(R);
        if ((i <= ARounding) && (($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - i,2));
          if ($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) dr.Top = dr.Top + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) dr.Bottom = dr.Bottom - Math.round(ARounding - a);
        } else if ((i >= (Steps - ARounding)) && (($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - (Steps - i),2));
          if ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners) dr.Top = dr.Top + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners) dr.Bottom = dr.Bottom - Math.round(ARounding - a);
        };
        ACanvas.Rectangle(dr.Left + stepw,dr.Top,iend,dr.Bottom);
      } else {
        si = pas.System.Trunc(rstepw);
        iend = (R.Top + stepw) + si;
        iend = Math.min(iend,R.Bottom);
        dr = new pas["WEBLib.TMSFNCTypes"].TRectF(R);
        if ((i <= ARounding) && (($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - i,2));
          if ($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) dr.Left = dr.Left + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners) dr.Right = dr.Right - Math.round(ARounding - a);
        } else if ((i >= (Steps - ARounding)) && (($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - (Steps - i),2));
          if ($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) dr.Left = dr.Left + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners) dr.Right = dr.Right - Math.round(ARounding - a);
        };
        ACanvas.Rectangle(dr.Left,dr.Top + stepw,dr.Right,iend);
      };
    };
    ACanvas.FBrush.FColor = oldb;
    ACanvas.FBrush.FStyle = oldbs;
    ACanvas.FPen.SetColor(oldp);
    ACanvas.FPen.FStyle = oldps;
  };
},["WEBLib.TMSFNCUtils","SysUtils","math"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.FColorLookup = null;
  $impl.DrawArcWithBezier = function (Path, CenterX, CenterY, RadiusX, RadiusY, StartAngle, SweepRange, UseMoveTo) {
    var Coord = [];
    var Pts = [];
    var A = 0.0;
    var X = 0.0;
    var Y = 0.0;
    var C = 0.0;
    var B = 0.0;
    var CC = 0.0;
    var SS = 0.0;
    var I = 0;
    if (SweepRange === 0) {
      if (UseMoveTo) {
        if (Path.FPoints.GetCount() < 1) {
          Path.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * Math.cos(StartAngle)),CenterY - (RadiusY * Math.sin(StartAngle))))}
         else Path.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * Math.cos(StartAngle)),CenterY - (RadiusY * Math.sin(StartAngle))));
      };
      Path.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * Math.cos(StartAngle)),CenterY - (RadiusY * Math.sin(StartAngle))));
      return;
    };
    B = Math.sin(SweepRange / 2);
    C = Math.cos(SweepRange / 2);
    A = 1 - C;
    X = (A * 4) / 3;
    Y = B - ((X * C) / B);
    SS = Math.sin(StartAngle + (SweepRange / 2));
    CC = Math.cos(StartAngle + (SweepRange / 2));
    Coord = rtl.arraySetLength(Coord,pas["WEBLib.TMSFNCTypes"].TPointF,4);
    Coord[0] = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(C,-B));
    Coord[1] = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(C + X,-Y));
    Coord[2] = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(C + X,Y));
    Coord[3] = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(C,B));
    Pts = rtl.arraySetLength(Pts,pas["WEBLib.TMSFNCTypes"].TPointF,4);
    for (I = 0; I <= 3; I++) {
      Pts[I] = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * ((Coord[I].X * CC) - (Coord[I].Y * SS))),CenterY + (RadiusY * ((Coord[I].X * SS) + (Coord[I].Y * CC)))));
    };
    if (UseMoveTo) {
      if (Path.FPoints.GetCount() < 1) {
        Path.MoveTo(Pts[0])}
       else Path.LineTo(Pts[0]);
    };
    Path.CurveTo(Pts[1],Pts[2],Pts[3]);
  };
});
rtl.module("TypInfo",["System","SysUtils","Types","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  this.TTypeKind = {"0": "tkUnknown", tkUnknown: 0, "1": "tkInteger", tkInteger: 1, "2": "tkChar", tkChar: 2, "3": "tkString", tkString: 3, "4": "tkEnumeration", tkEnumeration: 4, "5": "tkSet", tkSet: 5, "6": "tkDouble", tkDouble: 6, "7": "tkBool", tkBool: 7, "8": "tkProcVar", tkProcVar: 8, "9": "tkMethod", tkMethod: 9, "10": "tkArray", tkArray: 10, "11": "tkDynArray", tkDynArray: 11, "12": "tkRecord", tkRecord: 12, "13": "tkClass", tkClass: 13, "14": "tkClassRef", tkClassRef: 14, "15": "tkPointer", tkPointer: 15, "16": "tkJSValue", tkJSValue: 16, "17": "tkRefToProcVar", tkRefToProcVar: 17, "18": "tkInterface", tkInterface: 18};
  $mod.$rtti.$Enum("TTypeKind",{minvalue: 0, maxvalue: 18, ordtype: 1, enumtype: this.TTypeKind});
  this.GetPropInfo = function (TI, PropName) {
    var Result = null;
    var m = null;
    var i = 0;
    var C = null;
    C = TI;
    while (C !== null) {
      m = C.members[PropName];
      if (rtl.isExt(m,rtl.tTypeMemberProperty)) return m;
      C = C.ancestor;
    };
    Result = null;
    do {
      for (var $l1 = 0, $end2 = TI.properties.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(PropName,TI.properties[i]) === 0) {
          m = TI.members[TI.properties[i]];
          if (rtl.isExt(m,rtl.tTypeMemberProperty)) Result = m;
          return Result;
        };
      };
      TI = TI.ancestor;
    } while (!(TI === null));
    return Result;
  };
  this.GetPropInfo$1 = function (TI, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo(TI,PropName);
    if ((rtl.neSet(Kinds,{}) && (Result !== null)) && !(Result.typeinfo.kind in Kinds)) Result = null;
    return Result;
  };
  this.GetPropInfo$2 = function (Instance, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo$1(Instance.$rtti,PropName,{});
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCCustomComponent",["System","Classes","WEBLib.Controls","WEBLib.TMSFNCTypes","TypInfo"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCCustomComponent",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FAdaptToStyle = false;
    };
    this.GetVersionNumber = function (AMaj, AMin, ARel, ABld) {
      var Result = "";
      Result = "";
      return Result;
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.SetAdaptToStyle = function (Value) {
      this.FAdaptToStyle = Value;
    };
    this.Paint = function () {
      var pic = null;
      var g = null;
      var r = null;
      pas["WEBLib.Controls"].TCustomControl.Paint.apply(this,arguments);
      r = null;
      pic = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.GetCanvas(),false]);
      try {
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(0);
        g.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        r = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetResourceStream$1(pas.SysUtils.UpperCase(this.$classname),this.GetInstance());
        if (r != null) {
          pic.LoadFromStream(r);
        };
        g.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight())),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(pic),true,false,true,false);
      } finally {
        if (r != null) r = rtl.freeLoc(r);
        pic = rtl.freeLoc(pic);
        g = rtl.freeLoc(g);
      };
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.apply(this,arguments);
      if (!(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) this.SetVisible(false);
    };
    this.RegisterRuntimeClasses = function () {
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.SetWidth(26);
      this.SetHeight(26);
      if (!this.IsDesigning()) this.RegisterRuntimeClasses();
    };
    this.SetBounds = function (X, Y, AWidth, AHeight) {
      pas["WEBLib.Controls"].TControl.SetBounds.call(this,X,Y,26,26);
    };
    this.IsDesigning = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csDesigning in this.FComponentState;
      return Result;
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
  });
},["WEBLib.TMSFNCUtils","SysUtils","WEBLib.TMSFNCGraphics","WEBLib.Graphics","WEBLib.TMSFNCGraphicsTypes","Types"]);
rtl.module("WEBLib.TMSFNCBitmapContainer",["System","Classes","WEBLib.TMSFNCTypes","WEBLib.TMSFNCCustomComponent","WEBLib.Controls"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  $mod.$rtti.$Class("TTMSFNCBitmapContainer");
  rtl.createClass($mod,"TTMSFNCBitmapItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FBitmap = null;
      this.FTag = 0;
      this.FName = "";
    };
    this.$final = function () {
      this.FBitmap = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetBitmap = function (Value) {
      this.FBitmap.Assign(Value);
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
      this.FName = "Item" + pas.SysUtils.IntToStr(this.FCollection.GetCount());
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas.Classes.TCollectionItem.Destroy.apply(this,arguments);
    };
    this.DoBitmapChanged = function (Sender) {
      if ($mod.TTMSFNCBitmapCollection.isPrototypeOf(this.FCollection)) {
        if (rtl.as(this.FCollection,$mod.TTMSFNCBitmapCollection).FOwner$1 != null) rtl.as(this.FCollection,$mod.TTMSFNCBitmapCollection).FOwner$1.DoBitmapChanged(this);
      };
    };
    this.Assign = function (Source) {
      this.FName = rtl.as(Source,$mod.TTMSFNCBitmapItem).FName;
      this.FTag = rtl.as(Source,$mod.TTMSFNCBitmapItem).FTag;
      this.FBitmap.Assign(rtl.as(Source,$mod.TTMSFNCBitmapItem).FBitmap);
    };
    var $r = this.$rtti;
    $r.addProperty("Bitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("Name",0,rtl.string,"FName","FName");
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag");
  });
  rtl.createClass($mod,"TTMSFNCBitmapCollection",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOwner$1 = null;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItemEx = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.GetBitmapItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCBitmapItem;
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,this.GetBitmapItemClass());
      this.FOwner$1 = AOwner;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
  });
  rtl.createClass($mod,"TControlList",pas.Classes.TList,function () {
  });
  rtl.createClass($mod,"TTMSFNCBitmapContainer",pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$init.call(this);
      this.FControls$1 = null;
      this.FItems = null;
      this.FOnBitmapChanged = null;
    };
    this.$final = function () {
      this.FControls$1 = undefined;
      this.FItems = undefined;
      this.FOnBitmapChanged = undefined;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$final.call(this);
    };
    this.SetItems = function (Value) {
      this.FItems.Assign(Value);
    };
    this.GetItems = function () {
      var Result = null;
      Result = this.FItems;
      return Result;
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.CreateItems = function () {
      var Result = null;
      Result = $mod.TTMSFNCBitmapCollection.$create("Create$3",[this]);
      return Result;
    };
    this.RegisterRuntimeClasses = function () {
      pas.Classes.RegisterClass($mod.TTMSFNCBitmapContainer);
    };
    this.Notification = function (AComponent, Operation) {
      var i = 0;
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (this.FControls$1 != null)) {
        for (var $l1 = this.FControls$1.GetCount() - 1; $l1 >= 0; $l1--) {
          i = $l1;
          if (this.FControls$1.Get(i) == AComponent) this.FControls$1.Delete(i);
        };
      };
    };
    this.DoBitmapChanged = function (Sender) {
      var f = null;
      var I = 0;
      f = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetParentForm(this);
      if (f != null) {
        for (var $l1 = 0, $end2 = f.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if (pas["WEBLib.Controls"].TWinControl.isPrototypeOf(f.GetControls(I))) this.InvalidateMembers(rtl.as(f.GetControls(I),pas["WEBLib.Controls"].TWinControl));
        };
      };
      if (this.FOnBitmapChanged != null) this.FOnBitmapChanged(this);
    };
    this.InvalidateMembers = function (AControl) {
      var I = 0;
      if (!(AControl != null)) return;
      if (pas.TypInfo.GetPropInfo$2(AControl,"BitmapContainer") != null) AControl.Invalidate();
      for (var $l1 = 0, $end2 = AControl.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas["WEBLib.Controls"].TWinControl.isPrototypeOf(AControl.GetControls(I))) this.InvalidateMembers(rtl.as(AControl.GetControls(I),pas["WEBLib.Controls"].TWinControl));
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.Create$1.apply(this,arguments);
      this.FItems = this.CreateItems();
      this.FControls$1 = $mod.TControlList.$create("Create$1");
    };
    this.Destroy = function () {
      rtl.free(this,"FControls$1");
      rtl.free(this,"FItems");
      pas["WEBLib.Controls"].TCustomControl.Destroy.apply(this,arguments);
    };
    this.FindBitmap = function (s) {
      var Result = null;
      var i = 0;
      Result = null;
      s = pas.SysUtils.UpperCase(s);
      i = 1;
      while (i <= this.GetItems().GetCount()) {
        if (pas.SysUtils.UpperCase(this.GetItems().GetItemEx(i - 1).FName) === s) {
          Result = this.GetItems().GetItemEx(i - 1).FBitmap;
          break;
        };
        i += 1;
      };
      return Result;
    };
    this.AddFromURL = function (URL, BitmapName) {
      var bmpi = null;
      bmpi = this.GetItems().Add$1();
      bmpi.FBitmap.LoadFromURL(URL);
      bmpi.FName = BitmapName;
    };
    var $r = this.$rtti;
    $r.addProperty("Items",3,$mod.$rtti["TTMSFNCBitmapCollection"],"GetItems","SetItems");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("OnBitmapChanged",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnBitmapChanged","FOnBitmapChanged");
  });
},["TypInfo","WEBLib.Forms","SysUtils","WEBLib.TMSFNCUtils"]);
rtl.module("WEBLib.TMSFNCHTMLEngine",["System","Classes","WEBLib.TMSFNCGraphics","Types","WEBLib.Graphics","WEBLib.TMSFNCTypes","WEBLib.TMSFNCBitmapContainer","WEBLib.TMSFNCGraphicsTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TMSFNCHTMLENGINE_ATTR_DELIM = '"';
  this.HTMLDrawEx$1 = function (AGraphics, s, fr, XPos, YPos, FocusLink, HoverLink, ShadowOffset, CheckHotSpot, CheckHeight, Print, Selected, Blink, HoverStyle, WordWrap, Down, DownID, ResFactor, URLColor, HoverColor, HoverFontColor, ShadowColor, AnchorVal, StripVal, FocusAnchor, XSize, YSize, HyperLinks, MouseLink, HoverRect, ControlRect, CID, CV, CT, LineCount, LineSpacing, BitmapContainer, Opacity, HyperLinkUnderline, HighlightColor, HighlightTextColor, HighlightTextStyle) {
    var Result = false;
    this.TFloatStyle = {"0": "fsNone", fsNone: 0, "1": "fsLeft", fsLeft: 1, "2": "fsRight", fsRight: 2};
    var su = "";
    var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
    var dr = new pas["WEBLib.TMSFNCTypes"].TRectF();
    var hr = new pas["WEBLib.TMSFNCTypes"].TRectF();
    var rr = new pas["WEBLib.TMSFNCTypes"].TRectF();
    var htmlwidth = 0.0;
    var htmlheight = 0.0;
    var txtheight = 0.0;
    var ch = 0.0;
    var rh = new pas["WEBLib.TMSFNCTypes"].TRectF();
    var Align = 0;
    var PIndent = 0;
    var OldFont = null;
    var OldFontColor = 0;
    var CalcFont = null;
    var CalcFontColor = 0;
    var DrawFont = null;
    var DrawFontCOlor = 0;
    var FontColor = 0;
    var OldPenColor = 0;
    var OldCalcFont = null;
    var OldCalcFontColor = 0;
    var BkColor = 0;
    var BGColor = 0;
    var OldDrawFont = null;
    var OldDrawFontColor = 0;
    var Hotspot = false;
    var ImageHotspot = false;
    var Anchor = false;
    var OldAnchor = false;
    var MouseInAnchor = false;
    var error = false;
    var paracolor = 0;
    var pencolor = 0;
    var blnkcolor = 0;
    var hifcol = 0;
    var hibcol = 0;
    var LastAnchor = "";
    var OldAnchorVal = "";
    var LType = "";
    var IMGSize = new pas.Types.TPoint();
    var isSup = false;
    var isSub = false;
    var isPara = false;
    var isShad = false;
    var hlcount = 0;
    var licount = 0;
    var imgali = 0.0;
    var subh = 0.0;
    var suph = 0.0;
    var ListIndex = 0;
    var Invisible = false;
    var FoundTag = false;
    var nnFit = 0;
    var inspoint = 0;
    var hifStyles = {};
    var AltImg = 0;
    var ImgIdx = 0;
    var OldImgIdx = 0;
    var ColL = 0;
    var ColB = 0;
    var ofsx = 0;
    var newofsx = 0;
    var FHot = false;
    var floatrect = new pas.Types.TRect();
    var floatpt = new pas.Types.TPoint();
    var txtfloat = 0;
    var txtfloatbefore = 0;
    var imgfloat = 0;
    function HTMLDrawLine(AGraphics, s, r, Calc, w, h, subh, suph, imgali, Align, PIndent, XPos, YPos, Hotspot, ImageHotSpot, OffsetX, NewOffsetX, floatrect, txtfloat) {
      var Result = "";
      var su = "";
      var Res = "";
      var TagProp = "";
      var Prop = "";
      var Tagp = "";
      var LineText = "";
      var dsu = "";
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ir = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var linebreak = false;
      var imgbreak = false;
      var linkbreak = false;
      var indent = 0;
      var bmpx = 0;
      var bmpy = 0;
      var imgw = 0;
      var imgh = 0;
      var err = 0;
      var sw = 0.0;
      var th = 0.0;
      var errs = 0.0;
      var rh = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var TagPos = 0;
      var SpacePos = 0;
      var o = 0;
      var l = 0;
      var bmp = null;
      var bmpcreated = false;
      var NewColor = 0;
      var TagWidth = 0;
      var TagHeight = 0;
      var WordLen = 0;
      var WordWidth = 0.0;
      var TagChar = "";
      var LengthFits = false;
      var ptf1 = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var ptf2 = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var imgalign = 0;
      var imgoffs = 0;
      var imgth = 0;
      var ControlType = "";
      var ControlWidth = "";
      var ControlHeight = "";
      var ControlID = "";
      var ControlValue = "";
      var ControlProp = "";
      var ControlLen = "";
      Result = "";
      LineText = "";
      WordWidth = 0;
      r.Bottom = r.Bottom - subh.get();
      w.set(0);
      sw = 0;
      linebreak = false;
      imgbreak = false;
      linkbreak = false;
      Hotspot.set(false);
      ImageHotSpot.set(false);
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(r);
      Res = "";
      if (!Calc) cr.Left = cr.Left + OffsetX;
      if (isPara && !Calc) {
        pencolor = AGraphics.FStroke.FColor;
        AGraphics.FStroke.SetColor(AGraphics.FFill.FColor);
        AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(fr.Left,r.Top,fr.Right,r.Top + h.get())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      while (((s.get().length > 0) && !linebreak) && !imgbreak) {
        TagPos = pas.System.Pos("<",s.get());
        if (WordWrap) {
          SpacePos = pas.System.Pos(" ",s.get())}
         else SpacePos = 0;
        if ((TagPos > 0) && ((SpacePos > TagPos) || (SpacePos === 0))) {
          su = pas.System.Copy(s.get(),1,TagPos - 1)}
         else {
          if (SpacePos > 0) {
            su = pas.System.Copy(s.get(),1,SpacePos)}
           else su = s.get();
        };
        WordLen = su.length;
        while (pas.System.Pos("&nbsp;",su) > 0) {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&nbsp;"," ",{get: function () {
              return su;
            }, set: function (v) {
              su = v;
            }});
        };
        while (pas.System.Pos("&lt;",su) > 0) {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&lt;","<",{get: function () {
              return su;
            }, set: function (v) {
              su = v;
            }});
        };
        while (pas.System.Pos("&gt;",su) > 0) {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&gt;",">",{get: function () {
              return su;
            }, set: function (v) {
              su = v;
            }});
        };
        if (WordLen > 0) {
          rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1(su));
          th = rh.Bottom - rh.Top;
          if (isSub && (subh.get() < (th / 4))) subh.set(th / 4);
          if (isSup && (suph.get() < (th / 4))) suph.set(th / 4);
          if (th > h.get()) h.set(th);
          StripVal.set(StripVal.get() + su);
          if (Invisible) pas.System.Delete(s,1,WordLen);
          if (!Invisible) {
            if (!Calc) {
              if (isSup) cr.Bottom = cr.Bottom - suph.get();
              if (isSub) cr.Bottom = cr.Bottom + subh.get();
              cr.Bottom = cr.Bottom - imgali.get();
              rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1(su));
              errs = rh.Right - rh.Left;
              if (BkColor !== -1) {
                AGraphics.FFill.SetColor(BkColor);
                AGraphics.FStroke.SetColor(BkColor);
                rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top,cr.Left + errs,cr.Top + (rh.Bottom - rh.Top))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
              };
              BkColor = -1;
              if (isShad) {
                pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                    return cr;
                  }, set: function (v) {
                    cr = v;
                  }},ShadowOffset,ShadowOffset);
                AGraphics.FFont.SetColor(ShadowColor);
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(cr),su,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1);
                pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                    return cr;
                  }, set: function (v) {
                    cr = v;
                  }},-ShadowOffset,-ShadowOffset);
                AGraphics.FFont.SetColor(OldFontColor);
              };
              if (((su !== "") && (su.charAt(su.length - 1) === " ")) && Anchor) {
                dsu = su + "\x00"}
               else dsu = su;
              AGraphics.FFont.SetColor(FontColor);
              AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(cr),dsu,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1);
              cr.Right = cr.Left + errs;
              if (Anchor && ((HyperLinks.get() - 1) === FocusLink)) FocusAnchor.set(LastAnchor);
              if (error) {
                AGraphics.FStroke.SetColor(255);
                AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
                AGraphics.FStroke.SetWidth(1);
                l = Math.round((cr.Left / 2) * 2);
                if ((l % 4) === 0) {
                  o = 2}
                 else o = 0;
                while (l < cr.Right) {
                  ptf1 = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(l,(r.Bottom + o) - 1));
                  if (o === 2) {
                    o = 0}
                   else o = 2;
                  ptf2 = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(l + 2,(r.Bottom + o) - 1));
                  AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(ptf1),new pas["WEBLib.TMSFNCTypes"].TPointF(ptf2),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  l += 2;
                };
              };
              cr.Left = cr.Right;
              cr.Right = r.Right;
              cr.Bottom = r.Bottom;
              cr.Top = r.Top;
            } else {
              cr = new pas["WEBLib.TMSFNCTypes"].TRectF(r);
              rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1(su));
              cr.Right = cr.Left + (rh.Right - rh.Left);
              if (((YPos > cr.Top) && (YPos < cr.Bottom)) && (XPos > w.get())) {
                nnFit = 0;
                if (nnFit === WordLen) {
                  inspoint = inspoint + WordLen}
                 else inspoint = inspoint + nnFit;
              };
              WordWidth = cr.Right - cr.Left;
              w.set(w.get() + WordWidth);
              if ((((XPos - cr.Left) >= (w.get() - WordWidth)) && ((XPos - cr.Left) <= w.get())) && Anchor) {
                Hotspot.set(true);
                if (YPos > cr.Top) {
                  AnchorVal.set(LastAnchor);
                  MouseInAnchor = true;
                };
              };
            };
            LengthFits = (w.get() < ((r.Right - r.Left) - ofsx)) || (((r.Right - r.Left) - ofsx) <= WordWidth);
            LineText = LineText + su;
            if (LengthFits || !WordWrap) {
              Res = Res + pas.System.Copy(s.get(),1,WordLen);
              pas.System.Delete(s,1,WordLen);
              if (su.length >= WordLen) {
                if (pas.System.Copy(su,WordLen,1) === " ") {
                  rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1(" "));
                  sw = rh.Right - rh.Left;
                } else sw = 0;
              } else sw = 0;
            } else {
              linebreak = true;
              w.set(w.get() - WordWidth);
            };
          };
        };
        TagPos = pas.System.Pos("<",s.get());
        if ((TagPos === 1) && (s.get().length <= 2)) s.set("");
        if ((!linebreak && (TagPos === 1)) && (s.get().length > 2)) {
          if ((s.get().charAt(1) === "\/") && (s.get().length > 3)) {
            var $tmp1 = pas.System.upcase(s.get().charAt(2));
            if ($tmp1 === "A") {
              if ((!HoverStyle || (HoverLink === HyperLinks.get())) && !Calc) {
                AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
                if (HoverColor !== -1) BkColor = HoverColor;
                if (HoverFontColor !== -1) FontColor = HoverFontColor;
              };
              if (!Selected) FontColor = OldFontColor;
              Anchor = false;
              if (MouseInAnchor) {
                hr.Bottom = r.Bottom;
                hr.Right = r.Left + w.get();
                if (r.Top !== hr.Top) {
                  hr.Left = r.Left;
                  hr.Top = r.Top;
                };
                HoverRect.set(new pas["WEBLib.TMSFNCTypes"].TRectF(hr));
                MouseLink.set(HyperLinks.get());
                MouseInAnchor = false;
              };
              if (FocusLink === (HyperLinks.get() - 1)) {
                rr.Right = cr.Left;
                rr.Bottom = cr.Bottom - imgali.get();
                rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                rr.Top = rr.Bottom - (rh.Bottom - rh.Top);
                pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                    return rr;
                  }, set: function (v) {
                    rr = v;
                  }},1,0);
              };
            } else if ($tmp1 === "E") {
              if (!Calc) error = false;
            } else if ($tmp1 === "B") {
              if (s.get().charAt(3) !== ">") {
                FontColor = OldFontColor}
               else AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)));
            } else if ($tmp1 === "S") {
              TagChar = pas.System.upcase(s.get().charAt(3));
              if (TagChar === "U") {
                isSup = false;
                isSub = false;
              } else if (TagChar === "H") {
                isShad = false}
               else AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsStrikeOut)));
            } else if ($tmp1 === "F") {
              AGraphics.FFont.SetName(OldFont.FName);
              AGraphics.FFont.SetSize(OldFont.FSize);
              if (!Calc && !Selected) {
                FontColor = OldFontColor;
                AGraphics.FFill.SetColor(BGColor);
              };
            } else if ($tmp1 === "H") {
              if (!Calc) {
                FontColor = hifcol;
                BkColor = hibcol;
                AGraphics.FFont.SetStyle(rtl.refSet(hifStyles));
                AGraphics.FFill.SetColor(hibcol);
              };
            } else if ($tmp1 === "I") {
              AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsItalic)));
            } else if ($tmp1 === "L") {
              linebreak = true;
            } else if ($tmp1 === "O") {
              NewOffsetX.set(0);
            } else if ($tmp1 === "P") {
              linebreak = true;
              if (!Calc) {
                AGraphics.FFill.SetColor(paracolor);
                isPara = false;
              };
            } else if ($tmp1 === "U") {
              if ((s.get().charAt(3) !== ">") && (ListIndex > 0)) {
                ListIndex -= 1}
               else AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
            } else if ($tmp1 === "R") {}
            else if ($tmp1 === "Z") Invisible = false;
          } else {
            var $tmp2 = pas.System.upcase(s.get().charAt(1));
            if ($tmp2 === "A") {
              if ((FocusLink === HyperLinks.get()) && !Calc) {
                rr.Left = cr.Left;
                rr.Top = cr.Top;
              };
              HyperLinks.set(HyperLinks.get() + 1);
              if ((!HoverStyle || (HoverLink === HyperLinks.get())) && !Calc) {
                if (HyperLinkUnderline) AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
                if ((HoverColor !== -1) && !Calc) BkColor = HoverColor;
                if (HoverFontColor !== -1) FontColor = HoverFontColor;
              };
              if (!Selected && (((HoverFontColor === -1) || (HoverLink !== HyperLinks.get())) || !HoverStyle)) {
                OldFontColor = FontColor;
                FontColor = URLColor;
              };
              TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
              Prop = pas.System.Copy(TagProp,pas.System.Pos('"',TagProp) + 1,TagProp.length);
              Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
              LastAnchor = Prop;
              Anchor = true;
              hr.Left = w.get();
              hr.Top = r.Top;
            } else if ($tmp2 === "B") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              var $tmp3 = TagChar;
              if ($tmp3 === ">") {
                AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)))}
               else if ($tmp3 === "R") {
                linebreak = true;
                StripVal.set(StripVal.get() + "\r");
              } else if ($tmp3 === "L") {
                if (!Blink) FontColor = blnkcolor}
               else if ($tmp3 === "O") {
                bmpy = 0;
                Res = Res + pas.System.Copy(s.get(),1,pas.System.Pos(">",s.get()));
                if (!Calc && !Selected) {
                  TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),6,pas.System.Pos(">",s.get()) - 1));
                  if (pas.System.Pos("BACKGROUND",TagProp) > 0) {
                    Prop = pas.System.Copy(TagProp,pas.System.Pos("BACKGROUND",TagProp) + 10,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    if (pas.System.Pos("IDX:",pas.SysUtils.UpperCase(Prop)) > 0) {
                      pas.System.Delete({get: function () {
                          return Prop;
                        }, set: function (v) {
                          Prop = v;
                        }},1,4);
                    };
                    bmp = null;
                    bmpcreated = false;
                    if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                      bmp = BitmapContainer.FindBitmap(Prop);
                    };
                    if (pas.System.Pos("URL:\/\/",pas.SysUtils.UpperCase(Prop)) > 0) {
                      pas.System.Delete({get: function () {
                          return Prop;
                        }, set: function (v) {
                          Prop = v;
                        }},1,6);
                      bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromURL(Prop);
                      bmpcreated = true;
                    };
                    if (bmp != null) {
                      if ((!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp) && (bmp.GetWidth() > 0)) && (bmp.GetHeight() > 0)) {
                        while (bmpy < (fr.Bottom - fr.Top)) {
                          bmpx = 0;
                          while (bmpx < (fr.Right - fr.Left)) {
                            AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(fr.Left + bmpx),Math.round(fr.Top + bmpy),Math.round(fr.Left + bmpx) + bmp.GetWidth(),Math.round(fr.Top + bmpy) + bmp.GetHeight())),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
                            bmpx = bmpx + bmp.GetWidth();
                          };
                          bmpy = bmpy + bmp.GetHeight();
                        };
                      };
                      if (bmpcreated) bmp = rtl.freeLoc(bmp);
                    };
                  };
                  if (pas.System.Pos("BGTOPLEFT",TagProp) > 0) {
                    Prop = pas.System.Copy(TagProp,pas.System.Pos("BGTOPLEFT",TagProp) + 10,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    bmp = null;
                    if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                      bmp = BitmapContainer.FindBitmap(Prop);
                    };
                    if (bmp != null) {
                      if ((!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp) && (bmp.GetWidth() > 0)) && (bmp.GetHeight() > 0)) {
                        AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(fr.Left),Math.round(fr.Top + bmpy),Math.round(fr.Left) + bmp.GetWidth(),Math.round(fr.Top) + bmp.GetHeight())),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
                      };
                    };
                  };
                  if (pas.System.Pos("BGTOPRIGHT",TagProp) > 0) {
                    Prop = pas.System.Copy(TagProp,pas.System.Pos("BGTOPRIGHT",TagProp) + 10,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    bmp = null;
                    if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                      bmp = BitmapContainer.FindBitmap(Prop);
                    };
                    if (bmp != null) {
                      if ((!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp) && (bmp.GetWidth() > 0)) && (bmp.GetHeight() > 0)) {
                        AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(fr.Right) - bmp.GetWidth(),Math.round(fr.Top + bmpy),Math.round(fr.Right),Math.round(fr.Top) + bmp.GetHeight())),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
                      };
                    };
                  };
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLOR",TagProp,{get: function () {
                      return TagPos;
                    }, set: function (v) {
                      TagPos = v;
                    }}) > 0) {
                    Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    NewColor = -1;
                    if (Prop.length > 0) {
                      if (Prop.charAt(0) === "#") {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                       else {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(pas.SysUtils.LowerCase(Prop));
                      };
                    };
                    if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLORTO",TagProp,{get: function () {
                        return TagPos;
                      }, set: function (v) {
                        TagPos = v;
                      }}) > 0) {
                      Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                      Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                      Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                      Prop = "H";
                      if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("DIR",TagProp,{get: function () {
                          return TagPos;
                        }, set: function (v) {
                          TagPos = v;
                        }}) > 0) {
                        Prop = pas.System.Copy(TagProp,TagPos + 3,TagProp.length);
                        Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                        Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                      };
                      AGraphics.FStroke.SetColor(NewColor);
                    } else {
                      BGColor = AGraphics.FFill.FColor;
                      AGraphics.FFill.SetColor(NewColor);
                      pencolor = AGraphics.FStroke.FColor;
                      AGraphics.FStroke.SetColor(NewColor);
                      AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(fr.Left - 2,fr.Top,fr.Right,fr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                      AGraphics.FStroke.SetColor(pencolor);
                    };
                  };
                };
              };
            } else if ($tmp2 === "E") {
              if (!Calc) error = true;
            } else if ($tmp2 === "C") {
              TagProp = pas.System.Copy(s.get(),9,pas.System.Pos(">",s.get()) - 1);
              ControlType = "";
              ControlID = "";
              ControlValue = "";
              ControlWidth = "";
              ControlHeight = "";
              ControlProp = "";
              ControlLen = "";
              $mod.ParseControl(TagProp,{get: function () {
                  return ControlType;
                }, set: function (v) {
                  ControlType = v;
                }},{get: function () {
                  return ControlID;
                }, set: function (v) {
                  ControlID = v;
                }},{get: function () {
                  return ControlValue;
                }, set: function (v) {
                  ControlValue = v;
                }},{get: function () {
                  return ControlWidth;
                }, set: function (v) {
                  ControlWidth = v;
                }},{get: function () {
                  return ControlHeight;
                }, set: function (v) {
                  ControlHeight = v;
                }},{get: function () {
                  return ControlProp;
                }, set: function (v) {
                  ControlProp = v;
                }},{get: function () {
                  return ControlLen;
                }, set: function (v) {
                  ControlLen = v;
                }});
              ch = 25;
              if (ControlHeight !== "") {
                pas.System.val$7(ControlHeight,{get: function () {
                    return ch;
                  }, set: function (v) {
                    ch = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err !== 0) ch = 25;
              };
              if (((ControlWidth !== "") || (ControlType === "CHECK")) || (ControlType === "RADIO")) {
                pas.System.val$5(ControlWidth,{get: function () {
                    return indent;
                  }, set: function (v) {
                    indent = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err === 0) {
                  IMGSize.x = indent;
                  IMGSize.y = Math.round(AGraphics.CalculateTextHeight$1("gh")) + 10;
                };
                if ((ControlType === "CHECK") || (ControlType === "RADIO")) {
                  h.set(16)}
                 else h.set(23);
                if (ch > 25) h.set(ch - 2);
                if (!Calc) {
                  if (((ControlType === "EDIT") || (ControlType === "PASSWORD")) || (ControlType === "MASK")) ;
                  if (ControlType === "COMBO") ;
                  if (ControlType === "CHECK") {
                    IMGSize.x = Math.round(16 * ResFactor) + 2;
                    IMGSize.y = IMGSize.x;
                    indent = IMGSize.x;
                    ir = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + 1,cr.Top + (((cr.Bottom - cr.Top) - (IMGSize.y - 2)) / 2),(cr.Left + IMGSize.x) - 1,(cr.Top + (((cr.Bottom - cr.Top) - (IMGSize.y - 2)) / 2)) + (IMGSize.y - 2)));
                    ir = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Right),Math.round(ir.Bottom)));
                    AGraphics.DrawCheckBox(new pas["WEBLib.TMSFNCTypes"].TRectF(ir),pas.SysUtils.UpperCase(ControlValue) === "TRUE",Down && (DownID === ControlID),true);
                  };
                  if (ControlType === "RADIO") {
                    IMGSize.x = Math.round(16 * ResFactor) + 2;
                    IMGSize.y = IMGSize.x;
                    indent = IMGSize.x;
                    ir = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + 1,cr.Top + (((cr.Bottom - cr.Top) - (IMGSize.y - 2)) / 2),(cr.Left + IMGSize.x) - 1,(cr.Top + (((cr.Bottom - cr.Top) - (IMGSize.y - 2)) / 2)) + (IMGSize.y - 2)));
                    ir = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Right),Math.round(ir.Bottom)));
                    AGraphics.DrawRadioButton(new pas["WEBLib.TMSFNCTypes"].TRectF(ir),pas.SysUtils.UpperCase(ControlValue) === "TRUE",Down && (DownID === ControlID),true);
                  };
                  if (ControlType === "BUTTON") {
                    IMGSize.y = 22;
                    ir = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + 2,cr.Top + (((cr.Bottom - cr.Top) - IMGSize.y) / 2),(cr.Left + indent) - 2,(cr.Top + (((cr.Bottom - cr.Top) - IMGSize.y) / 2)) + IMGSize.y));
                    FHot = pas["WEBLib.TMSFNCTypes"].PtInRectEx(ir,pas["WEBLib.TMSFNCTypes"].PointF(XPos,YPos));
                    ir = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Right),Math.round(ir.Bottom)));
                    AGraphics.DrawButton(new pas["WEBLib.TMSFNCTypes"].TRectF(ir),Down && (DownID === ControlID),FHot,true,true);
                    pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                        return ir;
                      }, set: function (v) {
                        ir = v;
                      }},-2,-2);
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(ir),ControlValue,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                  };
                };
                if (ControlType === "BUTTON") IMGSize.y = 22;
                if (ControlType === "COMBO") IMGSize.y = 25;
                if ((ControlType === "CHECK") || (ControlType === "RADIO")) {
                  IMGSize.x = Math.round(16 * ResFactor) + 2;
                  IMGSize.y = IMGSize.x;
                };
                if ((((((XPos - r.Left) > w.get()) && ((XPos - r.Left) < (w.get() + IMGSize.x))) && (YPos > cr.Top)) && (YPos < (cr.Top + IMGSize.y))) || (CheckHotSpot && (CID.get() === ControlID))) {
                  ImageHotSpot.set(true);
                  AnchorVal.set("ctrl");
                  AltImg = ImgIdx;
                  ir.Left = r.Left + w.get();
                  ir.Right = ir.Left + IMGSize.x;
                  ir.Top = cr.Top;
                  ir.Bottom = cr.Top + IMGSize.y;
                  ControlRect.set(new pas["WEBLib.TMSFNCTypes"].TRectF(ir));
                  CV.set(ControlValue);
                  CID.set(ControlID);
                  CT.set(ControlType);
                };
                if (((w.get() + IMGSize.x) > (r.Right - r.Left)) && (IMGSize.x < (r.Right - r.Left))) {
                  imgbreak = true;
                } else {
                  w.set(w.get() + IMGSize.x);
                  cr.Left = cr.Left + IMGSize.x;
                  if (IMGSize.y > h.get()) h.set(IMGSize.y);
                };
              };
            } else if ($tmp2 === "H") {
              var $tmp4 = pas.System.upcase(s.get().charAt(2));
              if ($tmp4 === "R") {
                linebreak = true;
                if (!Calc) {
                  TagProp = pas.System.Copy(s.get(),4,pas.System.Pos(">",s.get()) - 1);
                  NewColor = 0;
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("COLOR",pas.SysUtils.UpperCase(TagProp),{get: function () {
                      return TagPos;
                    }, set: function (v) {
                      TagPos = v;
                    }}) > 0) {
                    Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    if (Prop.length > 0) {
                      if (Prop.charAt(0) === "#") {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                       else {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(pas.SysUtils.LowerCase(Prop));
                      };
                    };
                  };
                  AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
                  pencolor = AGraphics.FStroke.FColor;
                  AGraphics.FStroke.SetColor(NewColor);
                  ptf1 = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,cr.Bottom + 1));
                  ptf2 = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,cr.Bottom + 1));
                  AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(ptf1),new pas["WEBLib.TMSFNCTypes"].TPointF(ptf2),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  AGraphics.FStroke.SetColor(pencolor);
                };
              } else if ($tmp4 === "I") {
                if (!Calc) {
                  hifcol = FontColor;
                  hibcol = BkColor;
                  hifStyles = rtl.refSet(AGraphics.FFont.FStyle);
                  BkColor = HighlightColor;
                  FontColor = HighlightTextColor;
                };
                AGraphics.FFont.SetStyle(rtl.refSet(HighlightTextStyle));
              };
            } else if ($tmp2 === "I") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              if (TagChar === ">") {
                AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsItalic)))}
               else if (TagChar === "N") {
                TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
                Prop = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("x",TagProp) + 2,TagProp.length);
                Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                pas.System.val$5(Prop,{get: function () {
                    return indent;
                  }, set: function (v) {
                    indent = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err === 0) {
                  if (indent > w.get()) {
                    w.set(indent);
                    cr.Left = fr.Left + indent;
                  };
                };
              } else if (TagChar === "M") {
                imgalign = 0;
                imgoffs = 0;
                imgfloat = $mod.TFloatStyle.fsNone;
                imgth = Math.round(AGraphics.CalculateTextHeight$1("gh"));
                ImgIdx += 1;
                ir = new pas["WEBLib.TMSFNCTypes"].TRectF(cr);
                TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
                Prop = pas.System.Copy(TagProp,pas.System.Pos("SRC",pas.SysUtils.UpperCase(TagProp)) + 4,TagProp.length);
                Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                TagProp = pas.SysUtils.UpperCase(TagProp);
                if ((pas.System.Pos("ALT",TagProp) > 0) && (AltImg === ImgIdx)) {
                  Prop = pas.System.Copy(TagProp,pas.System.Pos("ALT",TagProp) + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                };
                TagWidth = 0;
                TagHeight = 0;
                if (pas.System.Pos("WIDTH",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas.System.Pos("WIDTH",TagProp) + 6,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  pas.System.val$5(Tagp,{get: function () {
                      return TagWidth;
                    }, set: function (v) {
                      TagWidth = v;
                    }},{get: function () {
                      return err;
                    }, set: function (v) {
                      err = v;
                    }});
                };
                if (pas.System.Pos("HEIGHT",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("HEIGHT",TagProp) + 7,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  pas.System.val$5(Tagp,{get: function () {
                      return TagHeight;
                    }, set: function (v) {
                      TagHeight = v;
                    }},{get: function () {
                      return err;
                    }, set: function (v) {
                      err = v;
                    }});
                };
                if (pas.System.Pos("ALIGN",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("ALIGN",TagProp) + 6,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  if (Tagp === "MIDDLE") imgalign = 1;
                  if (Tagp === "TOP") imgalign = 2;
                };
                if (pas.System.Pos("FLOAT",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("FLOAT",TagProp) + 6,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  if (Tagp === "LEFT") {
                    imgfloat = $mod.TFloatStyle.fsLeft;
                    ir.Left = fr.Left;
                  };
                  if (Tagp === "RIGHT") imgfloat = $mod.TFloatStyle.fsRight;
                };
                IMGSize.x = 0;
                IMGSize.y = 0;
                if (pas.System.Pos("IDX:",pas.SysUtils.UpperCase(Prop)) > 0) {
                  pas.System.Delete({get: function () {
                      return Prop;
                    }, set: function (v) {
                      Prop = v;
                    }},1,4);
                };
                bmp = null;
                bmpcreated = false;
                if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                  bmp = BitmapContainer.FindBitmap(Prop);
                };
                if (pas.System.Pos("URL:\/\/",pas.SysUtils.UpperCase(Prop)) > 0) {
                  pas.System.Delete({get: function () {
                      return Prop;
                    }, set: function (v) {
                      Prop = v;
                    }},1,6);
                  bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromURL(Prop);
                  bmpcreated = true;
                };
                imgw = 0;
                imgh = 0;
                if (bmp != null) {
                  if (!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
                    if ((TagWidth > 0) && (TagHeight > 0)) {
                      imgw = TagWidth;
                      imgh = TagHeight;
                    };
                    if ((TagWidth > 0) && (TagHeight === 0)) {
                      imgw = TagWidth;
                      imgh = Math.round((TagWidth / bmp.GetWidth()) * bmp.GetHeight());
                    };
                    if ((TagWidth === 0) && (TagHeight > 0)) {
                      imgw = Math.round((TagHeight / bmp.GetHeight()) * bmp.GetWidth());
                      imgh = TagHeight;
                    };
                    if ((TagWidth === 0) && (TagHeight === 0)) {
                      imgw = bmp.GetWidth();
                      imgh = bmp.GetHeight();
                    };
                    if (imgfloat === $mod.TFloatStyle.fsRight) ir.Left = r.Right - imgw;
                    if (!Calc) {
                      if ((TagWidth > 0) || (TagHeight > 0)) {
                        AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Left) + imgw,Math.round(ir.Top) + imgh)),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
                      } else if ((TagWidth > 0) && (TagHeight === 0)) {
                        AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Left) + TagWidth,Math.round(ir.Top) + TagHeight)),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
                      } else {
                        AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Left) + bmp.GetWidth(),Math.round(ir.Top) + bmp.GetHeight())),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
                      };
                    };
                    if ((TagWidth > 0) || (TagHeight > 0)) {
                      IMGSize.x = imgw;
                      IMGSize.y = imgh;
                    } else {
                      IMGSize.x = bmp.GetWidth();
                      IMGSize.y = bmp.GetHeight();
                    };
                  };
                  if (bmpcreated) bmp = rtl.freeLoc(bmp);
                };
                if ((((((XPos - r.Left) > w.get()) && ((XPos - r.Left) < (w.get() + IMGSize.x))) && (YPos > cr.Top)) && (YPos < (cr.Top + IMGSize.y))) && Anchor) {
                  ImageHotSpot.set(true);
                  AnchorVal.set(LastAnchor);
                  AltImg = ImgIdx;
                };
                if (((w.get() + IMGSize.x) > (r.Right - r.Left)) && (IMGSize.x < (r.Right - r.Left))) {
                  imgbreak = true;
                } else {
                  w.set(w.get() + IMGSize.x);
                  cr.Left = cr.Left + IMGSize.x;
                  if (IMGSize.y > h.get()) h.set(IMGSize.y);
                };
                if (pas.System.Pos("ALIGN",TagProp) > 0) {
                  if (pas.System.Pos('"TOP',TagProp) > 0) {
                    rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                    imgali.set(h.get() - (rh.Bottom - rh.Top));
                  } else {
                    if (pas.System.Pos('"MIDDLE',TagProp) > 0) {
                      rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                      imgali.set((h.get() - (rh.Bottom - rh.Top)) / 2);
                    };
                  };
                };
                if (pas.System.Pos("WRAP",TagProp) > 0) {
                  rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                  h.set(rh.Bottom - rh.Top);
                  imgali.set(0);
                };
                if (imgfloat === $mod.TFloatStyle.fsLeft) {
                  rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                  imgali.set(h.get() - (rh.Bottom - rh.Top));
                  floatrect.get().Left = imgw;
                  floatrect.get().Bottom = imgh;
                  if (!Calc) {
                    rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                    h.set(rh.Bottom - rh.Top);
                  };
                };
                if (imgfloat === $mod.TFloatStyle.fsRight) {
                  rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                  imgali.set(h.get() - (rh.Bottom - rh.Top));
                  floatrect.get().Right = imgw;
                  floatrect.get().Bottom = imgh;
                  if (!Calc) {
                    rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
                    h.set(rh.Bottom - rh.Top);
                  };
                  w.set(fr.Right);
                };
              };
            } else if ($tmp2 === "L") {
              NewColor = -1;
              LType = "";
              if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
                  return TagPos;
                }, set: function (v) {
                  TagPos = v;
                }}) > 0) {
                TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),3,TagPos - 1));
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("TYPE",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  LType = Prop;
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("COLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                };
              };
              w.set(w.get() + (12 * ListIndex));
              if (linkbreak) {
                imgbreak = true}
               else linkbreak = true;
              cr.Left = cr.Left + (12 * (ListIndex - 1));
              if (!Calc && !Invisible) {
                if (LType === "") {
                  if (NewColor !== -1) {
                    ColL = AGraphics.FFont.FColor;
                    FontColor = NewColor;
                  };
                  Prop = AGraphics.FFont.FName;
                  AGraphics.FFont.SetName("Symbol");
                  if (pas.System.Odd(ListIndex)) {
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(cr),"·",false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1)}
                   else AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(cr),"o",false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1);
                  AGraphics.FFont.SetName(Prop);
                  if (NewColor !== -1) FontColor = ColL;
                } else {
                  ColB = -1;
                  if (LType === "SQUARE") {
                    ColB = AGraphics.FFill.FColor;
                    AGraphics.FStroke.SetColor(NewColor);
                    AGraphics.FFill.SetColor(NewColor);
                    AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top + 2,cr.Left + 8,cr.Top + 10)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                    AGraphics.FFill.SetColor(ColB);
                  };
                  if (LType === "CIRCLE") {
                    ColB = AGraphics.FFill.FColor;
                    AGraphics.FStroke.SetColor(NewColor);
                    AGraphics.FFill.SetColor(NewColor);
                    AGraphics.DrawEllipse$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top + 2,cr.Left + 8,cr.Top + 10)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                    AGraphics.FFill.SetColor(ColB);
                  };
                };
              };
              cr.Left = cr.Left + 12;
            } else if ($tmp2 === "U") {
              if (s.get().charAt(2) !== ">") {
                ListIndex += 1;
                linebreak = true;
              } else AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
            } else if ($tmp2 === "O") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              if (TagChar === "F") {
                TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
                Prop = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("x",TagProp) + 2,TagProp.length);
                Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                pas.System.val$5(Prop,NewOffsetX,{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                cr.Left = NewOffsetX.get();
                w.set(NewOffsetX.get());
              };
            } else if ($tmp2 === "P") {
              if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
                  return TagPos;
                }, set: function (v) {
                  TagPos = v;
                }}) > 0) {
                TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),3,TagPos - 1));
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("ALIGN",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (pas.System.Pos("RIGHT",Prop) > 0) Align.set(pas.Classes.TAlignment.taRightJustify);
                  if (pas.System.Pos("LEFT",Prop) > 0) Align.set(pas.Classes.TAlignment.taLeftJustify);
                  if (pas.System.Pos("CENTER",Prop) > 0) Align.set(pas.Classes.TAlignment.taCenter);
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("INDENT",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 6,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  PIndent.set($impl.IStrToInt(Prop));
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("FLOAT",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (Prop === "LEFT") txtfloat.set($mod.TFloatStyle.fsLeft);
                  if (Prop === "RIGHT") txtfloat.set($mod.TFloatStyle.fsRight);
                  floatpt = new pas.Types.TPoint(pas.Types.Point(Math.round(r.Left),Math.round(r.Top)));
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  NewColor = -1;
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLORTO",TagProp,{get: function () {
                      return TagPos;
                    }, set: function (v) {
                      TagPos = v;
                    }}) > 0) {
                    Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    if (!Calc) {
                      isPara = true;
                      AGraphics.FStroke.SetColor(NewColor);
                    };
                  } else {
                    if (!Calc) {
                      isPara = true;
                      paracolor = AGraphics.FFill.FColor;
                      AGraphics.FFill.SetColor(NewColor);
                      pencolor = AGraphics.FStroke.FColor;
                      AGraphics.FStroke.SetColor(NewColor);
                      AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(fr.Left,r.Top,fr.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                    };
                  };
                };
              };
            } else if ($tmp2 === "F") {
              if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
                  return TagPos;
                }, set: function (v) {
                  TagPos = v;
                }}) > 0) {
                TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),6,TagPos - 6));
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("FACE",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  AGraphics.FFont.SetName(Prop);
                };
                if ((pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(" COLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) && !Selected) {
                  Prop = pas.System.Copy(TagProp,TagPos + 6,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  OldFontColor = AGraphics.FFont.FColor;
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      FontColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else FontColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                };
                if (((pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) && !Calc) && !Selected) {
                  Prop = pas.System.Copy(TagProp,TagPos + 7,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      BkColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else BkColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("SIZE",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos("=",Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  var $tmp5 = $impl.IStrToInt(Prop);
                  if ($tmp5 === 1) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,8)}
                   else if ($tmp5 === 2) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,10)}
                   else if ($tmp5 === 3) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,12)}
                   else if ($tmp5 === 4) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,14)}
                   else if ($tmp5 === 5) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,16)}
                   else {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,$impl.IStrToInt(Prop));
                  };
                };
              };
            } else if ($tmp2 === "S") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              if (TagChar === ">") {
                AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsStrikeOut)))}
               else {
                if (TagChar === "H") {
                  isShad = true}
                 else {
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("<SUB>",s.get()) === 1) {
                    isSub = true}
                   else if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("<SUP>",s.get()) === 1) isSup = true;
                };
              };
            } else if ($tmp2 === "R") {
              TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
              Prop = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("a",TagProp) + 2,TagProp.length);
              Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
              Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
            } else if ($tmp2 === "Z") Invisible = true;
          };
          if ((pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
              return TagPos;
            }, set: function (v) {
              TagPos = v;
            }}) > 0) && !imgbreak) {
            Res = Res + pas.System.Copy(s.get(),1,TagPos);
            pas.System.Delete(s,1,TagPos);
          } else if (!imgbreak) pas.System.Delete(s,1,s.get().length);
        };
      };
      w.set(w.get() - sw);
      if (w.get() > XSize.get()) XSize.set(w.get() + 2);
      if (((FocusLink === (HyperLinks.get() - 1)) && Anchor) && !Calc) {
        rr.Right = cr.Left;
        rr.Bottom = cr.Bottom;
        pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
            return rr;
          }, set: function (v) {
            rr = v;
          }},1,0);
        rr.Left = r.Left + 1;
        rr.Top = rr.Bottom;
      };
      Result = Res;
      return Result;
    };
    Anchor = false;
    error = false;
    OldFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    OldFont.AssignSource(AGraphics.FFont);
    OldFontColor = AGraphics.FFont.FColor;
    DrawFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    DrawFont.AssignSource(AGraphics.FFont);
    DrawFontCOlor = AGraphics.FFont.FColor;
    CalcFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    CalcFont.AssignSource(AGraphics.FFont);
    CalcFontColor = AGraphics.FFont.FColor;
    OldDrawFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    OldDrawFont.AssignSource(AGraphics.FFont);
    OldDrawFontColor = AGraphics.FFont.FColor;
    OldCalcFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    OldCalcFont.AssignSource(AGraphics.FFont);
    OldCalcFontColor = AGraphics.FFont.FColor;
    blnkcolor = AGraphics.FFill.FColor;
    OldPenColor = AGraphics.FStroke.FColor;
    BGColor = -1;
    BkColor = -1;
    paracolor = -1;
    isPara = false;
    isShad = false;
    Invisible = false;
    OldFontColor = AGraphics.FFont.FColor;
    ControlRect.set(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0)));
    CV.set("");
    CT.set("");
    if (!CheckHotSpot) CID.set("");
    ofsx = 0;
    newofsx = 0;
    txtfloat = $mod.TFloatStyle.fsNone;
    floatrect = new pas.Types.TRect(pas.Types.Rect(0,0,0,0));
    Result = false;
    r = new pas["WEBLib.TMSFNCTypes"].TRectF(fr);
    Align = pas.Classes.TAlignment.taLeftJustify;
    PIndent = 0;
    XSize.set(0);
    YSize.set(0);
    HyperLinks.set(0);
    hlcount = 0;
    ListIndex = 0;
    licount = 0;
    StripVal.set("");
    FocusAnchor.set("");
    MouseLink.set(-1);
    MouseInAnchor = false;
    ImgIdx = 0;
    AltImg = -1;
    if (pas.System.Pos("&",s) > 0) {
      do {
        FoundTag = false;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&amp;","&",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&quot;",'"',{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&sect;","§",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&permil;","®‰",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&reg;","®",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&copy;","©",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&para;","¶",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&trade;","™",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&euro;","€",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
      } while (FoundTag);
    };
    s = $impl.DBTagStrip(s);
    s = $impl.CRLFStrip(s,true);
    inspoint = 0;
    LineCount.set(0);
    while (s.length > 0) {
      OldFont.AssignSource(OldCalcFont);
      OldFontColor = OldCalcFontColor;
      AGraphics.FFont.AssignSource(CalcFont);
      FontColor = CalcFontColor;
      OldAnchor = Anchor;
      OldAnchorVal = LastAnchor;
      suph = 0;
      subh = 0;
      imgali = 0;
      isSup = false;
      isSub = false;
      Hotspot = false;
      ImageHotspot = false;
      htmlwidth = 0;
      rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
      htmlheight = rh.Bottom - rh.Top;
      txtheight = htmlheight;
      OldImgIdx = ImgIdx;
      s = pas.SysUtils.Trim(s);
      txtfloatbefore = txtfloat;
      su = HTMLDrawLine(AGraphics,{get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},new pas["WEBLib.TMSFNCTypes"].TRectF(r),true,{get: function () {
          return htmlwidth;
        }, set: function (v) {
          htmlwidth = v;
        }},{get: function () {
          return htmlheight;
        }, set: function (v) {
          htmlheight = v;
        }},{get: function () {
          return subh;
        }, set: function (v) {
          subh = v;
        }},{get: function () {
          return suph;
        }, set: function (v) {
          suph = v;
        }},{get: function () {
          return imgali;
        }, set: function (v) {
          imgali = v;
        }},{get: function () {
          return Align;
        }, set: function (v) {
          Align = v;
        }},{get: function () {
          return PIndent;
        }, set: function (v) {
          PIndent = v;
        }},XPos,YPos,{get: function () {
          return Hotspot;
        }, set: function (v) {
          Hotspot = v;
        }},{get: function () {
          return ImageHotspot;
        }, set: function (v) {
          ImageHotspot = v;
        }},ofsx,{get: function () {
          return newofsx;
        }, set: function (v) {
          newofsx = v;
        }},{get: function () {
          return floatrect;
        }, set: function (v) {
          floatrect = v;
        }},{get: function () {
          return txtfloat;
        }, set: function (v) {
          txtfloat = v;
        }});
      LineCount.set(LineCount.get() + 1);
      Anchor = OldAnchor;
      LastAnchor = OldAnchorVal;
      CalcFont.AssignSource(AGraphics.FFont);
      CalcFontColor = AGraphics.FFont.FColor;
      OldCalcFont.AssignSource(OldFont);
      OldCalcFontColor = OldFontColor;
      htmlheight = htmlheight + LineSpacing;
      dr = new pas["WEBLib.TMSFNCTypes"].TRectF(r);
      var $tmp1 = Align;
      if ($tmp1 === pas.Classes.TAlignment.taCenter) {
        if (((r.Right - r.Left) - htmlwidth) > 0) dr.Left = r.Left + (((r.Right - r.Left) - htmlwidth) / 2)}
       else if ($tmp1 === pas.Classes.TAlignment.taRightJustify) if ((r.Right - htmlwidth) > r.Left) dr.Left = r.Right - htmlwidth;
      dr.Left = dr.Left + PIndent;
      dr.Bottom = ((dr.Top + htmlheight) + subh) + suph;
      if (!CheckHeight) {
        OldFont.AssignSource(OldDrawFont);
        OldFontColor = OldDrawFontColor;
        AGraphics.FFont.AssignSource(DrawFont);
        FontColor = DrawFontCOlor;
        HyperLinks.set(hlcount);
        ListIndex = licount;
        ImgIdx = OldImgIdx;
        HTMLDrawLine(AGraphics,{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }},new pas["WEBLib.TMSFNCTypes"].TRectF(dr),CheckHotSpot,{get: function () {
            return htmlwidth;
          }, set: function (v) {
            htmlwidth = v;
          }},{get: function () {
            return htmlheight;
          }, set: function (v) {
            htmlheight = v;
          }},{get: function () {
            return subh;
          }, set: function (v) {
            subh = v;
          }},{get: function () {
            return suph;
          }, set: function (v) {
            suph = v;
          }},{get: function () {
            return imgali;
          }, set: function (v) {
            imgali = v;
          }},{get: function () {
            return Align;
          }, set: function (v) {
            Align = v;
          }},{get: function () {
            return PIndent;
          }, set: function (v) {
            PIndent = v;
          }},XPos,YPos,{get: function () {
            return Hotspot;
          }, set: function (v) {
            Hotspot = v;
          }},{get: function () {
            return ImageHotspot;
          }, set: function (v) {
            ImageHotspot = v;
          }},ofsx,{get: function () {
            return newofsx;
          }, set: function (v) {
            newofsx = v;
          }},{get: function () {
            return floatrect;
          }, set: function (v) {
            floatrect = v;
          }},{get: function () {
            return txtfloat;
          }, set: function (v) {
            txtfloat = v;
          }});
        hlcount = HyperLinks.get();
        licount = ListIndex;
        r.Left = fr.Left + floatrect.Left;
        r.Right = fr.Right - floatrect.Right;
        if (dr.Top > floatrect.Bottom) {
          floatrect.Left = 0;
          floatrect.Right = 0;
          r.Left = fr.Left;
        };
        rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
        if (((Hotspot && (YPos > ((dr.Bottom - imgali) - (rh.Bottom - rh.Top)))) && (YPos < (dr.Bottom - imgali))) || ImageHotspot) {
          Result = true;
        };
        ofsx = newofsx;
        DrawFont.AssignSource(AGraphics.FFont);
        DrawFontCOlor = FontColor;
        OldDrawFont.AssignSource(OldFont);
        OldDrawFontColor = OldFontColor;
      };
      if ((txtfloat !== $mod.TFloatStyle.fsNone) && (txtfloat !== txtfloatbefore)) {
        r.Left = floatpt.x;
        r.Top = floatpt.y;
        txtfloat = $mod.TFloatStyle.fsNone;
      } else {
        r.Top = ((r.Top + htmlheight) + subh) + suph;
        YSize.set(((YSize.get() + htmlheight) + subh) + suph);
      };
      if (((r.Top + txtheight) > (r.Bottom + 1)) && !CheckHeight) s = "";
    };
    if (YSize.get() === 0) {
      rh = new pas["WEBLib.TMSFNCTypes"].TRectF(AGraphics.CalculateText$1("gh"));
      YSize.set(rh.Bottom - rh.Top);
    };
    inspoint = inspoint >>> 1;
    AGraphics.FStroke.SetColor(OldPenColor);
    AGraphics.FFill.SetColor(blnkcolor);
    AGraphics.FFont.AssignSource(OldFont);
    OldFont = rtl.freeLoc(OldFont);
    DrawFont = rtl.freeLoc(DrawFont);
    CalcFont = rtl.freeLoc(CalcFont);
    OldDrawFont = rtl.freeLoc(OldDrawFont);
    OldCalcFont = rtl.freeLoc(OldCalcFont);
    return Result;
  };
  this.ParseControl = function (Tag, ControlType, ControlID, ControlValue, ControlWidth, ControlHeight, ControlProp, ControlLen) {
    var Prop = "";
    var vp = 0;
    ControlType.set("");
    ControlWidth.set("");
    ControlHeight.set("");
    ControlValue.set("");
    ControlID.set("");
    ControlProp.set("");
    ControlLen.set("");
    vp = 0;
    if ($impl.VarIPos("TYPE=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlType.set(pas.SysUtils.UpperCase(Prop));
    };
    if ($impl.VarIPos("WIDTH=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlWidth.set(Prop);
    };
    if ($impl.VarIPos("HEIGHT=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlHeight.set(Prop);
    };
    if ($impl.VarIPos("ID=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlID.set(Prop);
    };
    if ($impl.VarIPos("VALUE=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlValue.set(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.UnFixMarkup(Prop,true));
    };
    if ($impl.VarIPos("PROP=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlProp.set(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.UnFixMarkup(Prop,true));
    };
    if ($impl.VarIPos("MAXLEN=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlLen.set(Prop);
    };
  };
},["SysUtils","WEBLib.TMSFNCUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.VarIPos = function (su, s, Res) {
    var Result = 0;
    Res.set(pas.System.Pos(su,pas.SysUtils.UpperCase(s)));
    Result = Res.get();
    return Result;
  };
  $impl.IStrToInt = function (s) {
    var Result = 0;
    var Err = 0;
    var Res = 0;
    pas.System.val$5(s,{get: function () {
        return Res;
      }, set: function (v) {
        Res = v;
      }},{get: function () {
        return Err;
      }, set: function (v) {
        Err = v;
      }});
    Result = Res;
    return Result;
  };
  $impl.DBTagStrip = function (s) {
    var Result = "";
    var i = 0;
    var j = 0;
    i = pas.System.Pos("<#",s);
    if (i > 0) {
      Result = pas.System.Copy(s,1,i - 1);
      pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,i);
      j = pas.System.Pos(">",s);
      if (j > 0) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},j,1);
      Result = Result + s;
    } else Result = s;
    return Result;
  };
  $impl.CRLFStrip = function (s, Break) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 1, $end2 = s.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (!((s.charAt(i - 1) === "\r") || (s.charAt(i - 1) === "\n"))) {
        Result = Result + s.charAt(i - 1)}
       else if ((s.charAt(i - 1) === "\r") && Break) Result = Result + "<BR>";
    };
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCGraphics.General",["System","Classes","WEBLib.TMSFNCGraphicsTypes","Types","WEBLib.Graphics","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCGraphicsContextGeneral",pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.$init.call(this);
      this.FShowAcceleratorChar = false;
      this.FOldPenStyle = 0;
      this.FOldPenWidth = 0;
    };
    this.DrawRotatedText = function (ACanvas, ARect, AText, AAngle, AHorizontalAlign, AVerticalAlign) {
      var tw = 0.0;
      var th = 0.0;
      var s = "";
      var xs = 0.0;
      var ys = 0.0;
      var angle = 0.0;
      s = AText;
      angle = -10 * AAngle;
      xs = ARect.Left;
      ys = ARect.Top;
      tw = ACanvas.TextWidth(s);
      th = ACanvas.TextHeight(s);
      ACanvas.TextOut$1(xs,ys,s);
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.GetFillColor = function () {
      var Result = 0;
      Result = this.GetCanvas().FBrush.FColor;
      return Result;
    };
    this.CalculateText = function (AText, ARect, AWordWrapping) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.Graphics"].TCanvasRectF();
      r = new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      r = new pas["WEBLib.Graphics"].TCanvasRectF(this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(r),AText,AWordWrapping,true,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop));
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right,r.Bottom));
      return Result;
    };
    this.SetTextAngle = function (ARect, AAngle) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ar = 0.0;
      var cx = new pas["WEBLib.TMSFNCTypes"].TPointF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      if (AAngle !== 0) {
        ar = pas.math.DegToRad(AAngle);
        cx.X = Result.Left + ((Result.Right - Result.Left) / 2);
        cx.Y = Result.Top + ((Result.Bottom - Result.Top) / 2);
        this.GetCanvas().Transform(Math.cos(ar),Math.sin(ar),-Math.sin(ar),Math.cos(ar),cx.X,cx.Y);
        if ((Result.Right - Result.Left) < (Result.Bottom - Result.Top)) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Bottom - Result.Top) / 2,-(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2))}
         else Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Right - Result.Left) / 2,-(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2));
      };
      return Result;
    };
    this.Render = function () {
    };
    this.SetTextQuality = function (ATextQuality) {
    };
    this.SetAntiAliasing = function (AAntiAliasing) {
    };
    this.SetShowAcceleratorChar = function (AShowAcceleratorChar) {
      this.FShowAcceleratorChar = AShowAcceleratorChar;
    };
    this.SetSize = function (AWidth, AHeight) {
    };
    this.ResetTextAngle = function (AAngle) {
      if (AAngle !== 0) this.GetCanvas().SetTransform(1,0,0,1,0,0);
    };
    this.BeginScene = function () {
      if (this.GetCanvas() != null) {
        this.GetCanvas().BeginScene();
        this.GetCanvas().Clear$1(-1);
      };
    };
    this.EndScene = function () {
      this.GetCanvas().EndScene();
    };
    this.StartSpecialPen = function () {
      this.FOldPenStyle = this.GetCanvas().FPen.FStyle;
      this.FOldPenWidth = this.GetCanvas().FPen.FWidth;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDot;
      this.GetCanvas().FPen.FWidth = 1;
    };
    this.StopSpecialPen = function () {
      this.GetCanvas().FPen.FStyle = this.FOldPenStyle;
      this.GetCanvas().FPen.FWidth = this.FOldPenWidth;
    };
    this.RestoreState = function (AState) {
      AState.FSaveDC = 0;
      this.GetCanvas().Restore();
      this.GetCanvas().Refresh();
    };
    this.SaveState = function (AState) {
      this.GetCanvas().Refresh();
      this.GetCanvas().Save();
    };
    this.SetFont = function (AFont) {
      this.GetCanvas().FFont.Assign(AFont);
    };
    this.SetFill = function (AFill) {
      this.GetCanvas().FBrush.FColor = AFill.FColor;
      var $tmp1 = AFill.FKind;
      if (($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) || ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient)) {
        this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsSolid}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone) this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
    };
    this.SetFillColor = function (AColor) {
      this.GetCanvas().FBrush.FColor = AColor;
    };
    this.SetStroke = function (AStroke) {
      this.GetCanvas().FPen.SetColor(AStroke.FColor);
      this.GetCanvas().FPen.FWidth = Math.round(AStroke.FWidth);
      var $tmp1 = AStroke.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psSolid}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDash) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDash}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDot) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDot}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDashDot) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDashDot}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDashDotDot) this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDashDotDot;
    };
    this.DrawLine = function (AStroke, AFromPoint, AToPoint, AModifyPointModeFrom, AModifyPointModeTo) {
      this.GetCanvas().MoveTo$1(AFromPoint.X,AFromPoint.Y);
      this.GetCanvas().LineTo$1(AToPoint.X,AToPoint.Y);
    };
    this.DrawPolygon = function (AStroke, APolygon) {
      var pts = [];
      var I = 0;
      var bs = 0;
      var c = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolygon));
      for (var $l1 = 0, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I] = new pas["WEBLib.Graphics"].TCanvasPointF(pas["WEBLib.Graphics"].CreateCanvasPointF(APolygon[I].X,APolygon[I].Y));
      };
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().Polygon$1(pts);
      this.GetCanvas().FBrush.FStyle = bs;
      this.GetCanvas().FBrush.FColor = c;
    };
    this.FillPolygon = function (AFill, APolygon) {
      var pts = [];
      var I = 0;
      var ps = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolygon));
      for (var $l1 = 0, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I] = new pas["WEBLib.Graphics"].TCanvasPointF(pas["WEBLib.Graphics"].CreateCanvasPointF(APolygon[I].X,APolygon[I].Y));
      };
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      this.GetCanvas().Polygon$1(pts);
      this.GetCanvas().FPen.FStyle = ps;
    };
    this.DrawPolyline = function (AStroke, APolyline) {
      var I = 0;
      var pts = [];
      var bs = 0;
      var c = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolyline));
      for (var $l1 = 0, $end2 = rtl.length(APolyline) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I] = new pas["WEBLib.Graphics"].TCanvasPointF(pas["WEBLib.Graphics"].CreateCanvasPointF(APolyline[I].X,APolyline[I].Y));
      };
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().Polyline$1(pts);
      this.GetCanvas().FBrush.FStyle = bs;
      this.GetCanvas().FBrush.FColor = c;
    };
    this.FillPolyline = function (AFill, APolyline) {
      var pts = [];
      var I = 0;
      var ps = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolyline));
      for (var $l1 = 0, $end2 = rtl.length(APolyline) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I] = new pas["WEBLib.Graphics"].TCanvasPointF(pas["WEBLib.Graphics"].CreateCanvasPointF(APolyline[I].X,APolyline[I].Y));
      };
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      this.GetCanvas().Polyline$1(pts);
      this.GetCanvas().FPen.FStyle = ps;
    };
    this.FillRect = function (AFill, ARect, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var c = 0;
      var bs = 0;
      var ps = 0;
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      c = -1;
      bs = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      if (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if ((AFill.FColor !== -1) && (AFill.FColorTo !== -1)) {
          if ((AFill.FColorMirror !== -1) && (AFill.FColorMirrorTo !== -1)) {
            var $tmp1 = AFill.FOrientation;
            if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal) {
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left + ((r.Right - r.Left) / 2),r.Bottom)),0,{},true);
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + ((r.Right - r.Left) / 2),r.Top,r.Right,r.Bottom)),0,{},true);
            } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoVertical) {
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right,r.Top + ((r.Bottom - r.Top) / 2))),0,{},false);
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top + ((r.Bottom - r.Top) / 2),r.Right,r.Bottom)),0,{},false);
            };
          } else pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(r),0,{},AFill.FOrientation === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal);
        };
        c = this.GetCanvas().FBrush.FColor;
        bs = this.GetCanvas().FBrush.FStyle;
        this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      };
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      if ((AFill.FColor !== -1) && (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid)) {
        this.GetCanvas().Rectangle$3(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom));
      };
      this.GetCanvas().FPen.FStyle = ps;
      if (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        this.GetCanvas().FBrush.FColor = c;
        this.GetCanvas().FBrush.FStyle = bs;
      };
    };
    this.DrawRect = function (AStroke, ARect, ASides, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsTop in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsLeft in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsBottom in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsRight in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
    };
    this.FillRoundRect = function (AFill, ARect, ARounding, ACorners, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rg = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var c = {};
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      rg = new pas["WEBLib.TMSFNCTypes"].TRectF(r);
      rg.Bottom = rg.Bottom - 1;
      rg.Right = rg.Right - 1;
      if (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if ((AFill.FColor !== -1) && (AFill.FColorTo !== -1)) {
          if ((AFill.FColorMirror !== -1) && (AFill.FColorMirrorTo !== -1)) {
            var $tmp1 = AFill.FOrientation;
            if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal) {
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left,rg.Top,rg.Left + ((rg.Right - rg.Left) / 2),r.Bottom)),ARounding,rtl.refSet(c),true);
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left + ((rg.Right - r.Left) / 2),rg.Top,rg.Right,rg.Bottom)),ARounding,rtl.refSet(c),true);
            } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoVertical) {
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left,rg.Top,rg.Right,rg.Top + ((rg.Bottom - rg.Top) / 2))),ARounding,rtl.refSet(c),false);
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left,rg.Top + ((rg.Bottom - rg.Top) / 2),rg.Right,rg.Bottom)),ARounding,rtl.refSet(c),false);
            };
          } else pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,new pas["WEBLib.TMSFNCTypes"].TRectF(rg),ARounding,rtl.refSet(ACorners),AFill.FOrientation === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal);
        };
      } else if ((AFill.FColor !== -1) && (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid)) pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColor,new pas["WEBLib.TMSFNCTypes"].TRectF(r),ARounding,rtl.refSet(ACorners),AFill.FOrientation === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal);
    };
    this.DrawRoundRect = function (AStroke, ARect, ARounding, ACorners, AModifyRectMode) {
      var Self = this;
      var r = new pas["WEBLib.Graphics"].TCanvasRectF();
      var rg = new pas["WEBLib.Graphics"].TCanvasRectF();
      var rc = 0.0;
      var cl = 0;
      var bs = 0;
      function CanvasArc(ACanvas, Center, Radius, StartAngle, SweepAngle) {
        ACanvas.AngleArc$1(Center.X,Center.Y,Radius.X,pas.math.DegToRad(StartAngle),pas.math.DegToRad(SweepAngle));
      };
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r = new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      rg = new pas["WEBLib.Graphics"].TCanvasRectF(r);
      rg.Bottom = rg.Bottom - 1;
      rg.Right = rg.Right - 1;
      cl = Self.GetCanvas().FBrush.FColor;
      bs = Self.GetCanvas().FBrush.FStyle;
      Self.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      rc = Math.round(ARounding);
      if (rtl.eqSet(ACorners,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight))) {
        Self.GetCanvas().RoundRect$3(r,rc * 2,rc * 2)}
       else if (rtl.eqSet(ACorners,{})) {
        Self.GetCanvas().Rectangle$3(r)}
       else {
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          Self.GetCanvas().MoveTo$1(r.Left + rc,r.Bottom);
          CanvasArc(Self.GetCanvas(),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),-270,90);
          Self.GetCanvas().MoveTo$1(r.Left,r.Bottom - rc);
        } else {
          Self.GetCanvas().MoveTo$1(r.Left,r.Bottom);
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
          Self.GetCanvas().LineTo$1(r.Left,r.Top + rc);
          CanvasArc(Self.GetCanvas(),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),-180,90);
          Self.GetCanvas().MoveTo$1(r.Left + rc,r.Top);
        } else Self.GetCanvas().LineTo$1(r.Left,r.Top);
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
          Self.GetCanvas().LineTo$1(r.Right - rc,r.Top);
          CanvasArc(Self.GetCanvas(),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),-90,90);
          Self.GetCanvas().MoveTo$1(r.Right,r.Top + rc);
        } else Self.GetCanvas().LineTo$1(r.Right,r.Top);
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
          Self.GetCanvas().LineTo$1(r.Right,r.Bottom - rc);
          CanvasArc(Self.GetCanvas(),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),0,90);
          Self.GetCanvas().MoveTo$1(r.Right - rc,r.Bottom);
        } else {
          Self.GetCanvas().LineTo$1(r.Right,r.Bottom);
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          Self.GetCanvas().LineTo$1(r.Left + rc,r.Bottom);
        } else Self.GetCanvas().LineTo$1(r.Left,r.Bottom);
      };
      Self.GetCanvas().FBrush.FColor = cl;
      Self.GetCanvas().FBrush.FStyle = bs;
    };
    this.FillEllipse = function (AFill, ARect, AModifyRectMode) {
      var r = new pas["WEBLib.Graphics"].TCanvasRectF();
      var ps = 0;
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r = new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      this.GetCanvas().Ellipse$3(r);
      this.GetCanvas().FPen.FStyle = ps;
    };
    this.DrawEllipse = function (AStroke, ARect, AModifyRectMode) {
      var r = new pas["WEBLib.Graphics"].TCanvasRectF();
      var bs = 0;
      var c = 0;
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r = new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().Ellipse$3(r);
      this.GetCanvas().FBrush.FStyle = bs;
      this.GetCanvas().FBrush.FColor = c;
    };
    this.DrawBitmap = function (ABitmap, ASrcRect, ADstRect, AOpacity) {
      this.GetCanvas().StretchDraw$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(ADstRect.Left,ADstRect.Top,ADstRect.Right,ADstRect.Bottom)),ABitmap);
    };
    this.ClipRect = function (ARect) {
      this.GetCanvas().SetClipRect(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom)));
    };
    this.DrawFocusRectangle = function (AStroke, ARect, AColor, AModifyRectMode) {
      var r = new pas["WEBLib.Graphics"].TCanvasRectF();
      var c = 0;
      var bs = 0;
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r = new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().FPen.SetColor(AColor);
      this.StartSpecialPen();
      this.GetCanvas().Rectangle$3(r);
      this.StopSpecialPen();
      this.GetCanvas().FBrush.FColor = c;
      this.GetCanvas().FBrush.FStyle = bs;
    };
    this.DrawText = function (AText, ARect, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle) {
      var rcalc = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rh = 0;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var st = null;
      var c = 0;
      var bs = 0;
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      if (AWordWrapping) {
        var $tmp1 = AVerticalAlign;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
          rcalc = new pas["WEBLib.TMSFNCTypes"].TRectF(this.CalculateText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping));
          rh = Math.round(rcalc.Bottom - rcalc.Top);
          r.Top = r.Top + Math.max(0,((r.Bottom - r.Top) - rh) / 2);
          r.Bottom = Math.max(0,Math.min(Math.round(ARect.Bottom),r.Top + rh));
        } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) {
          rcalc = new pas["WEBLib.TMSFNCTypes"].TRectF(this.CalculateText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping));
          rh = Math.round(rcalc.Bottom - rcalc.Top);
          r.Top = (r.Top + r.Bottom) - rh;
          r.Bottom = r.Top + rh;
        };
      };
      if (AAngle !== 0) {
        this.DrawRotatedText(this.GetCanvas(),new pas["WEBLib.TMSFNCTypes"].TRectF(r),AText,AAngle,AHorizontalAlign,AVerticalAlign)}
       else {
        st = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSaveState.$create("Create$1");
        try {
          this.SaveState(st);
          this.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(r));
          var $tmp2 = AHorizontalAlign;
          if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
            var $tmp3 = AVerticalAlign;
            if ($tmp3 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
              this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop)}
             else if ($tmp3 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
              this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taVerticalCenter)}
             else if ($tmp3 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignBottom);
          } else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
            var $tmp4 = AVerticalAlign;
            if ($tmp4 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
              this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taCenter,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop)}
             else if ($tmp4 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
              this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taCenter,pas["WEBLib.Graphics"].TVerticalAlignment.taVerticalCenter)}
             else if ($tmp4 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taCenter,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignBottom);
          } else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) {
            var $tmp5 = AVerticalAlign;
            if ($tmp5 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
              this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taRightJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop)}
             else if ($tmp5 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
              this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taRightJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taVerticalCenter)}
             else if ($tmp5 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.GetCanvas().TextRect$1(new pas["WEBLib.Graphics"].TCanvasRectF(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taRightJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignBottom);
          };
        } finally {
          this.RestoreState(st);
        };
      };
      this.GetCanvas().FBrush.FColor = c;
      this.GetCanvas().FBrush.FStyle = bs;
    };
    this.DrawPath = function (AStroke, APath, APathMode) {
      var p = [];
      if (APath != null) {
        p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
        APath.FlattenToPolygon({get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }},0.25);
        var $tmp1 = APathMode;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
          this.DrawPolygon(AStroke,p)}
         else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) this.DrawPolyline(AStroke,p);
      };
    };
    this.FillPath = function (AFill, APath, APathMode) {
      var p = [];
      if (APath != null) {
        p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
        APath.FlattenToPolygon({get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }},0.25);
        var $tmp1 = APathMode;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
          this.FillPolygon(AFill,p)}
         else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) this.FillPolyline(AFill,p);
      };
    };
  });
},["math"]);
rtl.module("WEBLib.TMSFNCGraphics.WEB",["System","Classes","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCUtils","Types","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphics","WEBLib.Graphics"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCGraphicsContextWEB",pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.$init.call(this);
      this.FActivePath = null;
      this.FScale = 0.0;
      this.FNeedsRendering = false;
      this.FFont = null;
      this.FFill = null;
      this.FStroke = null;
      this.FContextSize = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      this.FNCanvas = null;
      this.FBitmap = null;
    };
    this.$final = function () {
      this.FActivePath = undefined;
      this.FFont = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FContextSize = undefined;
      this.FBitmap = undefined;
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.$final.call(this);
    };
    this.DestroyResources = function () {
      if (this.FNCanvas != null) {
        this.RestoreContext();
        this.FNCanvas = null;
      };
      if (this.FBitmap != null) {
        rtl.free(this,"FBitmap");
        this.FBitmap = null;
      };
    };
    this.DrawTextInternal = function (AText, ARect, AWordWrap, AHorizontalAlignment, ACalculate) {
      var Self = this;
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var i = 0;
      var s = "";
      var sn = "";
      var st = "";
      var l = 0;
      var w = 0.0;
      var mw = 0.0;
      var f = false;
      var p = 0;
      var tw = 0.0;
      var th = 0.0;
      var lcnt = 0;
      var rs = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var fws = 0.0;
      var ths = 0.0;
      function ApplyFont() {
      };
      function FindNextWord(AText, APos) {
        var Result = "";
        var l = 0;
        var i = 0;
        Result = "";
        l = AText.length;
        if (APos.get() > l) return Result;
        i = APos.get();
        while (true) {
          if ((((AText.charAt(i - 1) === "\n") && (AText.charAt((i - 1) - 1) === "\r")) || ((AText.charAt(i - 1) === "\r") && (AText.charAt((i - 1) - 1) === "\n"))) || (AText.charAt(i - 1) === " ")) {
            if (AText.charAt(i - 1) === " ") {
              Result = pas.System.Copy(AText,APos.get(),i - (APos.get() - 1))}
             else Result = pas.System.Copy(AText,APos.get(),i - APos.get());
            break;
          } else if (((AText.charAt(i - 1) === "\n") || (AText.charAt(i - 1) === "\r")) || (AText.charAt(i - 1) === " ")) {
            Result = pas.System.Copy(AText,APos.get(),i - (APos.get() - 1));
            break;
          } else if (i >= l) {
            Result = pas.System.Copy(AText,APos.get(),i - (APos.get() - 1));
            break;
          } else i += 1;
        };
        APos.set(i + 1);
        return Result;
      };
      ApplyFont();
      if (!AWordWrap) {
        if (!ACalculate) ;
      } else {
        rs = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
        mw = 0;
        i = 1;
        ths = Self.FFont.FSize * 0.5;
        lcnt = 0;
        fws = 0;
        tw = 0;
        s = FindNextWord(AText,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }});
        mw = mw + w;
        if ((s.length > 0) && (s.charAt(s.length - 1) === " ")) mw = mw + fws;
        while (i <= AText.length) {
          l = s.length;
          if ((l >= 2) && (((s.charAt(l - 1) === "\n") && (s.charAt((l - 1) - 1) === "\r")) || ((s.charAt(l - 1) === "\r") && (s.charAt((l - 1) - 1) === "\n")))) {
            s = pas.System.Copy(s,1,l - 2);
            f = true;
          } else if ((l >= 1) && ((s.charAt(l - 1) === "\n") || (s.charAt(l - 1) === "\r"))) {
            s = pas.System.Copy(s,1,l - 1);
            f = true;
          } else f = false;
          sn = FindNextWord(AText,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }});
          if ((((ARect.Left + mw) + w) > ARect.Right) || f) {
            if (s !== "") {
              p = s.length;
              st = pas.System.Copy(s,1,p);
              lcnt += 1;
              if (mw > tw) tw = mw;
              if (!ACalculate) ;
              mw = 0;
            };
            s = "";
            ARect.Top = ARect.Top + th;
            if ((pas.System.Trunc(ARect.Top) > pas.System.Trunc(ARect.Bottom - th)) && !ACalculate) break;
          };
          mw = mw + w;
          if ((sn.length > 0) && (sn.charAt(sn.length - 1) === " ")) mw = mw + fws;
          s = s + sn;
        };
        if (s !== "") {
          p = s.length;
          st = pas.System.Copy(s,1,p);
          lcnt += 1;
          if (mw > tw) tw = mw;
          if (!ACalculate) ;
        };
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(rs.Left,rs.Top,rs.Left + tw,rs.Top + (lcnt * th)));
      };
      return Result;
    };
    this.DrawLinearGradient = function (ARect) {
      if (!(this.FNCanvas != null)) return;
      var $tmp1 = this.FFill.FOrientation;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal) {}
      else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoVertical) ;
      if ((this.FFill.FColorTo !== -1) && (this.FFill.FColorMirror !== -1)) {}
      else if (this.FFill.FColorTo !== -1) ;
    };
    this.FontChanged = function (Sender) {
    };
    this.FillChanged = function (Sender) {
      if (!(this.FNCanvas != null)) return;
      this.ApplyFill();
    };
    this.StrokeChanged = function (Sender) {
      if (!(this.FNCanvas != null)) return;
      this.ApplyStroke();
    };
    this.RestoreContext = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.SaveContext = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.ApplyStroke = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.ApplyFill = function () {
      if (!(this.FNCanvas != null)) return;
      var $tmp1 = this.FFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) ;
    };
    this.Create$1 = function (AGraphics) {
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.Create$1.apply(this,arguments);
      this.FScale = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null);
      this.FNeedsRendering = true;
      this.FContextSize.cx = 0;
      this.FContextSize.cy = 0;
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
    };
    this.Destroy = function () {
      this.Render();
      if (this.FFont != null) {
        rtl.free(this,"FFont");
        this.FFont = null;
      };
      if (this.FFill != null) {
        rtl.free(this,"FFill");
        this.FFill = null;
      };
      if (this.FStroke != null) {
        rtl.free(this,"FStroke");
        this.FStroke = null;
      };
      this.DestroyResources();
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.GetFillColor = function () {
      var Result = 0;
      Result = this.GetGraphics().FFill.FColor;
      return Result;
    };
    this.CalculateText = function (AText, ARect, AWordWrapping) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!(this.FNCanvas != null)) return Result;
      this.SaveContext();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.DrawTextInternal(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,true));
      this.RestoreContext();
      return Result;
    };
    this.SetTextAngle = function (ARect, AAngle) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ar = 0.0;
      var cx = new pas["WEBLib.TMSFNCTypes"].TPointF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      if (!(this.FNCanvas != null)) return Result;
      if (AAngle !== 0) {
        ar = pas.math.DegToRad(AAngle);
        cx.X = Result.Left + ((Result.Right - Result.Left) / 2);
        cx.Y = Result.Top + ((Result.Bottom - Result.Top) / 2);
        this.SaveContext();
        if ((Result.Right - Result.Left) < (Result.Bottom - Result.Top)) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Bottom - Result.Top) / 2,-(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2))}
         else Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Right - Result.Left) / 2,-(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2));
      };
      return Result;
    };
    this.Render = function () {
      if (!this.FNeedsRendering) return;
      this.FNeedsRendering = false;
      this.DestroyResources();
    };
    this.ScaleTransform = function (AX, AY) {
      if (!(this.FNCanvas != null)) return;
    };
    this.SetTextQuality = function (ATextQuality) {
    };
    this.SetAntiAliasing = function (AAntiAliasing) {
      if (!(this.FNCanvas != null)) return;
    };
    this.SetShowAcceleratorChar = function (AShowAcceleratorChar) {
    };
    this.SetSize = function (AWidth, AHeight) {
      this.FContextSize.cx = AWidth;
      this.FContextSize.cy = AHeight;
      this.DestroyResources();
      this.FBitmap = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      this.ScaleTransform(this.FScale,this.FScale);
      this.SaveContext();
    };
    this.ResetTextAngle = function (AAngle) {
      if (!(this.FNCanvas != null)) return;
      if (AAngle !== 0) this.RestoreContext();
    };
    this.BeginScene = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.EndScene = function () {
      if (!(this.FNCanvas != null)) return;
      this.Render();
    };
    this.RestoreState = function (AState) {
      if (!(this.FNCanvas != null)) return;
      this.RestoreContext();
    };
    this.SaveState = function (AState) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
    };
    this.SetFont = function (AFont) {
      if (!(this.FNCanvas != null)) return;
      this.FFont.AssignSource(AFont);
    };
    this.SetFill = function (AFill) {
      if (!(this.FNCanvas != null)) return;
      this.FFill.Assign(AFill);
    };
    this.SetFillColor = function (AColor) {
      if (!(this.FNCanvas != null)) return;
      this.FFill.SetColor(AColor);
    };
    this.SetStroke = function (AStroke) {
      if (!(this.FNCanvas != null)) return;
      this.FStroke.Assign(AStroke);
    };
    this.DrawLine = function (AStroke, AFromPoint, AToPoint, AModifyPointModeFrom, AModifyPointModeTo) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
      this.RestoreContext();
    };
    this.DrawPolygon = function (AStroke, APolygon) {
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolygon) === 0) return;
      this.SaveContext();
      this.ApplyStroke();
      this.RestoreContext();
    };
    this.FillPolygon = function (AFill, APolygon) {
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolygon) === 0) return;
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if (this.FActivePath != null) this.DrawLinearGradient(new pas["WEBLib.TMSFNCTypes"].TRectF(this.FActivePath.GetBounds()));
      };
      this.RestoreContext();
    };
    this.DrawPolyline = function (AStroke, APolyline) {
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolyline) === 0) return;
      this.SaveContext();
      this.ApplyStroke();
      this.RestoreContext();
    };
    this.FillPolyline = function (AFill, APolyline) {
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolyline) === 0) return;
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if (this.FActivePath != null) this.DrawLinearGradient(new pas["WEBLib.TMSFNCTypes"].TRectF(this.FActivePath.GetBounds()));
      };
      this.RestoreContext();
    };
    this.FillRect = function (AFill, ARect, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!(this.FNCanvas != null)) return;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        this.DrawLinearGradient(new pas["WEBLib.TMSFNCTypes"].TRectF(r));
      };
      this.RestoreContext();
    };
    this.DrawRect = function (AStroke, ARect, ASides, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!(this.FNCanvas != null)) return;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsTop in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsLeft in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsBottom in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsRight in ASides) this.DrawLine(AStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
    };
    this.FillRoundRect = function (AFill, ARect, ARounding, ACorners, AModifyRectMode) {
      var pth = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rc = 0.0;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      rc = ARounding;
      pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
      try {
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-270,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - rc));
        } else {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top + rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-180,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-90,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top + rc));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom - rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),0,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom))}
         else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        pth.ClosePath();
        this.FillPath(this.FFill,pth,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon);
      } finally {
        pth = rtl.freeLoc(pth);
      };
    };
    this.DrawRoundRect = function (AStroke, ARect, ARounding, ACorners, AModifyRectMode) {
      var pth = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rc = 0.0;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      rc = ARounding;
      pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
      try {
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-270,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - rc));
        } else {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top + rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-180,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-90,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top + rc));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom - rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),0,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom))}
         else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        pth.ClosePath();
        this.DrawPath(this.FStroke,pth,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon);
      } finally {
        pth = rtl.freeLoc(pth);
      };
    };
    this.FillEllipse = function (AFill, ARect, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!(this.FNCanvas != null)) return;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        this.DrawLinearGradient(new pas["WEBLib.TMSFNCTypes"].TRectF(r));
      };
      this.RestoreContext();
    };
    this.DrawEllipse = function (AStroke, ARect, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!(this.FNCanvas != null)) return;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      this.SaveContext();
      this.ApplyStroke();
      this.RestoreContext();
    };
    this.DrawBitmap = function (ABitmap, ASrcRect, ADstRect, AOpacity) {
      var R = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!(ABitmap != null) || !(this.FNCanvas != null)) return;
      this.SaveContext();
      R = new pas["WEBLib.TMSFNCTypes"].TRectF(ADstRect);
      try {} finally {
      };
      this.RestoreContext();
    };
    this.ClipRect = function (ARect) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
    };
    this.DrawFocusRectangle = function (AStroke, ARect, AColor, AModifyRectMode) {
      if (!(this.FNCanvas != null)) return;
    };
    this.DrawText = function (AText, ARect, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle) {
      var R = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
      R = new pas["WEBLib.TMSFNCTypes"].TRectF(this.DrawTextInternal(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping,AHorizontalAlign,true));
      var $tmp1 = AVerticalAlign;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
        this.DrawTextInternal(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top + (((ARect.Bottom - ARect.Top) - (R.Bottom - R.Top)) / 2),ARect.Right,(ARect.Top + (((ARect.Bottom - ARect.Top) - (R.Bottom - R.Top)) / 2)) + (R.Bottom - R.Top))),AWordWrapping,AHorizontalAlign,false)}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
        this.DrawTextInternal(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + (R.Bottom - R.Top))),AWordWrapping,AHorizontalAlign,false)}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.DrawTextInternal(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Bottom - (R.Bottom - R.Top),ARect.Right,ARect.Bottom)),AWordWrapping,AHorizontalAlign,false);
      this.RestoreContext();
    };
    this.DrawPath = function (AStroke, APath, APathMode) {
      var p = [];
      if (APath != null) {
        this.FActivePath = APath;
        p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
        APath.FlattenToPolygon({get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }},0.25);
        var $tmp1 = APathMode;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
          this.DrawPolygon(AStroke,p)}
         else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) this.DrawPolyline(AStroke,p);
        this.FActivePath = null;
      };
    };
    this.FillPath = function (AFill, APath, APathMode) {
      var p = [];
      if (APath != null) {
        this.FActivePath = APath;
        p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
        APath.FlattenToPolygon({get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }},0.25);
        var $tmp1 = APathMode;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
          this.FillPolygon(AFill,p)}
         else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) this.FillPolyline(AFill,p);
        this.FActivePath = null;
      };
    };
  });
  this.GetNativeContextClass = function () {
    var Result = null;
    Result = $mod.TTMSFNCGraphicsContextWEB;
    return Result;
  };
},["SysUtils","math"]);
rtl.module("WEBLib.TMSFNCGraphics",["System","Classes","WEBLib.TMSFNCGraphicsTypes","WEBLib.Graphics","WEBLib.TMSFNCBitmapContainer","Types","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$Class("TTMSFNCGraphics");
  rtl.createClass($mod,"TTMSFNCGraphicsContext",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FGraphics = null;
    };
    this.$final = function () {
      this.FGraphics = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetCanvas = function () {
      var Result = null;
      Result = this.GetGraphics().GetCanvas();
      return Result;
    };
    this.GetGraphics = function () {
      var Result = null;
      Result = this.FGraphics;
      return Result;
    };
    this.Create$1 = function (AGraphics) {
      this.FGraphics = AGraphics;
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphics",pas.System.TObject,function () {
    this.DefaultSelectionFillColor = 0;
    this.DefaultTextFontColor = 0;
    this.DefaultPopupFillColor = 0;
    this.DefaultPopupStrokeColor = 0;
    this.DefaultButtonStrokeColorFocused = 0;
    this.DefaultButtonFillColorFocused = 0;
    this.DefaultButtonStrokeColorDisabled = 0;
    this.DefaultButtonFillColorDisabled = 0;
    this.DefaultButtonStrokeColor = 0;
    this.DefaultButtonFillColor = 0;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FActiveCanvas = null;
      this.FBlockUpdate = 0;
      this.FNative = false;
      this.FContextNative = null;
      this.FContextGeneral = null;
      this.FBitmap = null;
      this.FFill = null;
      this.FStroke = null;
      this.FFont = null;
      this.FHighlightColor = 0;
      this.FOptimizedHTMLDrawing = false;
      this.FHighlightTextColor = 0;
      this.FHighlightFontStyles = {};
      this.FURLUnderline = false;
      this.FURLColor = 0;
      this.FBitmapContainer = null;
    };
    this.$final = function () {
      this.FActiveCanvas = undefined;
      this.FContextNative = undefined;
      this.FContextGeneral = undefined;
      this.FBitmap = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FFont = undefined;
      this.FHighlightFontStyles = undefined;
      this.FBitmapContainer = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetCanvas = function () {
      var Result = null;
      Result = this.FActiveCanvas;
      return Result;
    };
    this.GetContext = function () {
      var Result = null;
      if (this.FNative) {
        Result = this.FContextNative}
       else Result = this.FContextGeneral;
      return Result;
    };
    this.FontChanged = function (Sender) {
      this.SetFont(rtl.as(Sender,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont));
    };
    this.FillChanged = function (Sender) {
      this.SetFill(rtl.as(Sender,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill));
    };
    this.StrokeChanged = function (Sender) {
      this.SetStroke(rtl.as(Sender,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke));
    };
    this.InitializeDefaultAppearance = function () {
      this.FURLColor = 16711680;
      this.FURLUnderline = true;
      this.SetFill(this.FFill);
      this.SetStroke(this.FStroke);
      this.SetFont(this.FFont);
    };
    this.InternalCalculateText = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var a = "";
      var s = "";
      var fa = "";
      var XSize = 0.0;
      var YSize = 0.0;
      var hl = 0;
      var ml = 0;
      var hr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var lc = 0;
      var AControlID = "";
      var AControlType = "";
      var AControlValue = "";
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      if (Math.round(Result.Right - Result.Left) <= 0) {
        Result.Bottom = Result.Top;
        return Result;
      };
      if (AText !== "") {
        if (ASupportHTML && (((pas["WEBLib.TMSFNCTypes"].AnsiPos("<\/",AText) > 0) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("\/>",AText) > 0)) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<BR>",pas.SysUtils.UpperCase(AText)) > 0))) {
          hr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
          XSize = 0;
          YSize = 0;
          hl = -1;
          ml = -1;
          fa = "";
          s = "";
          a = "";
          lc = 0;
          cr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
          AControlID = "";
          AControlValue = "";
          AControlType = "";
          pas["WEBLib.TMSFNCHTMLEngine"].HTMLDrawEx$1(this,AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),0,0,-1,-1,0,false,true,false,false,false,false,AWordWrapping,false,"",1.0,this.FURLColor,-1,-1,-1,{get: function () {
              return a;
            }, set: function (v) {
              a = v;
            }},{get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }},{get: function () {
              return fa;
            }, set: function (v) {
              fa = v;
            }},{get: function () {
              return XSize;
            }, set: function (v) {
              XSize = v;
            }},{get: function () {
              return YSize;
            }, set: function (v) {
              YSize = v;
            }},{get: function () {
              return hl;
            }, set: function (v) {
              hl = v;
            }},{get: function () {
              return ml;
            }, set: function (v) {
              ml = v;
            }},{get: function () {
              return hr;
            }, set: function (v) {
              hr = v;
            }},{get: function () {
              return cr;
            }, set: function (v) {
              cr = v;
            }},{get: function () {
              return AControlID;
            }, set: function (v) {
              AControlID = v;
            }},{get: function () {
              return AControlValue;
            }, set: function (v) {
              AControlValue = v;
            }},{get: function () {
              return AControlType;
            }, set: function (v) {
              AControlType = v;
            }},{get: function () {
              return lc;
            }, set: function (v) {
              lc = v;
            }},0,this.FBitmapContainer,1,this.FURLUnderline,this.FHighlightColor,this.FHighlightTextColor,rtl.refSet(this.FHighlightFontStyles));
          YSize = YSize + 1;
          Result.Right = Result.Left + XSize;
          Result.Bottom = Result.Top + YSize;
        } else {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContext().CalculateText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping));
          Result.Bottom = Result.Bottom + 1;
        };
      } else {
        Result.Right = Result.Left;
        Result.Bottom = Result.Top;
      };
      return Result;
    };
    this.InternalDrawText = function (ARect, AText, AControlID, AControlValue, AControlType, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var a = "";
      var s = "";
      var fa = "";
      var XSize = 0.0;
      var YSize = 0.0;
      var hl = 0;
      var ml = 0;
      var hr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var xs = 0.0;
      var ys = 0.0;
      var lc = 0;
      var htmlr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var isanchor = false;
      var st = null;
      var oldc = 0;
      oldc = this.GetContext().GetFillColor();
      this.GetContext().SetFillColor(this.FFont.FColor);
      if ((AMinHeight > -1) && ((ARect.Bottom - ARect.Top) < AMinHeight)) ARect.Bottom = ARect.Top + AMinHeight;
      if ((AMinWidth > -1) && ((ARect.Right - ARect.Left) < AMinWidth)) ARect.Right = ARect.Left + AMinWidth;
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContext().SetTextAngle(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AAngle));
      Result = "";
      if ((((pas["WEBLib.TMSFNCTypes"].AnsiPos("<\/",AText) > 0) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("\/>",AText) > 0)) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<BR>",pas.SysUtils.UpperCase(AText)) > 0)) && ASupportHTML) {
        hr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
        XSize = 0;
        YSize = 0;
        hl = -1;
        ml = -1;
        fa = "";
        s = "";
        a = "";
        lc = 0;
        cr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
        AControlID.set("");
        AControlValue.set("");
        AControlType.set("");
        pas["WEBLib.TMSFNCHTMLEngine"].HTMLDrawEx$1(this,AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),0,0,-1,-1,0,false,true,false,false,false,false,AWordWrapping,false,"",1.0,this.FURLColor,-1,-1,-1,{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }},{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }},{get: function () {
            return fa;
          }, set: function (v) {
            fa = v;
          }},{get: function () {
            return XSize;
          }, set: function (v) {
            XSize = v;
          }},{get: function () {
            return YSize;
          }, set: function (v) {
            YSize = v;
          }},{get: function () {
            return hl;
          }, set: function (v) {
            hl = v;
          }},{get: function () {
            return ml;
          }, set: function (v) {
            ml = v;
          }},{get: function () {
            return hr;
          }, set: function (v) {
            hr = v;
          }},{get: function () {
            return cr;
          }, set: function (v) {
            cr = v;
          }},AControlID,AControlValue,AControlType,{get: function () {
            return lc;
          }, set: function (v) {
            lc = v;
          }},0,this.FBitmapContainer,1,this.FURLUnderline,this.FHighlightColor,this.FHighlightTextColor,rtl.refSet(this.FHighlightFontStyles));
        YSize = YSize + 1;
        if ((AWordWrapping && (lc <= 1)) || !AWordWrapping) {
          xs = ARect.Left;
          ys = ARect.Top;
          var $tmp1 = AHorizontalAlign;
          if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
            xs = xs + (((ARect.Right - ARect.Left) - XSize) / 2)}
           else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) xs = (ARect.Left + (ARect.Right - ARect.Left)) - XSize;
          var $tmp2 = AVerticalAlign;
          if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
            ys = ys + (((ARect.Bottom - ARect.Top) - YSize) / 2)}
           else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) ys = (ys + (ARect.Bottom - ARect.Top)) - YSize;
          htmlr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(xs,ys,xs + XSize,ys + YSize));
        } else htmlr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
        st = this.SaveState(true);
        this.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect));
        isanchor = pas["WEBLib.TMSFNCHTMLEngine"].HTMLDrawEx$1(this,AText,new pas["WEBLib.TMSFNCTypes"].TRectF(htmlr),Math.round(AX),Math.round(AY),-1,-1,0,ATestAnchor,false,false,false,false,false,AWordWrapping,false,"",1.0,this.FURLColor,-1,-1,-1,{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }},{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }},{get: function () {
            return fa;
          }, set: function (v) {
            fa = v;
          }},{get: function () {
            return XSize;
          }, set: function (v) {
            XSize = v;
          }},{get: function () {
            return YSize;
          }, set: function (v) {
            YSize = v;
          }},{get: function () {
            return hl;
          }, set: function (v) {
            hl = v;
          }},{get: function () {
            return ml;
          }, set: function (v) {
            ml = v;
          }},{get: function () {
            return hr;
          }, set: function (v) {
            hr = v;
          }},{get: function () {
            return cr;
          }, set: function (v) {
            cr = v;
          }},AControlID,AControlValue,AControlType,{get: function () {
            return lc;
          }, set: function (v) {
            lc = v;
          }},0,this.FBitmapContainer,1,this.FURLUnderline,this.FHighlightColor,this.FHighlightTextColor,rtl.refSet(this.FHighlightFontStyles));
        this.RestoreState(st,true);
        if (isanchor) Result = a;
      } else if (!ATestAnchor) this.GetContext().DrawText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle);
      this.GetContext().ResetTextAngle(AAngle);
      this.GetContext().SetFillColor(oldc);
      return Result;
    };
    this.DrawTexture = function (ARect, ATexture, ATextureMode) {
      var LR = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var R = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var IR = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var I = 0;
      var J = 0;
      if (pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(ATexture)) return;
      LR = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      var $tmp1 = ATextureMode;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmOriginal) {
        R = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + ATexture.GetWidth(),ARect.Top + ATexture.GetHeight()));
        pas["WEBLib.TMSFNCTypes"].IntersectRectEx$1({get: function () {
            return IR;
          }, set: function (v) {
            IR = v;
          }},LR,R);
        this.DrawBitmapPart$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,IR.Right - IR.Left,IR.Bottom - IR.Top)),new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(R.Left,R.Top,R.Left + (IR.Right - IR.Left),R.Top + (IR.Bottom - IR.Top))),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(ATexture),false,false,false,false);
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmFit) {
        R = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight()));
        R = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectSnapToPixelEx(pas["WEBLib.TMSFNCTypes"].RectFitIntoEx$1(R,ARect),1,false));
        this.DrawBitmapPart$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight())),new pas["WEBLib.TMSFNCTypes"].TRectF(R),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(ATexture),false,true,false,false);
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmStretch) {
        this.DrawBitmapPart$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight())),new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(ATexture),false,true,false,false)}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmTile) {
        for (var $l2 = 0, $end3 = pas.System.Trunc((LR.Right - LR.Left) / ATexture.GetWidth()) + 1; $l2 <= $end3; $l2++) {
          I = $l2;
          for (var $l4 = 0, $end5 = pas.System.Trunc((LR.Bottom - LR.Top) / ATexture.GetHeight()) + 1; $l4 <= $end5; $l4++) {
            J = $l4;
            R = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(LR.Left,LR.Top,LR.Left + ATexture.GetWidth(),LR.Top + ATexture.GetHeight()));
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return R;
              }, set: function (v) {
                R = v;
              }},I * ATexture.GetWidth(),J * ATexture.GetHeight());
            pas["WEBLib.TMSFNCTypes"].IntersectRectEx$1({get: function () {
                return IR;
              }, set: function (v) {
                IR = v;
              }},LR,R);
            if (pas["WEBLib.TMSFNCTypes"].IntersectRectEx(IR,R)) this.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(R.Left,R.Top,R.Left + (IR.Right - IR.Left),R.Top + (IR.Bottom - IR.Top))),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(ATexture),false,false,false,false);
          };
        };
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmCenter) {
        R = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight()));
        R = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectSnapToPixelEx(pas["WEBLib.TMSFNCTypes"].RectCenterAtEx(R,ARect),1,false));
        this.DrawBitmapPart$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight())),new pas["WEBLib.TMSFNCTypes"].TRectF(R),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(ATexture),true,false,true,false);
      };
    };
    this.Create$1 = function (ACanvas, ANative) {
      this.FNative = ANative;
      this.FActiveCanvas = ACanvas;
      if (!ANative) {
        this.FContextGeneral = pas["WEBLib.TMSFNCGraphics.General"].TTMSFNCGraphicsContextGeneral.$create("Create$1",[this]);
        this.FContextGeneral.SetSize(1,1);
      } else {
        this.FContextNative = pas["WEBLib.TMSFNCGraphics.WEB"].GetNativeContextClass().$create("Create$1",[this]);
        this.FContextNative.SetSize(1,1);
      };
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.FHighlightColor = 16711680;
      this.FHighlightTextColor = 16777215;
      this.FHighlightFontStyles = {};
      this.InitializeDefaultAppearance();
    };
    this.CreateBitmapCanvas = function (AWidth, AHeight, ANative, AHighDPI) {
      this.FNative = ANative;
      this.FBitmap = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      this.FBitmap.SetWidth(AWidth);
      this.FBitmap.SetHeight(AHeight);
      this.FActiveCanvas = this.FBitmap.GetCanvas();
      if (!ANative) {
        this.FContextGeneral = pas["WEBLib.TMSFNCGraphics.General"].TTMSFNCGraphicsContextGeneral.$create("Create$1",[this]);
        this.FContextGeneral.SetSize(AWidth,AHeight);
      } else {
        this.FContextNative = pas["WEBLib.TMSFNCGraphics.WEB"].GetNativeContextClass().$create("Create$1",[this]);
        this.FContextNative.SetSize(AWidth,AHeight);
      };
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.InitializeDefaultAppearance();
    };
    this.Destroy = function () {
      if (this.FContextNative != null) {
        rtl.free(this,"FContextNative");
        this.FContextNative = null;
      };
      if (this.FContextGeneral != null) {
        rtl.free(this,"FContextGeneral");
        this.FContextGeneral = null;
      };
      if (this.FFont != null) {
        rtl.free(this,"FFont");
        this.FFont = null;
      };
      if (this.FFill != null) {
        this.FFill.FOnChanged = null;
        rtl.free(this,"FFill");
        this.FFill = null;
      };
      if (this.FStroke != null) {
        this.FStroke.FOnChanged = null;
        rtl.free(this,"FStroke");
        this.FStroke = null;
      };
      this.FBitmapContainer = null;
      if (this.FBitmap != null) {
        rtl.free(this,"FBitmap");
        this.FBitmap = null;
      };
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.BeginScene = function () {
      this.GetContext().BeginScene();
    };
    this.EndScene = function () {
      this.GetContext().EndScene();
    };
    this.SetFill = function (AFill) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFill(AFill);
      this.FFill.Assign(AFill);
      this.FBlockUpdate -= 1;
    };
    this.SetStroke = function (AStroke) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetStroke(AStroke);
      this.FStroke.Assign(AStroke);
      this.FBlockUpdate -= 1;
    };
    this.RestoreState = function (AState, ACanvasOnly) {
      if (!ACanvasOnly) {
        this.SetFill(AState.FFill);
        this.SetStroke(AState.FStroke);
        this.SetFont(AState.FFont);
      };
      this.GetContext().RestoreState(AState);
      AState = rtl.freeLoc(AState);
    };
    this.SetFont = function (AFont) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFont(AFont);
      this.FFont.AssignSource(AFont);
      this.FBlockUpdate -= 1;
    };
    this.DrawLine$1 = function (AFromPoint, AToPoint, AModifyPointModeFrom, AModifyPointModeTo) {
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawLine(this.FStroke,new pas["WEBLib.TMSFNCTypes"].TPointF(AFromPoint),new pas["WEBLib.TMSFNCTypes"].TPointF(AToPoint),AModifyPointModeFrom,AModifyPointModeTo);
    };
    this.DrawFocusRectangle$2 = function (ALeft, ATop, ARight, ABottom, AColor, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      this.GetContext().DrawFocusRectangle(this.FStroke,new pas["WEBLib.TMSFNCTypes"].TRectF(r),AColor,AModifyRectMode);
    };
    this.DrawFocusRectangle$3 = function (ARect, AColor, AModifyRectMode) {
      this.DrawFocusRectangle$2(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,AColor,AModifyRectMode);
    };
    this.DrawPolygon = function (APolygon) {
      var pth = null;
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            pth.AddPolygon(APolygon);
            this.DrawTexture(new pas["WEBLib.TMSFNCTypes"].TRectF(pth.GetBounds()),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillPolygon(this.FFill,APolygon);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawPolygon(this.FStroke,APolygon);
    };
    this.DrawPath = function (APath, APathMode) {
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          this.DrawTexture(new pas["WEBLib.TMSFNCTypes"].TRectF(APath.GetBounds()),this.FFill.FTexture,this.FFill.FTextureMode)}
         else {
          this.GetContext().FillPath(this.FFill,APath,APathMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawPath(this.FStroke,APath,APathMode);
    };
    this.DrawRectangle = function (ALeft, ATop, ARight, ABottom, AModifyRectMode) {
      this.DrawRectangle$1(ALeft,ATop,ARight,ABottom,pas["WEBLib.TMSFNCGraphicsTypes"].AllSides,AModifyRectMode);
    };
    this.DrawRectangle$1 = function (ALeft, ATop, ARight, ABottom, ASides, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var pth = null;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            pth.AddRectangle(r);
            this.DrawTexture(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillRect(this.FFill,new pas["WEBLib.TMSFNCTypes"].TRectF(r),AModifyRectMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawRect(this.FStroke,new pas["WEBLib.TMSFNCTypes"].TRectF(r),rtl.refSet(ASides),AModifyRectMode);
    };
    this.DrawEllipse = function (ALeft, ATop, ARight, ABottom, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var pth = null;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            pth.AddEllipse(r);
            this.DrawTexture(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillEllipse(this.FFill,new pas["WEBLib.TMSFNCTypes"].TRectF(r),AModifyRectMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawEllipse(this.FStroke,new pas["WEBLib.TMSFNCTypes"].TRectF(r),AModifyRectMode);
    };
    this.DrawRectangle$2 = function (ARect, AModifyRectMode) {
      this.DrawRectangle(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,AModifyRectMode);
    };
    this.DrawRoundRectangle = function (ALeft, ATop, ARight, ABottom, ARounding, ACorners, AModifyRectMode) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rc = 0.0;
      var pth = null;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            rc = ARounding;
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
              pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-270,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - rc));
            } else {
              pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
            };
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top + rc));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-180,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top));
            } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top));
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-90,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top + rc));
            } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top));
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom - rc));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),0,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom));
            } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom));
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom))}
             else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
            pth.ClosePath();
            this.DrawTexture(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillRoundRect(this.FFill,new pas["WEBLib.TMSFNCTypes"].TRectF(r),ARounding,rtl.refSet(ACorners),AModifyRectMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawRoundRect(this.FStroke,new pas["WEBLib.TMSFNCTypes"].TRectF(r),ARounding,rtl.refSet(ACorners),AModifyRectMode);
    };
    this.DrawRoundRectangle$1 = function (ARect, ARounding, ACorners, AModifyRectMode) {
      this.DrawRoundRectangle(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,ARounding,rtl.refSet(ACorners),AModifyRectMode);
    };
    this.DrawEllipse$2 = function (ARect, AModifyRectMode) {
      this.DrawEllipse(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,AModifyRectMode);
    };
    this.DrawBitmapPart = function (ASourceLeft, ASourceTop, ASourceRight, ASourceBottom, ADestinationLeft, ADestinationTop, ADestinationRight, ADestinationBottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rs = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var g = null;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ADestinationLeft,ADestinationTop,ADestinationRight,ADestinationBottom));
      rs = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ASourceLeft,ASourceTop,ASourceRight,ASourceBottom));
      if (pas["WEBLib.TMSFNCTypes"].RectIsEmpty(r) || pas["WEBLib.TMSFNCTypes"].RectIsEmpty(rs)) return;
      g = $mod.TTMSFNCGraphics.$create("CreateBitmapCanvas",[Math.round(ASourceRight - ASourceLeft),Math.round(ASourceBottom - ASourceTop),this.FNative,true]);
      try {
        g.BeginScene();
        g.DrawBitmap(-ASourceLeft,-ASourceTop,-ASourceLeft + g.FBitmap.GetWidth(),-ASourceTop + g.FBitmap.GetHeight(),ABitmap,false,false,false,false);
        g.EndScene();
        this.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r),g.FBitmap,AAspectRatio,AStretch,ACenter,ACropping);
      } finally {
        g = rtl.freeLoc(g);
      };
    };
    this.DrawBitmapPart$1 = function (ASourceRect, ADestinationRect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmapPart(ASourceRect.Left,ASourceRect.Top,ASourceRect.Right,ASourceRect.Bottom,ADestinationRect.Left,ADestinationRect.Top,ADestinationRect.Right,ADestinationRect.Bottom,ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmap = function (ALeft, ATop, ARight, ABottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!(ABitmap != null)) return;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBitmapDrawRectangle$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r),ABitmap,AAspectRatio,AStretch,ACenter,ACropping));
      this.GetContext().DrawBitmap(ABitmap,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ABitmap.GetWidth(),ABitmap.GetHeight())),new pas["WEBLib.TMSFNCTypes"].TRectF(r),1);
    };
    this.DrawBitmap$1 = function (ARect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmap(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawCheckBox = function (ARect, AChecked, AFocused, AEnabled) {
      var c = 0;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
          return r;
        }, set: function (v) {
          r = v;
        }},-1,-1);
      if (AEnabled) {
        if (AFocused) {
          c = 11829830}
         else c = 0;
      } else c = 11119017;
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      if (AEnabled) {
        this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(13882323,85))}
       else this.FFill.SetColor(13882323);
      this.FStroke.SetWidth(1);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FStroke.SetColor(c);
      this.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
          return r;
        }, set: function (v) {
          r = v;
        }},-(r.Right - r.Left) / 5,-(r.Bottom - r.Top) / 5);
      this.FStroke.SetWidth(2);
      this.FStroke.SetColor(c);
      if (AChecked) {
        this.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - 1,r.Bottom - 1)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
        this.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - 1,r.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - 1)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      };
    };
    this.DrawButton = function (ARect, ADown, AFocused, AEnabled, AAdaptToStyle) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FStroke.SetWidth(1);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      if (AAdaptToStyle) {
        if (AEnabled) {
          if (!AFocused) {
            this.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultButtonStrokeColor);
            this.FFill.SetColor($mod.TTMSFNCGraphics.DefaultButtonFillColor);
          } else {
            this.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultButtonStrokeColorFocused);
            this.FFill.SetColor($mod.TTMSFNCGraphics.DefaultButtonFillColorFocused);
          };
        } else {
          this.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultButtonStrokeColorDisabled);
          this.FFill.SetColor($mod.TTMSFNCGraphics.DefaultButtonFillColorDisabled);
        };
      } else {
        if (AEnabled) {
          if (!AFocused) {
            this.FStroke.SetColor(11119017);
            this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,225,225));
          } else {
            this.FStroke.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(60,127,177));
            this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,241,251));
          };
        } else {
          this.FStroke.SetColor(11119017);
          this.FFill.SetColor(13882323);
        };
      };
      this.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
          return r;
        }, set: function (v) {
          r = v;
        }},-1,-1);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      if (!ADown) {
        this.FStroke.SetColor(this.FFill.FColor)}
       else this.FStroke.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(this.FStroke.FColor,40));
      this.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.DrawRadioButton = function (ARect, AChecked, AFocused, AEnabled) {
      var c = 0;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
          return r;
        }, set: function (v) {
          r = v;
        }},-1,-1);
      if (AEnabled) {
        if (AFocused) {
          c = 11829830}
         else c = 0;
      } else c = 11119017;
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      if (AEnabled) {
        this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(13882323,85))}
       else this.FFill.SetColor(13882323);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FStroke.SetWidth(1);
      this.FStroke.SetColor(c);
      this.DrawEllipse$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
          return r;
        }, set: function (v) {
          r = v;
        }},-(r.Right - r.Left) / 5,-(r.Bottom - r.Top) / 5);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FFill.SetColor(c);
      if (AChecked) {
        this.DrawEllipse$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
    };
    this.DrawBitmapWithName$1 = function (ARect, ABitmapName, AApplyScale, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      var b = null;
      b = this.$class.GetBitmapFromBitmapContainer(this.FBitmapContainer,ABitmapName,AApplyScale,AScale);
      if (b != null) this.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(b),AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawScaledBitmap = function (ARect, ABitmaps, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      var b = null;
      var bmp = null;
      if (ABitmaps != null) {
        if (AScale > 0) {
          b = ABitmaps.GetItemByScale(AScale)}
         else b = ABitmaps.GetItemByScale(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null));
        if (b != null) {
          if ((b.FBitmap != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(b.FBitmap)) {
            this.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(b.FBitmap),AAspectRatio,AStretch,ACenter,ACropping)}
           else {
            bmp = this.$class.GetBitmapFromBitmapContainer(this.FBitmapContainer,b.FBitmapName,true,AScale);
            if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
              this.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),AAspectRatio,AStretch,ACenter,ACropping)}
             else this.DrawBitmapWithName$1(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),b.FBitmapName,false,b.FScale,AAspectRatio,AStretch,ACenter,ACropping);
          };
        };
      };
    };
    this.GetBitmapDrawRectangle = function (ALeft, ATop, ARight, ABottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bmp = null;
      var rdest = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var w = 0.0;
      var h = 0.0;
      var x = 0.0;
      var y = 0.0;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      bmp = ABitmap;
      if (bmp != null) {
        x = 0;
        y = 0;
        w = 0;
        h = 0;
        this.$class.GetAspectSize({get: function () {
            return w;
          }, set: function (v) {
            w = v;
          }},{get: function () {
            return h;
          }, set: function (v) {
            h = v;
          }},bmp.GetWidth(),bmp.GetHeight(),ARight - ALeft,ABottom - ATop,AAspectRatio,AStretch,ACropping);
        if (ACenter || ACropping) {
          x = Math.round(((ARight - ALeft) - w) / 2);
          y = Math.round(((ABottom - ATop) - h) / 2);
        };
        rdest = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ALeft + x,ATop + y,(ALeft + x) + w,(ATop + y) + h));
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(rdest);
      };
      return Result;
    };
    this.GetBitmapDrawRectangle$1 = function (ARect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBitmapDrawRectangle(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,ABitmap,AAspectRatio,AStretch,ACenter,ACropping));
      return Result;
    };
    this.ClipRect = function (ARect) {
      this.GetContext().ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect));
    };
    this.CalculateTextSize = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.CalculateText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping,ASupportHTML));
      Result.cx = r.Right - r.Left;
      Result.cy = r.Bottom - r.Top;
      return Result;
    };
    this.CalculateTextHeight = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = 0.0;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.CalculateText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping,ASupportHTML));
      Result = r.Bottom - r.Top;
      return Result;
    };
    var arr = ["<BR>","<BR\/>"];
    this.CalculateText = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var lst = null;
      var i = 0;
      var l = 0;
      var p = 0;
      var b = false;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      b = this.FOptimizedHTMLDrawing && pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IsHTML(AText);
      if (b) {
        for (i = 0; i <= 1; i++) {
          p = pas.System.Pos(arr[i],pas.SysUtils.UpperCase(AText));
          l = arr[i].length;
        };
        if ((p > 0) && (l > 0)) {
          lst = pas.Classes.TStringList.$create("Create$1");
          try {
            lst.SetLineBreak(pas.System.Copy(AText,p,l));
            lst.SetTextStr(AText);
            Result.Bottom = 0;
            for (var $l1 = 0, $end2 = lst.GetCount() - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.InternalCalculateText(lst.Get(i),new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping,ASupportHTML));
              Result.Bottom = Result.Bottom + (r.Bottom - r.Top);
            };
          } finally {
            lst = rtl.freeLoc(lst);
          };
        } else b = false;
      };
      if (!b) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.InternalCalculateText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AWordWrapping,ASupportHTML));
      return Result;
    };
    this.CalculateTextSize$1 = function (AText) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      Result = new pas["WEBLib.TMSFNCTypes"].TSizeF(this.CalculateTextSize(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,true));
      return Result;
    };
    this.CalculateTextHeight$1 = function (AText) {
      var Result = 0.0;
      Result = this.CalculateTextHeight(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,true);
      return Result;
    };
    this.CalculateText$1 = function (AText) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.CalculateText(AText,new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,true));
      return Result;
    };
    this.DrawText$1 = function (ARect, AText, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var AControlID = "";
      var AControlValue = "";
      var AControlType = "";
      AControlID = "";
      AControlValue = "";
      AControlType = "";
      Result = this.DrawText$5(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AText,{get: function () {
          return AControlID;
        }, set: function (v) {
          AControlID = v;
        }},{get: function () {
          return AControlValue;
        }, set: function (v) {
          AControlValue = v;
        }},{get: function () {
          return AControlType;
        }, set: function (v) {
          AControlType = v;
        }},AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    var arr = ["<BR>","<BR\/>"];
    this.DrawText$5 = function (ARect, AText, AControlID, AControlValue, AControlType, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var lst = null;
      var i = 0;
      var l = 0;
      var p = 0;
      var b = false;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rd = new pas["WEBLib.TMSFNCTypes"].TRectF();
      rd = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      b = !ATestAnchor && this.FOptimizedHTMLDrawing;
      b = b && pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IsHTML(AText);
      if (b) {
        for (i = 0; i <= 1; i++) {
          p = pas.System.Pos(arr[i],pas.SysUtils.UpperCase(AText));
          l = arr[i].length;
        };
        if ((p > 0) && (l > 0)) {
          lst = pas.Classes.TStringList.$create("Create$1");
          try {
            lst.SetLineBreak(pas.System.Copy(AText,p,l));
            lst.SetTextStr(AText);
            for (var $l1 = 0, $end2 = lst.GetCount() - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.CalculateText(lst.Get(i),new pas["WEBLib.TMSFNCTypes"].TRectF(rd),AWordWrapping,ASupportHTML));
              this.InternalDrawText(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right + 1,r.Bottom)),lst.Get(i),AControlID,AControlValue,AControlType,AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
              rd.Top = rd.Top + (r.Bottom - r.Top);
            };
          } finally {
            lst = rtl.freeLoc(lst);
          };
        } else b = false;
      };
      if (!b) {
        Result = this.InternalDrawText(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AText,AControlID,AControlValue,AControlType,AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      };
      return Result;
    };
    this.SaveState = function (ACanvasOnly) {
      var Result = null;
      Result = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSaveState.$create("Create$1");
      if (!ACanvasOnly) {
        Result.FFill.Assign(this.FFill);
        Result.FStroke.Assign(this.FStroke);
        Result.FFont.AssignSource(this.FFont);
      };
      this.GetContext().SaveState(Result);
      return Result;
    };
    this.GetBitmapFromBitmapContainer = function (ABitmapContainer, AName, AApplyScale, AScale) {
      var Result = null;
      Result = null;
      if ((ABitmapContainer != null) && (AName !== "")) {
        if (AApplyScale) {
          if (AScale > 0) {
            Result = ABitmapContainer.FindBitmap((AName + "_") + pas.SysUtils.FloatToStr(AScale))}
           else Result = ABitmapContainer.FindBitmap((AName + "_") + pas.SysUtils.FloatToStr(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null)));
        };
        if (!(Result != null)) Result = ABitmapContainer.FindBitmap(AName);
      };
      return Result;
    };
    this.GetScaledBitmap = function (ABitmaps, AScale, ABitmapContainer) {
      var Result = null;
      var b = null;
      var bmp = null;
      Result = null;
      if (ABitmaps != null) {
        if (AScale > 0) {
          b = ABitmaps.GetItemByScale(AScale)}
         else b = ABitmaps.GetItemByScale(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null));
        if (b != null) {
          if ((b.FBitmap != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(b.FBitmap)) {
            Result = b.FBitmap}
           else {
            bmp = this.GetBitmapFromBitmapContainer(ABitmapContainer,b.FBitmapName,true,AScale);
            if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
              Result = bmp}
             else {
              bmp = this.GetBitmapFromBitmapContainer(ABitmapContainer,b.FBitmapName,false,0);
              if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = bmp;
            };
          };
        };
      };
      return Result;
    };
    this.GetAspectSize = function (AWidth, AHeight, AOriginalWidth, AOriginalHeight, ANewWidth, ANewHeight, AAspectRatio, AStretch, ACropping) {
      var arc = 0.0;
      var ar = 0.0;
      if (AAspectRatio) {
        if ((((AOriginalWidth > 0) && (AOriginalHeight > 0)) && (ANewWidth > 0)) && (ANewHeight > 0)) {
          if (((AOriginalWidth < ANewWidth) && (AOriginalHeight < ANewHeight)) && !AStretch) {
            AWidth.set(AOriginalWidth);
            AHeight.set(AOriginalHeight);
          } else {
            if ((AOriginalWidth / AOriginalHeight) < (ANewWidth / ANewHeight)) {
              AHeight.set(ANewHeight);
              AWidth.set((ANewHeight * AOriginalWidth) / AOriginalHeight);
            } else {
              AWidth.set(ANewWidth);
              AHeight.set((ANewWidth * AOriginalHeight) / AOriginalWidth);
            };
          };
        } else {
          AWidth.set(0);
          AHeight.set(0);
        };
      } else {
        if (AStretch) {
          AWidth.set(ANewWidth);
          AHeight.set(ANewHeight);
        } else {
          AWidth.set(AOriginalWidth);
          AHeight.set(AOriginalHeight);
          if (ACropping) {
            if ((AWidth.get() >= AHeight.get()) && (AWidth.get() > 0)) {
              AHeight.set((AOriginalWidth / AWidth.get()) * AHeight.get());
              AWidth.set(AOriginalWidth);
            } else if ((AHeight.get() >= AWidth.get()) && (AHeight.get() > 0)) {
              AWidth.set((AOriginalHeight / AHeight.get()) * AWidth.get());
              AHeight.set(AOriginalHeight);
            };
            if (AHeight.get() === 0) {
              ar = 1}
             else ar = AWidth.get() / AHeight.get();
            if (AOriginalHeight === 0) {
              arc = 1}
             else arc = AOriginalWidth / AOriginalHeight;
            if ((ar < 1) || (arc > ar)) {
              AHeight.set(AOriginalWidth / ar);
              AWidth.set(AOriginalWidth);
            } else {
              AWidth.set(ar * AOriginalHeight);
              AHeight.set(AOriginalHeight);
            };
          };
        };
      };
    };
    this.HTMLToColor = function (AHTML) {
      var Self = this;
      var Result = 0;
      function HexVal(s) {
        var Result = 0;
        var i = 0;
        var j = 0;
        var i1 = 0;
        var i2 = 0;
        if (s.length < 2) {
          Result = 0;
          return Result;
        };
        i1 = 1;
        i2 = 2;
        if (s.charAt(i1 - 1) >= "A") {
          i = (s.charCodeAt(i1 - 1) - "A".charCodeAt()) + 10}
         else i = s.charCodeAt(i1 - 1) - "0".charCodeAt();
        if (s.charAt(i2 - 1) >= "A") {
          j = (s.charCodeAt(i2 - 1) - "A".charCodeAt()) + 10}
         else j = s.charCodeAt(i2 - 1) - "0".charCodeAt();
        Result = (i << 4) + j;
        return Result;
      };
      var r = 0;
      var g = 0;
      var b = 0;
      r = HexVal(pas.System.Copy(AHTML,2,2));
      g = HexVal(pas.System.Copy(AHTML,4,2)) << 8;
      b = HexVal(pas.System.Copy(AHTML,6,2)) << 16;
      Result = (b + g) + r;
      return Result;
    };
    this.TextToColor = function (AText) {
      var Result = 0;
      var i = 0;
      var s = "";
      var c = null;
      s = AText;
      s = pas.SysUtils.LowerCase(s);
      if (pas.System.Pos("cl",s) === 1) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,2);
      if (pas.System.Pos("cla",s) === 1) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,3);
      if (pas.System.Pos("gc",s) === 1) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,2);
      Result = 0;
      c = pas["WEBLib.TMSFNCGraphicsTypes"].ColorLookup();
      if (c != null) {
        i = c.IndexOf(pas.SysUtils.LowerCase(s));
        if ((i >= 0) && (i <= (c.GetCount() - 1))) Result = c.GetObject(i).FColor;
      };
      return Result;
    };
  });
  this.TMSFNCGRAPHICSCLOSE = (("data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJ" + "cEhZcwAACxIAAAsSAdLdfvwAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOWwzfk4AAABVSURBVDhPYxh+") + "QBSI\/0OYWAFIThjCxA5ACmAYHeCTQwHYFGITwwuQNSBjkgBFmkGAIgNAGv5BaZINQdYMA0Qbgk0zDBBlCCiR4FMA") + "khOCMIcJYGAAAHvVMBv6PIFYAAAAAElFTkSuQmCC";
  this.TMSFNCGRAPHICSDOWN = ("data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBA" + "JqcGAAAAGdJREFUOI3tzjsOwjAURNGDUqSgTxU5K2AVrJtswjUsgHSR0qdxAZZFPrS+3ZvRzBsqf9MUtBtazJk+oM") + "e0VTriiZCFX8nbpENMgfARjsn74vKj5IFruhfc8d6zIF9S\/Hyk5HS4spMVeFcOjszaOwMAAAAASUVORK5CYII=";
  this.TMSFNCGRAPHICSDOWN2 = ((("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAAXNSR0IArs4c6QAAAA" + "RnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMT") + "ZEaa\/1AAAAdElEQVQ4T6XMsQ2AMBBD0UxBBwyA2L9jCWpY5bCLSJfgSFgUr+AHX4mIX2R0yOiQ0SGjQ8Ud5q7RCl") + "vX5IEDLlhS4\/gGvuV\/5YEJTuCAR+qYjW\/N\/81Hko8Mx\/QKST0yHJOMCYfDMcnokNEho0NGh4zfRXkAxSYKjdpwcI") + "UAAAAASUVORK5CYII=";
  this.TMSFNCGRAPHICSUP = ("data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBAJq" + "cGAAAAEZJREFUOI3tjLEJACAMwLLo5EM+rTjpXV7g0oI4tYKbgYwJfJ6Txet4iu6Jxk10TTSuQACidzKAIrGik24ZpC") + "PeJ8ky+DhZ1JENPrPndiwAAAAASUVORK5CYII=";
  this.TMSFNCGRAPHICSUP2 = ((("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAAXNSR0IArs4c6QAAAARn" + "QU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa") + "\/1AAAAcklEQVQ4T6XMMQ6AMAiF4S46eSEvremk5\/IC+GggKfE1ER2+gZ9AEZFfaMygMYPGDBozaOyshu0aGo0eXmb4") + "hEbw42qGTx4B\/HiHCWYYPgmDOWEDPfbmT46uNWEwC\/THTp\/oLvQwfEFjBo0ZNGbQ+J6UG5Y9CmuVGrAsAAAAAElFTkS") + "uQmCC";
  this.TMSFNCGRAPHICSPIN = ((((("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAAXNSR0IArs4c6QAAAARnQ" + "U1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa\/1") + "AAABKklEQVQ4T2PAB0JDQ5mjoqIEgUxGiAiRIDo6WiY8PHwdEGvW19czQYUJA6AGhbCwsO9Aek1ISIiZvb09C1QKPwB") + "qaAbi\/1DNJ4HYiqDNIE1ADZ9AGqGa\/wLp6xERESZAaVQ\/AyUUgDgIiOdCbQFrQsL\/gPgxUM4OFACSQMYdIP4FFPwNxH") + "+gpqNoAortAYayHNSfjAwgNwMFvaCaMTQA8W+g+M7IyEgNiLuQAMgUoNsDgYruoWkCOe1gcHCwHlQpJgA6wwCo6DySJ") + "hD+BDQwCaoEEwA1SQAVzQLiq0BcBMRXgBhk25PAwEBJqDJUkJaWxgr0QzoQbwYqdABGNCeQrQPSDKTv44w3oFPEgYqm") + "Amk9UNqECjMCxWSBeAeUjx1ANWAkZCSD0AADAwDRpKHlJfOjAwAAAABJRU5ErkJggg==";
  this.TMSFNCGRAPHICSPIN2 = ((((("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAAXNSR0IArs4c6QAAAARn" + "QU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa") + "\/1AAAA\/UlEQVQ4T33Su2oCQRTGcddLYWmlQhTLCBIsQgoLSW2nj2Bj7yv4DGkCeYOQxiaBNJapbCI2ooU+gY3gbf1\/") + "w47MjosHfsvM7DlzY1JhGN6TQQGBM2bEOgke8IU60tGY4SYlqWGHT7wgC\/PPT\/SNoFDxH1owKyclWyrawsYJczwj8J") + "O1tR4+oFX8OGONtpLLWGCPA47Q7H78ogqd06yoPXeg4qQCTfaDR1x3ZxuapYsl3NDWJnjCtUjcThNTuKHL6cPNM2yj") + "hHfMMMQ\/tNoGuoNYkeiTwwBjvCKPBlS8QuzFWPoU8QadQ29TY3qbFXxH\/Ru2oYKbhww7kSdMXQD8wIToOQZE\/AAAAA") + "BJRU5ErkJggg==";
  this.TMSFNCGRAPHICSRIGHT = ("data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMB" + "AJqcGAAAAFNJREFUOI3tzzsSQFAQRNFDqSezHUuwYBJLsBuhEomE4\/ll3HBq+nY1PxENRrS5xzK4L1jPSiISesxP") + "JcORJJqwU9xthjrX\/ko4mpBQocN0tf1rbDeZDIfcSud0AAAAAElFTkSuQmCC";
  this.TMSFNCGRAPHICSLEFT = ("data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBA" + "JqcGAAAAEpJREFUOI3lzKENgEAQAMEJBkkIDdDTSxp6gqMyCkB8IQgMFdwZAutn+U19Bi84MUbxhZrBawSXB+8RDD") + "MaDkyvmQyZyYYuOvh6N24uDUKEV\/\/MAAAAAElFTkSuQmCC";
  this.TMSFNCGRAPHICSEXPAND = ("data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvwAADr8" + "BOAVTJAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4zjOaXUAAAACVJREFUGFdj+P\/\/P07MEBYW9h8Xxi") + "8JAjglYACnBAzglMAEDAwARZ1DA4NRF38AAAAASUVORK5CYII=";
  $mod.$init = function () {
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSCLOSE);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSDOWN);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSUP);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSRIGHT);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSLEFT);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSEXPAND);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSPIN);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSPIN2);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSDOWN);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSDOWN2);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSUP);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSUP2);
  };
},["SysUtils","math","WEBLib.TMSFNCUtils","WEBLib.TMSFNCHTMLEngine","WEBLib.TMSFNCGraphics.General","WEBLib.TMSFNCGraphics.WEB"]);
rtl.module("WEBLib.TMSFNCStyles",["System","Classes","WEBLib.Graphics","WEBLib.TMSFNCGraphicsTypes","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createInterface($mod,"ITMSFNCAdaptToStyle","{3EFF288D-3927-4E86-8E9D-EF684B501C9E}",["SetAdaptToStyle"],pas.System.IUnknown);
  rtl.createClass($mod,"TTMSFNCStyles",pas.System.TObject,function () {
    this.ExtractColor = function (AValue) {
      var Self = this;
      var Result = 0;
      var s = "";
      var s2 = "";
      var s3 = "";
      var sl = null;
      var p = 0;
      var p2 = 0;
      function ParseValue(AValue) {
        var Result = 0;
        Result = pas.SysUtils.StrToInt(pas.SysUtils.Trim(pas.SysUtils.StringReplace(AValue,"rgb(","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll))));
        return Result;
      };
      Result = -1;
      if (AValue !== "") {
        s = pas.SysUtils.LowerCase(pas.SysUtils.StringReplace(AValue," ","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
        if (pas.System.Pos("linear-gradient",s) === 1) {
          p = pas.System.Pos("rgb",s);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s2 = pas.System.Copy(s,p,(p2 - p) + 1);
          p = $impl.Pos("rgb",s,p2);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s3 = pas.System.Copy(s,p,(p2 - p) + 1);
          Result = Self.ExtractColor(s2);
        } else if (pas.System.Pos("rgb",s) === 1) {
          sl = pas.Classes.TStringList.$create("Create$1");
          try {
            sl.SetDelimiter(",");
            sl.SetDelimitedText(s);
            Result = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(ParseValue(sl.Get(0)),ParseValue(sl.Get(1)),ParseValue(sl.Get(2)));
          } finally {
            sl = rtl.freeLoc(sl);
          };
        } else if (pas.System.Pos("#",s) === 1) Result = pas["WEBLib.Graphics"].HexToColor(s);
      };
      return Result;
    };
    this.ExtractColorTo = function (AValue) {
      var Self = this;
      var Result = 0;
      var s = "";
      var s2 = "";
      var s3 = "";
      var sl = null;
      var p = 0;
      var p2 = 0;
      function ParseValue(AValue) {
        var Result = 0;
        Result = pas.SysUtils.StrToInt(pas.SysUtils.Trim(pas.SysUtils.StringReplace(AValue,"rgb(","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll))));
        return Result;
      };
      Result = -1;
      if (AValue !== "") {
        s = pas.SysUtils.LowerCase(pas.SysUtils.StringReplace(AValue," ","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
        if (pas.System.Pos("linear-gradient",s) === 1) {
          p = pas.System.Pos("rgb",s);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s2 = pas.System.Copy(s,p,(p2 - p) + 1);
          p = $impl.Pos("rgb",s,p2);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s3 = pas.System.Copy(s,p,(p2 - p) + 1);
          Result = Self.ExtractColor(s3);
        } else if (pas.System.Pos("rgb",s) === 1) {
          sl = pas.Classes.TStringList.$create("Create$1");
          try {
            sl.SetDelimiter(",");
            sl.SetDelimitedText(s);
            Result = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(ParseValue(sl.Get(0)),ParseValue(sl.Get(1)),ParseValue(sl.Get(2)));
          } finally {
            sl = rtl.freeLoc(sl);
          };
        } else if (pas.System.Pos("#",s) === 1) Result = pas["WEBLib.Graphics"].HexToColor(s);
      };
      return Result;
    };
    this.GetStyleBackgroundFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","background");
      return Result;
    };
    this.GetStyleBackgroundStroke = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","border-color");
      return Result;
    };
    this.GetStyleDefaultButtonFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCButtonStyle","background");
      return Result;
    };
    this.GetStyleDefaultButtonStroke = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCButtonStyle","border-color");
      return Result;
    };
    this.GetStyleHeaderFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCHeaderItemStyle","background");
      return Result;
    };
    this.GetStyleSelectionFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","--selection");
      return Result;
    };
    this.GetStyleLineFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","--linefill");
      return Result;
    };
    this.GetStyleTextColor = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCHeaderItemStyle","color");
      return Result;
    };
    this.FindCSSStyleRule = function (ARuleName) {
      var Result = null;
      var s = "";
      var f = "";
      Result = null;
      s = ARuleName;
      f = $mod.CSSStyleFileName;
      for (var i = 0; i < document.styleSheets.length; i++){
        var fn = document.styleSheets[i].href;
        if (fn != null) {
        if (f == fn.substring(fn.lastIndexOf('/')+1) || f == ""){
          var classes = document.styleSheets[i].rules || document.styleSheets[i].cssRules;
          for (var x = 0; x < classes.length; x++) {
              if (classes[x].selectorText.startsWith(s)) {
                  return classes[x];
              }
          }
         }
        }
      };
      return Result;
    };
    this.FindCSSStyleProperty = function (ARuleName, APropertyName) {
      var Result = "";
      var j = null;
      var s = "";
      var v = "";
      Result = "";
      j = this.FindCSSStyleRule(ARuleName);
      if (j != null) {
        s = APropertyName;
        v = j.style.getPropertyValue(s);
        Result = v;
      };
      return Result;
    };
    this.StyleServicesEnabled = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetStyleLineFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleLineFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleBackgroundFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleBackgroundFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleBackgroundStrokeColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleBackgroundStroke();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleHeaderFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleHeaderFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleHeaderFillColorTo = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleHeaderFill();
        if (f !== "") {
          c = this.ExtractColorTo(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleSelectionFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleSelectionFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleSelectionFillColorTo = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleSelectionFill();
        if (f !== "") {
          c = this.ExtractColorTo(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleTextFontColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleTextColor();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleDefaultButtonFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleDefaultButtonFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleDefaultButtonStrokeColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleDefaultButtonStroke();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
  });
  this.CSSStyleFileName = "";
},["SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.Pos = function (Search, InString, Offset) {
    return InString.indexOf(Search, Offset)+1;
  };
});
rtl.module("WEBLib.TMSFNCCustomControl",["System","Classes","WEBLib.Controls","WEBLib.TMSFNCGraphics","WEBLib.Graphics","WEBLib.TMSFNCStyles","Types","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCTypes","TypInfo","WEBLib.Forms"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCCustomDesignerForm",pas["WEBLib.Forms"].TForm,function () {
  });
  this.TTMSFNCControlAlignment = {"0": "caNone", caNone: 0, "1": "caTop", caTop: 1, "2": "caBottom", caBottom: 2, "3": "caLeft", caLeft: 3, "4": "caRight", caRight: 4, "5": "caClient", caClient: 5};
  rtl.createClass($mod,"TTMSFNCCustomControlBaseCommon",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FAllowFocus = false;
      this.FAdaptToStyle = false;
      this.FAdaptedToStyle = false;
      this.FTransparent = false;
      this.FBufferedPainting = false;
      this.FNativeCanvas = false;
      this.FAntiAliasing = false;
      this.FOptimizedHTMLDrawing = false;
      this.FShowAcceleratorChar = false;
      this.FTextQuality = 0;
      this.FOnInternalDblClick = null;
      this.FOnInternalMouseDown = null;
      this.FOnInternalMouseMove = null;
      this.FOnInternalMouseUp = null;
    };
    this.$final = function () {
      this.FOnInternalDblClick = undefined;
      this.FOnInternalMouseDown = undefined;
      this.FOnInternalMouseMove = undefined;
      this.FOnInternalMouseUp = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.GetAllowFocus = function () {
      var Result = false;
      Result = this.FAllowFocus;
      return Result;
    };
    this.GetControlAlignment = function () {
      var Result = 0;
      Result = $mod.TTMSFNCControlAlignment.caNone;
      var $tmp1 = this.FAlign;
      if ($tmp1 === pas["WEBLib.Controls"].TAlign.alNone) {
        Result = $mod.TTMSFNCControlAlignment.caNone}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alTop) {
        Result = $mod.TTMSFNCControlAlignment.caTop}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alBottom) {
        Result = $mod.TTMSFNCControlAlignment.caBottom}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alLeft) {
        Result = $mod.TTMSFNCControlAlignment.caLeft}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alRight) {
        Result = $mod.TTMSFNCControlAlignment.caRight}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alClient) Result = $mod.TTMSFNCControlAlignment.caClient;
      return Result;
    };
    this.SetAllowFocus = function (Value) {
      this.FAllowFocus = Value;
    };
    this.SetShowAcceleratorChar = function (Value) {
      if (this.FShowAcceleratorChar !== Value) {
        this.FShowAcceleratorChar = Value;
        this.Invalidate();
      };
    };
    this.ConvertScreenToClient = function (APoint) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var p = new pas.Types.TPoint();
      p = new pas.Types.TPoint(this.ScreenToClient(pas.Types.Point(Math.round(APoint.X),Math.round(APoint.Y))));
      Result = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(p.x,p.y));
      return Result;
    };
    this.ConvertClientToScreen = function (APoint) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var p = new pas.Types.TPoint();
      p = new pas.Types.TPoint(this.ClientToScreen(pas.Types.Point(Math.round(APoint.X),Math.round(APoint.Y))));
      Result = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(p.x,p.y));
      return Result;
    };
    this.GetAdaptToStyle = function () {
      var Result = false;
      Result = this.FAdaptToStyle;
      return Result;
    };
    this.SetDefaultGraphicColors = function () {
      var c = 0;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupFillColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupFillColor = 16777215;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundStrokeColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupStrokeColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupStrokeColor = 12632256;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleDefaultButtonFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColor = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,225,225);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleLineFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColor = 11119017;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleTextFontColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultTextFontColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultTextFontColor = 0;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultSelectionFillColor = c;
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColor,25);
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColor,30);
      } else {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultSelectionFillColor = 0;
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,241,251);
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(60,127,177);
      };
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColorDisabled = 11119017;
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColorDisabled = 13882323;
    };
    this.SetAdaptToStyle = function (Value) {
      this.FAdaptToStyle = Value;
      this.InitializeStyle();
    };
    this.CancelHint = function () {
    };
    this.InitializeStyle = function () {
      this.SetDefaultGraphicColors();
      this.DestroyGraphicElements();
      if (this.GetAdaptToStyle()) {
        this.FAdaptedToStyle = true;
        this.ApplyStyle();
      } else if (this.FAdaptedToStyle) {
        this.ResetToDefaultStyle();
        this.FAdaptedToStyle = false;
      };
      this.Invalidate();
    };
    this.ApplyStyle = function () {
    };
    this.ResetToDefaultStyle = function () {
    };
    this.HandleMouseLeave = function () {
    };
    this.HandleMouseEnter = function () {
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
    };
    this.HandleMouseMove = function (Shift, X, Y) {
    };
    this.HandleDblClick = function (X, Y) {
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
    };
    this.HandleKeyPress = function (Key) {
    };
    this.HandleKeyDown = function (Key, Shift) {
    };
    this.HandleDialogKey = function (Key, Shift) {
    };
    this.HandleKeyUp = function (Key, Shift) {
    };
    this.HandleMouseWheel = function (Shift, WheelDelta, Handled) {
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.SetDefaultGraphicColors();
      this.FAdaptToStyle = false;
      this.FAdaptedToStyle = false;
      this.FTransparent = false;
      this.FNativeCanvas = false;
      this.FBufferedPainting = false;
      this.FAntiAliasing = true;
      this.FOptimizedHTMLDrawing = true;
      this.FShowAcceleratorChar = true;
      this.FTextQuality = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextQuality.gtqAntiAliasing;
      this.FAllowFocus = true;
    };
    this.Destroy = function () {
      pas["WEBLib.Controls"].TCustomControl.Destroy.apply(this,arguments);
    };
    this.SetControlMargins = function (ALeft, ATop, ARight, ABottom) {
    };
    this.GetControlMargins = function (ALeft, ATop, ARight, ABottom) {
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCCustomControlBase",$mod.TTMSFNCCustomControlBaseCommon,function () {
    this.$init = function () {
      $mod.TTMSFNCCustomControlBaseCommon.$init.call(this);
      this.FStored = false;
      this.FHitTest = false;
    };
    this.MouseWheel = function (Shift, WheelDelta, Handled) {
      this.HandleMouseWheel(rtl.refSet(Shift),WheelDelta,Handled);
    };
    this.DoMouseLeave = function () {
      pas["WEBLib.Controls"].TControl.DoMouseLeave.apply(this,arguments);
      this.HandleMouseLeave();
    };
    this.DoMouseEnter = function () {
      pas["WEBLib.Controls"].TControl.DoMouseEnter.apply(this,arguments);
      this.HandleMouseEnter();
    };
    this.MouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.Controls"].TControl.MouseDown.apply(this,arguments);
      this.HandleMouseDown(Button,rtl.refSet(Shift),X,Y);
      if (this.FOnInternalMouseDown != null) this.FOnInternalMouseDown(this);
    };
    this.MouseMove = function (Shift, X, Y) {
      pas["WEBLib.Controls"].TControl.MouseMove.apply(this,arguments);
      this.HandleMouseMove(rtl.refSet(Shift),X,Y);
      if (this.FOnInternalMouseMove != null) this.FOnInternalMouseMove(this);
    };
    this.MouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.Controls"].TControl.MouseUp.apply(this,arguments);
      this.HandleMouseUp(Button,rtl.refSet(Shift),X,Y);
      if (this.FOnInternalMouseUp != null) this.FOnInternalMouseUp(this);
    };
    this.KeyDown = function (Key, Shift) {
      pas["WEBLib.Controls"].TControl.KeyDown.apply(this,arguments);
      this.HandleDialogKey(Key,rtl.refSet(Shift));
      this.HandleKeyDown(Key,rtl.refSet(Shift));
      if (Key.get() === 9) ;
    };
    this.KeyPress = function (Key) {
      pas["WEBLib.Controls"].TControl.KeyPress.apply(this,arguments);
      this.HandleKeyPress(Key);
    };
    this.KeyUp = function (Key, Shift) {
      pas["WEBLib.Controls"].TControl.KeyUp.apply(this,arguments);
      this.HandleKeyUp(Key,rtl.refSet(Shift));
    };
    this.DblClick = function () {
      var pf = new pas["WEBLib.TMSFNCTypes"].TPointF();
      pas["WEBLib.Controls"].TControl.DblClick.apply(this,arguments);
      pf = new pas["WEBLib.TMSFNCTypes"].TPointF(this.ConvertScreenToClient(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetMousePos())));
      this.HandleDblClick(pf.X,pf.Y);
      if (this.FOnInternalDblClick != null) this.FOnInternalDblClick(this);
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomControlBaseCommon.Create$1.apply(this,arguments);
      this.FHitTest = true;
      this.FStored = true;
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
    };
    this.BeginUpdate = function () {
      pas["WEBLib.Controls"].TControl.BeginUpdate.apply(this,arguments);
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.apply(this,arguments);
    };
    this.CanFocus = function () {
      var Result = false;
      Result = pas["WEBLib.Controls"].TControl.CanFocus.call(this);
      Result = Result && this.GetAllowFocus();
      return Result;
    };
    this.LocalRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight()));
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlBeforeDrawEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlAfterDrawEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlCanSavePropertyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]],["ACanSave",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlCanLoadPropertyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]],["ACanLoad",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomControl",$mod.TTMSFNCCustomControlBase,function () {
    this.$init = function () {
      $mod.TTMSFNCCustomControlBase.$init.call(this);
      this.FPopupMenu = null;
      this.FOnBeforeDraw = null;
      this.FOnAfterDraw = null;
      this.FOnCanSaveProperty = null;
      this.FOnCanLoadProperty = null;
      this.FCheckedChk = null;
      this.FUnCheckedChk = null;
      this.FCheckedFocusChk = null;
      this.FUnCheckedFocusChk = null;
      this.FCheckedDisabledChk = null;
      this.FUnCheckedDisabledChk = null;
      this.FCheckedRd = null;
      this.FUnCheckedRd = null;
      this.FCheckedFocusRd = null;
      this.FUnCheckedFocusRd = null;
      this.FCheckedDisabledRd = null;
      this.FUnCheckedDisabledRd = null;
      this.FDownBtn = null;
      this.FNormalBtn = null;
      this.FDownFocusBtn = null;
      this.FNormalFocusBtn = null;
      this.FNormalDisabledBtn = null;
      this.FFill = null;
      this.FStroke = null;
    };
    this.$final = function () {
      this.FPopupMenu = undefined;
      this.FOnBeforeDraw = undefined;
      this.FOnAfterDraw = undefined;
      this.FOnCanSaveProperty = undefined;
      this.FOnCanLoadProperty = undefined;
      this.FCheckedChk = undefined;
      this.FUnCheckedChk = undefined;
      this.FCheckedFocusChk = undefined;
      this.FUnCheckedFocusChk = undefined;
      this.FCheckedDisabledChk = undefined;
      this.FUnCheckedDisabledChk = undefined;
      this.FCheckedRd = undefined;
      this.FUnCheckedRd = undefined;
      this.FCheckedFocusRd = undefined;
      this.FUnCheckedFocusRd = undefined;
      this.FCheckedDisabledRd = undefined;
      this.FUnCheckedDisabledRd = undefined;
      this.FDownBtn = undefined;
      this.FNormalBtn = undefined;
      this.FDownFocusBtn = undefined;
      this.FNormalFocusBtn = undefined;
      this.FNormalDisabledBtn = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      $mod.TTMSFNCCustomControlBase.$final.call(this);
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.GetVersionNumber = function (AMaj, AMin, ARel, ABld) {
      var Result = "";
      Result = "";
      return Result;
    };
    this.LocalToScreenEx = function (APoint) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var pt = new pas.Types.TPoint();
      pt = new pas.Types.TPoint(this.ClientToScreen(pas.Types.Point(Math.round(APoint.X),Math.round(APoint.Y))));
      Result = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(pt.x,pt.y));
      return Result;
    };
    this.GetContentRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetControlRect());
      return Result;
    };
    this.GetControlRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight()));
      return Result;
    };
    this.SetColor = function (AValue) {
      pas["WEBLib.Controls"].TControl.SetColor.apply(this,arguments);
      if (this.FFill != null) this.FFill.SetColor(AValue);
      this.Invalidate();
    };
    this.RegisterRuntimeClasses = function () {
    };
    this.ApplyStyle = function () {
      var c = 0;
      $mod.TTMSFNCCustomControlBaseCommon.ApplyStyle.apply(this,arguments);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FFill.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleLineFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FStroke.SetColor(c);
    };
    this.ResetToDefaultStyle = function () {
      $mod.TTMSFNCCustomControlBaseCommon.ResetToDefaultStyle.apply(this,arguments);
      this.FFill.SetColor(16777215);
      this.FStroke.SetColor(12632256);
    };
    this.DestroyGraphicElements = function () {
      if (this.FDownBtn != null) {
        rtl.free(this,"FDownBtn");
        this.FDownBtn = null;
      };
      if (this.FNormalBtn != null) {
        rtl.free(this,"FNormalBtn");
        this.FNormalBtn = null;
      };
      if (this.FDownFocusBtn != null) {
        rtl.free(this,"FDownFocusBtn");
        this.FDownFocusBtn = null;
      };
      if (this.FNormalFocusBtn != null) {
        rtl.free(this,"FNormalFocusBtn");
        this.FNormalFocusBtn = null;
      };
      if (this.FNormalDisabledBtn != null) {
        rtl.free(this,"FNormalDisabledBtn");
        this.FNormalDisabledBtn = null;
      };
      if (this.FCheckedChk != null) {
        rtl.free(this,"FCheckedChk");
        this.FCheckedChk = null;
      };
      if (this.FCheckedFocusChk != null) {
        rtl.free(this,"FCheckedFocusChk");
        this.FCheckedFocusChk = null;
      };
      if (this.FUnCheckedDisabledChk != null) {
        rtl.free(this,"FUnCheckedDisabledChk");
        this.FUnCheckedDisabledChk = null;
      };
      if (this.FCheckedDisabledChk != null) {
        rtl.free(this,"FCheckedDisabledChk");
        this.FCheckedDisabledChk = null;
      };
      if (this.FUnCheckedChk != null) {
        rtl.free(this,"FUnCheckedChk");
        this.FUnCheckedChk = null;
      };
      if (this.FUnCheckedFocusChk != null) {
        rtl.free(this,"FUnCheckedFocusChk");
        this.FUnCheckedFocusChk = null;
      };
      if (this.FCheckedRd != null) {
        rtl.free(this,"FCheckedRd");
        this.FCheckedRd = null;
      };
      if (this.FCheckedFocusRd != null) {
        rtl.free(this,"FCheckedFocusRd");
        this.FCheckedFocusRd = null;
      };
      if (this.FUnCheckedRd != null) {
        rtl.free(this,"FUnCheckedRd");
        this.FUnCheckedRd = null;
      };
      if (this.FUnCheckedFocusRd != null) {
        rtl.free(this,"FUnCheckedFocusRd");
        this.FUnCheckedFocusRd = null;
      };
      if (this.FUnCheckedDisabledRd != null) {
        rtl.free(this,"FUnCheckedDisabledRd");
        this.FUnCheckedDisabledRd = null;
      };
      if (this.FCheckedDisabledRd != null) {
        rtl.free(this,"FCheckedDisabledRd");
        this.FCheckedDisabledRd = null;
      };
    };
    this.UpdateControlAfterResize = function () {
    };
    this.DoBeforeDraw = function (AGraphics, ARect, ADefaultDraw) {
      if (this.FOnBeforeDraw != null) this.FOnBeforeDraw(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ADefaultDraw);
    };
    this.DoAfterDraw = function (AGraphics, ARect) {
      if (this.FOnAfterDraw != null) this.FOnAfterDraw(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect));
    };
    this.DrawBackground = function (AGraphics, ARect) {
      AGraphics.FFill.Assign(this.FFill);
      AGraphics.FFill.SetColor(this.FColor);
      AGraphics.FStroke.Assign(this.FStroke);
      AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.StrokeChanged = function (Sender) {
      this.Invalidate();
    };
    this.FillChanged = function (Sender) {
      if ((this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone) && (this.FFill.FColor !== -1)) {
        this.SetColor(this.FFill.FColor)}
       else this.SetColor(15790320);
      this.Invalidate();
    };
    this.Draw = function (AGraphics, ARect) {
    };
    this.DrawControl = function () {
      var g = null;
      var gbmp = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var df = false;
      var bmp = null;
      if (this.FBufferedPainting) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[this.GetWidth(),this.GetHeight(),this.FNativeCanvas,true]);
        g.BeginScene();
      } else g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.GetCanvas(),this.FNativeCanvas]);
      g.FOptimizedHTMLDrawing = this.FOptimizedHTMLDrawing;
      g.GetContext().SetSize(this.GetWidth(),this.GetHeight());
      g.GetContext().SetAntiAliasing(this.FAntiAliasing);
      g.GetContext().SetShowAcceleratorChar(this.FShowAcceleratorChar);
      g.GetContext().SetTextQuality(this.FTextQuality);
      try {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight()));
        df = true;
        this.DoBeforeDraw(g,new pas["WEBLib.TMSFNCTypes"].TRectF(r),{get: function () {
            return df;
          }, set: function (v) {
            df = v;
          }});
        if (df) {
          this.DrawBackground(g,new pas["WEBLib.TMSFNCTypes"].TRectF(r));
          this.Draw(g,new pas["WEBLib.TMSFNCTypes"].TRectF(r));
          this.DoAfterDraw(g,new pas["WEBLib.TMSFNCTypes"].TRectF(r));
        };
        if (this.FBufferedPainting) g.EndScene();
        g.GetContext().Render();
        if (this.FBufferedPainting) {
          bmp = g.FBitmap;
          gbmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.GetCanvas(),false]);
          try {
            gbmp.GetContext().SetSize(this.GetWidth(),this.GetHeight());
            gbmp.GetContext().SetAntiAliasing(this.FAntiAliasing);
            gbmp.GetContext().SetShowAcceleratorChar(this.FShowAcceleratorChar);
            gbmp.GetContext().SetTextQuality(this.FTextQuality);
            gbmp.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r),bmp,true,false,true,false);
          } finally {
            gbmp = rtl.freeLoc(gbmp);
          };
        };
      } finally {
        g = rtl.freeLoc(g);
      };
    };
    this.CaptureEx = function () {
      this.Capture();
    };
    this.ReleaseCaptureEx = function () {
      this.ReleaseCapture();
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomControl.isPrototypeOf(Source)) {
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomControl).FFill);
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomControl).FStroke);
      };
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomControlBase.Create$1.apply(this,arguments);
      this.SetColor(16777215);
      this.SetTabStop(true);
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      if (!this.IsDesignerForm()) this.RegisterRuntimeClasses();
    };
    this.Destroy = function () {
      if (this.FDownBtn != null) {
        rtl.free(this,"FDownBtn");
        this.FDownBtn = null;
      };
      if (this.FNormalBtn != null) {
        rtl.free(this,"FNormalBtn");
        this.FNormalBtn = null;
      };
      if (this.FDownFocusBtn != null) {
        rtl.free(this,"FDownFocusBtn");
        this.FDownFocusBtn = null;
      };
      if (this.FNormalFocusBtn != null) {
        rtl.free(this,"FNormalFocusBtn");
        this.FNormalFocusBtn = null;
      };
      if (this.FNormalDisabledBtn != null) {
        rtl.free(this,"FNormalDisabledBtn");
        this.FNormalDisabledBtn = null;
      };
      if (this.FCheckedChk != null) {
        rtl.free(this,"FCheckedChk");
        this.FCheckedChk = null;
      };
      if (this.FCheckedFocusChk != null) {
        rtl.free(this,"FCheckedFocusChk");
        this.FCheckedFocusChk = null;
      };
      if (this.FUnCheckedDisabledChk != null) {
        rtl.free(this,"FUnCheckedDisabledChk");
        this.FUnCheckedDisabledChk = null;
      };
      if (this.FCheckedDisabledChk != null) {
        rtl.free(this,"FCheckedDisabledChk");
        this.FCheckedDisabledChk = null;
      };
      if (this.FUnCheckedChk != null) {
        rtl.free(this,"FUnCheckedChk");
        this.FUnCheckedChk = null;
      };
      if (this.FUnCheckedFocusChk != null) {
        rtl.free(this,"FUnCheckedFocusChk");
        this.FUnCheckedFocusChk = null;
      };
      if (this.FCheckedRd != null) {
        rtl.free(this,"FCheckedRd");
        this.FCheckedRd = null;
      };
      if (this.FCheckedFocusRd != null) {
        rtl.free(this,"FCheckedFocusRd");
        this.FCheckedFocusRd = null;
      };
      if (this.FUnCheckedRd != null) {
        rtl.free(this,"FUnCheckedRd");
        this.FUnCheckedRd = null;
      };
      if (this.FUnCheckedFocusRd != null) {
        rtl.free(this,"FUnCheckedFocusRd");
        this.FUnCheckedFocusRd = null;
      };
      if (this.FUnCheckedDisabledRd != null) {
        rtl.free(this,"FUnCheckedDisabledRd");
        this.FUnCheckedDisabledRd = null;
      };
      if (this.FCheckedDisabledRd != null) {
        rtl.free(this,"FCheckedDisabledRd");
        this.FCheckedDisabledRd = null;
      };
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      $mod.TTMSFNCCustomControlBaseCommon.Destroy.apply(this,arguments);
    };
    this.IsDesignTime = function () {
      var Result = false;
      Result = false;
      if (this.FOwner != null) Result = (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !((pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState) || (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState));
      return Result;
    };
    this.IsLoading = function () {
      var Result = false;
      Result = false;
      if (this.FOwner != null) Result = pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState;
      return Result;
    };
    this.IsDesigning = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csDesigning in this.FComponentState;
      return Result;
    };
    this.IsDesignerForm = function () {
      var Result = false;
      var frm = null;
      frm = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetOwnerForm(this);
      Result = this.IsDesigning();
      if (frm != null) Result = Result || $mod.TTMSFNCCustomDesignerForm.isPrototypeOf(frm);
      return Result;
    };
    this.IsDestroying = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csDestroying in this.FComponentState;
      return Result;
    };
    this.DisableBackground = function () {
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
      this.SetColor(15790320);
    };
    this.Resize = function () {
      pas["WEBLib.Controls"].TCustomControl.Resize.apply(this,arguments);
      this.UpdateControlAfterResize();
    };
    this.Paint = function () {
      pas["WEBLib.Controls"].TCustomControl.Paint.apply(this,arguments);
      this.DrawControl();
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("AdaptToStyle",3,rtl.boolean,"GetAdaptToStyle","SetAdaptToStyle",{Default: false});
    $r.addProperty("AllowFocus",3,rtl.boolean,"GetAllowFocus","SetAllowFocus",{Default: true});
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign");
    $r.addProperty("DoubleBuffered",0,rtl.boolean,"FDoubleBuffered","FDoubleBuffered");
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor");
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("ParentDoubleBuffered",0,rtl.boolean,"FParentDoubleBuffered","FParentDoubleBuffered");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseWheel",0,pas["WEBLib.Controls"].$rtti["TMouseWheelEvent"],"FOnMouseWheel","FOnMouseWheel");
    $r.addProperty("PopupMenu",0,pas["WEBLib.TMSFNCTypes"].$rtti["TPopupMenu"],"FPopupMenu","FPopupMenu");
    $r.addProperty("ShowAcceleratorChar",2,rtl.boolean,"FShowAcceleratorChar","SetShowAcceleratorChar",{Default: true});
    $r.addProperty("OnBeforeDraw",0,$mod.$rtti["TTMSFNCCustomControlBeforeDrawEvent"],"FOnBeforeDraw","FOnBeforeDraw");
    $r.addProperty("OnAfterDraw",0,$mod.$rtti["TTMSFNCCustomControlAfterDrawEvent"],"FOnAfterDraw","FOnAfterDraw");
    $r.addProperty("OnCanSaveProperty",0,$mod.$rtti["TTMSFNCCustomControlCanSavePropertyEvent"],"FOnCanSaveProperty","FOnCanSaveProperty");
    $r.addProperty("OnCanLoadProperty",0,$mod.$rtti["TTMSFNCCustomControlCanLoadPropertyEvent"],"FOnCanLoadProperty","FOnCanLoadProperty");
  });
  rtl.createClass($mod,"TTMSFNCControl",$mod.TTMSFNCCustomControl,function () {
    this.RegisterRuntimeClasses = function () {
      $mod.TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCControl);
    };
  });
},["WEBLib.TMSFNCUtils","SysUtils","WEBLib.StdCtrls"]);
rtl.module("WEBLib.TMSFNCPlannerBase",["System","Classes","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCTypes","WEBLib.StdCtrls","Types","SysUtils"],function () {
  "use strict";
  var $mod = this;
  this.SWIPECOUNT = 300;
  this.DOWNCOUNT = 100;
  rtl.createClass($mod,"TTMSFNCPlannerDoubleListItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FOwner = null;
      this.FValue = 0.0;
      this.FCellVal = 0;
    };
    this.$final = function () {
      this.FOwner = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetCellData = function (Value) {
      this.FValue = Value;
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) this.FOwner = rtl.as(this.FCollection,$mod.TTMSFNCPlannerDoubleList).FOwner$1;
    };
    var $r = this.$rtti;
    $r.addProperty("Value",2,rtl.double,"FValue","SetCellData");
    $r.addProperty("CellVal",0,rtl.longint,"FCellVal","FCellVal");
  });
  rtl.createClass($mod,"TTMSFNCPlannerDoubleList",pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$init.call(this);
      this.FOwner$1 = null;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.IndexOf = function (ACellVal) {
      var Result = 0;
      var r = 0;
      Result = -1;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        if (this.GetItem$1(r).FCellVal === ACellVal) {
          Result = r;
          return Result;
        };
      };
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TTMSFNCPlannerDoubleListItem);
      this.FOwner$1 = AOwner;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
  });
  this.TTMSFNCPlannerScrollMode = {"0": "smPixelScrolling", smPixelScrolling: 0, "1": "smCellScrolling", smCellScrolling: 1};
  this.TTMSFNCPlannerCell = function (s) {
    if (s) {
      this.Col = s.Col;
      this.Row = s.Row;
    } else {
      this.Col = 0;
      this.Row = 0;
    };
    this.$equal = function (b) {
      return (this.Col === b.Col) && (this.Row === b.Row);
    };
  };
  $mod.$rtti.$Record("TTMSFNCPlannerCell",{}).addFields("Col",rtl.longint,"Row",rtl.longint);
  this.TTMSFNCPlannerSelection = function (s) {
    if (s) {
      this.StartCell = new $mod.TTMSFNCPlannerCell(s.StartCell);
      this.EndCell = new $mod.TTMSFNCPlannerCell(s.EndCell);
    } else {
      this.StartCell = new $mod.TTMSFNCPlannerCell();
      this.EndCell = new $mod.TTMSFNCPlannerCell();
    };
    this.$equal = function (b) {
      return this.StartCell.$equal(b.StartCell) && this.EndCell.$equal(b.EndCell);
    };
  };
  this.TTMSFNCPlannerOrientationMode = {"0": "pomHorizontal", pomHorizontal: 0, "1": "pomVertical", pomVertical: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerOrientationMode",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerOrientationMode});
  this.TTMSFNCPlannerItemCachingMode = {"0": "picmNoCaching", picmNoCaching: 0, "1": "picmDelayedCaching", picmDelayedCaching: 1, "2": "picmFullCaching", picmFullCaching: 2};
  rtl.createClass($mod,"TTMSFNCPlannerBase",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FTotalRowHeight = 0.0;
      this.FTotalColumnWidth = 0.0;
      this.FStartCol = 0;
      this.FStopCol = 0;
      this.FStartRow = 0;
      this.FStopRow = 0;
      this.FStartX = 0.0;
      this.FStopX = 0.0;
      this.FStartY = 0.0;
      this.FStopY = 0.0;
      this.FBlockScrollingUpdate = false;
      this.FUpdateCount$1 = 0;
      this.FVerticalScrollBar = null;
      this.FHorizontalScrollBar = null;
      this.FRowCount = 0;
      this.FColumnCount = 0;
      this.FColumnW = null;
      this.FRowH = null;
      this.FColumnP = null;
      this.FRowP = null;
      this.FDefaultRowHeight = 0.0;
      this.FDefaultColumnWidth = 0.0;
      this.FVerticalScrollBarVisible = false;
      this.FHorizontalScrollBarVisible = false;
      this.FScrollMode = 0;
      this.FOrientationMode = 0;
      this.FIsMouseDown = false;
      this.FDelayedLoading = false;
      this.FItemCachingMode = 0;
      this.FStretchScrollBars = false;
    };
    this.$final = function () {
      this.FVerticalScrollBar = undefined;
      this.FHorizontalScrollBar = undefined;
      this.FColumnW = undefined;
      this.FRowH = undefined;
      this.FColumnP = undefined;
      this.FRowP = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetColumnCount = function (Value) {
      if (this.FColumnCount !== Value) this.FColumnCount = Value;
    };
    this.SetRowCount = function (Value) {
      if (this.FRowCount !== Value) this.FRowCount = Value;
    };
    this.SetDefaultColumnWidth = function (Value) {
      if (this.FDefaultColumnWidth !== Value) this.FDefaultColumnWidth = Value;
    };
    this.SetDefaultRowHeight = function (Value) {
      if (this.FDefaultRowHeight !== Value) this.FDefaultRowHeight = Value;
    };
    this.SetHorizontalScrollBarVisible = function (Value) {
      if (this.FHorizontalScrollBarVisible !== Value) {
        this.FHorizontalScrollBarVisible = Value;
        this.UpdatePlannerCache(true);
      };
    };
    this.SetVerticalScrollBarVisible = function (Value) {
      if (this.FVerticalScrollBarVisible !== Value) {
        this.FVerticalScrollBarVisible = Value;
        this.UpdatePlannerCache(true);
      };
    };
    this.SetColWidths = function (Col, Value) {
      var idx = 0;
      var c = null;
      idx = this.FColumnW.IndexOf(Col);
      if ((idx >= 0) && (idx <= (this.FColumnW.GetCount() - 1))) {
        if (Value === this.FDefaultColumnWidth) {
          this.FColumnW.Delete(idx)}
         else {
          this.FColumnW.GetItem$1(idx).SetCellData(Math.max(0,Value));
          this.FColumnW.GetItem$1(idx).FCellVal = Col;
        };
      } else if (Value !== this.FDefaultColumnWidth) {
        c = this.FColumnW.Add$1();
        c.SetCellData(Math.max(0,Value));
        c.FCellVal = Col;
      };
    };
    this.SetRowHeights = function (Row, Value) {
      var idx = 0;
      var r = null;
      idx = this.FRowH.IndexOf(Row);
      if ((idx >= 0) && (idx <= (this.FRowH.GetCount() - 1))) {
        if (Value === this.FDefaultRowHeight) {
          this.FRowH.Delete(idx)}
         else {
          this.FRowH.GetItem$1(idx).SetCellData(Math.max(0,Value));
          this.FRowH.GetItem$1(idx).FCellVal = Row;
        };
      } else if (Value !== this.FDefaultRowHeight) {
        r = this.FRowH.Add$1();
        r.SetCellData(Math.max(0,Value));
        r.FCellVal = Row;
      };
    };
    this.SetOrientationMode = function (Value) {
      if (this.FOrientationMode !== Value) {
        this.FOrientationMode = Value;
        this.UpdatePlannerCache(true);
      };
    };
    this.GetColWidths = function (Col) {
      var Result = 0.0;
      var idx = 0;
      idx = this.FColumnW.IndexOf(Col);
      if (idx !== -1) {
        Result = this.FColumnW.GetItem$1(idx).FValue}
       else Result = this.FDefaultColumnWidth;
      return Result;
    };
    this.GetRowHeights = function (Row) {
      var Result = 0.0;
      var idx = 0;
      idx = this.FRowH.IndexOf(Row);
      if (idx !== -1) {
        Result = this.FRowH.GetItem$1(idx).FValue}
       else Result = this.FDefaultRowHeight;
      return Result;
    };
    this.GetColPos = function (Col) {
      var Result = 0.0;
      var idx = 0;
      idx = this.FColumnP.IndexOf(Col);
      if (idx !== -1) {
        Result = this.FColumnP.GetItem$1(idx).FValue}
       else Result = -1;
      return Result;
    };
    this.GetRowPos = function (Row) {
      var Result = 0.0;
      var idx = 0;
      idx = this.FRowP.IndexOf(Row);
      if (idx !== -1) {
        Result = this.FRowP.GetItem$1(idx).FValue}
       else Result = -1;
      return Result;
    };
    this.SetColPos = function (Col, Value) {
      var idx = 0;
      var c = null;
      idx = this.FColumnP.IndexOf(Col);
      if ((idx >= 0) && (idx <= (this.FColumnP.GetCount() - 1))) {
        if (Value === -1) {
          this.FColumnP.Delete(idx)}
         else {
          this.FColumnP.GetItem$1(idx).SetCellData(Math.max(0,Value));
          this.FColumnP.GetItem$1(idx).FCellVal = Col;
        };
      } else if (Value !== -1) {
        c = this.FColumnP.Add$1();
        c.SetCellData(Math.max(0,Value));
        c.FCellVal = Col;
      };
    };
    this.SetRowPos = function (Row, Value) {
      var idx = 0;
      var r = null;
      idx = this.FRowP.IndexOf(Row);
      if ((idx >= 0) && (idx <= (this.FRowP.GetCount() - 1))) {
        if (Value === -1) {
          this.FRowP.Delete(idx)}
         else {
          this.FRowP.GetItem$1(idx).SetCellData(Math.max(0,Value));
          this.FRowP.GetItem$1(idx).FCellVal = Row;
        };
      } else if (Value !== -1) {
        r = this.FRowP.Add$1();
        r.SetCellData(Math.max(0,Value));
        r.FCellVal = Row;
      };
    };
    this.SetStretchScrollBars = function (Value) {
      if (this.FStretchScrollBars !== Value) {
        this.FStretchScrollBars = Value;
        this.UpdatePlannerDisplay();
      };
    };
    this.UpdateVisualRange = function () {
      var c = 0;
      var r = 0;
      var xval = 0.0;
      var yval = 0.0;
      var cw = 0.0;
      var ch = 0.0;
      var vpos = 0.0;
      var hpos = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      hpos = this.GetHorizontalScrollPosition();
      vpos = this.GetVerticalScrollPosition();
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
        xval = -vpos;
        yval = -hpos;
        cw = cr.Bottom - cr.Top;
        ch = cr.Right - cr.Left;
      } else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
        xval = -hpos;
        yval = -vpos;
        cw = cr.Right - cr.Left;
        ch = cr.Bottom - cr.Top;
      } else {
        xval = 0;
        yval = 0;
        cw = 0;
        ch = 0;
      };
      this.FStartCol = -1;
      this.FStartRow = -1;
      this.FStopCol = -1;
      this.FStopRow = -1;
      var $tmp2 = this.FOrientationMode;
      if ($tmp2 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
        this.FStartX = cr.Top;
        this.FStopX = cr.Top;
        this.FStartY = cr.Left;
        this.FStopY = cr.Left;
      } else if ($tmp2 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
        this.FStartX = cr.Left;
        this.FStopX = cr.Left;
        this.FStartY = cr.Top;
        this.FStopY = cr.Top;
      };
      for (var $l3 = 0, $end4 = this.FColumnCount - 1; $l3 <= $end4; $l3++) {
        c = $l3;
        xval = xval + this.GetColWidths(c);
        if ((xval > 0) && (this.FStartCol === -1)) {
          this.FStartCol = c;
          this.FStartX = this.FStartX + pas.System.Int(xval - this.GetColWidths(c));
        };
        if ((xval >= cw) && (this.FStopCol === -1)) {
          this.FStopCol = c;
          this.FStopX = this.FStopX + pas.System.Int(xval);
        };
        if ((this.FStartCol > -1) && (this.FStopCol > -1)) break;
      };
      for (var $l5 = 0, $end6 = this.FRowCount - 1; $l5 <= $end6; $l5++) {
        r = $l5;
        yval = yval + this.GetRowHeights(r);
        if ((yval > 0) && (this.FStartRow === -1)) {
          this.FStartRow = r;
          this.FStartY = this.FStartY + pas.System.Int(yval - this.GetRowHeights(r));
        };
        if ((yval >= ch) && (this.FStopRow === -1)) {
          this.FStopRow = r;
          this.FStopY = this.FStopY + pas.System.Int(yval);
        };
        if ((this.FStartRow > -1) && (this.FStopRow > -1)) break;
      };
      if ((this.FStartRow > -1) && (this.FStopRow === -1)) this.FStopRow = this.FRowCount - 1;
      if ((this.FStartCol > -1) && (this.FStopCol === -1)) this.FStopCol = this.FColumnCount - 1;
    };
    this.UpdateControlAfterResize = function () {
      this.UpdatePlannerCache(true);
    };
    this.StretchColumn = function (ACol, ANewWidth) {
      var i = 0;
      var w = 0.0;
      var nw = 0.0;
      var d = 0.0;
      var cnt = 0;
      var horz = null;
      var vert = null;
      var stretch = false;
      var stretchall = false;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      stretch = true;
      stretchall = true;
      horz = this.HorizontalScrollBar();
      vert = this.VerticalScrollBar();
      if (!(vert != null) || !(horz != null)) return;
      if (ANewWidth === -1) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
          nw = r.Bottom - r.Top}
         else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
          nw = r.Right - r.Left}
         else {
          nw = 0;
        };
      } else nw = ANewWidth;
      cnt = this.FColumnCount;
      if (ACol === -1) ACol = cnt - 1;
      if (ACol >= cnt) throw pas.SysUtils.Exception.$create("Create$1",["Stretch column index out of range"]);
      if ((cnt === 0) || !stretch) return;
      if (cnt === 1) {
        this.SetColWidths(0,nw);
        return;
      };
      w = 0;
      if (stretchall) {
        if (cnt > 0) {
          d = nw;
          w = d / cnt;
          for (var $l2 = 0, $end3 = cnt - 1; $l2 <= $end3; $l2++) {
            i = $l2;
            this.SetColWidths(i,w);
          };
        };
      } else {
        for (var $l4 = 0, $end5 = cnt - 1; $l4 <= $end5; $l4++) {
          i = $l4;
          if (i !== ACol) w = w + this.GetColWidths(i);
        };
        this.SetColWidths(ACol,nw - w);
      };
    };
    this.StretchRow = function (ARow, ANewHeight) {
      var i = 0;
      var w = 0.0;
      var nw = 0.0;
      var d = 0.0;
      var cnt = 0;
      var stretch = false;
      var stretchall = false;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      stretch = true;
      stretchall = true;
      if (ANewHeight === -1) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
          nw = r.Right - r.Left}
         else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
          nw = r.Bottom - r.Top}
         else {
          nw = 0;
        };
      } else nw = ANewHeight;
      cnt = this.FRowCount;
      if (ARow === -1) ARow = cnt - 1;
      if (ARow >= cnt) throw pas.SysUtils.Exception.$create("Create$1",["Stretch Row index out of range"]);
      if ((cnt === 0) || !stretch) return;
      if (cnt === 1) {
        this.SetRowHeights(0,nw);
        return;
      };
      w = 0;
      if (stretchall) {
        if (cnt > 0) {
          d = nw;
          w = d / cnt;
          for (var $l2 = 0, $end3 = cnt - 1; $l2 <= $end3; $l2++) {
            i = $l2;
            this.SetRowHeights(i,w);
          };
        };
      } else {
        for (var $l4 = 0, $end5 = cnt - 1; $l4 <= $end5; $l4++) {
          i = $l4;
          if (i !== ARow) w = w + this.GetRowHeights(i);
        };
        this.SetRowHeights(ARow,nw - w);
      };
    };
    this.Scroll = function (AHorizontalPos, AVerticalPos) {
      this.FBlockScrollingUpdate = true;
      this.SetHScrollValue(AHorizontalPos);
      this.SetVScrollValue(AVerticalPos);
      this.FBlockScrollingUpdate = false;
      this.UpdateDisplay();
    };
    this.UpdateDisplay = function () {
      this.UpdateVisualRange();
      if ((this.FItemCachingMode === $mod.TTMSFNCPlannerItemCachingMode.picmDelayedCaching) && (this.GetUpdateCount() === 0)) this.UpdateItemsCache();
    };
    this.VScrollChanged = function (Sender) {
      if (this.FBlockScrollingUpdate) return;
      if (!this.FIsMouseDown) this.StopAnimationTimer();
      this.VerticalScrollPositionChanged();
    };
    this.HScrollChanged = function (Sender) {
      if (this.FBlockScrollingUpdate) return;
      if (!this.FIsMouseDown) this.StopAnimationTimer();
      this.HorizontalScrollPositionChanged();
    };
    this.UpdateScrollBars = function (AUpdate, ACalculate) {
      var vs = null;
      var hs = null;
      var w = 0.0;
      var h = 0.0;
      var cw = 0.0;
      var ch = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var vmgr = null;
      var hmgr = null;
      if ((this.FBlockScrollingUpdate || (this.GetUpdateCount() > 0)) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) return;
      this.FBlockScrollingUpdate = true;
      if (ACalculate) {
        this.UpdateAutoSizing();
        this.UpdateColumnRowCalculations();
      };
      vs = this.VerticalScrollBar();
      hs = this.HorizontalScrollBar();
      if ((vs != null) && (hs != null)) {
        if (AUpdate) {
          cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCalculationRect())}
         else cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
        cw = cr.Right - cr.Left;
        ch = cr.Bottom - cr.Top;
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
          h = this.FTotalColumnWidth;
          w = this.FTotalRowHeight;
        } else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
          w = this.FTotalColumnWidth;
          h = this.FTotalRowHeight;
        } else {
          w = 0;
          h = 0;
        };
        var $tmp2 = this.FOrientationMode;
        if ($tmp2 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
          hs.SetVisible(((w > 0) && (pas["WEBLib.TMSFNCTypes"].CompareValueEx(w,cw,0) === 1)) && this.FHorizontalScrollBarVisible);
          vs.SetVisible((((h > 0) && (pas["WEBLib.TMSFNCTypes"].CompareValueEx(h,ch,0) === 1)) && this.FVerticalScrollBarVisible) && !this.ColumnStretchingActive());
        } else if ($tmp2 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
          hs.SetVisible((((w > 0) && (pas["WEBLib.TMSFNCTypes"].CompareValueEx(w,cw,0) === 1)) && this.FHorizontalScrollBarVisible) && !this.ColumnStretchingActive());
          vs.SetVisible(((h > 0) && (pas["WEBLib.TMSFNCTypes"].CompareValueEx(h,ch,0) === 1)) && this.FVerticalScrollBarVisible);
        };
        if (vs.FVisible) {
          vs.SetParent(this)}
         else vs.SetParent(null);
        if (hs.FVisible) {
          hs.SetParent(this)}
         else hs.SetParent(null);
        vmgr = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
        hmgr = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
        if (vs.FVisible && this.FStretchScrollBars) {
          hmgr.SetRight(vs.GetWidth() + 1)}
         else hmgr.SetRight(1);
        vmgr.SetTop(1);
        vmgr.SetRight(1);
        hmgr.SetBottom(1);
        hmgr.SetLeft(1);
        if (hs.FVisible) {
          vmgr.SetBottom(hs.GetHeight() + 1)}
         else vmgr.SetBottom(1);
        if (!this.FStretchScrollBars) {
          cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCalculationRect());
          hmgr.SetLeft(hmgr.FLeft + cr.Left);
          hmgr.SetRight(hmgr.FRight + (this.GetWidth() - cr.Right));
          vmgr.SetTop(vmgr.FTop + cr.Top);
          vmgr.SetBottom(vmgr.FBottom + (this.GetHeight() - cr.Bottom));
        };
        hs.SetLeft(Math.round(hmgr.FLeft));
        hs.SetTop(Math.round((this.GetHeight() - hmgr.FBottom) - hs.GetHeight()));
        vs.SetLeft(Math.round((this.GetWidth() - vmgr.FRight) - vs.GetWidth()));
        vs.SetTop(Math.round(vmgr.FTop));
        hs.SetWidth(Math.round(Math.max(0,(this.GetWidth() - hmgr.FRight) - hmgr.FLeft)));
        vs.SetHeight(Math.round(Math.max(0,(this.GetHeight() - vmgr.FBottom) - vmgr.FTop)));
        hmgr = rtl.freeLoc(hmgr);
        vmgr = rtl.freeLoc(vmgr);
        cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
        cw = cr.Right - cr.Left;
        ch = cr.Bottom - cr.Top;
        if (this.FScrollMode === $mod.TTMSFNCPlannerScrollMode.smCellScrolling) {
          vs.SetPageSize(Math.round(Math.max(0,this.GetRowViewPortSize())));
          vs.SetMax(Math.max(vs.GetPageSize(),this.FRowCount));
        } else {
          vs.SetPageSize(Math.round(Math.max(0,Math.min(h,ch))));
          vs.SetMax(Math.round(Math.max(0,h)));
          vs.FSmallChange = Math.round(this.FDefaultRowHeight);
          vs.FLargeChange = vs.GetPageSize();
          vs.SetPosition(Math.min(vs.GetPosition(),vs.FMax));
        };
        if (this.FScrollMode === $mod.TTMSFNCPlannerScrollMode.smCellScrolling) {
          hs.SetPageSize(Math.round(Math.max(0,this.GetColumnViewPortSize())));
          hs.SetMax(Math.max(hs.GetPageSize(),this.FColumnCount));
        } else {
          hs.SetPageSize(Math.round(Math.max(0,Math.min(w,cw))));
          hs.SetMax(Math.round(Math.max(hs.GetPageSize(),w)));
          hs.SetPosition(Math.min(hs.GetPosition(),hs.FMax));
        };
      };
      this.FBlockScrollingUpdate = false;
      if (AUpdate) {
        this.UpdateScrollBars(false,true)}
       else this.UpdateScrollPosition(false);
    };
    this.UpdatePlannerDisplay = function () {
      this.UpdateScrollBars(true,true);
      this.UpdateDisplay();
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.apply(this,arguments);
      this.UpdatePlannerCache(true);
    };
    this.SetHScrollValue = function (AValue) {
      this.HorizontalScrollBar().SetPosition(Math.round(Math.min(this.HorizontalScrollBar().FMax - this.HorizontalScrollBar().GetPageSize(),Math.max(0,AValue))));
    };
    this.SetVScrollValue = function (AValue) {
      this.VerticalScrollBar().SetPosition(Math.round(Math.min(this.VerticalScrollBar().FMax - this.VerticalScrollBar().GetPageSize(),Math.max(0,AValue))));
    };
    this.GetVViewPortSize = function () {
      var Result = 0.0;
      Result = this.VerticalScrollBar().GetPageSize();
      return Result;
    };
    this.GetHViewPortSize = function () {
      var Result = 0.0;
      Result = this.HorizontalScrollBar().GetPageSize();
      return Result;
    };
    this.GetHScrollValue = function () {
      var Result = 0.0;
      Result = Math.min(this.HorizontalScrollBar().FMax - this.HorizontalScrollBar().GetPageSize(),Math.max(0,Math.round(this.HorizontalScrollBar().GetPosition())));
      return Result;
    };
    this.GetVScrollValue = function () {
      var Result = 0.0;
      Result = Math.round(Math.min(this.VerticalScrollBar().FMax - this.VerticalScrollBar().GetPageSize(),Math.max(0,this.VerticalScrollBar().GetPosition())));
      return Result;
    };
    this.GetUpdateCount = function () {
      var Result = 0;
      Result = this.FUpdateCount$1;
      return Result;
    };
    this.GetCalculationRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      return Result;
    };
    this.GetContentRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.GetContentRect.call(this));
      if (this.HorizontalScrollBar().FVisible) Result.Bottom = (Result.Bottom - this.HorizontalScrollBar().GetHeight()) - 1;
      if (this.VerticalScrollBar().FVisible) Result.Right = (Result.Right - this.VerticalScrollBar().GetWidth()) - 1;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FDelayedLoading = false;
      this.FStretchScrollBars = false;
      this.FOrientationMode = $mod.TTMSFNCPlannerOrientationMode.pomVertical;
      this.FItemCachingMode = $mod.TTMSFNCPlannerItemCachingMode.picmNoCaching;
      this.FVerticalScrollBar = pas["WEBLib.StdCtrls"].TScrollBar.$create("Create$1",[this]);
      this.FVerticalScrollBar.SetParent(this);
      this.FHorizontalScrollBar = pas["WEBLib.StdCtrls"].TScrollBar.$create("Create$1",[this]);
      this.FHorizontalScrollBar.SetParent(this);
      this.FVerticalScrollBar.FDoubleBuffered = false;
      this.FHorizontalScrollBar.FDoubleBuffered = false;
      this.FVerticalScrollBar.SetKind(pas["WEBLib.StdCtrls"].TScrollBarKind.sbVertical);
      this.FVerticalScrollBar.SetVisible(true);
      this.FHorizontalScrollBar.SetVisible(true);
      this.FVerticalScrollBar.FOnChange = rtl.createCallback(this,"VScrollChanged");
      this.FHorizontalScrollBar.FOnChange = rtl.createCallback(this,"HScrollChanged");
      this.FScrollMode = $mod.TTMSFNCPlannerScrollMode.smPixelScrolling;
      this.FColumnW = $mod.TTMSFNCPlannerDoubleList.$create("Create$3",[this]);
      this.FRowH = $mod.TTMSFNCPlannerDoubleList.$create("Create$3",[this]);
      this.FRowP = $mod.TTMSFNCPlannerDoubleList.$create("Create$3",[this]);
      this.FColumnP = $mod.TTMSFNCPlannerDoubleList.$create("Create$3",[this]);
      this.FDefaultRowHeight = 30;
      this.FDefaultColumnWidth = 75;
      this.FColumnCount = 10;
      this.FRowCount = 24;
      this.FVerticalScrollBarVisible = true;
      this.FHorizontalScrollBarVisible = true;
    };
    this.Destroy = function () {
      rtl.free(this,"FColumnP");
      rtl.free(this,"FRowP");
      rtl.free(this,"FColumnW");
      rtl.free(this,"FRowH");
      rtl.free(this,"FVerticalScrollBar");
      rtl.free(this,"FHorizontalScrollBar");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCPlannerBase.isPrototypeOf(Source)) {
        this.FItemCachingMode = rtl.as(Source,$mod.TTMSFNCPlannerBase).FItemCachingMode;
        this.FOrientationMode = rtl.as(Source,$mod.TTMSFNCPlannerBase).FOrientationMode;
        this.FScrollMode = rtl.as(Source,$mod.TTMSFNCPlannerBase).FScrollMode;
        this.FStretchScrollBars = rtl.as(Source,$mod.TTMSFNCPlannerBase).FStretchScrollBars;
      };
    };
    this.BeginUpdate = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.BeginUpdate.apply(this,arguments);
      this.FUpdateCount$1 += 1;
    };
    this.EndUpdate = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.EndUpdate.apply(this,arguments);
      this.FUpdateCount$1 -= 1;
      if (this.FUpdateCount$1 === 0) this.UpdatePlannerCache(false);
    };
    this.UpdatePlannerCache = function (ADirtyItems) {
      if (((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || (pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) return;
      this.UpdateCalculations(false);
      if (ADirtyItems) this.DirtyItems();
      this.UpdateConflicts();
      this.UpdateScrollBars(true,true);
      this.UpdateVisualRange();
      this.UpdateGridCache();
      this.UpdateGroupsCache();
      this.UpdatePositionsCache();
      this.UpdateTimeLinesCache();
      this.UpdateItemsCache();
    };
    this.GetColumnViewPortSize = function () {
      var Result = 0.0;
      var I = 0;
      var cnt = 0;
      var w = 0.0;
      var cw = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
        cw = cr.Bottom - cr.Top}
       else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
        cw = cr.Right - cr.Left}
       else {
        cw = 0;
      };
      Result = 0;
      w = 0;
      cnt = 0;
      for (var $l2 = this.FColumnCount - 1; $l2 >= 0; $l2--) {
        I = $l2;
        w = w + this.GetColWidths(I);
        if (w > cw) {
          Result = Math.max(1,cnt);
          break;
        };
        cnt += 1;
      };
      return Result;
    };
    this.GetRowViewPortSize = function () {
      var Result = 0.0;
      var I = 0;
      var cnt = 0;
      var h = 0.0;
      var ch = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
        ch = cr.Right - cr.Left}
       else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
        ch = cr.Bottom - cr.Top}
       else {
        ch = 0;
      };
      Result = 0;
      h = 0;
      cnt = 0;
      for (var $l2 = this.FRowCount - 1; $l2 >= 0; $l2--) {
        I = $l2;
        h = h + this.GetRowHeights(I);
        if (h > ch) {
          Result = Math.max(1,cnt);
          break;
        };
        cnt += 1;
      };
      return Result;
    };
    this.GetVerticalScrollPosition = function () {
      var Result = 0.0;
      var vVal = 0.0;
      var scrollv = 0.0;
      vVal = this.GetVScrollValue();
      if (this.FScrollMode === $mod.TTMSFNCPlannerScrollMode.smCellScrolling) {
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
          scrollv = this.GetColPos(Math.round(vVal))}
         else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
          scrollv = this.GetRowPos(Math.round(vVal))}
         else {
          scrollv = 0;
        };
        vVal = scrollv;
      };
      Result = vVal;
      return Result;
    };
    this.GetHorizontalScrollPosition = function () {
      var Result = 0.0;
      var hVal = 0.0;
      var scrollh = 0.0;
      hVal = this.GetHScrollValue();
      if (this.FScrollMode === $mod.TTMSFNCPlannerScrollMode.smCellScrolling) {
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
          scrollh = this.GetRowPos(Math.round(hVal))}
         else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
          scrollh = this.GetColPos(Math.round(hVal))}
         else {
          scrollh = 0;
        };
        hVal = scrollh;
      };
      Result = hVal;
      return Result;
    };
    this.HorizontalScrollBar = function () {
      var Result = null;
      Result = this.FHorizontalScrollBar;
      return Result;
    };
    this.VerticalScrollBar = function () {
      var Result = null;
      Result = this.FVerticalScrollBar;
      return Result;
    };
    this.XYToCell = function (X, Y) {
      var Result = new $mod.TTMSFNCPlannerCell();
      var I = 0;
      var val = 0.0;
      var xv = 0.0;
      var yv = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
      Result.Row = -1;
      Result.Col = -1;
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetContentRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomHorizontal) {
          yv = (X + this.GetHorizontalScrollPosition()) - cr.Left;
          xv = (Y + this.GetVerticalScrollPosition()) - cr.Top;
        } else if ($tmp1 === $mod.TTMSFNCPlannerOrientationMode.pomVertical) {
          xv = (X + this.GetHorizontalScrollPosition()) - cr.Left;
          yv = (Y + this.GetVerticalScrollPosition()) - cr.Top;
        } else {
          xv = 0;
          yv = 0;
        };
        val = 0;
        for (var $l2 = 0, $end3 = this.FRowCount - 1; $l2 <= $end3; $l2++) {
          I = $l2;
          val = val + this.GetRowHeights(I);
          if (val >= yv) {
            Result.Row = I;
            break;
          };
        };
        val = 0;
        for (var $l4 = 0, $end5 = this.FColumnCount - 1; $l4 <= $end5; $l4++) {
          I = $l4;
          val = val + this.GetColWidths(I);
          if (val >= xv) {
            Result.Col = I;
            break;
          };
        };
      };
      return Result;
    };
    this.StartCol = function () {
      var Result = 0;
      Result = this.FStartCol;
      return Result;
    };
    this.StartX = function () {
      var Result = 0.0;
      Result = this.FStartX;
      return Result;
    };
    this.StopX = function () {
      var Result = 0.0;
      Result = this.FStopX;
      return Result;
    };
    this.StartRow = function () {
      var Result = 0;
      Result = this.FStartRow;
      return Result;
    };
    this.StopRow = function () {
      var Result = 0;
      Result = this.FStopRow;
      return Result;
    };
    this.StartY = function () {
      var Result = 0.0;
      Result = this.FStartY;
      return Result;
    };
    this.StopY = function () {
      var Result = 0.0;
      Result = this.FStopY;
      return Result;
    };
    this.GetTotalColumnWidth = function () {
      var Result = 0.0;
      Result = this.FTotalColumnWidth;
      return Result;
    };
    this.GetTotalRowHeight = function () {
      var Result = 0.0;
      Result = this.FTotalRowHeight;
      return Result;
    };
  });
},["WEBLib.Controls","WEBLib.Forms","math"]);
rtl.module("DateUtils",["System","SysUtils","math"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.OneMillisecond = 1 / 86400000;
  this.DaysInMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    Result = pas.SysUtils.MonthDays[+pas.SysUtils.IsLeapYear(Y)][M - 1];
    return Result;
  };
  this.YearOf = function (AValue) {
    var Result = 0;
    var D = 0;
    var M = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }});
    return Result;
  };
  this.MonthOf = function (AValue) {
    var Result = 0;
    var Y = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    return Result;
  };
  this.DayOf = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.HourOf = function (AValue) {
    var Result = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    return Result;
  };
  this.MinuteOf = function (AValue) {
    var Result = 0;
    var H = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    return Result;
  };
  this.SecondOf = function (AValue) {
    var Result = 0;
    var H = 0;
    var N = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    return Result;
  };
  this.MilliSecondOf = function (AValue) {
    var Result = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.DayOfTheWeek = function (AValue) {
    var Result = 0;
    Result = $impl.DOWMap[pas.SysUtils.DayOfWeek(AValue) - 1];
    return Result;
  };
  this.DaysBetween = function (ANow, AThen) {
    var Result = 0;
    Result = pas.System.Trunc(Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9);
    return Result;
  };
  this.IncDay = function (AValue, ANumberOfDays) {
    var Result = 0.0;
    Result = AValue + ANumberOfDays;
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncHour = function (AValue, ANumberOfHours) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfHours / 24)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfHours / 24);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncMinute = function (AValue, ANumberOfMinutes) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfMinutes / 1440)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfMinutes / 1440);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncSecond = function (AValue, ANumberOfSeconds) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfSeconds / 86400)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfSeconds / 86400);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncMilliSecond = function (AValue, ANumberOfMilliSeconds) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfMilliSeconds / 86400000)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfMilliSeconds / 86400000);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.DecodeDateTime = function (AValue, AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond) {
    pas.SysUtils.DecodeTime(AValue,AHour,AMinute,ASecond,AMilliSecond);
    if (AHour.get() === 24) {
      AHour.set(0);
      pas.SysUtils.DecodeDate(Math.round(AValue),AYear,AMonth,ADay);
    } else pas.SysUtils.DecodeDate(AValue,AYear,AMonth,ADay);
  };
  this.CompareDateTime = function (A, B) {
    var Result = -1;
    if ($mod.SameDateTime(A,B)) {
      Result = 0}
     else if (pas.System.Trunc(A) === pas.System.Trunc(B)) {
      if (Math.abs(pas.System.Frac(A)) > Math.abs(pas.System.Frac(B))) {
        Result = 1}
       else Result = -1;
    } else {
      if (A > B) {
        Result = 1}
       else Result = -1;
    };
    return Result;
  };
  this.SameDateTime = function (A, B) {
    var Result = false;
    Result = Math.abs(A - B) < 1.1574074074074074E-8;
    return Result;
  };
},["JS","RTLConsts"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.TDateTimeEpsilon = 2.2204460493e-16;
  $impl.HalfMilliSecond = 1.1574074074074074E-8 / 2;
  $impl.DOWMap = [7,1,2,3,4,5,6];
  $impl.DateTimeDiff = function (ANow, AThen) {
    var Result = 0.0;
    Result = ANow - AThen;
    if ((ANow > 0) && (AThen < 0)) {
      Result = Result - 0.5}
     else if ((ANow < -1.0) && (AThen > -1.0)) Result = Result + 0.5;
    return Result;
  };
  $impl.MaybeSkipTimeWarp = function (OldDate, NewDate) {
    if ((OldDate >= 0) && (NewDate.get() < -2.2204460493E-16)) {
      NewDate.set(pas.System.Int((NewDate.get() - 1.0) + 2.2204460493E-16) - pas.System.Frac(1.0 + pas.System.Frac(NewDate.get())))}
     else if ((OldDate <= -1.0) && (NewDate.get() > (-1.0 + 2.2204460493E-16))) NewDate.set(pas.System.Int((NewDate.get() + 1.0) - 2.2204460493E-16) + pas.System.Frac(1.0 - Math.abs(pas.System.Frac(1.0 + NewDate.get()))));
  };
  $impl.IncNegativeTime = function (AValue, Addend) {
    var Result = 0.0;
    var newtime = 0.0;
    newtime = -pas.System.Frac(AValue) + pas.System.Frac(Addend);
    if (pas.math.SameValue(newtime,pas.System.Int(newtime) + 1,2.2204460493E-16)) {
      newtime = pas.System.Int(newtime) + 1}
     else if (pas.math.SameValue(newtime,pas.System.Int(newtime),2.2204460493E-16)) newtime = pas.System.Int(newtime);
    if (newtime < -2.2204460493E-16) {
      newtime = 1.0 + newtime;
      AValue = pas.System.Int(AValue) - 1;
    } else if (newtime >= (1.0 - 2.2204460493E-16)) {
      newtime = newtime - 1.0;
      AValue = pas.System.Int(AValue) + 1;
    };
    Result = (pas.System.Int(AValue) + pas.System.Int(Addend)) - newtime;
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCPlannerData",["System","Classes","WEBLib.TMSFNCTypes","WEBLib.TMSFNCPlannerBase","WEBLib.Graphics","WEBLib.TMSFNCGraphicsTypes","SysUtils"],function () {
  "use strict";
  var $mod = this;
  this.TMSFNCPlannerColor = 0xECE4D7;
  this.TMSFNCPlannerFontColor = 0x9F6F11;
  this.TMSFNCPlannerSelectedColor = 0xF8AD1B;
  $mod.$rtti.$Class("TTMSFNCPlannerItem");
  this.TTMSFNCPlannerCacheItemKind = {"0": "ikCell", ikCell: 0, "1": "ikItem", ikItem: 1, "2": "ikPositionTop", ikPositionTop: 2, "3": "ikPositionBottom", ikPositionBottom: 3, "4": "ikGroupTop", ikGroupTop: 4, "5": "ikGroupBottom", ikGroupBottom: 5, "6": "ikTimeLineLeft", ikTimeLineLeft: 6, "7": "ikTimeLineRight", ikTimeLineRight: 7};
  $mod.$rtti.$Enum("TTMSFNCPlannerCacheItemKind",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TTMSFNCPlannerCacheItemKind});
  rtl.createClass($mod,"TTMSFNCPlannerCacheItem",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FBitmap = null;
      this.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      this.FDrawRect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      this.FKind = 0;
      this.FItem = null;
      this.FGroup = 0;
      this.FPosition = 0;
      this.FValue = 0.0;
      this.FStartTime = 0.0;
      this.FEndTime = 0.0;
      this.FRow = 0;
      this.FCol = 0;
      this.FIdx = 0;
      this.FStartPosition = 0;
      this.FEndPosition = 0;
    };
    this.$final = function () {
      this.FBitmap = undefined;
      this.FRect = undefined;
      this.FDrawRect = undefined;
      this.FItem = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.CreateCache = function (ARect, ABitmap, AKind, APosition) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = AKind;
      Result.FPosition = APosition;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      Result.FBitmap = ABitmap;
      return Result;
    };
    this.CreateCell = function (ARect, ACol, ARow, AStartTime, AEndTime, APosition) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikCell;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      Result.FCol = ACol;
      Result.FRow = ARow;
      Result.FStartTime = AStartTime;
      Result.FEndTime = AEndTime;
      Result.FPosition = APosition;
      return Result;
    };
    this.CreateItem = function (ARect, APosition, AItem, AIndex) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikItem;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      Result.FPosition = APosition;
      Result.FIdx = AIndex;
      Result.FItem = AItem;
      return Result;
    };
    this.CreatePositionTop = function (ARect, APosition) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikPositionTop;
      Result.FPosition = APosition;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      return Result;
    };
    this.CreateGroupTop = function (ARect, AGroup, AStartPosition, AEndPosition) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikGroupTop;
      Result.FGroup = AGroup;
      Result.FStartPosition = AStartPosition;
      Result.FEndPosition = AEndPosition;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      return Result;
    };
    this.CreateTimeLineLeft = function (ARect, AValue, ARow) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikTimeLineLeft;
      Result.FValue = AValue;
      Result.FRow = ARow;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      return Result;
    };
    this.CreatePositionBottom = function (ARect, APosition) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikPositionBottom;
      Result.FPosition = APosition;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      return Result;
    };
    this.CreateGroupBottom = function (ARect, AGroup, AStartPosition, AEndPosition) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikGroupBottom;
      Result.FGroup = AGroup;
      Result.FStartPosition = AStartPosition;
      Result.FEndPosition = AEndPosition;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      return Result;
    };
    this.CreateTimeLineRight = function (ARect, AValue, ARow) {
      var Result = null;
      Result = $mod.TTMSFNCPlannerCacheItem.$create("Create");
      Result.FKind = $mod.TTMSFNCPlannerCacheItemKind.ikTimeLineRight;
      Result.FValue = AValue;
      Result.FRow = ARow;
      Result.FRect = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      return Result;
    };
    this.Destroy = function () {
      if (this.FItem != null) this.FItem.FCacheList.Remove(this);
      this.FItem = null;
      if (this.FBitmap != null) rtl.free(this,"FBitmap");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerCacheItemList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerIntegerList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = 0;
      Result = Math.floor(this.Get(Index));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      this.Put(Index,Value);
    };
  });
  this.TTMSFNCPlannerItemLinkType = {"0": "iltFull", iltFull: 0, "1": "iltStartEnd", iltStartEnd: 1, "2": "iltEndStart", iltEndStart: 2, "3": "iltEndEnd", iltEndEnd: 3, "4": "iltStartStart", iltStartStart: 4, "5": "iltNone", iltNone: 5};
  this.TTMSFNCPlannerItemLinkArrow = {"0": "ilaNone", ilaNone: 0, "1": "ilaFromTo", ilaFromTo: 1, "2": "ilaToFrom", ilaToFrom: 2, "3": "ilaBoth", ilaBoth: 3};
  $mod.$rtti.$Enum("TTMSFNCPlannerItemLinkArrow",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCPlannerItemLinkArrow});
  rtl.createClass($mod,"TTMSFNCPlannerItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FCanUpdate = false;
      this.FUpdatingLinkedItem = false;
      this.FBlockUpdate = false;
      this.FCacheList = null;
      this.FUpdateCount$1 = 0;
      this.FTag = 0;
      this.FPlanner = null;
      this.FText = "";
      this.FStartTime = 0.0;
      this.FEndTime = 0.0;
      this.FResource = 0;
      this.FVisible = false;
      this.FConflictsPosList = null;
      this.FConflictsList = null;
      this.FTitle = "";
      this.FEnabled = false;
      this.FEditable = false;
      this.FSelectable = false;
      this.FColor = 0;
      this.FTitleColor = 0;
      this.FDisabledTitleFontColor = 0;
      this.FSelectedTitleColor = 0;
      this.FActiveTitleColor = 0;
      this.FDisabledColor = 0;
      this.FSelectedColor = 0;
      this.FActiveColor = 0;
      this.FTitleFontColor = 0;
      this.FDisabledFontColor = 0;
      this.FDisabledTitleColor = 0;
      this.FSelectedFontColor = 0;
      this.FActiveFontColor = 0;
      this.FFontColor = 0;
      this.FSelectedTitleFontColor = 0;
      this.FActiveTitleFontColor = 0;
      this.FDirtyList = null;
      this.FCleanupList = null;
      this.FHint = "";
      this.FPositionsList = null;
      this.FOldPositionsList = null;
      this.FStartTimeExt = 0.0;
      this.FEndTimeExt = 0.0;
      this.FConflictsExt = 0;
      this.FConflictsPosExt = 0;
      this.FMovable = false;
      this.FSizeable = false;
      this.FFixedResource = false;
      this.FShowTitle = false;
      this.FDBKey = "";
      this.FOverlappable = false;
      this.FCallPosition = 0;
      this.FRecurrency = "";
      this.FRecurrent = false;
      this.FMasterItem = null;
      this.FDeletable = false;
      this.FLinkedItem = null;
      this.FLinkType = 0;
      this.FNewPosition = 0;
      this.FNewStartTime = 0.0;
      this.FNewEndTime = 0.0;
      this.FUpdatingLinked = false;
      this.FLinkArrow = 0;
      this.FSelectedLinkColor = 0;
      this.FLinkColor = 0;
      this.FDisabledFontStyle = {};
      this.FSelectedFontStyle = {};
      this.FActiveFontStyle = {};
      this.FFontStyle = {};
      this.FDisabledTitleFontStyle = {};
      this.FSelectedTitleFontStyle = {};
      this.FActiveTitleFontStyle = {};
      this.FTitleFontStyle = {};
      this.FUseDefaultAppearance = false;
      this.FDisabledFontName = "";
      this.FSelectedFontName = "";
      this.FActiveFontName = "";
      this.FDisabledTitleFontName = "";
      this.FSelectedTitleFontName = "";
      this.FActiveTitleFontName = "";
      this.FTitleFontName = "";
      this.FFontName = "";
      this.FTextVerticalTextAlign = 0;
      this.FTitleHorizontalTextAlign = 0;
      this.FTextHorizontalTextAlign = 0;
      this.FTitleVerticalTextAlign = 0;
      this.FActiveFontSize = 0.0;
      this.FFontSize = 0.0;
      this.FDisabledTitleFontSize = 0.0;
      this.FSelectedTitleFontSize = 0.0;
      this.FActiveTitleFontSize = 0.0;
      this.FTitleFontSize = 0.0;
      this.FDisabledFontSize = 0.0;
      this.FSelectedFontSize = 0.0;
    };
    this.$final = function () {
      this.FCacheList = undefined;
      this.FPlanner = undefined;
      this.FConflictsPosList = undefined;
      this.FConflictsList = undefined;
      this.FDirtyList = undefined;
      this.FCleanupList = undefined;
      this.FPositionsList = undefined;
      this.FOldPositionsList = undefined;
      this.FMasterItem = undefined;
      this.FLinkedItem = undefined;
      this.FDisabledFontStyle = undefined;
      this.FSelectedFontStyle = undefined;
      this.FActiveFontStyle = undefined;
      this.FFontStyle = undefined;
      this.FDisabledTitleFontStyle = undefined;
      this.FSelectedTitleFontStyle = undefined;
      this.FActiveTitleFontStyle = undefined;
      this.FTitleFontStyle = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetEndTime = function (Value) {
      var dst = 0.0;
      var det = 0.0;
      var drs = 0;
      if ((pas.DateUtils.CompareDateTime(this.FEndTime,Value) !== 0) && !this.FUpdatingLinkedItem) {
        this.FUpdatingLinkedItem = true;
        dst = 0;
        det = Value - this.FEndTime;
        drs = 0;
        this.FEndTime = Value;
        if (this.FPlanner != null) this.FPlanner.UpdateLinkedItems(this,dst,det,drs);
        this.UpdateItem(true,true);
        this.FUpdatingLinkedItem = false;
      };
    };
    this.SetStartTime = function (Value) {
      var dst = 0.0;
      var det = 0.0;
      var drs = 0;
      if ((pas.DateUtils.CompareDateTime(this.FStartTime,Value) !== 0) && !this.FUpdatingLinkedItem) {
        this.FUpdatingLinkedItem = true;
        dst = Value - this.FStartTime;
        det = 0;
        drs = 0;
        this.FStartTime = Value;
        if (this.FPlanner != null) this.FPlanner.UpdateLinkedItems(this,dst,det,drs);
        this.UpdateItem(true,true);
        this.FUpdatingLinkedItem = false;
      };
    };
    this.SetResource = function (Value) {
      var dst = 0.0;
      var det = 0.0;
      var drs = 0;
      if ((this.FResource !== Value) && !this.FUpdatingLinkedItem) {
        this.FUpdatingLinkedItem = true;
        dst = 0;
        det = 0;
        drs = Value - this.FResource;
        this.FResource = Value;
        if (this.FPlanner != null) this.FPlanner.UpdateLinkedItems(this,dst,det,drs);
        this.UpdateItem(true,true);
        this.FUpdatingLinkedItem = false;
      };
    };
    this.SetVisible = function (Value) {
      if (this.FVisible !== Value) {
        this.FVisible = Value;
        this.UpdateItem(true,true);
      };
    };
    this.SetTitle = function (Value) {
      if (this.FTitle !== Value) {
        this.FTitle = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetEditable = function (Value) {
      if (this.FEditable !== Value) this.FEditable = Value;
    };
    this.SetEnabled = function (Value) {
      if (this.FEnabled !== Value) {
        this.FEnabled = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectable = function (Value) {
      if (this.FSelectable !== Value) this.FSelectable = Value;
    };
    this.SetColor = function (Value) {
      if (this.FColor !== Value) {
        this.FColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTitleColor = function (Value) {
      if (this.FTitleColor !== Value) {
        this.FTitleColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledColor = function (Value) {
      if (this.FDisabledColor !== Value) {
        this.FDisabledColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledFontColor = function (Value) {
      if (this.FDisabledFontColor !== Value) {
        this.FDisabledFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledTitleColor = function (Value) {
      if (this.FDisabledTitleColor !== Value) {
        this.FDisabledTitleColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledTitleFontColor = function (Value) {
      if (this.FDisabledTitleFontColor !== Value) {
        this.FDisabledTitleFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetFontColor = function (Value) {
      if (this.FFontColor !== Value) {
        this.FFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedColor = function (Value) {
      if (this.FSelectedColor !== Value) {
        this.FSelectedColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedFontColor = function (Value) {
      if (this.FSelectedFontColor !== Value) {
        this.FSelectedFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedTitleColor = function (Value) {
      if (this.FSelectedTitleColor !== Value) {
        this.FSelectedTitleColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedTitleFontColor = function (Value) {
      if (this.FSelectedTitleFontColor !== Value) {
        this.FSelectedTitleFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveColor = function (Value) {
      if (this.FActiveColor !== Value) {
        this.FActiveColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveFontColor = function (Value) {
      if (this.FActiveFontColor !== Value) {
        this.FActiveFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveTitleColor = function (Value) {
      if (this.FActiveTitleColor !== Value) {
        this.FActiveTitleColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveTitleFontColor = function (Value) {
      if (this.FActiveTitleFontColor !== Value) {
        this.FActiveTitleFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTitleFontColor = function (Value) {
      if (this.FTitleFontColor !== Value) {
        this.FTitleFontColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetHint = function (Value) {
      if (this.FHint !== Value) this.FHint = Value;
    };
    this.SetMovable = function (Value) {
      if (this.FMovable !== Value) {
        this.FMovable = Value;
      };
    };
    this.SetSizeable = function (Value) {
      if (this.FSizeable !== Value) {
        this.FSizeable = Value;
      };
    };
    this.SetFixedResource = function (Value) {
      if (this.FFixedResource !== Value) {
        this.FFixedResource = Value;
      };
    };
    this.SetShowTitle = function (Value) {
      if (this.FShowTitle !== Value) {
        this.FShowTitle = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetOverlappable = function (Value) {
      if (this.FOverlappable !== Value) this.FOverlappable = Value;
    };
    this.SetDeletable = function (Value) {
      if (this.FDeletable !== Value) {
        this.FDeletable = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetLinkedItem = function (Value) {
      if (this.FLinkedItem !== Value) this.FLinkedItem = Value;
    };
    this.SetLinkArrow = function (Value) {
      if (this.FLinkArrow !== Value) {
        this.FLinkArrow = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetLinkColor = function (Value) {
      if (this.FLinkColor !== Value) {
        this.FLinkColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedLinkColor = function (Value) {
      if (this.FSelectedLinkColor !== Value) {
        this.FSelectedLinkColor = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveFontStyle = function (Value) {
      if (rtl.neSet(this.FActiveFontStyle,Value)) {
        this.FActiveFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveTitleFontStyle = function (Value) {
      if (rtl.neSet(this.FActiveTitleFontStyle,Value)) {
        this.FActiveTitleFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledFontStyle = function (Value) {
      if (rtl.neSet(this.FDisabledFontStyle,Value)) {
        this.FDisabledFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledTitleFontStyle = function (Value) {
      if (rtl.neSet(this.FDisabledTitleFontStyle,Value)) {
        this.FDisabledTitleFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetFontStyle = function (Value) {
      if (rtl.neSet(this.FFontStyle,Value)) {
        this.FFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedFontStyle = function (Value) {
      if (rtl.neSet(this.FSelectedFontStyle,Value)) {
        this.FSelectedFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedTitleFontStyle = function (Value) {
      if (rtl.neSet(this.FSelectedTitleFontStyle,Value)) {
        this.FSelectedTitleFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetTitleFontStyle = function (Value) {
      if (rtl.neSet(this.FTitleFontStyle,Value)) {
        this.FTitleFontStyle = rtl.refSet(Value);
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveFontName = function (Value) {
      if (this.FActiveFontName !== Value) {
        this.FActiveFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveTitleFontName = function (Value) {
      if (this.FActiveTitleFontName !== Value) {
        this.FActiveTitleFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledFontName = function (Value) {
      if (this.FDisabledFontName !== Value) {
        this.FDisabledFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledTitleFontName = function (Value) {
      if (this.FDisabledTitleFontName !== Value) {
        this.FDisabledTitleFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedFontName = function (Value) {
      if (this.FSelectedFontName !== Value) {
        this.FSelectedFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedTitleFontName = function (Value) {
      if (this.FSelectedTitleFontName !== Value) {
        this.FSelectedTitleFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTitleFontName = function (Value) {
      if (this.FTitleFontName !== Value) {
        this.FTitleFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetUseDefaultAppearance = function (Value) {
      if (this.FUseDefaultAppearance !== Value) {
        this.FUseDefaultAppearance = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetFontName = function (Value) {
      if (this.FFontName !== Value) {
        this.FFontName = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTextHorizontalTextAlign = function (Value) {
      if (this.FTextHorizontalTextAlign !== Value) {
        this.FTextHorizontalTextAlign = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTextVerticalTextAlign = function (Value) {
      if (this.FTextVerticalTextAlign !== Value) {
        this.FTextVerticalTextAlign = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTitleHorizontalTextAlign = function (Value) {
      if (this.FTitleHorizontalTextAlign !== Value) {
        this.FTitleHorizontalTextAlign = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTitleVerticalTextAlign = function (Value) {
      if (this.FTitleVerticalTextAlign !== Value) {
        this.FTitleVerticalTextAlign = Value;
        this.UpdateItem(false,true);
      };
    };
    this.IsActiveFontSizeStored = function () {
      var Result = false;
      Result = this.FActiveFontSize !== -1;
      return Result;
    };
    this.IsActiveTitleFontSizeStored = function () {
      var Result = false;
      Result = this.FActiveTitleFontSize !== -1;
      return Result;
    };
    this.IsDisabledFontSizeStored = function () {
      var Result = false;
      Result = this.FDisabledFontSize !== -1;
      return Result;
    };
    this.IsDisabledTitleFontSizeStored = function () {
      var Result = false;
      Result = this.FDisabledTitleFontSize !== -1;
      return Result;
    };
    this.IsFontSizeStored = function () {
      var Result = false;
      Result = this.FFontSize !== -1;
      return Result;
    };
    this.IsSelectedFontSizeStored = function () {
      var Result = false;
      Result = this.FSelectedFontSize !== -1;
      return Result;
    };
    this.IsSelectedTitleFontSizeStored = function () {
      var Result = false;
      Result = this.FSelectedTitleFontSize !== -1;
      return Result;
    };
    this.IsTitleFontSizeStored = function () {
      var Result = false;
      Result = this.FTitleFontSize !== -1;
      return Result;
    };
    this.SetActiveFontSize = function (Value) {
      if (this.FActiveFontSize !== Value) {
        this.FActiveFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetActiveTitleFontSize = function (Value) {
      if (this.FActiveTitleFontSize !== Value) {
        this.FActiveTitleFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledFontSize = function (Value) {
      if (this.FDisabledFontSize !== Value) {
        this.FDisabledFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetDisabledTitleFontSize = function (Value) {
      if (this.FDisabledTitleFontSize !== Value) {
        this.FDisabledTitleFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetFontSize = function (Value) {
      if (this.FFontSize !== Value) {
        this.FFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedFontSize = function (Value) {
      if (this.FSelectedFontSize !== Value) {
        this.FSelectedFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetSelectedTitleFontSize = function (Value) {
      if (this.FSelectedTitleFontSize !== Value) {
        this.FSelectedTitleFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.SetTitleFontSize = function (Value) {
      if (this.FTitleFontSize !== Value) {
        this.FTitleFontSize = Value;
        this.UpdateItem(false,true);
      };
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) {
        this.FPlanner = rtl.as(this.FCollection,$mod.TTMSFNCPlannerItems).Planner();
        this.FTitle = "Item " + pas.SysUtils.IntToStr(this.FPlanner.FItems.GetCount() - 1);
      };
      this.FOldPositionsList = $mod.TTMSFNCPlannerIntegerList.$create("Create$1");
      this.FPositionsList = $mod.TTMSFNCPlannerIntegerList.$create("Create$1");
      this.FDirtyList = $mod.TTMSFNCPlannerIntegerList.$create("Create$1");
      this.FCleanupList = $mod.TTMSFNCPlannerIntegerList.$create("Create$1");
      this.FConflictsPosList = $mod.TTMSFNCPlannerIntegerList.$create("Create$1");
      this.FConflictsList = $mod.TTMSFNCPlannerIntegerList.$create("Create$1");
      this.FCacheList = $mod.TTMSFNCPlannerCacheItemList.$create("Create$1");
      this.FResource = 0;
      this.FOverlappable = true;
      this.FShowTitle = true;
      this.FVisible = true;
      this.FSelectable = true;
      this.FDeletable = true;
      this.FMovable = true;
      this.FSizeable = true;
      this.FFixedResource = false;
      this.FLinkColor = 11119017;
      this.FSelectedLinkColor = 16297243;
      this.FLinkArrow = $mod.TTMSFNCPlannerItemLinkArrow.ilaNone;
      this.FLinkType = $mod.TTMSFNCPlannerItemLinkType.iltNone;
      this.FColor = 15525079;
      this.FFontColor = 10448657;
      this.FTitleColor = -1;
      this.FTitleFontColor = 10448657;
      this.FSelectedColor = 16297243;
      this.FSelectedFontColor = 16777215;
      this.FSelectedTitleColor = -1;
      this.FSelectedTitleFontColor = 16777215;
      this.FActiveColor = 16297243;
      this.FActiveFontColor = 16777215;
      this.FActiveTitleColor = -1;
      this.FActiveTitleFontColor = 16777215;
      this.FDisabledColor = 11119017;
      this.FDisabledFontColor = 16119285;
      this.FDisabledTitleColor = -1;
      this.FDisabledTitleFontColor = 16119285;
      this.FStartTime = pas.System.Int(pas.SysUtils.Now()) + pas.SysUtils.EncodeTime(6,30,0,0);
      this.FEndTime = this.FStartTime + pas.SysUtils.EncodeTime(2,30,0,0);
      this.FFontStyle = {};
      this.FActiveFontStyle = {};
      this.FDisabledFontStyle = {};
      this.FSelectedFontStyle = {};
      this.FTitleFontStyle = rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold);
      this.FActiveTitleFontStyle = rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold);
      this.FDisabledTitleFontStyle = rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold);
      this.FSelectedTitleFontStyle = rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold);
      this.FUseDefaultAppearance = false;
      this.FFontName = "";
      this.FActiveFontName = "";
      this.FDisabledFontName = "";
      this.FSelectedFontName = "";
      this.FTitleFontName = "";
      this.FActiveTitleFontName = "";
      this.FDisabledTitleFontName = "";
      this.FSelectedTitleFontName = "";
      this.FFontSize = -1;
      this.FActiveFontSize = -1;
      this.FDisabledFontSize = -1;
      this.FSelectedFontSize = -1;
      this.FTitleFontSize = -1;
      this.FActiveTitleFontSize = -1;
      this.FDisabledTitleFontSize = -1;
      this.FSelectedTitleFontSize = -1;
      this.FEditable = true;
      this.FEnabled = true;
      this.FTitleVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FTitleHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FTextHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FTextVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      if (this.FPlanner != null) this.Assign(this.FPlanner.GetDefaultItem());
      this.UpdateItem(true,true);
    };
    this.Destroy = function () {
      if ((this.FPlanner != null) && (this.FPlanner.GetActiveItem() === this)) this.FPlanner.UpdateActiveItem(null);
      if (((this.FCacheList != null) && (this.FPlanner != null)) && !(pas.Classes.TComponentStateItem.csDestroying in this.Planner().FComponentState)) this.FPlanner.RemoveItemsFromCache(this.FCacheList,-1);
      if (this.FPlanner != null) this.FPlanner.NeedsConflictsUpdate(this);
      if (this.FPlanner != null) this.FPlanner.RemoveLinkedItem(this);
      this.FMasterItem = null;
      this.FLinkedItem = null;
      rtl.free(this,"FConflictsPosList");
      rtl.free(this,"FConflictsList");
      rtl.free(this,"FOldPositionsList");
      rtl.free(this,"FPositionsList");
      rtl.free(this,"FDirtyList");
      rtl.free(this,"FCleanupList");
      rtl.free(this,"FCacheList");
      pas.Classes.TCollectionItem.Destroy.apply(this,arguments);
      this.UpdateItem(true,true);
      this.FPlanner = null;
    };
    this.DirtyItem = function () {
      if (this.FPlanner != null) this.FPlanner.DirtyItem(this);
    };
    this.UpdateItem = function (ANeedsConflictsUpdate, ADirty) {
      var c = null;
      if (this.FBlockUpdate || ((this.FPlanner != null) && (pas.Classes.TComponentStateItem.csDestroying in this.FPlanner.FComponentState))) return;
      c = this.Planner();
      if (c != null) {
        if (this.FCollection != null) {
          if (ADirty) this.DirtyItem();
          if (ANeedsConflictsUpdate) c.NeedsConflictsUpdate(this);
        };
        if ((this.FUpdateCount$1 > 0) || ((this.FPlanner != null) && (this.FPlanner.GetUpdateCount() > 0))) return;
        c.UpdateConflicts();
        c.UpdateItemsCache();
        c.Invalidate();
      };
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerItem.isPrototypeOf(Source)) {
        this.FBlockUpdate = true;
        this.FRecurrency = rtl.as(Source,$mod.TTMSFNCPlannerItem).FRecurrency;
        this.FRecurrent = rtl.as(Source,$mod.TTMSFNCPlannerItem).FRecurrent;
        this.FOverlappable = rtl.as(Source,$mod.TTMSFNCPlannerItem).FOverlappable;
        this.FLinkArrow = rtl.as(Source,$mod.TTMSFNCPlannerItem).FLinkArrow;
        this.FLinkColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FLinkColor;
        this.FSelectedLinkColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedLinkColor;
        this.FTag = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTag;
        this.FText = rtl.as(Source,$mod.TTMSFNCPlannerItem).FText;
        this.FStartTime = rtl.as(Source,$mod.TTMSFNCPlannerItem).FStartTime;
        this.FEndTime = rtl.as(Source,$mod.TTMSFNCPlannerItem).FEndTime;
        this.FResource = rtl.as(Source,$mod.TTMSFNCPlannerItem).FResource;
        this.FTitle = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitle;
        this.FVisible = rtl.as(Source,$mod.TTMSFNCPlannerItem).FVisible;
        this.FEditable = rtl.as(Source,$mod.TTMSFNCPlannerItem).FEditable;
        this.FShowTitle = rtl.as(Source,$mod.TTMSFNCPlannerItem).FShowTitle;
        this.FEnabled = rtl.as(Source,$mod.TTMSFNCPlannerItem).FEnabled;
        this.FSelectable = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectable;
        this.FDeletable = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDeletable;
        this.FSizeable = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSizeable;
        this.FMovable = rtl.as(Source,$mod.TTMSFNCPlannerItem).FMovable;
        this.FFixedResource = rtl.as(Source,$mod.TTMSFNCPlannerItem).FFixedResource;
        this.FColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FColor;
        this.FFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FFontColor;
        this.FFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FFontStyle);
        this.FFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FFontName;
        this.FFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FFontSize;
        this.FTitleColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitleColor;
        this.FTitleFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitleFontColor;
        this.FTitleFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitleFontStyle);
        this.FTitleFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitleFontName;
        this.FTitleFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitleFontSize;
        this.FSelectedColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedColor;
        this.FSelectedFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedFontColor;
        this.FSelectedFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedFontName;
        this.FSelectedFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedFontSize;
        this.FSelectedFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedFontStyle);
        this.FSelectedTitleColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedTitleColor;
        this.FSelectedTitleFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedTitleFontColor;
        this.FSelectedTitleFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedTitleFontStyle);
        this.FSelectedTitleFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedTitleFontName;
        this.FSelectedTitleFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FSelectedTitleFontSize;
        this.FActiveColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveColor;
        this.FActiveFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveFontColor;
        this.FActiveTitleColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveTitleColor;
        this.FActiveTitleFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveTitleFontColor;
        this.FActiveFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveFontStyle);
        this.FActiveFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveFontName;
        this.FActiveFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveFontSize;
        this.FActiveTitleFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveTitleFontStyle);
        this.FActiveTitleFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveTitleFontName;
        this.FActiveTitleFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FActiveTitleFontSize;
        this.FDisabledColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledColor;
        this.FDisabledFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledFontColor;
        this.FDisabledTitleColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledTitleColor;
        this.FDisabledTitleFontColor = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledTitleFontColor;
        this.FDisabledFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledFontName;
        this.FDisabledFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledFontSize;
        this.FDisabledFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledFontStyle);
        this.FDisabledTitleFontName = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledTitleFontName;
        this.FDisabledTitleFontStyle = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledTitleFontStyle);
        this.FDisabledTitleFontSize = rtl.as(Source,$mod.TTMSFNCPlannerItem).FDisabledTitleFontSize;
        this.FUseDefaultAppearance = rtl.as(Source,$mod.TTMSFNCPlannerItem).FUseDefaultAppearance;
        this.FTextVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTextVerticalTextAlign;
        this.FTextHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTextHorizontalTextAlign;
        this.FTitleVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitleVerticalTextAlign;
        this.FTitleHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItem).FTitleHorizontalTextAlign;
        this.FHint = rtl.as(Source,$mod.TTMSFNCPlannerItem).FHint;
        this.FBlockUpdate = false;
      };
    };
    this.BeginUpdate = function () {
      this.FUpdateCount$1 += 1;
    };
    this.EndUpdate = function (ADirty, AUpdate) {
      this.FUpdateCount$1 -= 1;
      if ((this.FUpdateCount$1 === 0) && AUpdate) this.UpdateItem(false,ADirty);
    };
    this.Planner = function () {
      var Result = null;
      Result = this.FPlanner;
      return Result;
    };
    this.GetFirstRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].EmptyRect());
      if (this.FCacheList.GetCount() > 0) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.FCacheList.GetItem(this.FCacheList.GetCount() - 1).FDrawRect);
      return Result;
    };
    this.GetLastRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].EmptyRect());
      if (this.FCacheList.GetCount() > 0) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.FCacheList.GetItem(0).FDrawRect);
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("Title",2,rtl.string,"FTitle","SetTitle");
    $r.addProperty("Resource",2,rtl.longint,"FResource","SetResource",{Default: 0});
    $r.addProperty("StartTime",2,pas.System.$rtti["TDateTime"],"FStartTime","SetStartTime");
    $r.addProperty("EndTime",2,pas.System.$rtti["TDateTime"],"FEndTime","SetEndTime");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Editable",2,rtl.boolean,"FEditable","SetEditable",{Default: true});
    $r.addProperty("Selectable",2,rtl.boolean,"FSelectable","SetSelectable",{Default: true});
    $r.addProperty("Deletable",2,rtl.boolean,"FDeletable","SetDeletable",{Default: true});
    $r.addProperty("FixedResource",2,rtl.boolean,"FFixedResource","SetFixedResource",{Default: false});
    $r.addProperty("ShowTitle",2,rtl.boolean,"FShowTitle","SetShowTitle",{Default: true});
    $r.addProperty("Movable",2,rtl.boolean,"FMovable","SetMovable",{Default: true});
    $r.addProperty("Sizeable",2,rtl.boolean,"FSizeable","SetSizeable",{Default: true});
    $r.addProperty("Color",2,rtl.longint,"FColor","SetColor",{Default: 15525079});
    $r.addProperty("TitleColor",2,rtl.longint,"FTitleColor","SetTitleColor",{Default: -1});
    $r.addProperty("SelectedColor",2,rtl.longint,"FSelectedColor","SetSelectedColor",{Default: 16297243});
    $r.addProperty("SelectedTitleColor",2,rtl.longint,"FSelectedTitleColor","SetSelectedTitleColor",{Default: -1});
    $r.addProperty("ActiveColor",2,rtl.longint,"FActiveColor","SetActiveColor",{Default: 16297243});
    $r.addProperty("ActiveTitleColor",2,rtl.longint,"FActiveTitleColor","SetActiveTitleColor",{Default: -1});
    $r.addProperty("DisabledColor",2,rtl.longint,"FDisabledColor","SetDisabledColor",{Default: 11119017});
    $r.addProperty("DisabledTitleColor",2,rtl.longint,"FDisabledTitleColor","SetDisabledTitleColor",{Default: -1});
    $r.addProperty("FontColor",2,rtl.longint,"FFontColor","SetFontColor",{Default: 10448657});
    $r.addProperty("TitleFontColor",2,rtl.longint,"FTitleFontColor","SetTitleFontColor",{Default: 10448657});
    $r.addProperty("SelectedFontColor",2,rtl.longint,"FSelectedFontColor","SetSelectedFontColor",{Default: 16777215});
    $r.addProperty("SelectedTitleFontColor",2,rtl.longint,"FSelectedTitleFontColor","SetSelectedTitleFontColor",{Default: 16777215});
    $r.addProperty("ActiveFontColor",2,rtl.longint,"FActiveFontColor","SetActiveFontColor",{Default: 16777215});
    $r.addProperty("ActiveTitleFontColor",2,rtl.longint,"FActiveTitleFontColor","SetActiveTitleFontColor",{Default: 16777215});
    $r.addProperty("DisabledFontColor",2,rtl.longint,"FDisabledFontColor","SetDisabledFontColor",{Default: 16119285});
    $r.addProperty("DisabledTitleFontColor",2,rtl.longint,"FDisabledTitleFontColor","SetDisabledTitleFontColor",{Default: 16119285});
    $r.addProperty("FontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FFontStyle","SetFontStyle",{Default: {}});
    $r.addProperty("TitleFontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FTitleFontStyle","SetTitleFontStyle",{Default: rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)});
    $r.addProperty("SelectedFontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FSelectedFontStyle","SetSelectedFontStyle",{Default: {}});
    $r.addProperty("SelectedTitleFontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FSelectedTitleFontStyle","SetSelectedTitleFontStyle",{Default: rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)});
    $r.addProperty("ActiveFontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FActiveFontStyle","SetActiveFontStyle",{Default: {}});
    $r.addProperty("ActiveTitleFontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FActiveTitleFontStyle","SetActiveTitleFontStyle",{Default: rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)});
    $r.addProperty("DisabledFontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FDisabledFontStyle","SetDisabledFontStyle",{Default: {}});
    $r.addProperty("DisabledTitleFontStyle",2,pas["WEBLib.Graphics"].$rtti["TFontStyles"],"FDisabledTitleFontStyle","SetDisabledTitleFontStyle",{Default: rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)});
    $r.addProperty("FontName",2,rtl.string,"FFontName","SetFontName");
    $r.addProperty("TitleFontName",2,rtl.string,"FTitleFontName","SetTitleFontName");
    $r.addProperty("SelectedFontName",2,rtl.string,"FSelectedFontName","SetSelectedFontName");
    $r.addProperty("SelectedTitleFontName",2,rtl.string,"FSelectedTitleFontName","SetSelectedTitleFontName");
    $r.addProperty("ActiveFontName",2,rtl.string,"FActiveFontName","SetActiveFontName");
    $r.addProperty("ActiveTitleFontName",2,rtl.string,"FActiveTitleFontName","SetActiveTitleFontName");
    $r.addProperty("DisabledFontName",2,rtl.string,"FDisabledFontName","SetDisabledFontName");
    $r.addProperty("DisabledTitleFontName",2,rtl.string,"FDisabledTitleFontName","SetDisabledTitleFontName");
    $r.addProperty("FontSize",14,rtl.double,"FFontSize","SetFontSize",{stored: "IsFontSizeStored"});
    $r.addProperty("TitleFontSize",14,rtl.double,"FTitleFontSize","SetTitleFontSize",{stored: "IsTitleFontSizeStored"});
    $r.addProperty("SelectedFontSize",14,rtl.double,"FSelectedFontSize","SetSelectedFontSize",{stored: "IsSelectedFontSizeStored"});
    $r.addProperty("SelectedTitleFontSize",14,rtl.double,"FSelectedTitleFontSize","SetSelectedTitleFontSize",{stored: "IsSelectedTitleFontSizeStored"});
    $r.addProperty("ActiveFontSize",14,rtl.double,"FActiveFontSize","SetActiveFontSize",{stored: "IsActiveFontSizeStored"});
    $r.addProperty("ActiveTitleFontSize",14,rtl.double,"FActiveTitleFontSize","SetActiveTitleFontSize",{stored: "IsActiveTitleFontSizeStored"});
    $r.addProperty("DisabledFontSize",14,rtl.double,"FDisabledFontSize","SetDisabledFontSize",{stored: "IsDisabledFontSizeStored"});
    $r.addProperty("DisabledTitleFontSize",14,rtl.double,"FDisabledTitleFontSize","SetDisabledTitleFontSize",{stored: "IsDisabledTitleFontSizeStored"});
    $r.addProperty("UseDefaultAppearance",2,rtl.boolean,"FUseDefaultAppearance","SetUseDefaultAppearance",{Default: false});
    $r.addProperty("LinkColor",2,rtl.longint,"FLinkColor","SetLinkColor",{Default: 11119017});
    $r.addProperty("SelectedLinkColor",2,rtl.longint,"FSelectedLinkColor","SetSelectedLinkColor",{Default: 16297243});
    $r.addProperty("LinkArrow",2,$mod.$rtti["TTMSFNCPlannerItemLinkArrow"],"FLinkArrow","SetLinkArrow",{Default: $mod.TTMSFNCPlannerItemLinkArrow.ilaNone});
    $r.addProperty("TitleHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTitleHorizontalTextAlign","SetTitleHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("TitleVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTitleVerticalTextAlign","SetTitleVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("TextHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTextHorizontalTextAlign","SetTextHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("TextVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTextVerticalTextAlign","SetTextVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("Overlappable",2,rtl.boolean,"FOverlappable","SetOverlappable",{Default: true});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag",{Default: 0});
  });
  rtl.createClass($mod,"TTMSFNCPlannerItems",pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$init.call(this);
      this.FPlanner = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.GetItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCPlannerItem;
      return Result;
    };
    this.Clear$1 = function () {
      var p = null;
      p = this.Planner();
      if ((p != null) && !(pas.Classes.TComponentStateItem.csDestroying in p.FComponentState)) p.RemoveAllItemsFromCache();
      pas.Classes.TCollection.Clear.call(this);
    };
    this.Planner = function () {
      var Result = null;
      Result = this.FPlanner;
      return Result;
    };
    this.Create$3 = function (APlanner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,APlanner,this.GetItemClass());
      this.FPlanner = APlanner;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
  });
  this.TTMSFNCPlannerResourceDate = function (s) {
    if (s) {
      this.DateTime = s.DateTime;
      this.X = s.X;
      this.Y = s.Y;
      this.Z = s.Z;
    } else {
      this.DateTime = 0.0;
      this.X = 0;
      this.Y = 0;
      this.Z = [];
    };
    this.$equal = function (b) {
      return (this.DateTime === b.DateTime) && ((this.X === b.X) && ((this.Y === b.Y) && (this.Z === b.Z)));
    };
  };
  rtl.createClass($mod,"TTMSFNCPlannerResourceItems",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerResourceDates",pas.Classes.TList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerResource",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FTag = 0;
      this.FPlanner = null;
      this.FText = "";
      this.FName = "";
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.UpdateResource();
      };
    };
    this.SetName = function (Value) {
      if (this.FName !== Value) {
        this.FName = Value;
      };
    };
    this.UpdateResource = function () {
      var c = null;
      c = this.Planner();
      if (c != null) c.UpdatePlannerCache(true);
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FText;
      if (Result === "") {
        Result = this.FName;
        if (Result === "") Result = ($mod.TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlannerData"],"sTMSFNCPlannerResource")) + " ") + pas.SysUtils.IntToStr(this.GetIndex());
      };
      return Result;
    };
    this.GetResourceText = function () {
      var Result = "";
      Result = this.FText;
      if ((((Result === "") || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<\/",Result) > 0)) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("\/>",Result) > 0)) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<BR>",pas.SysUtils.UpperCase(Result)) > 0)) {
        Result = this.FName;
        if (Result === "") Result = ($mod.TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlannerData"],"sTMSFNCPlannerResource")) + " ") + pas.SysUtils.IntToStr(this.GetIndex());
      };
      return Result;
    };
    this.Planner = function () {
      var Result = null;
      Result = this.FPlanner;
      return Result;
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) this.FPlanner = rtl.as(this.FCollection,$mod.TTMSFNCPlannerResources).Planner();
      if (this.FPlanner != null) this.FText = ($mod.TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlannerData"],"sTMSFNCPlannerResource")) + " ") + pas.SysUtils.IntToStr(this.FPlanner.FResources.GetCount() - 1);
      this.FName = pas.SysUtils.StringReplace(this.FText," ","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      this.UpdateResource();
    };
    this.Destroy = function () {
      pas.Classes.TCollectionItem.Destroy.apply(this,arguments);
      this.UpdateResource();
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerResource.isPrototypeOf(Source)) {
        this.FTag = rtl.as(Source,$mod.TTMSFNCPlannerResource).FTag;
        this.FText = rtl.as(Source,$mod.TTMSFNCPlannerResource).FText;
        this.FName = rtl.as(Source,$mod.TTMSFNCPlannerResource).FName;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Name",2,rtl.string,"FName","SetName");
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag",{Default: 0});
  });
  rtl.createClass($mod,"TTMSFNCPlannerResources",pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$init.call(this);
      this.FPlanner = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.GetItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCPlannerResource;
      return Result;
    };
    this.Planner = function () {
      var Result = null;
      Result = this.FPlanner;
      return Result;
    };
    this.Create$3 = function (APlanner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,APlanner,this.GetItemClass());
      this.FPlanner = APlanner;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroup",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FTag = 0;
      this.FPlanner = null;
      this.FText = "";
      this.FStartPosition = 0;
      this.FEndPosition = 0;
      this.FName = "";
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.UpdateGroup();
      };
    };
    this.SetStartPosition = function (Value) {
      if (this.FStartPosition !== Value) {
        this.FStartPosition = Value;
        this.UpdateGroup();
      };
    };
    this.SetEndPosition = function (Value) {
      if (this.FEndPosition !== Value) {
        this.FEndPosition = Value;
        this.UpdateGroup();
      };
    };
    this.SetName = function (Value) {
      if (this.FName !== Value) {
        this.FName = Value;
      };
    };
    this.UpdateGroup = function () {
      var c = null;
      c = this.Planner();
      if (c != null) c.UpdatePlannerCache(true);
    };
    this.Planner = function () {
      var Result = null;
      Result = this.FPlanner;
      return Result;
    };
    this.Create$1 = function (ACollection) {
      var grp = null;
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) this.FPlanner = rtl.as(this.FCollection,$mod.TTMSFNCPlannerGroups).Planner();
      this.FText = ($mod.TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlannerData"],"sTMSFNCPlannerGroup")) + " ") + pas.SysUtils.IntToStr(this.FPlanner.FGroups.GetCount() - 1);
      if (this.FPlanner.FGroups.GetCount() < 2) {
        this.FStartPosition = 0;
        this.FEndPosition = 0;
      } else {
        grp = this.FPlanner.FGroups.GetItem$1(this.FPlanner.FGroups.GetCount() - 2);
        this.FStartPosition = grp.FStartPosition + 1;
        this.FEndPosition = this.FStartPosition;
      };
      this.UpdateGroup();
    };
    this.Destroy = function () {
      pas.Classes.TCollectionItem.Destroy.apply(this,arguments);
      this.UpdateGroup();
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerGroup.isPrototypeOf(Source)) {
        this.FTag = rtl.as(Source,$mod.TTMSFNCPlannerGroup).FTag;
        this.FText = rtl.as(Source,$mod.TTMSFNCPlannerGroup).FText;
        this.FStartPosition = rtl.as(Source,$mod.TTMSFNCPlannerGroup).FStartPosition;
        this.FEndPosition = rtl.as(Source,$mod.TTMSFNCPlannerGroup).FEndPosition;
      };
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FText;
      if (Result === "") {
        Result = this.FName;
        if (Result === "") Result = ($mod.TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlannerData"],"sTMSFNCPlannerGroup")) + " ") + pas.SysUtils.IntToStr(this.GetIndex());
      };
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Name",2,rtl.string,"FName","SetName");
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("StartPosition",2,rtl.longint,"FStartPosition","SetStartPosition",{Default: 0});
    $r.addProperty("EndPosition",2,rtl.longint,"FEndPosition","SetEndPosition",{Default: 0});
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag",{Default: 0});
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroups",pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$init.call(this);
      this.FPlanner = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.GetItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCPlannerGroup;
      return Result;
    };
    this.Planner = function () {
      var Result = null;
      Result = this.FPlanner;
      return Result;
    };
    this.Create$3 = function (APlanner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,APlanner,this.GetItemClass());
      this.FPlanner = APlanner;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerData",pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.$init.call(this);
      this.FItems = null;
      this.FResources = null;
      this.FGroups = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      this.FResources = undefined;
      this.FGroups = undefined;
      pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.$final.call(this);
    };
    this.SetItems = function (Value) {
      this.FItems.Assign(Value);
    };
    this.SetResources = function (Value) {
      this.FResources.Assign(Value);
    };
    this.SetGroups = function (Value) {
      this.FGroups.Assign(Value);
    };
    this.DirtyItems = function () {
      var I = 0;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FItems.GetItem$1(I).DirtyItem();
      };
    };
    this.CreateItems = function () {
      var Result = null;
      Result = $mod.TTMSFNCPlannerItems.$create("Create$3",[this]);
      return Result;
    };
    this.CreateResources = function () {
      var Result = null;
      Result = $mod.TTMSFNCPlannerResources.$create("Create$3",[this]);
      return Result;
    };
    this.CreateGroups = function () {
      var Result = null;
      Result = $mod.TTMSFNCPlannerGroups.$create("Create$3",[this]);
      return Result;
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.Assign.apply(this,arguments);
      if ($mod.TTMSFNCPlannerData.isPrototypeOf(Source)) {
        this.FItems.Assign(rtl.as(Source,$mod.TTMSFNCPlannerData).FItems);
        this.FResources.Assign(rtl.as(Source,$mod.TTMSFNCPlannerData).FResources);
        this.FGroups.Assign(rtl.as(Source,$mod.TTMSFNCPlannerData).FGroups);
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.Create$1.apply(this,arguments);
      this.FItems = this.CreateItems();
      this.FResources = this.CreateResources();
      this.FGroups = this.CreateGroups();
    };
    this.Destroy = function () {
      rtl.free(this,"FGroups");
      rtl.free(this,"FResources");
      rtl.free(this,"FItems");
      pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.Destroy.apply(this,arguments);
    };
  });
  this.TranslateTextEx = function (AText) {
    var Result = "";
    Result = AText;
    return Result;
  };
  $mod.$resourcestrings = {sTMSFNCPlannerGroup: {org: "Group"}, sTMSFNCPlannerResource: {org: "Resource"}};
},["DateUtils"]);
rtl.module("WEBLib.TMSFNCImage",["System","Classes","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCBitmapContainer","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCGraphicsTypes"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  rtl.createClass($mod,"TTMSFNCCustomImage",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FBitmap = null;
      this.FBitmapContainer = null;
      this.FStretch = false;
      this.FBitmaps = null;
      this.FCropping = false;
      this.FCenter = false;
      this.FAutoSize = false;
      this.FAspectRatio = false;
      this.FOnBitmapChanged = null;
    };
    this.$final = function () {
      this.FBitmap = undefined;
      this.FBitmapContainer = undefined;
      this.FBitmaps = undefined;
      this.FOnBitmapChanged = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetBitmapContainer = function (Value) {
      this.FBitmapContainer = Value;
      this.ApplyAutoSize();
      this.Invalidate();
    };
    this.SetStretch = function (Value) {
      this.FStretch = Value;
      this.Invalidate();
    };
    this.SetBitmaps = function (Value) {
      this.FBitmaps.Assign(Value);
      this.Invalidate();
    };
    this.SetCropping = function (Value) {
      this.FCropping = Value;
      this.Invalidate();
    };
    this.SetCenter = function (Value) {
      this.FCenter = Value;
      this.Invalidate();
    };
    this.SetAS = function (Value) {
      this.FAutoSize = Value;
      this.ApplyAutoSize();
      this.Invalidate();
    };
    this.SetAspectRatio = function (Value) {
      this.FAspectRatio = Value;
      this.Invalidate();
    };
    this.SetBitmap = function (Value) {
      this.FBitmap.Assign(Value);
      this.Invalidate();
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.ApplyAutoSize = function () {
      var bmp = null;
      bmp = this.GetBitmap();
      if (bmp != null) {
        if (this.FAutoSize && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
          this.SetWidth(bmp.GetWidth());
          this.SetHeight(bmp.GetHeight());
        };
      };
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
    };
    this.BitmapChanged = function (Sender) {
      if (this.FOnBitmapChanged != null) this.FOnBitmapChanged(this);
      this.ApplyAutoSize();
      this.Invalidate();
    };
    this.GetBitmap = function () {
      var Result = null;
      if (!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(this.FBitmap)) {
        Result = this.FBitmap}
       else Result = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FBitmaps,0,this.FBitmapContainer);
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      if (this.IsDesignTime()) this.DisableBackground();
      this.FCenter = true;
      this.FStretch = false;
      this.FAspectRatio = true;
      this.FCropping = false;
      this.FBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FBitmaps.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.SetWidth(100);
      this.SetHeight(100);
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      rtl.free(this,"FBitmaps");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.apply(this,arguments);
    };
    this.Draw = function (AGraphics, ARect) {
      var bmp = null;
      var rdest = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var w = 0.0;
      var h = 0.0;
      var x = 0.0;
      var y = 0.0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDot);
        AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      bmp = this.GetBitmap();
      if (bmp != null) {
        x = 0;
        y = 0;
        w = 0;
        h = 0;
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetAspectSize({get: function () {
            return w;
          }, set: function (v) {
            w = v;
          }},{get: function () {
            return h;
          }, set: function (v) {
            h = v;
          }},bmp.GetWidth(),bmp.GetHeight(),this.GetWidth(),this.GetHeight(),this.FAspectRatio,this.FStretch,this.FCropping);
        if (this.FCenter || this.FCropping) {
          x = (this.GetWidth() - w) / 2;
          y = (this.GetHeight() - h) / 2;
        };
        x = Math.round(x);
        y = Math.round(y);
        rdest = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(x,y,x + w,y + h));
        AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(rdest),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
      };
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCImage",$mod.TTMSFNCCustomImage,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCImage);
    };
    var $r = this.$rtti;
    $r.addProperty("AspectRatio",2,rtl.boolean,"FAspectRatio","SetAspectRatio",{Default: true});
    $r.addProperty("Bitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("Bitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FBitmaps","SetBitmaps");
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("Stretch",2,rtl.boolean,"FStretch","SetStretch",{Default: false});
    $r.addProperty("Cropping",2,rtl.boolean,"FCropping","SetCropping",{Default: false});
    $r.addProperty("Center",2,rtl.boolean,"FCenter","SetCenter",{Default: true});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAS",{Default: false});
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
  });
},["WEBLib.Controls","WEBLib.Graphics","WEBLib.TMSFNCUtils"]);
rtl.module("WEBLib.TMSFNCPopup",["System","Classes","WEBLib.Controls","WEBLib.TMSFNCCustomComponent","WEBLib.TMSFNCGraphics","WEBLib.Graphics","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphicsTypes","WEBLib.Forms","WEBLib.ExtCtrls","Types"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 3;
  this.TTMSFNCPopupPlacement = {"0": "ppBottom", ppBottom: 0, "1": "ppTop", ppTop: 1, "2": "ppLeft", ppLeft: 2, "3": "ppRight", ppRight: 3, "4": "ppCenter", ppCenter: 4, "5": "ppBottomCenter", ppBottomCenter: 5, "6": "ppTopCenter", ppTopCenter: 6, "7": "ppLeftCenter", ppLeftCenter: 7, "8": "ppRightCenter", ppRightCenter: 8, "9": "ppAbsolute", ppAbsolute: 9, "10": "ppMouse", ppMouse: 10, "11": "ppMouseCenter", ppMouseCenter: 11, "12": "ppAboveMouse", ppAboveMouse: 12, "13": "ppAboveMouseCenter", ppAboveMouseCenter: 13};
  $mod.$rtti.$Enum("TTMSFNCPopupPlacement",{minvalue: 0, maxvalue: 13, ordtype: 1, enumtype: this.TTMSFNCPopupPlacement});
  $mod.$rtti.$MethodVar("TTMSFNCPopupPaint",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomPopupForm",pas["WEBLib.Forms"].TCustomForm,function () {
    this.$init = function () {
      pas["WEBLib.Forms"].TCustomForm.$init.call(this);
      this.FPreferedDisplayIndex = 0;
      this.FHintWindow = false;
      this.FTimer = null;
      this.FFirstShow = false;
      this.FOwner$1 = null;
      this.FShowModal = false;
      this.FPlacement = 0;
      this.FRealPlacement = 0;
      this.FPlacementControl = null;
      this.FOffset = new pas["WEBLib.TMSFNCTypes"].TPointF();
      this.FSize = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      this.FPlacementRectangle = null;
      this.FScreenPlacementRect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      this.FPlacementChanged = false;
      this.FDragWithParent = false;
      this.FOnBeforeClose = null;
      this.FOnBeforeShow = null;
      this.FScreenContentRect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      this.FContentPadding = null;
      this.FContentControl = null;
      this.FOnRealPlacementChanged = null;
      this.FOnPopupPaint = null;
    };
    this.$final = function () {
      this.FTimer = undefined;
      this.FOwner$1 = undefined;
      this.FPlacementControl = undefined;
      this.FOffset = undefined;
      this.FSize = undefined;
      this.FPlacementRectangle = undefined;
      this.FScreenPlacementRect = undefined;
      this.FOnBeforeClose = undefined;
      this.FOnBeforeShow = undefined;
      this.FScreenContentRect = undefined;
      this.FContentPadding = undefined;
      this.FContentControl = undefined;
      this.FOnRealPlacementChanged = undefined;
      this.FOnPopupPaint = undefined;
      pas["WEBLib.Forms"].TCustomForm.$final.call(this);
    };
    this.SetOffset = function (Value) {
      if ((this.FOffset.X !== Value.X) || (this.FOffset.Y !== Value.Y)) {
        this.FOffset = new pas["WEBLib.TMSFNCTypes"].TPointF(Value);
        this.ApplyPlacement();
      };
    };
    this.SetSize = function (Value) {
      if ((this.FSize.cx !== Value.cx) || (this.FSize.cy !== Value.cy)) {
        this.FSize = new pas["WEBLib.TMSFNCTypes"].TSizeF(Value);
        this.ApplyPlacement();
      };
    };
    this.TimerProc = function (Sender) {
      if ((this.FVisible || this.FHintWindow) && (this.FFirstShow || this.FDragWithParent)) this.ApplyPlacement();
      if ((this.FVisible || this.FHintWindow) && this.FFirstShow) {
        this.FFirstShow = false;
      };
    };
    this.SetPlacementRectangle = function (Value) {
      this.FPlacementRectangle.Assign(Value);
    };
    this.SetPlacement = function (Value) {
      if (this.FPlacement !== Value) {
        this.FPlacement = Value;
        this.ApplyPlacement();
      };
    };
    this.SetPlacementControl = function (Value) {
      if (this.FPlacementControl !== Value) {
        if (this.FPlacementControl !== null) this.FPlacementControl.RemoveFreeNotification(this);
        this.FPlacementControl = Value;
        if (this.FPlacementControl !== null) this.FPlacementControl.FreeNotification(this);
      };
    };
    this.SetDragWithParent = function (Value) {
      this.FDragWithParent = Value;
    };
    this.SetContentControl = function (Value) {
      if (this.FContentControl !== Value) {
        if (this.FContentControl !== null) this.FContentControl.RemoveFreeNotification(this);
        this.FContentControl = Value;
        if (this.FContentControl !== null) {
          this.FContentControl.FreeNotification(this);
          try {
            this.FContentControl.SetParent(this);
            this.FContentControl.SetAlign(pas["WEBLib.Controls"].TAlign.alNone);
            this.FContentControl.SetVisible(true);
          } finally {
          };
        };
      };
    };
    this.DoBeforeShow = function () {
      this.FHintWindow = false;
      if (this.FOnBeforeShow != null) this.FOnBeforeShow(this);
      this.FFirstShow = true;
      if (!(this.FTimer != null)) this.FTimer = pas["WEBLib.ExtCtrls"].TTimer.$create("Create$1",[this]);
      this.FTimer.SetInterval(20);
      this.FTimer.FOnTimer = rtl.createCallback(this,"TimerProc");
      this.FTimer.SetEnabled(true);
    };
    this.DoBeforeClose = function () {
      if (this.FOnBeforeClose != null) this.FOnBeforeClose(this);
    };
    this.UpdateBounds = function (LRect) {
      this.SetBounds(Math.round(LRect.Left),Math.round(LRect.Top),Math.round(LRect.Right - LRect.Left),Math.round(LRect.Bottom - LRect.Top));
    };
    this.DoClose = function (CloseAction) {
      CloseAction.set(pas["WEBLib.Forms"].TCloseAction.caFree);
      pas["WEBLib.Forms"].TCustomForm.DoClose.apply(this,arguments);
      if (CloseAction.get() !== pas["WEBLib.Forms"].TCloseAction.caNone) {
        if (this.FTimer != null) this.FTimer.SetEnabled(false);
      };
    };
    this.DoApplyPlacement = function () {
      var Self = this;
      var pt = new pas.Types.TPoint();
      var Pos = new pas.Types.TPoint();
      var AbsolutePos = new pas.Types.TPoint();
      var LRect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var LPlacement = 0;
      var LOffset = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var LStep = 0;
      var LSoGood = false;
      var SourceSize = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      var PlacementByTarget = false;
      function UpdateRectByScreen(R, cs) {
        var Result = false;
        var WorkareaRect = new pas.Types.TRect();
        var WorkareaRectF = new pas["WEBLib.TMSFNCTypes"].TRectF();
        var W = 0.0;
        var H = 0.0;
        Result = true;
        R.get().Left = Math.round(R.get().Left);
        R.get().Top = Math.round(R.get().Top);
        R.get().Right = Math.round(R.get().Right);
        R.get().Bottom = Math.round(R.get().Bottom);
        WorkareaRect.Left = 0;
        WorkareaRect.Top = 0;
        WorkareaRect.Right = window.innerWidth;
        WorkareaRect.Bottom = window.innerHeight;
        WorkareaRectF = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(WorkareaRect.Left - Self.FContentPadding.FLeft,WorkareaRect.Top - Self.FContentPadding.FTop,WorkareaRect.Right + Self.FContentPadding.FRight,WorkareaRect.Bottom + Self.FContentPadding.FBottom));
        if (!(pas.Classes.TComponentStateItem.csDesigning in cs)) {
          W = R.get().Right - R.get().Left;
          H = R.get().Bottom - R.get().Top;
          if (R.get().Left > WorkareaRectF.Left) {
            if (R.get().Left > (WorkareaRectF.Right - W)) {
              R.get().Left = WorkareaRectF.Right - W;
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppRight) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppLeft;
                Result = false;
              };
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppRightCenter) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppLeftCenter;
                Result = false;
              };
            };
          } else {
            R.get().Left = WorkareaRectF.Left;
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppLeft) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppRight;
              Result = false;
            };
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppLeftCenter) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppRightCenter;
              Result = false;
            };
          };
          if (R.get().Top > WorkareaRectF.Top) {
            if (R.get().Top > (WorkareaRectF.Bottom - H)) {
              R.get().Top = WorkareaRectF.Bottom - H;
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppBottom) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppTop;
                Result = false;
              };
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppBottomCenter) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppTopCenter;
                Result = false;
              };
            };
          } else {
            R.get().Top = WorkareaRectF.Top;
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppTop) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppBottom;
              Result = false;
            };
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppTopCenter) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppBottomCenter;
              Result = false;
            };
          };
          R.get().Right = R.get().Left + W;
          R.get().Bottom = R.get().Top + H;
        };
        return Result;
      };
      Self.FPlacementChanged = false;
      LOffset = new pas["WEBLib.TMSFNCTypes"].TPointF(Self.FOffset);
      LPlacement = Self.FPlacement;
      LStep = 0;
      do {
        LRect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Self.FPlacementRectangle.FLeft,Self.FPlacementRectangle.FTop,Self.FPlacementRectangle.FRight,Self.FPlacementRectangle.FBottom));
        if ((Self.FPlacementControl !== null) && Self.FPlacementRectangle.Empty()) LRect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,Self.FPlacementControl.GetWidth(),Self.FPlacementControl.GetHeight()));
        if (((Self.FPlacementControl === null) && Self.FPlacementRectangle.Empty()) && !(LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppAbsolute,$mod.TTMSFNCPopupPlacement.ppMouse,$mod.TTMSFNCPopupPlacement.ppMouseCenter,$mod.TTMSFNCPopupPlacement.ppAboveMouse,$mod.TTMSFNCPopupPlacement.ppAboveMouseCenter))) ;
        Self.FScreenPlacementRect = new pas["WEBLib.TMSFNCTypes"].TRectF(LRect);
        if (LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppTop,$mod.TTMSFNCPopupPlacement.ppTopCenter)) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},0,Self.FContentPadding.FBottom - LOffset.Y)}
         else pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
            return LRect;
          }, set: function (v) {
            LRect = v;
          }},0,LOffset.Y - Self.FContentPadding.FTop);
        if (LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppLeft,$mod.TTMSFNCPopupPlacement.ppLeftCenter)) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},Self.FContentPadding.FRight - LOffset.X,0)}
         else pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
            return LRect;
          }, set: function (v) {
            LRect = v;
          }},LOffset.X - Self.FContentPadding.FLeft,0);
        PlacementByTarget = !(LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppAbsolute,$mod.TTMSFNCPopupPlacement.ppMouse,$mod.TTMSFNCPopupPlacement.ppMouseCenter,$mod.TTMSFNCPopupPlacement.ppAboveMouse,$mod.TTMSFNCPopupPlacement.ppAboveMouseCenter));
        SourceSize = new pas["WEBLib.TMSFNCTypes"].TSizeF(Self.FSize);
        var $tmp1 = LPlacement;
        if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppBottom) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},0,LRect.Bottom - LRect.Top)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppTop) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},0,-SourceSize.cy)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppLeft) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},-SourceSize.cx,0)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppRight) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},LRect.Right - LRect.Top,0)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},((LRect.Right - LRect.Top) - SourceSize.cx) / 2,((LRect.Bottom - LRect.Top) - SourceSize.cy) / 2)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppBottomCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},((LRect.Right - LRect.Top) - SourceSize.cx) / 2,LRect.Bottom - LRect.Top)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppTopCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},((LRect.Right - LRect.Top) - SourceSize.cx) / 2,-SourceSize.cy)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppLeftCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},-SourceSize.cx,((LRect.Bottom - LRect.Top) - SourceSize.cy) / 2)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppRightCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},LRect.Right - LRect.Top,((LRect.Bottom - LRect.Top) - SourceSize.cy) / 2)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppAbsolute) {
          if (Self.FPlacementRectangle.Empty()) {
            LRect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Self.FPlacementRectangle.Rect().Left,Self.FPlacementRectangle.Rect().Top,Self.FPlacementRectangle.Rect().Left + SourceSize.cx,Self.FPlacementRectangle.Rect().Top + SourceSize.cy))}
           else LRect = new pas["WEBLib.TMSFNCTypes"].TRectF(Self.FPlacementRectangle.Rect());
        } else if (((($tmp1 === $mod.TTMSFNCPopupPlacement.ppMouse) || ($tmp1 === $mod.TTMSFNCPopupPlacement.ppMouseCenter)) || ($tmp1 === $mod.TTMSFNCPopupPlacement.ppAboveMouse)) || ($tmp1 === $mod.TTMSFNCPopupPlacement.ppAboveMouseCenter)) {
          LRect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Pos.x,Pos.y,Pos.x + SourceSize.cx,Pos.y + SourceSize.cy));
          if (LPlacement === $mod.TTMSFNCPopupPlacement.ppMouseCenter) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},-SourceSize.cx / 2,-SourceSize.cy / 2);
          if (LPlacement === $mod.TTMSFNCPopupPlacement.ppAboveMouseCenter) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},-SourceSize.cx / 2,-SourceSize.cy - 5);
          if (LPlacement === $mod.TTMSFNCPopupPlacement.ppAboveMouse) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return LRect;
            }, set: function (v) {
              LRect = v;
            }},0,-SourceSize.cy - 5);
        };
        if (PlacementByTarget) {
          AbsolutePos = new pas.Types.TPoint(pas.Types.Point(Math.round(LRect.Left),Math.round(LRect.Top)));
          if (Self.FPlacementControl !== null) {
            AbsolutePos = new pas.Types.TPoint(Self.FPlacementControl.ClientToScreen(AbsolutePos));
            pt = new pas.Types.TPoint(pas.Types.Point(Math.round(Self.FScreenPlacementRect.Left),Math.round(Self.FScreenPlacementRect.Top)));
            pt = new pas.Types.TPoint(Self.FPlacementControl.ClientToScreen(pt));
            Self.FScreenPlacementRect.Left = pt.x;
            Self.FScreenPlacementRect.Top = pt.y;
            pt = new pas.Types.TPoint(pas.Types.Point(Math.round(Self.FScreenPlacementRect.Right),Math.round(Self.FScreenPlacementRect.Bottom)));
            pt = new pas.Types.TPoint(Self.FPlacementControl.ClientToScreen(pt));
            Self.FScreenPlacementRect.Right = pt.x;
            Self.FScreenPlacementRect.Bottom = pt.y;
          };
          LRect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(AbsolutePos.x,AbsolutePos.y,AbsolutePos.x + Self.FSize.cx,AbsolutePos.y + Self.FSize.cy));
        };
        LSoGood = UpdateRectByScreen({get: function () {
            return LRect;
          }, set: function (v) {
            LRect = v;
          }},rtl.refSet(Self.FComponentState));
        LStep += 1;
      } while (!(LSoGood || (LStep > 1)));
      Self.FScreenContentRect = new pas["WEBLib.TMSFNCTypes"].TRectF(LRect);
      Self.FScreenContentRect = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Self.FScreenContentRect.Left + Self.FContentPadding.FLeft,Self.FScreenContentRect.Top + Self.FContentPadding.FTop,Self.FScreenContentRect.Right - Self.FContentPadding.FRight,Self.FScreenContentRect.Bottom - Self.FContentPadding.FBottom));
      Self.FRealPlacement = LPlacement;
      Self.UpdateBounds(new pas["WEBLib.TMSFNCTypes"].TRectF(LRect));
    };
    this.Loaded = function () {
      pas["WEBLib.Forms"].TCustomForm.Loaded.apply(this,arguments);
      if (this.FPlacementChanged) this.ApplyPlacement();
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if (Operation === pas.Classes.TOperation.opRemove) {
        if (AComponent === this.FPlacementControl) {
          this.FPlacementControl = null;
          this.ApplyPlacement();
        };
        if (AComponent === this.FContentControl) this.FContentControl = null;
      };
    };
    this.DoRealPlacementChanged = function () {
      if (this.FOnRealPlacementChanged != null) this.FOnRealPlacementChanged(this);
    };
    this.CreateNew = function (AOwner, Dummy) {
      var Self = this;
      function FindUniqueFormName(Name) {
        var Result = "";
        var I = 0;
        I = 0;
        Result = Name;
        while ((pas["WEBLib.Controls"].FindGlobalComponent(Result) !== null) || ((AOwner !== null) && (AOwner.FindComponent(Result) !== null))) {
          I += 1;
          Result = pas.SysUtils.Format("%s_%d",[Name,I]);
        };
        return Result;
      };
      Self.SetName(FindUniqueFormName("CustomPopupForm"));
      pas["WEBLib.Forms"].TCustomForm.CreateNew.apply(Self,arguments);
      Self.FPreferedDisplayIndex = -1;
      Self.FOwner$1 = AOwner;
      Self.FDragWithParent = true;
      Self.FPlacementRectangle = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      Self.FContentPadding = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      Self.FSize.cx = 320;
      Self.FSize.cy = 200;
      Self.FPlacement = $mod.TTMSFNCPopupPlacement.ppBottom;
      Self.FRealPlacement = Self.FPlacement;
      Self.SetVisible(false);
      try {} finally {
      };
    };
    this.Create$6 = function (AOwner, APlacementControl) {
      this.CreateNew(AOwner,0);
      try {
        if (APlacementControl !== null) this.FPlacementControl = APlacementControl;
        if (this.FPlacementControl !== null) this.FPlacementControl.FreeNotification(this);
      } finally {
      };
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FTimer;
        }, set: function (v) {
          this.p.FTimer = v;
        }});
      if (this.FPlacementControl !== null) {
        this.FPlacementControl.RemoveFreeNotification(this);
        this.FPlacementControl = null;
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FContentPadding;
        }, set: function (v) {
          this.p.FContentPadding = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPlacementRectangle;
        }, set: function (v) {
          this.p.FPlacementRectangle = v;
        }});
      pas["WEBLib.Forms"].TCustomForm.Destroy.apply(this,arguments);
    };
    this.ApplyPlacement = function () {
      var OldRect = new pas.Types.TRect();
      var NewRect = new pas.Types.TRect();
      var OldRealPlacement = 0;
      OldRect = new pas.Types.TRect(pas.Types.Rect(this.GetLeft(),this.GetTop(),this.GetLeft() + this.GetWidth(),this.GetTop() + this.GetHeight()));
      OldRealPlacement = this.FRealPlacement;
      this.DoApplyPlacement();
      NewRect = new pas.Types.TRect(pas.Types.Rect(this.GetLeft(),this.GetTop(),this.GetLeft() + this.GetWidth(),this.GetTop() + this.GetHeight()));
      if (((((NewRect.Left !== OldRect.Left) || (NewRect.Top !== OldRect.Top)) || (NewRect.Bottom !== OldRect.Bottom)) || (NewRect.Right !== OldRect.Right)) || (OldRealPlacement !== this.FRealPlacement)) this.DoRealPlacementChanged();
    };
    this.KeyDown = function (Key, Shift) {
      pas["WEBLib.Controls"].TControl.KeyDown.apply(this,arguments);
      if (rtl.neSet(Shift,{})) return;
      var $tmp1 = Key.get();
      if (($tmp1 === 27) || ($tmp1 === 115)) this.Close();
    };
    this.CloseQuery = function () {
      var Result = false;
      Result = pas["WEBLib.Forms"].TCustomForm.CloseQuery.call(this);
      if (Result && !(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) this.DoBeforeClose();
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomPopup",pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$init.call(this);
      this.FOwner$1 = null;
      this.FPlacementControl = null;
      this.FPopupForm = null;
      this.FStaysOpen = false;
      this.FPlacement = 0;
      this.FPlacementRectangle = null;
      this.FHorizontalOffset = 0.0;
      this.FVerticalOffset = 0.0;
      this.FDragWithParent = false;
      this.FModalResult = 0;
      this.FModal = false;
      this.FOnClosePopup = null;
      this.FOnPopup = null;
      this.FPopupFormSize = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      this.FContentControl = null;
      this.FDropDownHeight = 0.0;
      this.FDropDownWidth = 0.0;
      this.FFocusable = false;
      this.FFocusedControl = null;
      this.FOnPopupPaint = null;
      this.FOnPopupShown = null;
      this.FIsOpen = false;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      this.FPlacementControl = undefined;
      this.FPopupForm = undefined;
      this.FPlacementRectangle = undefined;
      this.FOnClosePopup = undefined;
      this.FOnPopup = undefined;
      this.FPopupFormSize = undefined;
      this.FContentControl = undefined;
      this.FFocusedControl = undefined;
      this.FOnPopupPaint = undefined;
      this.FOnPopupShown = undefined;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$final.call(this);
    };
    this.SetIsOpen = function (Value) {
      if (this.FIsOpen !== Value) {
        if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
          this.FIsOpen = false;
          return;
        };
        if (Value) {
          this.DoCreatePopup(false)}
         else {
          if (this.HasPopupForm()) {
            this.FPopupForm.Close()}
           else this.FIsOpen = Value;
        };
      };
    };
    this.SetPlacementRectangle = function (Value) {
      this.FPlacementRectangle.Assign(Value);
    };
    this.SetModalResult = function (Value) {
      this.FModalResult = Value;
      if (this.FPopupForm != null) this.FPopupForm.SetModalResult(this.FModalResult);
    };
    this.SetPlacementControl = function (Value) {
      if (this.FPlacementControl !== Value) {
        if (this.FPlacementControl !== null) this.FPlacementControl.RemoveFreeNotification(this);
        this.FPlacementControl = Value;
        if (this.HasPopupForm()) this.FPopupForm.SetPlacementControl(this.FPlacementControl);
        if (this.FPlacementControl !== null) this.FPlacementControl.FreeNotification(this);
      };
    };
    this.SetPlacement = function (Value) {
      if (this.FPlacement !== Value) {
        this.FPlacement = Value;
        if (this.HasPopupForm()) this.FPopupForm.SetPlacement(this.FPlacement);
      };
    };
    this.SetDragWithParent = function (Value) {
      if (this.FDragWithParent !== Value) {
        this.FDragWithParent = Value;
        if (this.HasPopupForm()) this.FPopupForm.SetDragWithParent(this.FDragWithParent);
      };
    };
    this.BeforeShowProc = function (Sender) {
      this.FIsOpen = true;
      this.DoPopup();
    };
    this.BeforeCloseProc = function (Sender) {
      this.FIsOpen = false;
    };
    this.CloseProc = function (Sender, CloseAction) {
      this.ClosePopup();
    };
    this.ShowProc = function (Sender) {
      if ((this.FPopupForm != null) && this.FPopupForm.FShowModal) this.HandleFocusedControl();
      this.DoPopupShown();
    };
    this.DeactivateProc = function (Sender) {
      if (((this.FPopupForm != null) && !this.FPopupForm.FShowModal) && !this.FStaysOpen) {
        this.FPopupForm.SetVisible(false);
        this.FPopupForm.Close();
      };
    };
    this.UpdatePopupSize = function () {
      var LSize = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      if (this.FPopupForm !== null) {
        if (this.FPopupFormSize.cx > 0) {
          LSize.cx = this.FPopupFormSize.cx}
         else LSize.cx = this.FDropDownWidth;
        if (this.FPopupFormSize.cy > 0) {
          LSize.cy = this.FPopupFormSize.cy}
         else LSize.cy = this.FDropDownHeight;
        this.FPopupForm.SetSize(new pas["WEBLib.TMSFNCTypes"].TSizeF(LSize));
      };
    };
    this.SetContentControl = function (Value) {
      if (Value === null) {
        if (this.FContentControl != null) this.FContentControl.SetVisible(true);
      };
      this.FContentControl = Value;
      if (this.FContentControl != null) {
        this.FContentControl.SetVisible(false);
        this.SetDropDownWidth(this.FContentControl.GetWidth());
        this.SetDropDownHeight(this.FContentControl.GetHeight());
      };
    };
    this.SetDropDownHeight = function (Value) {
      if (this.FDropDownHeight !== Value) {
        this.FDropDownHeight = Value;
        if (this.FPopupForm != null) this.FPopupForm.SetHeight(Math.round(Value));
      };
    };
    this.SetDropDownWidth = function (Value) {
      if (this.FDropDownWidth !== Value) {
        this.FDropDownWidth = Value;
        if (this.FPopupForm != null) this.FPopupForm.SetWidth(Math.round(Value));
      };
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,3);
      return Result;
    };
    this.SetAdaptToStyle = function (Value) {
      var ia = null;
      try {
        pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.SetAdaptToStyle.apply(this,arguments);
        if (this.FContentControl != null) {
          if (pas.SysUtils.Supports$3(this.FContentControl,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle.$guid,{get: function () {
              return ia;
            }, set: function (v) {
              ia = v;
            }})) ia.SetAdaptToStyle(this.FAdaptToStyle);
        };
      } finally {
        rtl._Release(ia);
      };
    };
    this.ShowPopup = function (AModal) {
      if (AModal) {
        this.FModalResult = this.FPopupForm.ShowModal()}
       else {
        this.FPopupForm.Show();
        this.HandleFocusedControl();
      };
    };
    this.HandleFocusedControl = function () {
      var frm = null;
      if ((this.FPopupForm != null) && (this.FFocusedControl != null)) {
        if (!this.FPopupForm.FShowModal) {
          frm = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetParentForm(this.FFocusedControl);
          if ((frm != null) && (frm !== this.FPopupForm)) {
            frm.SetFocus();
          };
        };
        if (pas["WEBLib.Controls"].TControl.isPrototypeOf(this.FFocusedControl)) {
          if (rtl.as(this.FFocusedControl,pas["WEBLib.Controls"].TControl).CanFocus()) rtl.as(this.FFocusedControl,pas["WEBLib.Controls"].TControl).SetFocus();
        };
      };
    };
    this.FormPaint = function (Sender) {
      var g = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (this.FPopupForm != null) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.FPopupForm.GetCanvas(),false]);
        try {
          g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FFill.SetColor(pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupFillColor);
          g.FStroke.SetColor(pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupStrokeColor);
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.FPopupForm.GetWidth(),this.FPopupForm.GetHeight()));
          g.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
          if (this.FOnPopupPaint != null) this.FOnPopupPaint(this,g,new pas["WEBLib.TMSFNCTypes"].TRectF(r));
        } finally {
          g = rtl.freeLoc(g);
        };
      };
    };
    this.DoPopupPaint = function (Sender, AGraphics, ARect) {
      if (this.FOnPopupPaint != null) this.FOnPopupPaint(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect));
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if (Operation === pas.Classes.TOperation.opRemove) {
        if (AComponent === this.FContentControl) this.FContentControl = null;
        if (AComponent === this.FFocusedControl) this.FFocusedControl = null;
        if (AComponent === this.FPopupForm) this.FPopupForm = null;
        if (AComponent === this.FPlacementControl) {
          this.FPlacementControl = null;
          if (this.HasPopupForm()) this.FPopupForm.SetPlacementControl(null);
        };
      };
    };
    this.MarginsChanged = function (Sender) {
      if (this.FPopupForm !== null) this.FPopupForm.SetPlacementRectangle(this.FPlacementRectangle);
    };
    this.DoClosePopup = function () {
      if (this.FOnClosePopup != null) this.FOnClosePopup(this);
    };
    this.DoPopup = function () {
      if (this.FOnPopup != null) this.FOnPopup(this);
    };
    this.DoPopupShown = function () {
      if (this.FOnPopupShown != null) this.FOnPopupShown(this);
    };
    this.ClosePopup = function () {
      var p = null;
      if (!this.HasPopupForm()) return;
      if (this.FModal && (this.FModalResult === 0)) {
        this.SetModalResult(2);
        return;
      };
      this.FIsOpen = false;
      if (this.FContentControl != null) {
        p = this.GetParent();
        this.FContentControl.SetVisible(false);
        if ((p != null) && pas["WEBLib.Controls"].TWinControl.isPrototypeOf(p)) this.FContentControl.SetParent(rtl.as(p,pas["WEBLib.Controls"].TWinControl));
      };
      if (!(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) {
        if (this.HasPopupForm()) {
          if ($mod.TTMSFNCNonFocusablePopup.isPrototypeOf(this)) rtl.free(this,"FPopupForm");
          this.DoClosePopup();
          this.FPopupForm = null;
        };
      };
    };
    this.DoCreatePopup = function (AShowModal) {
      var ia = null;
      try {
        if (this.FIsOpen) return;
        if (this.HasPopupForm()) this.FPopupForm.Close();
        this.FPopupForm = this.CreatePopupForm();
        try {
          try {
            this.FPopupForm.SetFormStyle(pas["WEBLib.Forms"].TFormStyle.fsStayOnTop);
            this.FPopupForm.FOnPaint = rtl.createCallback(this,"FormPaint");
            this.FPopupForm.FOnPopupPaint = rtl.createCallback(this,"DoPopupPaint");
            this.FPopupForm.FreeNotification(this);
            this.FPopupForm.SetPlacement(this.FPlacement);
            this.FPopupForm.SetOffset(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(this.FHorizontalOffset,this.FVerticalOffset)));
            this.FPopupForm.SetPlacementRectangle(this.FPlacementRectangle);
            this.FPopupForm.SetDragWithParent(this.FDragWithParent);
            this.UpdatePopupSize();
            this.FPopupForm.FOnDeactivate = rtl.createCallback(this,"DeactivateProc");
            this.FPopupForm.FOnBeforeShow = rtl.createCallback(this,"BeforeShowProc");
            this.FPopupForm.FOnBeforeClose = rtl.createCallback(this,"BeforeCloseProc");
            this.FPopupForm.FOnClose = rtl.createCallback(this,"CloseProc");
            this.FPopupForm.FOnShow = rtl.createCallback(this,"ShowProc");
            this.FPopupForm.FShowModal = AShowModal;
            this.FPopupForm.SetContentControl(this.FContentControl);
            if (pas.SysUtils.Supports$3(this.FContentControl,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle.$guid,{get: function () {
                return ia;
              }, set: function (v) {
                ia = v;
              }})) ia.SetAdaptToStyle(this.FAdaptToStyle);
            if (this.FContentControl != null) this.FContentControl.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
          } finally {
          };
        } catch ($e) {
          pas.SysUtils.FreeAndNil({p: this, get: function () {
              return this.p.FPopupForm;
            }, set: function (v) {
              this.p.FPopupForm = v;
            }});
          throw $e;
        };
        if (!(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) this.FPopupForm.DoBeforeShow();
        this.ShowPopup(AShowModal);
      } finally {
        rtl._Release(ia);
      };
    };
    this.GetPopupFormClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCCustomPopupForm;
      return Result;
    };
    this.GetParent = function () {
      var Result = null;
      Result = this.FPlacementControl;
      if (!(Result != null) && pas["WEBLib.Controls"].TControl.isPrototypeOf(this.FOwner$1)) Result = rtl.as(this.FOwner$1,pas["WEBLib.Controls"].TControl);
      return Result;
    };
    this.CreatePopupForm = function () {
      var Result = null;
      var NewForm = null;
      var cls = null;
      NewForm = null;
      try {
        cls = this.GetPopupFormClass();
        NewForm = cls.$create("Create$6",[this,this.FPlacementControl]);
      } catch ($e) {
        pas.SysUtils.FreeAndNil({get: function () {
            return NewForm;
          }, set: function (v) {
            NewForm = v;
          }});
        throw $e;
      };
      Result = NewForm;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.Create$1.call(this,AOwner);
      this.FOwner$1 = AOwner;
      this.FPlacement = $mod.TTMSFNCPopupPlacement.ppBottom;
      this.FFocusable = true;
      this.FStaysOpen = false;
      this.FPlacementRectangle = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      this.FPlacementRectangle.FOnChange = rtl.createCallback(this,"MarginsChanged");
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomPopup.isPrototypeOf(Source)) {
        this.FModalResult = rtl.as(Source,$mod.TTMSFNCCustomPopup).FModalResult;
        this.FPopupFormSize = new pas["WEBLib.TMSFNCTypes"].TSizeF(rtl.as(Source,$mod.TTMSFNCCustomPopup).FPopupFormSize);
        this.FDragWithParent = rtl.as(Source,$mod.TTMSFNCCustomPopup).FDragWithParent;
        this.FStaysOpen = rtl.as(Source,$mod.TTMSFNCCustomPopup).FStaysOpen;
        this.FDropDownHeight = rtl.as(Source,$mod.TTMSFNCCustomPopup).FDropDownHeight;
        this.FDropDownWidth = rtl.as(Source,$mod.TTMSFNCCustomPopup).FDropDownWidth;
        this.FHorizontalOffset = rtl.as(Source,$mod.TTMSFNCCustomPopup).FHorizontalOffset;
        this.FPlacementControl = rtl.as(Source,$mod.TTMSFNCCustomPopup).FPlacementControl;
        this.FPlacement = rtl.as(Source,$mod.TTMSFNCCustomPopup).FPlacement;
        this.FPlacementRectangle.Assign(rtl.as(Source,$mod.TTMSFNCCustomPopup).FPlacementRectangle);
        this.FVerticalOffset = rtl.as(Source,$mod.TTMSFNCCustomPopup).FVerticalOffset;
        this.FFocusedControl = rtl.as(Source,$mod.TTMSFNCCustomPopup).FFocusedControl;
        this.FContentControl = rtl.as(Source,$mod.TTMSFNCCustomPopup).FContentControl;
      };
    };
    this.Destroy = function () {
      this.FContentControl = null;
      this.ClosePopup();
      if (this.HasPopupForm()) {
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.FPopupForm;
          }, set: function (v) {
            this.p.FPopupForm = v;
          }});
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPlacementRectangle;
        }, set: function (v) {
          this.p.FPlacementRectangle = v;
        }});
      pas["WEBLib.Controls"].TCustomControl.Destroy.apply(this,arguments);
    };
    this.HasPopupForm = function () {
      var Result = false;
      Result = this.FPopupForm !== null;
      return Result;
    };
    this.PointInPopup = function (APoint) {
      var Result = false;
      Result = false;
      if (this.FPopupForm != null) Result = pas["WEBLib.TMSFNCTypes"].PtInRectEx(pas["WEBLib.TMSFNCTypes"].RectF(this.FPopupForm.GetLeft(),this.FPopupForm.GetTop(),this.FPopupForm.GetLeft() + this.FPopupForm.GetWidth(),this.FPopupForm.GetTop() + this.FPopupForm.GetHeight()),APoint);
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPopup",$mod.TTMSFNCCustomPopup,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCPopup);
    };
    var $r = this.$rtti;
    $r.addProperty("StaysOpen",0,rtl.boolean,"FStaysOpen","FStaysOpen",{Default: false});
    $r.addProperty("DropDownHeight",2,rtl.double,"FDropDownHeight","SetDropDownHeight");
    $r.addProperty("DropDownWidth",2,rtl.double,"FDropDownWidth","SetDropDownWidth");
    $r.addProperty("HorizontalOffset",0,rtl.double,"FHorizontalOffset","FHorizontalOffset");
    $r.addProperty("Placement",2,$mod.$rtti["TTMSFNCPopupPlacement"],"FPlacement","SetPlacement",{Default: $mod.TTMSFNCPopupPlacement.ppBottom});
    $r.addProperty("PlacementRectangle",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCMargins"],"FPlacementRectangle","SetPlacementRectangle");
    $r.addProperty("PlacementControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FPlacementControl","SetPlacementControl");
    $r.addProperty("VerticalOffset",0,rtl.double,"FVerticalOffset","FVerticalOffset");
    $r.addProperty("FocusedControl",0,pas["WEBLib.Controls"].$rtti["TControl"],"FFocusedControl","FFocusedControl");
    $r.addProperty("ContentControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FContentControl","SetContentControl");
    $r.addProperty("OnClosePopup",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClosePopup","FOnClosePopup");
    $r.addProperty("OnPopupPaint",0,$mod.$rtti["TTMSFNCPopupPaint"],"FOnPopupPaint","FOnPopupPaint");
    $r.addProperty("OnPopup",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnPopup","FOnPopup");
    $r.addProperty("OnPopupShown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnPopupShown","FOnPopupShown");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
  });
  rtl.createClass($mod,"TTMSFNCCustomNonFocusablePopupForm",$mod.TTMSFNCCustomPopupForm,function () {
    this.UpdateBounds = function (LRect) {
      $mod.TTMSFNCCustomPopupForm.UpdateBounds.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomNonFocusablePopup",$mod.TTMSFNCCustomPopup,function () {
    this.ActivatePreviousWindow = function () {
    };
    this.ShowPopup = function (AModal) {
      this.FIsOpen = true;
    };
    this.GetPopupFormClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCCustomNonFocusablePopupForm;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomPopup.Create$1.apply(this,arguments);
      this.FStaysOpen = true;
    };
    this.Destroy = function () {
      $mod.TTMSFNCCustomPopup.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCNonFocusablePopup",$mod.TTMSFNCCustomNonFocusablePopup,function () {
    this.Deactivate = function () {
      this.ClosePopup();
    };
    this.Activate = function () {
      this.DoCreatePopup(false);
    };
    var $r = this.$rtti;
    $r.addProperty("ContentControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FContentControl","SetContentControl");
    $r.addProperty("Placement",2,$mod.$rtti["TTMSFNCPopupPlacement"],"FPlacement","SetPlacement",{Default: $mod.TTMSFNCPopupPlacement.ppBottom});
    $r.addProperty("PlacementRectangle",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCMargins"],"FPlacementRectangle","SetPlacementRectangle");
    $r.addProperty("PlacementControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FPlacementControl","SetPlacementControl");
  });
},["SysUtils","WEBLib.TMSFNCUtils","math","WEBLib.TMSFNCStyles","Web"]);
rtl.module("WEBLib.TMSFNCToolBarRes",["System"],function () {
  "use strict";
  var $mod = this;
  this.TMSFNCTOOLBAREXPAND = ("data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvwAADr8B" + "OAVTJAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4zjOaXUAAAACVJREFUGFdj+P\/\/P07MEBYW9h8Xxi8J") + "AjglYACnBAzglMAEDAwARZ1DA4NRF38AAAAASUVORK5CYII=";
  this.TMSFNCTOOLBAREXPANDLARGE = $mod.TMSFNCTOOLBAREXPAND;
  this.TMSFNCTOOLBAREXPAND2 = ("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvgAADr4" + "B6kKxwAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xNkRpr\/UAAAA3SURBVBhXY3j69KktLgyS\/I8LE5RsQxeE4jaQpCKIgSQIlgBi") + "RQYQADGgAqgSMABVkI2QYGAAANnukE\/t\/B6ZAAAAAElFTkSuQmCC";
  this.TMSFNCTOOLBAROPTIONSMENU = ("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAYAAAD+WDajAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvwA" + "ADr8BOAVTJAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4zjOaXUAAAACpJREFUKFNjwAvCwsL+48IM\/\/\/jxvh1YhOEYZz2giVg") + "AKcEDOCUwAQMDAAqj1EKDJG5XAAAAABJRU5ErkJggg==";
  this.TMSFNCTOOLBAROPTIONSMENULARGE = $mod.TMSFNCTOOLBAROPTIONSMENU;
  this.TMSFNCTOOLBARQUICKMENU = ("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOwgAADs" + "IBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xNkRpr\/UAAAAlSURBVBhXYwCC\/9gwEAApKAMbJl4SnY0igCQIw3gkcUowMP") + "wHALBNZJw15C+yAAAAAElFTkSuQmCC";
  this.TMSFNCTOOLBARQUICKMENU2 = ("data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAA" + "AAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa\/1AAAAL0lEQVQYV2P4jxswwCRBNAYGESCA") + "IQHCIAIEYAIgAGejC8D4YEBQEqvE\/\/\/\/\/wMA7H6pV7j5gXMAAAAASUVORK5CYII=";
  $mod.$init = function () {
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBAREXPAND);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBAREXPAND2);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBAROPTIONSMENU);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBARQUICKMENU);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBARQUICKMENU2);
  };
},["WEBLib.TMSFNCTypes"]);
rtl.module("WEBLib.Menus",["System","Classes","SysUtils","WEBLib.Controls"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TMenuItem",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FCaption = "";
      this.FItems = null;
      this.FOnClick = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      this.FOnClick = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.GetCount = function () {
      var Result = 0;
      if (this.FItems === null) {
        Result = 0}
       else Result = this.FItems.GetCount();
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",0,rtl.string,"FCaption","FCaption");
    $r.addProperty("Items",0,pas.Classes.$rtti["TList"],"FItems","FItems");
    $r.addProperty("Count",1,rtl.longint,"GetCount","");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
  });
});
rtl.module("WEBLib.TMSFNCToolBar",["System","Classes","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCCustomControl","WEBLib.Controls","Types","WEBLib.TMSFNCPopup","WEBLib.TMSFNCTypes","WEBLib.TMSFNCBitmapContainer","WEBLib.StdCtrls","WEBLib.TMSFNCToolBarRes","WEBLib.TMSFNCGraphicsTypes","contnrs","WEBLib.Menus","WEBLib.ExtCtrls"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 1;
  this.BLD_VER = 3;
  rtl.createClass($mod,"TTMSFNCToolBarCustomButtonAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FHoverStroke = null;
      this.FDownFill = null;
      this.FNormalFill = null;
      this.FDownStroke = null;
      this.FDisabledFill = null;
      this.FNormalStroke = null;
      this.FDisabledStroke = null;
      this.FHoverFill = null;
      this.FCorners = {};
      this.FRounding = 0.0;
      this.FTransparent = false;
      this.FShowInnerStroke = false;
      this.FInnerStroke = null;
      this.FFlatStyle = false;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FHoverStroke = undefined;
      this.FDownFill = undefined;
      this.FNormalFill = undefined;
      this.FDownStroke = undefined;
      this.FDisabledFill = undefined;
      this.FNormalStroke = undefined;
      this.FDisabledStroke = undefined;
      this.FHoverFill = undefined;
      this.FCorners = undefined;
      this.FInnerStroke = undefined;
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetDisabledFill = function (Value) {
      this.FDisabledFill.Assign(Value);
    };
    this.SetDisabledStroke = function (Value) {
      this.FDisabledStroke.Assign(Value);
    };
    this.SetDownFill = function (Value) {
      this.FDownFill.Assign(Value);
    };
    this.SetDownStroke = function (Value) {
      this.FDownStroke.Assign(Value);
    };
    this.SetHoverFill = function (Value) {
      this.FHoverFill.Assign(Value);
    };
    this.SetHoverStroke = function (Value) {
      this.FHoverStroke.Assign(Value);
    };
    this.SetNormalFill = function (Value) {
      this.FNormalFill.Assign(Value);
    };
    this.SetNormalStroke = function (Value) {
      this.FNormalStroke.Assign(Value);
    };
    this.SetCorners = function (Value) {
      if (rtl.neSet(this.FCorners,Value)) {
        this.FCorners = rtl.refSet(Value);
        this.Changed();
      };
    };
    this.SetRounding = function (Value) {
      if (this.FRounding !== Value) {
        this.FRounding = Value;
        this.Changed();
      };
    };
    this.SetInnerStroke = function (Value) {
      this.FInnerStroke.Assign(Value);
    };
    this.SetShowInnerStroke = function (Value) {
      if (this.FShowInnerStroke !== Value) {
        this.FShowInnerStroke = Value;
        this.Changed();
      };
    };
    this.SetTransparent = function (Value) {
      if (this.FTransparent !== Value) {
        this.FTransparent = Value;
        this.Changed();
      };
    };
    this.IsRoundingStored = function () {
      var Result = false;
      Result = this.FRounding !== 3;
      return Result;
    };
    this.SetFlatStyle = function (Value) {
      var c = null;
      var I = 0;
      if (this.FFlatStyle !== Value) {
        this.FFlatStyle = Value;
        if (this.FOwner != null) {
          for (var $l1 = 0, $end2 = this.FOwner.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            c = this.FOwner.GetControls(I);
            if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FAppearance.SetFlatStyle(this.FFlatStyle);
            if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBar).FAppearance.SetFlatStyle(this.FFlatStyle);
          };
        };
        this.Changed();
      };
    };
    this.FillChanged = function (Sender) {
      this.Changed();
    };
    this.StrokeChanged = function (Sender) {
      this.Changed();
    };
    this.Changed = function () {
      if (this.FOwner != null) {
        this.FOwner.AppearanceChanged()}
       else if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCToolBarCustomButtonAppearance.isPrototypeOf(Source)) {
        this.FNormalFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FNormalFill);
        this.FDisabledFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDisabledFill);
        this.FHoverFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FHoverFill);
        this.FDownFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDownFill);
        this.FNormalStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FNormalStroke);
        this.FDisabledStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDisabledStroke);
        this.FHoverStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FHoverStroke);
        this.FDownStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDownStroke);
        this.FRounding = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FRounding;
        this.FCorners = rtl.refSet(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FCorners);
        this.FShowInnerStroke = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FShowInnerStroke;
        this.FTransparent = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FTransparent;
        this.FFlatStyle = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FFlatStyle;
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FCorners = rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight);
      this.FRounding = 3;
      this.FTransparent = false;
      this.FShowInnerStroke = true;
      this.FFlatStyle = false;
      this.FNormalFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FHoverFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FDownFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FDisabledFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,13882323]);
      this.FNormalStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FInnerStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,16777215]);
      this.FHoverStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FDownStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FDisabledStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FNormalFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FHoverFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FDownFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FDisabledFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FInnerStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FNormalStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FHoverStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FDownStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FDisabledStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FNormalFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(249,251,252));
      this.FNormalFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,235,235));
      this.FNormalFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,220,236));
      this.FNormalFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,225,236));
      this.FHoverFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,231,232));
      this.FHoverFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(210,215,215));
      this.FHoverFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,200,216));
      this.FHoverFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,216));
      this.FDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(219,221,222));
      this.FDownFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,205));
      this.FDownFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,190,206));
      this.FDownFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,195,206));
    };
    this.Destroy = function () {
      rtl.free(this,"FNormalFill");
      rtl.free(this,"FHoverFill");
      rtl.free(this,"FDownFill");
      rtl.free(this,"FDisabledFill");
      rtl.free(this,"FInnerStroke");
      rtl.free(this,"FNormalStroke");
      rtl.free(this,"FHoverStroke");
      rtl.free(this,"FDownStroke");
      rtl.free(this,"FDisabledStroke");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarButtonAppearance",$mod.TTMSFNCToolBarCustomButtonAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("Transparent",2,rtl.boolean,"FTransparent","SetTransparent",{Default: false});
    $r.addProperty("ShowInnerStroke",2,rtl.boolean,"FShowInnerStroke","SetShowInnerStroke",{Default: true});
    $r.addProperty("Rounding",14,rtl.double,"FRounding","SetRounding",{stored: "IsRoundingStored"});
    $r.addProperty("Corners",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsCorners"],"FCorners","SetCorners",{Default: rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight)});
    $r.addProperty("InnerStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FInnerStroke","SetInnerStroke");
    $r.addProperty("NormalFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FNormalFill","SetNormalFill");
    $r.addProperty("NormalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FNormalStroke","SetNormalStroke");
    $r.addProperty("HoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FHoverFill","SetHoverFill");
    $r.addProperty("HoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHoverStroke","SetHoverStroke");
    $r.addProperty("DownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDownFill","SetDownFill");
    $r.addProperty("DownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDownStroke","SetDownStroke");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
    $r.addProperty("DisabledStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledStroke","SetDisabledStroke");
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
  });
  rtl.createClass($mod,"TTMSFNCToolBarCompactAppearance",$mod.TTMSFNCToolBarCustomButtonAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("NormalFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FNormalFill","SetNormalFill");
    $r.addProperty("NormalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FNormalStroke","SetNormalStroke");
    $r.addProperty("HoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FHoverFill","SetHoverFill");
    $r.addProperty("HoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHoverStroke","SetHoverStroke");
    $r.addProperty("DownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDownFill","SetDownFill");
    $r.addProperty("DownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDownStroke","SetDownStroke");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
    $r.addProperty("DisabledStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledStroke","SetDisabledStroke");
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
  });
  rtl.createClass($mod,"TTMSFNCToolBarQuickMenuButtonAppearance",$mod.TTMSFNCToolBarCustomButtonAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("NormalFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FNormalFill","SetNormalFill");
    $r.addProperty("NormalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FNormalStroke","SetNormalStroke");
    $r.addProperty("HoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FHoverFill","SetHoverFill");
    $r.addProperty("HoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHoverStroke","SetHoverStroke");
    $r.addProperty("DownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDownFill","SetDownFill");
    $r.addProperty("DownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDownStroke","SetDownStroke");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
    $r.addProperty("DisabledStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledStroke","SetDisabledStroke");
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
  });
  this.TTMSFNCToolBarElementState = {"0": "esNormal", esNormal: 0, "1": "esLarge", esLarge: 1};
  $mod.$rtti.$Enum("TTMSFNCToolBarElementState",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCToolBarElementState});
  rtl.createClass($mod,"TTMSFNCCustomToolBarElement",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FBlockUpdate = false;
      this.FOnUpdateToolBar = null;
      this.FOnUpdateToolBarControl = null;
      this.FCanCopy = false;
      this.FState = 0;
      this.FLastElement = false;
      this.FControlIndex = 0;
    };
    this.$final = function () {
      this.FOnUpdateToolBar = undefined;
      this.FOnUpdateToolBarControl = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetState = function (Value) {
      if (this.FState !== Value) {
        this.FState = Value;
        this.UpdateState();
      };
    };
    this.SetLastElement = function (Value) {
      if (this.FLastElement !== Value) {
        this.FLastElement = Value;
        this.UpdateToolBar();
      };
    };
    this.UpdateState = function () {
    };
    this.UpdateToolBar = function () {
      if ((this.FOnUpdateToolBar != null) && !this.FBlockUpdate) this.FOnUpdateToolBar(this);
    };
    this.VisibleChanging = function () {
      pas["WEBLib.Controls"].TControl.VisibleChanging.apply(this,arguments);
      this.UpdateToolBar();
    };
    this.UpdateControlAfterResize = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.UpdateControlAfterResize.apply(this,arguments);
      this.UpdateToolBar();
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(Source)) {
        this.FState = rtl.as(Source,$mod.TTMSFNCCustomToolBarElement).FState;
        this.FLastElement = rtl.as(Source,$mod.TTMSFNCCustomToolBarElement).FLastElement;
        this.FCanCopy = rtl.as(Source,$mod.TTMSFNCCustomToolBarElement).FCanCopy;
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.DisableBackground();
      this.FLastElement = false;
      this.FCanCopy = true;
      this.FState = $mod.TTMSFNCToolBarElementState.esNormal;
    };
    this.Destroy = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.apply(this,arguments);
    };
  });
  this.TTMSFNCToolBarButtonBitmapPosition = {"0": "bbpLeft", bbpLeft: 0, "1": "bbpTop", bbpTop: 1};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonBitmapPosition",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonBitmapPosition});
  this.TTMSFNCToolBarButtonLayout = {"0": "bblNone", bblNone: 0, "1": "bblBitmap", bblBitmap: 1, "2": "bblLabel", bblLabel: 2, "3": "bblLarge", bblLarge: 3};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonLayout",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonLayout});
  rtl.createClass($mod,"TTMSFNCDefaultToolBarButton",$mod.TTMSFNCCustomToolBarElement,function () {
    this.$init = function () {
      $mod.TTMSFNCCustomToolBarElement.$init.call(this);
      this.FOldHeight = 0.0;
      this.FBitmapVisible = false;
      this.FText = "";
      this.FPopup = null;
      this.FPopupPlacement = 0;
      this.FDropDownHeight = 0.0;
      this.FDropDownWidth = 0.0;
      this.FDown = false;
      this.FHover = false;
      this.FPrevHover = false;
      this.FAppearance = null;
      this.FBitmapContainer = null;
      this.FBitmaps = null;
      this.FApplyName = false;
      this.FDropDownControl = null;
      this.FFont$1 = null;
      this.FOnBeforeDropDown = null;
      this.FCloseOnSelection = false;
      this.FDownState = false;
      this.FTextVisible = false;
      this.FOnCloseDropDown = null;
      this.FOnDropDown = null;
      this.FVerticalTextAlign = 0;
      this.FHorizontalTextAlign = 0;
      this.FWordWrapping = false;
      this.FTrimming = 0;
      this.FBitmapSize = 0.0;
      this.FStretchText = false;
      this.FDisabledBitmaps = null;
      this.FHoverBitmaps = null;
      this.FShowFocus$1 = false;
      this.FDropDownAutoWidth = false;
      this.FHoverFontColor = 0;
      this.FDownFontColor = 0;
      this.FDisabledFontColor = 0;
      this.FStretchBitmapIfNoText = false;
      this.FBitmapPosition = 0;
      this.FMaximumLayout = 0;
      this.FMinimumLayout = 0;
      this.FLayout = 0;
      this.FCompactLayout = 0;
      this.FLargeLayoutBitmapSize = 0.0;
      this.FLargeLayoutBitmaps = null;
      this.FLargeLayoutHoverBitmaps = null;
      this.FLargeLayoutDisabledBitmaps = null;
      this.FAutoBitmapSize = false;
      this.FLargeLayoutAutoBitmapSize = false;
    };
    this.$final = function () {
      this.FPopup = undefined;
      this.FAppearance = undefined;
      this.FBitmapContainer = undefined;
      this.FBitmaps = undefined;
      this.FDropDownControl = undefined;
      this.FFont$1 = undefined;
      this.FOnBeforeDropDown = undefined;
      this.FOnCloseDropDown = undefined;
      this.FOnDropDown = undefined;
      this.FDisabledBitmaps = undefined;
      this.FHoverBitmaps = undefined;
      this.FLargeLayoutBitmaps = undefined;
      this.FLargeLayoutHoverBitmaps = undefined;
      this.FLargeLayoutDisabledBitmaps = undefined;
      $mod.TTMSFNCCustomToolBarElement.$final.call(this);
    };
    this.SetAppearance = function (Value) {
      this.FAppearance.Assign(Value);
    };
    this.SetBitmapContainer = function (Value) {
      this.FBitmapContainer = Value;
      this.UpdateLayout();
      this.Invalidate();
    };
    this.SetBitmaps = function (Value) {
      this.FBitmaps.Assign(Value);
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.FTextVisible = Value !== "";
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetDropDownHeight = function (Value) {
      this.FDropDownHeight = Value;
      if ((this.FPopup != null) && !this.FDropDownAutoWidth) this.FPopup.SetDropDownHeight(this.FDropDownHeight);
    };
    this.SetDropDownWidth = function (Value) {
      this.FDropDownWidth = Value;
      if (this.FPopup != null) this.FPopup.SetDropDownWidth(this.FDropDownWidth);
    };
    this.SetBitmapVisible = function (Value) {
      this.FBitmapVisible = Value;
      this.UpdateLayout();
      this.Invalidate();
    };
    this.SetTextVisible = function (Value) {
      if (this.FTextVisible !== Value) {
        this.FTextVisible = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetFont$1 = function (Value) {
      this.FFont$1.Assign(Value);
    };
    this.SetDropDownControl = function (Value) {
      this.FDropDownControl = Value;
      if (this.FDropDownControl != null) {
        if (!(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
          if (this.FPopup != null) {
            this.FPopup.SetContentControl(this.FDropDownControl);
            this.FPopup.FFocusedControl = this.FDropDownControl;
          };
        } else if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
          this.SetDropDownHeight(this.FDropDownControl.GetHeight());
          this.SetDropDownWidth(this.FDropDownControl.GetWidth());
        };
      };
    };
    this.IsDropDownHeightStored = function () {
      var Result = false;
      Result = this.FDropDownHeight !== 135;
      return Result;
    };
    this.IsDropDownWidthStored = function () {
      var Result = false;
      Result = this.FDropDownWidth !== 135;
      return Result;
    };
    this.SetHorizontalTextAlign = function (Value) {
      if (this.FHorizontalTextAlign !== Value) {
        this.FHorizontalTextAlign = Value;
        this.Invalidate();
      };
    };
    this.SetVerticalTextAlign = function (Value) {
      if (this.FVerticalTextAlign !== Value) {
        this.FVerticalTextAlign = Value;
        this.Invalidate();
      };
    };
    this.SetWordWrapping = function (Value) {
      if (this.FWordWrapping !== Value) {
        this.FWordWrapping = Value;
        this.Invalidate();
      };
    };
    this.SetTrimming = function (Value) {
      if (this.FTrimming !== Value) {
        this.FTrimming = Value;
        this.Invalidate();
      };
    };
    this.IsBitmapSizeStored = function () {
      var Result = false;
      Result = this.FBitmapSize !== 24;
      return Result;
    };
    this.SetBitmapSize = function (Value) {
      if (this.FBitmapSize !== Value) {
        this.FBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetStretchText = function (Value) {
      if (this.FStretchText !== Value) {
        this.FStretchText = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetDisabledBitmaps = function (Value) {
      this.FDisabledBitmaps.Assign(Value);
    };
    this.SetHoverBitmaps = function (Value) {
      this.FHoverBitmaps.Assign(Value);
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.SetShowFocus$1 = function (Value) {
      if (this.FShowFocus$1 !== Value) {
        this.FShowFocus$1 = Value;
        this.Invalidate();
      };
    };
    this.SetDropDownAutoWidth = function (Value) {
      if (this.FDropDownAutoWidth !== Value) {
        this.FDropDownAutoWidth = Value;
        if (this.FPopup != null) {
          if (this.FDropDownAutoWidth) {
            this.FPopup.SetDropDownWidth(this.GetWidth())}
           else this.FPopup.SetDropDownWidth(this.FDropDownWidth);
        };
      };
    };
    this.SetStretchBitmapIfNoText = function (Value) {
      if (this.FStretchBitmapIfNoText !== Value) {
        this.FStretchBitmapIfNoText = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetBitmapPosition = function (Value) {
      if (this.FBitmapPosition !== Value) {
        this.FBitmapPosition = Value;
        this.Invalidate();
      };
    };
    this.SetMaximumLayout = function (Value) {
      if (this.FMaximumLayout !== Value) {
        this.FMaximumLayout = Value;
        this.UpdateToolBar();
      };
    };
    this.SetMinimumLayout = function (Value) {
      if (this.FMinimumLayout !== Value) {
        this.FMinimumLayout = Value;
        this.UpdateToolBar();
      };
    };
    this.SetLayout = function (Value) {
      if (this.FLayout !== Value) {
        this.FLayout = Value;
        this.UpdateLayout();
      };
    };
    this.SetCompactLayout = function (Value) {
      if (this.FCompactLayout !== Value) this.FCompactLayout = Value;
    };
    this.IsLargeLayoutBitmapSizeStored = function () {
      var Result = false;
      Result = this.FLargeLayoutBitmapSize !== 32;
      return Result;
    };
    this.SetLargeLayoutBitmaps = function (Value) {
      this.FLargeLayoutBitmaps.Assign(Value);
    };
    this.SetLargeLayoutBitmapSize = function (Value) {
      if (this.FLargeLayoutBitmapSize !== Value) {
        this.FLargeLayoutBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetLargeLayoutDisabledBitmaps = function (Value) {
      this.FLargeLayoutDisabledBitmaps.Assign(Value);
    };
    this.SetLargeLayoutHoverBitmaps = function (Value) {
      this.FLargeLayoutHoverBitmaps.Assign(Value);
    };
    this.SetAutoBitmapSize = function (Value) {
      if (this.FAutoBitmapSize !== Value) {
        this.FAutoBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetLargeLayoutAutoBitmapSize = function (Value) {
      if (this.FLargeLayoutAutoBitmapSize !== Value) {
        this.FLargeLayoutAutoBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.CanDrawDesignTime = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FText;
      return Result;
    };
    this.GetTextSize = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      var g = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result.cx = 0;
      Result.cy = 0;
      if (this.FTextVisible && (this.GetText() !== "")) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,this.FNativeCanvas,true]);
        g.FBitmapContainer = this.GetBitmapContainer();
        g.FOptimizedHTMLDrawing = this.FOptimizedHTMLDrawing;
        try {
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
          pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
              return r;
            }, set: function (v) {
              r = v;
            }},-2,-2);
          Result = new pas["WEBLib.TMSFNCTypes"].TSizeF(g.CalculateTextSize(this.GetText(),new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FWordWrapping,true));
        } finally {
          g = rtl.freeLoc(g);
        };
      };
      return Result;
    };
    this.UpdateControlAfterResize = function () {
      $mod.TTMSFNCCustomToolBarElement.UpdateControlAfterResize.apply(this,arguments);
      if (this.FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge) this.FOldHeight = this.GetHeight();
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.apply(this,arguments);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FNormalFill.SetColor(c);
        this.FAppearance.FNormalFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FDisabledFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,11119017,20));
        this.FAppearance.FDisabledFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FInnerStroke.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(this.FAppearance.FNormalFill.FColor,this.FAppearance.FNormalStroke.FColor,75));
        this.FAppearance.FInnerStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleTextFontColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FFont$1.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundStrokeColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FNormalStroke.SetColor(c);
        this.FAppearance.FDownStroke.SetColor(c);
        this.FAppearance.FDisabledStroke.SetColor(c);
        this.FAppearance.FNormalStroke.SetColor(c);
        this.FAppearance.FDownStroke.SetColor(c);
        this.FAppearance.FDisabledStroke.SetColor(c);
        this.FAppearance.FHoverStroke.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FHoverFill.SetColor(c);
        this.FAppearance.FHoverFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,this.FFill.FColor,20));
        this.FAppearance.FDownFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      };
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.apply(this,arguments);
      this.FFont$1.SetColor(0);
      this.FAppearance.FNormalFill.SetColor(16777215);
      this.FAppearance.FHoverFill.SetColor(16777215);
      this.FAppearance.FDownFill.SetColor(16777215);
      this.FAppearance.FDisabledFill.SetColor(13882323);
      this.FAppearance.FNormalStroke.SetColor(8421504);
      this.FAppearance.FInnerStroke.SetColor(16777215);
      this.FAppearance.FHoverStroke.SetColor(8421504);
      this.FAppearance.FDownStroke.SetColor(8421504);
      this.FAppearance.FDisabledStroke.SetColor(8421504);
      this.FAppearance.FNormalFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FHoverFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FDownFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FDisabledFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FAppearance.FNormalStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FInnerStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FHoverStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FDownStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FDisabledStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FNormalFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(249,251,252));
      this.FAppearance.FNormalFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,235,235));
      this.FAppearance.FNormalFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,220,236));
      this.FAppearance.FNormalFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,225,236));
      this.FAppearance.FHoverFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,231,232));
      this.FAppearance.FHoverFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(210,215,215));
      this.FAppearance.FHoverFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,200,216));
      this.FAppearance.FHoverFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,216));
      this.FAppearance.FDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(219,221,222));
      this.FAppearance.FDownFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,205));
      this.FAppearance.FDownFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,190,206));
      this.FAppearance.FDownFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,195,206));
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.SetAdaptToStyle.apply(this,arguments);
      if (this.FPopup != null) this.FPopup.SetAdaptToStyle(this.GetAdaptToStyle());
    };
    this.BitmapsChanged = function (Sender) {
      var bmp = null;
      bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FBitmaps,0,this.GetBitmapContainer());
      this.SetBitmapVisible((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp));
      if (!this.FBitmapVisible && (this.FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge)) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FLargeLayoutBitmaps,0,this.GetBitmapContainer());
        this.SetBitmapVisible((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp));
      };
      this.Invalidate();
    };
    this.DoFontChanged = function (Sender) {
      this.Invalidate();
    };
    this.UpdateLayout = function () {
      var sz = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      var w = 0.0;
      if ((this.FLayout === $mod.TTMSFNCToolBarButtonLayout.bblNone) || this.FBlockUpdate) return;
      this.FBlockUpdate = true;
      var $tmp1 = this.FLayout;
      if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblBitmap) {
        this.SetTextVisible(false);
        this.SetBitmapPosition($mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft);
        this.SetStretchText(false);
        this.SetHeight(Math.round(this.GetBitmapSize() + 6));
        this.SetWidth(Math.round(this.GetBitmapSize() + 6));
      } else if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLabel) {
        this.SetTextVisible(true);
        this.SetBitmapPosition($mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft);
        this.SetStretchText(false);
        sz = new pas["WEBLib.TMSFNCTypes"].TSizeF(this.GetTextSize());
        if (this.FBitmapVisible) {
          this.SetHeight(Math.round(Math.max(this.GetBitmapSize(),sz.cy) + 6));
          this.SetWidth(Math.round((this.GetBitmapSize() + sz.cx) + 12));
        } else if (this.FTextVisible && (this.GetText() !== "")) {
          this.SetHeight(Math.round(sz.cy + 6));
          this.SetWidth(Math.round(sz.cx + 6));
        } else {
          this.SetWidth(75);
          this.SetHeight(24);
        };
      } else if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) {
        this.SetTextVisible(true);
        this.SetBitmapPosition($mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop);
        this.SetStretchText(!this.FBitmapVisible);
        sz = new pas["WEBLib.TMSFNCTypes"].TSizeF(this.GetTextSize());
        w = 30;
        if (this.FBitmapVisible) w = Math.max(w,this.GetLargeLayoutBitmapSize() + 6);
        if (this.FTextVisible && (this.GetText() !== "")) w = Math.max(w,sz.cx + 12);
        this.SetWidth(Math.round(w));
        if (this.FOldHeight !== -1) this.SetHeight(Math.round(this.FOldHeight));
      };
      this.FBlockUpdate = false;
      this.UpdateToolBar();
    };
    this.DoClosePopup = function (Sender) {
      if (this.FOnCloseDropDown != null) this.FOnCloseDropDown(this);
    };
    this.DoPopup = function (Sender) {
      this.InitializePopup();
    };
    this.InitializePopup = function () {
    };
    this.UpdateState = function () {
      var f = 0.0;
      $mod.TTMSFNCCustomToolBarElement.UpdateState.apply(this,arguments);
      var $tmp1 = this.FState;
      if ($tmp1 === $mod.TTMSFNCToolBarElementState.esNormal) {
        f = 0.8}
       else if ($tmp1 === $mod.TTMSFNCToolBarElementState.esLarge) {
        f = 1.25}
       else {
        f = 1;
      };
      if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        this.SetDropDownWidth(this.FDropDownWidth * f);
        this.SetDropDownHeight(this.FDropDownHeight * f);
        this.FFont$1.SetSize(Math.round(this.FFont$1.FSize * f));
        this.SetBounds(this.GetLeft(),this.GetTop(),Math.round(this.GetWidth() * f),Math.round(this.GetHeight() * f));
      };
    };
    this.AppearanceChanged = function () {
      this.Invalidate();
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FDropDownControl)) this.FDropDownControl = null;
    };
    this.SetName = function (Value) {
      var ChangeText = false;
      ChangeText = (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && (this.FName === this.GetText())) && ((!(this.FOwner != null) || !pas.Classes.TComponent.isPrototypeOf(this.FOwner)) || !(pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState));
      pas.Classes.TComponent.SetName.call(this,Value);
      if ((ChangeText && this.FApplyName) && this.CanChangeText()) this.SetText(pas.SysUtils.StringReplace(this.GetText(),"TMSFNCToolBar","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      if (this.CanFocus()) this.SetFocus();
      this.FDown = true;
      this.Invalidate();
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      this.FHover = true;
      if (this.FPrevHover !== this.FHover) this.Invalidate();
      this.FPrevHover = this.FHover;
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      this.FDown = false;
      this.Invalidate();
    };
    this.HandleKeyUp = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyUp.apply(this,arguments);
      if (rtl.neSet(Shift,{})) return;
      var $tmp1 = Key.get();
      if (($tmp1 === 13) || ($tmp1 === 115)) {
        if (this.CanDropDown()) this.DropDown();
      };
    };
    this.HandleKeyDown = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyDown.apply(this,arguments);
      var $tmp1 = Key.get();
      if ($tmp1 === 36) {
        this.SelectFirstValue()}
       else if ($tmp1 === 35) {
        this.SelectLastValue()}
       else if (($tmp1 === 38) || ($tmp1 === 37)) {
        this.SelectPreviousValue()}
       else if (($tmp1 === 40) || ($tmp1 === 39)) {
        this.SelectNextValue()}
       else if ($tmp1 === 32) this.Click();
    };
    this.HandleKeyPress = function (Key) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyPress.apply(this,arguments);
      if ((Key.get() >= " ") && !(Key.get().charCodeAt() in rtl.createSet(113,13,32,27,36,35,38,37,40,39))) this.SelectValueWithCharacter(Key.get());
    };
    this.HandleMouseEnter = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseEnter.apply(this,arguments);
    };
    this.HandleMouseLeave = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseLeave.apply(this,arguments);
      this.FDown = false;
      this.FHover = false;
      this.FPrevHover = false;
      this.Invalidate();
    };
    this.SelectFirstValue = function () {
    };
    this.SelectValueWithCharacter = function (ACharacter) {
    };
    this.SelectLastValue = function () {
    };
    this.SelectNextValue = function () {
    };
    this.SelectPreviousValue = function () {
    };
    this.DrawText = function (AGraphics) {
      var tr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var st = null;
      if (!this.FTextVisible || (this.GetText() === "")) return;
      tr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTextRect());
      st = AGraphics.SaveState(false);
      try {
        AGraphics.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(tr));
        AGraphics.FFont.Assign(this.FFont$1);
        if (this.FEnabled) {
          if ((this.FDown || this.FDownState) && (this.FDownFontColor !== -1)) {
            AGraphics.FFont.SetColor(this.FDownFontColor)}
           else if (this.FHover && (this.FHoverFontColor !== -1)) AGraphics.FFont.SetColor(this.FHoverFontColor);
        } else if (this.FDisabledFontColor !== -1) AGraphics.FFont.SetColor(this.FDisabledFontColor);
        AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(tr),this.GetText(),this.FWordWrapping,this.FHorizontalTextAlign,this.FVerticalTextAlign,this.FTrimming,0,-1,-1,true,false,-1,-1);
      } finally {
        AGraphics.RestoreState(st,false);
      };
    };
    this.DrawBitmap = function (AGraphics, ARect) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bmpa = null;
      var g = null;
      if (!this.FBitmapVisible) return;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBitmapRect$1(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect)));
      if ($mod.TTMSFNCToolBarDropDownButton.isPrototypeOf(this) && this.GetAdaptToStyle()) {
        bmpa = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
        bmpa.SetSize(7,7);
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmpa.GetCanvas(),false]);
        try {
          g.BeginScene();
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FStroke.SetColor(pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultSelectionFillColor);
          g.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(0,1)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(6,1)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(0,2)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(6,2)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(1,3)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(5,3)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(2,4)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(4,4)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(3,5)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(3,5)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
        } finally {
          g.EndScene();
          g = rtl.freeLoc(g);
        };
        try {
          AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r),bmpa,true,false,true,false);
        } finally {
          bmpa = rtl.freeLoc(bmpa);
        };
      } else {
        AGraphics.FBitmapContainer = this.GetBitmapContainer();
        var $tmp1 = this.FLayout;
        if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) {
          if (this.FEnabled) {
            if (this.FHover && (this.FLargeLayoutHoverBitmaps.GetCount() > 0)) {
              AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FLargeLayoutHoverBitmaps,0,true,false,true,false)}
             else if (this.FHover && (this.FHoverBitmaps.GetCount() > 0)) {
              AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FHoverBitmaps,0,true,false,true,false)}
             else if (this.FLargeLayoutBitmaps.GetCount() > 0) {
              AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FLargeLayoutBitmaps,0,true,false,true,false)}
             else AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FBitmaps,0,true,false,true,false);
          } else {
            if (this.FLargeLayoutDisabledBitmaps.GetCount() > 0) {
              AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FLargeLayoutDisabledBitmaps,0,true,false,true,false)}
             else if (this.FDisabledBitmaps.GetCount() > 0) {
              AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FDisabledBitmaps,0,true,false,true,false)}
             else AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FBitmaps,0,true,false,true,false);
          };
        } else {
          if (this.FEnabled) {
            if (this.FHover && (this.FHoverBitmaps.GetCount() > 0)) {
              AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FHoverBitmaps,0,true,false,true,false)}
             else AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FBitmaps,0,true,false,true,false);
          } else if (this.FDisabledBitmaps.GetCount() > 0) {
            AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FDisabledBitmaps,0,true,false,true,false)}
           else AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FBitmaps,0,true,false,true,false);
        };
      };
    };
    this.DrawButton = function (AGraphics) {
    };
    this.CanDropDown = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.CanChangeText = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetTextRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bmpr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var dr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      bmpr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBitmapRect());
      dr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetDropDownRect());
      if (!this.FStretchText) {
        var $tmp1 = this.FBitmapPosition;
        if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
         else if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,dr.Left - 3,r.Bottom - 3));
      } else Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3));
      return Result;
    };
    this.GetDropDownRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Right,r.Top,r.Right,r.Bottom));
      return Result;
    };
    this.GetBitmapRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBitmapRect$1(new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect())));
      return Result;
    };
    this.GetBitmapRect$1 = function (ARect) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bs = 0.0;
      bs = this.GetBitmapSize();
      var $tmp1 = this.FLayout;
      if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) bs = this.GetLargeLayoutBitmapSize();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left,r.Bottom));
      if (this.FBitmapVisible) {
        var $tmp2 = this.FBitmapPosition;
        if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,(Result.Left + 3) + bs,Result.Bottom - 3))}
         else if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,Result.Right - 3,(Result.Top + 3) + bs));
      };
      return Result;
    };
    this.GetBitmapSize = function () {
      var Result = 0.0;
      var bmp = null;
      Result = this.FBitmapSize;
      if (this.FAutoBitmapSize) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FBitmaps,0,this.GetBitmapContainer());
        if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = Math.max(bmp.GetHeight(),bmp.GetWidth());
      };
      return Result;
    };
    this.GetLargeLayoutBitmapSize = function () {
      var Result = 0.0;
      var bmp = null;
      Result = this.FLargeLayoutBitmapSize;
      if (this.FLargeLayoutAutoBitmapSize) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FLargeLayoutBitmaps,0,this.GetBitmapContainer());
        if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = Math.max(bmp.GetHeight(),bmp.GetWidth());
      };
      return Result;
    };
    this.Assign = function (Source) {
      $mod.TTMSFNCCustomToolBarElement.Assign.apply(this,arguments);
      if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(Source)) {
        this.FLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLayout;
        this.FCompactLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FCompactLayout;
        this.FMinimumLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FMinimumLayout;
        this.FMaximumLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FMaximumLayout;
        this.FBitmapPosition = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmapPosition;
        this.FBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmapSize;
        this.FLargeLayoutBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutBitmapSize;
        this.FAutoBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FAutoBitmapSize;
        this.FLargeLayoutAutoBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutAutoBitmapSize;
        this.FStretchBitmapIfNoText = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FStretchBitmapIfNoText;
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FAppearance);
        this.FBitmapContainer = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).GetBitmapContainer();
        this.FBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmaps);
        this.FDisabledBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDisabledBitmaps);
        this.FLargeLayoutHoverBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutHoverBitmaps);
        this.FLargeLayoutBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutBitmaps);
        this.FLargeLayoutDisabledBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutDisabledBitmaps);
        this.FHoverBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FHoverBitmaps);
        this.FBitmapVisible = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmapVisible;
        this.FText = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).GetText();
        this.FTextVisible = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FTextVisible;
        this.FDropDownHeight = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDropDownHeight;
        this.FDropDownWidth = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDropDownWidth;
        this.FDropDownAutoWidth = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDropDownAutoWidth;
        this.FWordWrapping = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FWordWrapping;
        this.FHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FHorizontalTextAlign;
        this.FVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FVerticalTextAlign;
        this.FTrimming = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FTrimming;
        this.FFont$1.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FFont$1);
        this.FHoverFontColor = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FHoverFontColor;
        this.FDownFontColor = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDownFontColor;
        this.FDisabledFontColor = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDisabledFontColor;
        this.FStretchText = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FStretchText;
        this.Invalidate();
      };
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomToolBarElement.Create$1.apply(this,arguments);
      this.FOldHeight = -1;
      this.FLayout = $mod.TTMSFNCToolBarButtonLayout.bblNone;
      this.FCompactLayout = $mod.TTMSFNCToolBarButtonLayout.bblNone;
      this.FMinimumLayout = $mod.TTMSFNCToolBarButtonLayout.bblBitmap;
      this.FMaximumLayout = $mod.TTMSFNCToolBarButtonLayout.bblLarge;
      this.FFont$1 = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont$1.FOnChanged = rtl.createCallback(this,"DoFontChanged");
      this.FHoverFontColor = -1;
      this.FDownFontColor = -1;
      this.FDisabledFontColor = -1;
      this.FDownState = false;
      this.FApplyName = true;
      this.FCloseOnSelection = true;
      this.FBitmapSize = 24;
      this.FLargeLayoutBitmapSize = 32;
      this.FAutoBitmapSize = false;
      this.FLargeLayoutAutoBitmapSize = false;
      this.FStretchBitmapIfNoText = true;
      this.FStretchText = false;
      this.FDropDownWidth = 135;
      this.FDropDownHeight = 135;
      this.FDropDownAutoWidth = false;
      this.FPopup = pas["WEBLib.TMSFNCPopup"].TTMSFNCPopup.$create("Create$1",[this]);
      this.FPopup.SetPlacementControl(this);
      this.FPopup.SetDragWithParent(true);
      this.FPopup.SetDropDownWidth(this.FDropDownWidth);
      this.FPopup.SetDropDownHeight(this.FDropDownHeight);
      this.FPopup.FOnPopup = rtl.createCallback(this,"DoPopup");
      this.FPopup.FOnClosePopup = rtl.createCallback(this,"DoClosePopup");
      this.FPopupPlacement = pas["WEBLib.TMSFNCPopup"].TTMSFNCPopupPlacement.ppBottom;
      this.FBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FDisabledBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FDisabledBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FHoverBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FHoverBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FLargeLayoutBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FLargeLayoutBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FLargeLayoutDisabledBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FLargeLayoutDisabledBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FLargeLayoutHoverBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FLargeLayoutHoverBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FAppearance = $mod.TTMSFNCToolBarButtonAppearance.$create("Create$1",[this]);
      this.FTextVisible = true;
      this.FBitmapVisible = false;
      this.FWordWrapping = false;
      this.FHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FTrimming = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter;
      this.FBitmapPosition = $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft;
      this.SetWidth(100);
      this.SetHeight(24);
    };
    this.Destroy = function () {
      rtl.free(this,"FFont$1");
      rtl.free(this,"FPopup");
      rtl.free(this,"FBitmaps");
      rtl.free(this,"FDisabledBitmaps");
      rtl.free(this,"FHoverBitmaps");
      rtl.free(this,"FLargeLayoutBitmaps");
      rtl.free(this,"FLargeLayoutDisabledBitmaps");
      rtl.free(this,"FLargeLayoutHoverBitmaps");
      rtl.free(this,"FAppearance");
      $mod.TTMSFNCCustomToolBarElement.Destroy.apply(this,arguments);
    };
    this.Draw = function (AGraphics, ARect) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      if (!this.FAppearance.FTransparent) {
        if (this.FEnabled) {
          if (this.FDown || this.FDownState) {
            AGraphics.FFill.Assign(this.FAppearance.FDownFill);
            AGraphics.FStroke.Assign(this.FAppearance.FDownStroke);
          } else if (this.FHover) {
            AGraphics.FFill.Assign(this.FAppearance.FHoverFill);
            AGraphics.FStroke.Assign(this.FAppearance.FHoverStroke);
          } else {
            AGraphics.FFill.Assign(this.FAppearance.FNormalFill);
            AGraphics.FStroke.Assign(this.FAppearance.FNormalStroke);
          };
        } else {
          AGraphics.FFill.Assign(this.FAppearance.FDisabledFill);
          AGraphics.FStroke.Assign(this.FAppearance.FDisabledStroke);
        };
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
        if (this.FAppearance.FFlatStyle) {
          AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        } else AGraphics.DrawRoundRectangle$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FAppearance.FRounding,rtl.refSet(this.FAppearance.FCorners),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        if (this.FAppearance.FShowInnerStroke && !this.FAppearance.FFlatStyle) {
          pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
              return r;
            }, set: function (v) {
              r = v;
            }},-1,-1);
          AGraphics.FStroke.Assign(this.FAppearance.FInnerStroke);
          AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
          AGraphics.DrawRoundRectangle$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FAppearance.FRounding,rtl.refSet(this.FAppearance.FCorners),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        };
      };
      this.DrawBitmap(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect));
      this.DrawText(AGraphics);
      this.DrawButton(AGraphics);
      if (this.FShowFocus$1 && this.IsFocused()) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTextRect());
        AGraphics.DrawFocusRectangle$3(new pas["WEBLib.TMSFNCTypes"].TRectF(r),0,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      if (this.IsDesignTime() && this.CanDrawDesignTime()) AGraphics.DrawFocusRectangle$3(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),0,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.DropDown = function () {
      if (!(this.FPopup != null)) return;
      if (!this.FPopup.FIsOpen) {
        if (this.FOnBeforeDropDown != null) this.FOnBeforeDropDown(this);
        if (this.FDropDownAutoWidth) this.FPopup.SetDropDownWidth(this.GetWidth());
        this.FPopup.SetPlacement(this.FPopupPlacement);
        this.FPopup.SetIsOpen(true);
        if (this.FOnDropDown != null) this.FOnDropDown(this);
      } else this.FPopup.SetIsOpen(false);
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TTMSFNCToolBarButtonDropDownKind = {"0": "ddkNormal", ddkNormal: 0, "1": "ddkDropDown", ddkDropDown: 1, "2": "ddkDropDownButton", ddkDropDownButton: 2};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonDropDownKind",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonDropDownKind});
  this.TTMSFNCToolBarButtonDropDownPosition = {"0": "ddpRight", ddpRight: 0, "1": "ddpBottom", ddpBottom: 1};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonDropDownPosition",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonDropDownPosition});
  rtl.createClass($mod,"TTMSFNCToolBarDropDownButton",$mod.TTMSFNCDefaultToolBarButton,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarDropDownButton);
    };
    this.GetBitmapRect$1 = function (ARect) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Bottom - 3));
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont$1","SetFont$1");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus$1","SetShowFocus$1",{Default: false});
    $r.addProperty("TextVisible",2,rtl.boolean,"FTextVisible","SetTextVisible",{Default: true});
    $r.addProperty("StretchText",2,rtl.boolean,"FStretchText","SetStretchText",{Default: false});
    $r.addProperty("WordWrapping",2,rtl.boolean,"FWordWrapping","SetWordWrapping",{Default: false});
    $r.addProperty("HorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FHorizontalTextAlign","SetHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("VerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FVerticalTextAlign","SetVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("Trimming",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextTrimming"],"FTrimming","SetTrimming",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter});
    $r.addProperty("Bitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FBitmaps","SetBitmaps");
    $r.addProperty("DisabledBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FDisabledBitmaps","SetDisabledBitmaps");
    $r.addProperty("HoverBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FHoverBitmaps","SetHoverBitmaps");
    $r.addProperty("BitmapVisible",2,rtl.boolean,"FBitmapVisible","SetBitmapVisible",{Default: false});
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
    $r.addProperty("LastElement",2,rtl.boolean,"FLastElement","SetLastElement",{Default: false});
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCToolBarButtonAppearance"],"FAppearance","SetAppearance");
  });
  rtl.createClass($mod,"TTMSFNCCustomToolBarButton",$mod.TTMSFNCDefaultToolBarButton,function () {
    this.$init = function () {
      $mod.TTMSFNCDefaultToolBarButton.$init.call(this);
      this.FDropDownButton = null;
      this.FDropDownKind = 0;
      this.FDropDownPosition = 0;
      this.FHidden = false;
      this.FAutoOptionsMenuText = "";
    };
    this.$final = function () {
      this.FDropDownButton = undefined;
      $mod.TTMSFNCDefaultToolBarButton.$final.call(this);
    };
    this.SetDropDownKind = function (Value) {
      if (this.FDropDownKind !== Value) {
        this.FDropDownKind = Value;
        if (this.FDropDownButton != null) {
          var $tmp1 = this.FDropDownKind;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal) {
            this.FDropDownButton.SetVisible(false);
            this.FDropDownButton.SetParent(null);
            this.FDropDownButton.FAppearance.SetTransparent(false);
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown) {
            this.FDropDownButton.SetVisible(false);
            this.FDropDownButton.SetParent(this);
            this.FDropDownButton.FAppearance.SetTransparent(true);
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDownButton) {
            this.FDropDownButton.SetVisible(true);
            this.FDropDownButton.SetParent(this);
            this.FDropDownButton.FAppearance.SetTransparent(false);
          };
        };
        this.Invalidate();
      };
    };
    this.SetDropDownPosition = function (Value) {
      if (this.FDropDownPosition !== Value) {
        this.FDropDownPosition = Value;
        if (this.FDropDownButton != null) {
          var $tmp1 = Value;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
            this.FDropDownButton.SetAlign(pas["WEBLib.Controls"].TAlign.alRight);
            this.FDropDownButton.SetWidth(17);
            this.FDropDownButton.FAppearance.SetCorners(rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) {
            this.FDropDownButton.SetAlign(pas["WEBLib.Controls"].TAlign.alBottom);
            this.FDropDownButton.SetHeight(10);
            this.FDropDownButton.FAppearance.SetCorners(rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
          };
        };
      };
    };
    this.SetAdaptToStyle = function (Value) {
      $mod.TTMSFNCDefaultToolBarButton.SetAdaptToStyle.apply(this,arguments);
      if (this.FDropDownButton != null) this.FDropDownButton.SetAdaptToStyle(this.GetAdaptToStyle());
    };
    this.AppearanceChanged = function () {
      $mod.TTMSFNCDefaultToolBarButton.AppearanceChanged.apply(this,arguments);
      this.UpdateDropDownButton();
    };
    this.UpdateDropDownButton = function () {
      if (this.FDropDownButton != null) this.FDropDownButton.FAppearance.SetRounding(this.FAppearance.FRounding);
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      $mod.TTMSFNCDefaultToolBarButton.HandleMouseDown.apply(this,arguments);
      if (this.FDropDownKind === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown) this.DropDown();
    };
    this.DropDownButtonClick = function (Sender) {
      this.DropDown();
    };
    this.DrawButton = function (AGraphics) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      $mod.TTMSFNCDefaultToolBarButton.DrawButton.apply(this,arguments);
      if ((this.FDropDownButton != null) && (this.FDropDownKind === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown)) {
        var $tmp1 = this.FDropDownPosition;
        if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(this.GetWidth() - this.FDropDownButton.GetWidth(),0,this.GetWidth(),this.GetHeight()))}
         else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,this.GetHeight() - this.FDropDownButton.GetHeight(),this.GetWidth(),this.GetHeight()));
        this.FDropDownButton.DrawBitmap(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r));
      };
    };
    this.SetEnabled = function (Value) {
      var d = null;
      pas["WEBLib.Controls"].TControl.SetEnabled.apply(this,arguments);
      d = this.GetDropDownButtonControl();
      if (d != null) d.SetEnabled(Value);
    };
    this.GetDropDownButtonClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarDropDownButton;
      return Result;
    };
    this.GetDropDownRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF($mod.TTMSFNCDefaultToolBarButton.GetDropDownRect.call(this));
      if ((this.FDropDownButton != null) && (this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal)) {
        if (this.FDropDownKind === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown) {
          var $tmp1 = this.FDropDownPosition;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
            Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(this.GetWidth() - this.FDropDownButton.GetWidth(),0,this.GetWidth(),this.GetHeight()))}
           else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,this.GetHeight() - this.FDropDownButton.GetHeight(),this.GetWidth(),this.GetHeight()));
        } else {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(this.FDropDownButton.GetLeft(),this.FDropDownButton.GetTop(),this.FDropDownButton.GetLeft() + this.FDropDownButton.GetWidth(),this.FDropDownButton.GetTop() + this.FDropDownButton.GetHeight()));
        };
      };
      return Result;
    };
    this.GetTextRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bmpr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var dr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      bmpr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBitmapRect$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r)));
      dr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetDropDownRect());
      if (this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal) {
        if (!this.FStretchText) {
          var $tmp1 = this.FBitmapPosition;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            var $tmp2 = this.FDropDownPosition;
            if ($tmp2 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
             else if ($tmp2 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,r.Right - 3,dr.Top - 3));
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) {
            var $tmp3 = this.FDropDownPosition;
            if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,dr.Left - 3,r.Bottom - 3))}
             else if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,r.Right - 3,dr.Top - 3));
          };
        } else {
          var $tmp4 = this.FDropDownPosition;
          if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
            Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
           else if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,dr.Top - 3));
        };
      } else {
        if (!this.FStretchText) {
          var $tmp5 = this.FBitmapPosition;
          if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
           else if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,dr.Left - 3,r.Bottom - 3));
        } else Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3));
      };
      return Result;
    };
    this.GetBitmapRect$1 = function (ARect) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var dr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bs = 0.0;
      bs = this.GetBitmapSize();
      var $tmp1 = this.FLayout;
      if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) bs = this.GetLargeLayoutBitmapSize();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left,r.Bottom));
      if (this.FBitmapVisible) {
        if (this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal) {
          dr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetDropDownRect());
          var $tmp2 = this.FBitmapPosition;
          if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            var $tmp3 = this.FDropDownPosition;
            if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,(Result.Left + 3) + bs,Result.Bottom - 3))}
             else if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,(Result.Left + 3) + bs,dr.Top - 3));
          } else if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) {
            var $tmp4 = this.FDropDownPosition;
            if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,dr.Left - 3,(Result.Top + 3) + bs))}
             else if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,r.Right - 3,(Result.Top + 3) + bs));
          };
        } else if (!this.FTextVisible || (this.GetText() === "")) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Bottom - 3));
          if ((bs !== -1) && !this.FStretchBitmapIfNoText) {
            Result.Left = Math.round(r.Left + (((r.Right - r.Left) - bs) / 2));
            Result.Top = Math.round(r.Top + (((r.Bottom - r.Top) - bs) / 2));
            Result.Right = Result.Left + bs;
            Result.Bottom = Result.Top + bs;
          };
        } else if (this.FTextVisible && !(this.GetText() === "")) {
          var $tmp5 = this.FBitmapPosition;
          if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,(r.Left + 3) + bs,r.Bottom - 3))}
           else if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,(r.Top + 3) + bs));
        };
      };
      return Result;
    };
    this.GetBitmapRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF($mod.TTMSFNCDefaultToolBarButton.GetBitmapRect.call(this));
      return Result;
    };
    this.CanDropDown = function () {
      var Result = false;
      Result = this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal;
      return Result;
    };
    this.Assign = function (Source) {
      $mod.TTMSFNCDefaultToolBarButton.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBarButton.isPrototypeOf(Source)) {
        this.FDropDownKind = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FDropDownKind;
        this.FDropDownPosition = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FDropDownPosition;
        this.FAutoOptionsMenuText = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FAutoOptionsMenuText;
        this.FHidden = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FHidden;
        this.Invalidate();
      };
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCDefaultToolBarButton.Create$1.apply(this,arguments);
      this.FHidden = false;
      this.FDropDownPosition = $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight;
      this.FDropDownButton = this.GetDropDownButtonClass().$create("Create$1",[this]);
      this.FDropDownButton.SetTabStop(false);
      this.FDropDownButton.SetText("");
      this.FDropDownButton.FOnClick = rtl.createCallback(this,"DropDownButtonClick");
      this.FDropDownButton.SetVisible(false);
      this.FDropDownButton.SetWidth(17);
      this.FDropDownButton.FAppearance.SetCorners(rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
      this.FDropDownButton.SetAlign(pas["WEBLib.Controls"].TAlign.alRight);
      this.FDropDownButton.FStored = false;
      this.FDropDownButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FDropDownButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FDropDownButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FDropDownButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FDropDownButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FDropDownButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
    };
    this.Destroy = function () {
      rtl.free(this,"FDropDownButton");
      $mod.TTMSFNCDefaultToolBarButton.Destroy.apply(this,arguments);
    };
    this.GetDropDownButtonControl = function () {
      var Result = null;
      Result = this.FDropDownButton;
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarButton",$mod.TTMSFNCCustomToolBarButton,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarButton);
    };
    var $r = this.$rtti;
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont$1","SetFont$1");
    $r.addProperty("AutoOptionsMenuText",0,rtl.string,"FAutoOptionsMenuText","FAutoOptionsMenuText");
    $r.addProperty("DropDownAutoWidth",2,rtl.boolean,"FDropDownAutoWidth","SetDropDownAutoWidth",{Default: false});
    $r.addProperty("DropDownKind",2,$mod.$rtti["TTMSFNCToolBarButtonDropDownKind"],"FDropDownKind","SetDropDownKind",{Default: $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal});
    $r.addProperty("DropDownPosition",2,$mod.$rtti["TTMSFNCToolBarButtonDropDownPosition"],"FDropDownPosition","SetDropDownPosition",{Default: $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight});
    $r.addProperty("DropDownHeight",14,rtl.double,"FDropDownHeight","SetDropDownHeight",{stored: "IsDropDownHeightStored"});
    $r.addProperty("DropDownWidth",14,rtl.double,"FDropDownWidth","SetDropDownWidth",{stored: "IsDropDownWidthStored"});
    $r.addProperty("DropDownControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FDropDownControl","SetDropDownControl");
    $r.addProperty("OnBeforeDropDown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnBeforeDropDown","FOnBeforeDropDown");
    $r.addProperty("OnDropDown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDropDown","FOnDropDown");
    $r.addProperty("OnCloseDropDown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnCloseDropDown","FOnCloseDropDown");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus$1","SetShowFocus$1",{Default: false});
    $r.addProperty("TextVisible",2,rtl.boolean,"FTextVisible","SetTextVisible",{Default: true});
    $r.addProperty("StretchText",2,rtl.boolean,"FStretchText","SetStretchText",{Default: false});
    $r.addProperty("StretchBitmapIfNoText",2,rtl.boolean,"FStretchBitmapIfNoText","SetStretchBitmapIfNoText",{Default: true});
    $r.addProperty("HorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FHorizontalTextAlign","SetHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("VerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FVerticalTextAlign","SetVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("Trimming",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextTrimming"],"FTrimming","SetTrimming",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter});
    $r.addProperty("Bitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FBitmaps","SetBitmaps");
    $r.addProperty("LargeLayoutBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FLargeLayoutBitmaps","SetLargeLayoutBitmaps");
    $r.addProperty("Layout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FLayout","SetLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblNone});
    $r.addProperty("CompactLayout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FCompactLayout","SetCompactLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblNone});
    $r.addProperty("MinimumLayout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FMinimumLayout","SetMinimumLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblBitmap});
    $r.addProperty("MaximumLayout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FMaximumLayout","SetMaximumLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblLarge});
    $r.addProperty("BitmapPosition",2,$mod.$rtti["TTMSFNCToolBarButtonBitmapPosition"],"FBitmapPosition","SetBitmapPosition",{Default: $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft});
    $r.addProperty("DisabledBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FDisabledBitmaps","SetDisabledBitmaps");
    $r.addProperty("HoverBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FHoverBitmaps","SetHoverBitmaps");
    $r.addProperty("LargeLayoutDisabledBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FLargeLayoutDisabledBitmaps","SetLargeLayoutDisabledBitmaps");
    $r.addProperty("LargeLayoutHoverBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FLargeLayoutHoverBitmaps","SetLargeLayoutHoverBitmaps");
    $r.addProperty("BitmapVisible",2,rtl.boolean,"FBitmapVisible","SetBitmapVisible",{Default: false});
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("BitmapSize",14,rtl.double,"FBitmapSize","SetBitmapSize",{stored: "IsBitmapSizeStored"});
    $r.addProperty("AutoBitmapSize",2,rtl.boolean,"FAutoBitmapSize","SetAutoBitmapSize",{Default: false});
    $r.addProperty("LargeLayoutBitmapSize",14,rtl.double,"FLargeLayoutBitmapSize","SetLargeLayoutBitmapSize",{stored: "IsLargeLayoutBitmapSizeStored"});
    $r.addProperty("LargeLayoutAutoBitmapSize",2,rtl.boolean,"FLargeLayoutAutoBitmapSize","SetLargeLayoutAutoBitmapSize",{Default: false});
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
    $r.addProperty("LastElement",2,rtl.boolean,"FLastElement","SetLastElement",{Default: false});
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCToolBarButtonAppearance"],"FAppearance","SetAppearance");
    $r.addProperty("WordWrapping",2,rtl.boolean,"FWordWrapping","SetWordWrapping",{Default: false});
  });
  rtl.createClass($mod,"TTMSFNCCustomToolBarAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FFill = null;
      this.FStroke = null;
      this.FVerticalSpacing = 0.0;
      this.FHorizontalSpacing = 0.0;
      this.FDragGripColor = 0;
      this.FDragGrip = false;
      this.FFlatStyle = false;
      this.FFont = null;
      this.FSeparatorStroke = null;
      this.FSeparator = false;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FFont = undefined;
      this.FSeparatorStroke = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.SetHorizontalSpacing = function (Value) {
      if (this.FHorizontalSpacing !== Value) {
        this.FHorizontalSpacing = Value;
        this.FOwner.UpdateControls();
      };
    };
    this.SetVerticalSpacing = function (Value) {
      if (this.FVerticalSpacing !== Value) {
        this.FVerticalSpacing = Value;
        this.FOwner.UpdateControls();
      };
    };
    this.SetDragGrip = function (Value) {
      if (this.FDragGrip !== Value) {
        this.FDragGrip = Value;
        this.FOwner.UpdateControls();
      };
    };
    this.SetDragGripColor = function (Value) {
      if (this.FDragGripColor !== Value) {
        this.FDragGripColor = Value;
        this.FOwner.Invalidate();
      };
    };
    this.IsHorizontalSpacingStored = function () {
      var Result = false;
      Result = this.FHorizontalSpacing !== 3;
      return Result;
    };
    this.IsVerticalSpacingStored = function () {
      var Result = false;
      Result = this.FVerticalSpacing !== 3;
      return Result;
    };
    this.SetFlatStyle = function (Value) {
      if (this.FFlatStyle !== Value) {
        this.FFlatStyle = Value;
        if (this.FOwner != null) this.FOwner.ApplyFlatStyle();
      };
    };
    this.SetSeparator = function (Value) {
      if (this.FSeparator !== Value) {
        this.FSeparator = Value;
        this.FOwner.Invalidate();
      };
    };
    this.SetSeparatorStroke = function (Value) {
      this.FSeparatorStroke.Assign(Value);
    };
    this.FillChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.StrokeChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomToolBarAppearance.isPrototypeOf(Source)) {
        this.FSeparatorStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FSeparatorStroke);
        this.FSeparator = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FSeparator;
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FFill);
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FStroke);
        this.FHorizontalSpacing = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FHorizontalSpacing;
        this.FVerticalSpacing = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FVerticalSpacing;
        this.FDragGripColor = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FDragGripColor;
        this.FDragGrip = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FDragGrip;
        this.FFlatStyle = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FFlatStyle;
      };
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFlatStyle = false;
      this.FHorizontalSpacing = 3;
      this.FVerticalSpacing = 3;
      this.FDragGrip = true;
      this.FDragGripColor = 13882323;
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFill.SetColor(16777215);
      this.FFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,230,230));
      this.FSeparatorStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,16777215]);
      this.FSeparatorStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
    };
    this.Destroy = function () {
      rtl.free(this,"FSeparatorStroke");
      rtl.free(this,"FFont");
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarAppearance",$mod.TTMSFNCCustomToolBarAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("Separator",2,rtl.boolean,"FSeparator","SetSeparator",{Default: false});
    $r.addProperty("SeparatorStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FSeparatorStroke","SetSeparatorStroke");
    $r.addProperty("HorizontalSpacing",14,rtl.double,"FHorizontalSpacing","SetHorizontalSpacing",{stored: "IsHorizontalSpacingStored"});
    $r.addProperty("VerticalSpacing",14,rtl.double,"FVerticalSpacing","SetVerticalSpacing",{stored: "IsVerticalSpacingStored"});
    $r.addProperty("DragGrip",2,rtl.boolean,"FDragGrip","SetDragGrip",{Default: true});
    $r.addProperty("DragGripColor",2,rtl.longint,"FDragGripColor","SetDragGripColor",{Default: 13882323});
  });
  rtl.createClass($mod,"TTMSFNCToolBarControl",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FControlIndex = 0;
      this.FControl = null;
      this.FLayout = 0;
      this.FBitmap = null;
    };
    this.$final = function () {
      this.FControl = undefined;
      this.FBitmap = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.Create$1 = function () {
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  $mod.$rtti.$MethodVar("TTMSFNCToolBarCustomizeOptionsMenu",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["APopupMenu",pas["WEBLib.TMSFNCTypes"].$rtti["TPopupMenu"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarCustomizeOptionsMenuItem",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["AMenuItem",pas["WEBLib.Menus"].$rtti["TMenuItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarCanShowOptionsMenuItem",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["ACanShowItem",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarOptionsMenuItemClick",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["AMenuItem",pas["WEBLib.Menus"].$rtti["TMenuItem"]],["AExecuteDefaultAction",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarIsLastElement",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["AIsLastElement",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomToolBarOptionsMenu",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FShowItemText = false;
      this.FShowItemBitmap = false;
      this.FShowButton = false;
      this.FItemBitmapWidth = 0.0;
      this.FAutoItemBitmapWidth = false;
    };
    this.$final = function () {
      this.FOwner = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetShowButton = function (Value) {
      if (this.FShowButton !== Value) {
        this.FShowButton = Value;
        this.FOwner.FOptionsMenuButton.SetVisible(this.FShowButton);
        if (this.FShowButton) {
          this.FOwner.FOptionsMenuButton.SetParent(this.FOwner)}
         else this.FOwner.FOptionsMenuButton.SetParent(null);
        this.FOwner.UpdateControls();
      };
    };
    this.SetShowItemBitmap = function (Value) {
      if (this.FShowItemBitmap !== Value) {
        this.FShowItemBitmap = Value;
      };
    };
    this.SetShowItemText = function (Value) {
      if (this.FShowItemText !== Value) {
        this.FShowItemText = Value;
      };
    };
    this.SetAutoItemBitmapWidth = function (Value) {
      if (this.FAutoItemBitmapWidth !== Value) {
        this.FAutoItemBitmapWidth = Value;
      };
    };
    this.SetItemBitmapWidth = function (Value) {
      if (this.FItemBitmapWidth !== Value) {
        this.FItemBitmapWidth = Value;
      };
    };
    this.IsItemBitmapWidthStored = function () {
      var Result = false;
      Result = this.FItemBitmapWidth !== 50;
      return Result;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomToolBarOptionsMenu.isPrototypeOf(Source)) {
        this.FShowItemText = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FShowItemText;
        this.FShowItemBitmap = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FShowItemBitmap;
        this.FShowButton = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FShowButton;
        this.FAutoItemBitmapWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FAutoItemBitmapWidth;
        this.FItemBitmapWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FItemBitmapWidth;
      };
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FShowItemText = true;
      this.FShowButton = true;
      this.FShowItemBitmap = true;
      this.FAutoItemBitmapWidth = true;
      this.FItemBitmapWidth = 50;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarOptionsMenu",$mod.TTMSFNCCustomToolBarOptionsMenu,function () {
    var $r = this.$rtti;
    $r.addProperty("ShowButton",2,rtl.boolean,"FShowButton","SetShowButton",{Default: true});
    $r.addProperty("ShowItemBitmap",2,rtl.boolean,"FShowItemBitmap","SetShowItemBitmap",{Default: true});
    $r.addProperty("ShowItemText",2,rtl.boolean,"FShowItemText","SetShowItemText",{Default: true});
    $r.addProperty("AutoItemBitmapWidth",2,rtl.boolean,"FAutoItemBitmapWidth","SetAutoItemBitmapWidth",{Default: true});
    $r.addProperty("ItemBitmapWidth",14,rtl.double,"FItemBitmapWidth","SetItemBitmapWidth",{stored: "IsItemBitmapWidthStored"});
  });
  rtl.createClass($mod,"TTMSFNCToolBarControlObjectList",pas.contnrs.TObjectList,function () {
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarControlList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TTMSFNCToolBarDragGripMovingEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["DeltaX",rtl.double],["DeltaY",rtl.double]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCToolBarPopup",pas["WEBLib.TMSFNCPopup"].TTMSFNCNonFocusablePopup,function () {
  });
  rtl.createClass($mod,"TTMSFNCCustomToolBar",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FCompactToolbar = null;
      this.FCompactPopup = null;
      this.FHover = false;
      this.FHoverP = false;
      this.FQuickMenuButtonHover = false;
      this.FQuickMenuButtonHoverP = false;
      this.FDown = false;
      this.FQuickMenuButtonDown = false;
      this.FOldWidth = 0.0;
      this.FOldMenuButtonState = false;
      this.FBitmapContainer = null;
      this.FInsideDrag = false;
      this.FDragGripMoving = false;
      this.FDragGripDown = false;
      this.FDragGripDownPt = new pas["WEBLib.TMSFNCTypes"].TPointF();
      this.FHiddenControls = null;
      this.FCompactControls = null;
      this.FBlockUpdate = false;
      this.FBlockResize = false;
      this.FAutoSize = false;
      this.FAppearance = null;
      this.FAutoAlign = false;
      this.FOptionsMenuButton = null;
      this.FAutoOptionsMenu = null;
      this.FOnOptionsMenuCustomize = null;
      this.FOnOptionsMenuItemCustomize = null;
      this.FOnOptionsMenuButtonClick = null;
      this.FOptionsMenu = null;
      this.FCustomOptionsMenu = null;
      this.FOnOptionsMenuItemCanShow = null;
      this.FState = 0;
      this.FOnOptionsMenuItemClick = null;
      this.FOnOptionsMenuItemApplyStyle = null;
      this.FOnUpdateDockPanel = null;
      this.FOnUpdateControls = null;
      this.FOnIsLastElement = null;
      this.FOnDragGripMoving = null;
      this.FAutoMoveToolBar = false;
      this.FOnInternalDblClick$1 = null;
      this.FOnInternalMouseDown$1 = null;
      this.FOnInternalMouseMove$1 = null;
      this.FOnInternalMouseUp$1 = null;
      this.FAutoHeight = false;
      this.FAutoWidth = false;
      this.FOnInternalInsertControl = null;
      this.FAutoStretchHeight = false;
      this.FText = "";
      this.FFont$1 = null;
      this.FVerticalTextAlign = 0;
      this.FTrimming = 0;
      this.FHorizontalTextAlign = 0;
      this.FWordWrapping = false;
      this.FTextVisible = false;
      this.FMinimumWidth = 0.0;
      this.FCompact = false;
      this.FCanCompact = false;
      this.FCompactWidth = 0.0;
      this.FCompactAppearance = null;
      this.FCompactBitmaps = null;
      this.FOnCompactClick = null;
      this.FCompactBitmapSize = 0.0;
      this.FCompactBitmapVisible = false;
      this.FCompactExpanderBitmaps = null;
      this.FQuickMenuButton = false;
      this.FQuickMenuButtonAppearance = null;
      this.FOnQuickMenuButtonClick = null;
      this.FQuickMenuButtonBitmaps = null;
      this.FQuickMenuButtonHint = "";
      this.FCompactAutoBitmapSize = false;
    };
    this.$final = function () {
      this.FCompactToolbar = undefined;
      this.FCompactPopup = undefined;
      this.FBitmapContainer = undefined;
      this.FDragGripDownPt = undefined;
      this.FHiddenControls = undefined;
      this.FCompactControls = undefined;
      this.FAppearance = undefined;
      this.FOptionsMenuButton = undefined;
      this.FAutoOptionsMenu = undefined;
      this.FOnOptionsMenuCustomize = undefined;
      this.FOnOptionsMenuItemCustomize = undefined;
      this.FOnOptionsMenuButtonClick = undefined;
      this.FOptionsMenu = undefined;
      this.FCustomOptionsMenu = undefined;
      this.FOnOptionsMenuItemCanShow = undefined;
      this.FOnOptionsMenuItemClick = undefined;
      this.FOnOptionsMenuItemApplyStyle = undefined;
      this.FOnUpdateDockPanel = undefined;
      this.FOnUpdateControls = undefined;
      this.FOnIsLastElement = undefined;
      this.FOnDragGripMoving = undefined;
      this.FOnInternalDblClick$1 = undefined;
      this.FOnInternalMouseDown$1 = undefined;
      this.FOnInternalMouseMove$1 = undefined;
      this.FOnInternalMouseUp$1 = undefined;
      this.FOnInternalInsertControl = undefined;
      this.FFont$1 = undefined;
      this.FCompactAppearance = undefined;
      this.FCompactBitmaps = undefined;
      this.FOnCompactClick = undefined;
      this.FCompactExpanderBitmaps = undefined;
      this.FQuickMenuButtonAppearance = undefined;
      this.FOnQuickMenuButtonClick = undefined;
      this.FQuickMenuButtonBitmaps = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetAppearance = function (Value) {
      this.FAppearance.Assign(Value);
    };
    this.SetAS = function (Value) {
      if (this.FAutoSize !== Value) {
        this.FAutoSize = Value;
        this.UpdateControls();
      };
    };
    this.SetAutoAlign = function (Value) {
      if (this.FAutoAlign !== Value) {
        this.FAutoAlign = Value;
        this.UpdateControls();
      };
    };
    this.SetOptionsMenu = function (Value) {
      this.FOptionsMenu.Assign(Value);
    };
    this.SetState = function (Value) {
      var I = 0;
      var c = null;
      if (this.FState !== Value) {
        this.FState = Value;
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = this.GetControls(I);
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBarElement).SetState(this.FState);
        };
      };
    };
    this.SetAutoHeight = function (Value) {
      if (this.FAutoHeight !== Value) {
        this.FAutoHeight = Value;
        this.UpdateControls();
      };
    };
    this.SetAutoWidth = function (Value) {
      if (this.FAutoWidth !== Value) {
        this.FAutoWidth = Value;
        this.UpdateControls();
      };
    };
    this.SetAutoStretchHeight = function (Value) {
      if (this.FAutoStretchHeight !== Value) {
        this.FAutoStretchHeight = Value;
        this.UpdateControls();
      };
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.UpdateControls();
      };
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.SetFont$1 = function (Value) {
      this.FFont$1.Assign(Value);
    };
    this.SetHorizontalTextAlign = function (Value) {
      if (this.FHorizontalTextAlign !== Value) {
        this.FHorizontalTextAlign = Value;
        this.Invalidate();
      };
    };
    this.SetTrimming = function (Value) {
      if (this.FTrimming !== Value) {
        this.FTrimming = Value;
        this.UpdateControls();
      };
    };
    this.SetVerticalTextAlign = function (Value) {
      if (this.FVerticalTextAlign !== Value) {
        this.FVerticalTextAlign = Value;
        this.UpdateControls();
      };
    };
    this.SetWordWrapping = function (Value) {
      if (this.FWordWrapping !== Value) {
        this.FWordWrapping = Value;
        this.UpdateControls();
      };
    };
    this.IsMinimumWidthStored = function () {
      var Result = false;
      Result = this.FMinimumWidth !== 30;
      return Result;
    };
    this.SetMinimumWidth = function (Value) {
      if (this.FMinimumWidth !== Value) {
        this.FMinimumWidth = Value;
        this.UpdateControls();
      };
    };
    this.SetCompact = function (Value) {
      if (this.FCompact !== Value) {
        if (this.FCanCompact) {
          this.FCompact = Value;
          if (this.FCompact) {
            this.FOldMenuButtonState = this.FOptionsMenu.FShowButton;
            this.FOptionsMenu.SetShowButton(false);
            this.FOldWidth = this.GetWidth();
            this.CompactControls();
            this.SetWidth(Math.round(this.FCompactWidth));
          } else {
            this.SetWidth(Math.round(this.FOldWidth));
            this.UncompactControls();
            this.FOptionsMenu.SetShowButton(this.FOldMenuButtonState);
          };
          this.UpdateControls();
        };
      };
    };
    this.SetCanCompact = function (Value) {
      if (this.FCanCompact !== Value) this.FCanCompact = Value;
    };
    this.IsCompactWidthStored = function () {
      var Result = false;
      Result = this.FCompactWidth !== 50;
      return Result;
    };
    this.SetCompactWidth = function (Value) {
      if (this.FCompactWidth !== Value) {
        this.FCompactWidth = Value;
        if (this.FCompact) this.SetWidth(Math.round(this.FCompactWidth));
      };
    };
    this.SetCompactAppearance = function (Value) {
      this.FCompactAppearance.Assign(Value);
    };
    this.SetCompactBitmaps = function (Value) {
      this.FCompactBitmaps.Assign(Value);
    };
    this.IsCompactBitmapSizeStored = function () {
      var Result = false;
      Result = this.FCompactBitmapSize !== 24;
      return Result;
    };
    this.SetCompactBitmapSize = function (Value) {
      if (this.FCompactBitmapSize !== Value) {
        this.FCompactBitmapSize = Value;
        this.Invalidate();
      };
    };
    this.SetCompactBitmapVisible = function (Value) {
      if (this.FCompactBitmapVisible !== Value) {
        this.FCompactBitmapVisible = Value;
        this.Invalidate();
      };
    };
    this.SetQuickMenuButton = function (Value) {
      if (this.FQuickMenuButton !== Value) {
        this.FQuickMenuButton = Value;
        this.Invalidate();
      };
    };
    this.SetQuickMenuButtonAppearance = function (Value) {
      this.FQuickMenuButtonAppearance.Assign(Value);
    };
    this.SetCompactAutoBitmapSize = function (Value) {
      if (this.FCompactAutoBitmapSize !== Value) {
        this.FCompactAutoBitmapSize = Value;
        this.Invalidate();
      };
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,1,3);
      return Result;
    };
    this.CanDrawDesignTime = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.CanBuildControls = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetOptionsMenuButtonClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarDropDownButton;
      return Result;
    };
    this.GetTextSize = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      var g = null;
      var sz = 0.0;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result.cx = 0;
      Result.cy = 0;
      if (this.FTextVisible && (this.FText !== "")) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,this.FNativeCanvas,true]);
        g.FBitmapContainer = this.GetBitmapContainer();
        g.FOptimizedHTMLDrawing = this.FOptimizedHTMLDrawing;
        try {
          sz = 0;
          if (this.FAppearance.FDragGrip) {
            if (this.FState === $mod.TTMSFNCToolBarElementState.esLarge) {
              sz = 3}
             else sz = 2;
          };
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + sz,r.Top,r.Right,r.Bottom));
          pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
              return r;
            }, set: function (v) {
              r = v;
            }},-2,-2);
          Result = new pas["WEBLib.TMSFNCTypes"].TSizeF(g.CalculateTextSize(this.FText,new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FWordWrapping,true));
        } finally {
          g = rtl.freeLoc(g);
        };
      };
      return Result;
    };
    this.GetHiddenControl = function (AControl) {
      var Result = null;
      var I = 0;
      Result = null;
      for (var $l1 = 0, $end2 = this.FHiddenControls.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (this.FHiddenControls.GetItem$1(I).FControl === AControl) {
          Result = this.FHiddenControls.GetItem$1(I);
          break;
        };
      };
      return Result;
    };
    this.GetHiddenControlCount = function (AControl) {
      var Result = 0;
      var I = 0;
      var lst = null;
      lst = $mod.TTMSFNCToolBarControlList.$create("Create$1");
      for (var $l1 = 0, $end2 = this.FHiddenControls.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        lst.Add(this.FHiddenControls.GetItem$1(I));
      };
      Result = 0;
      for (var $l3 = 0, $end4 = lst.GetCount() - 1; $l3 <= $end4; $l3++) {
        I = $l3;
        if (lst.GetItem(I).FControl === AControl) {
          break}
         else Result += 1;
      };
      lst = rtl.freeLoc(lst);
      return Result;
    };
    this.GetCompactTextRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bmpr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      bmpr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCompactBitmapRect(new pas["WEBLib.TMSFNCTypes"].TRectF(r)));
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,r.Right - 3,r.Bottom - 23));
      return Result;
    };
    this.GetCompactBitmapRect = function (ARect) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bs = 0.0;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right,r.Top));
      if (this.FCompactBitmapVisible) {
        bs = this.GetCompactBitmapSize();
        if (!this.FTextVisible || (this.FText === "")) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Bottom - 3));
          if (bs !== -1) {
            Result.Left = Math.round(r.Left + (((r.Right - r.Left) - bs) / 2));
            Result.Top = Math.round(r.Top + (((r.Bottom - r.Top) - bs) / 2));
            Result.Right = Result.Left + bs;
            Result.Bottom = Result.Top + bs;
          };
        } else if (this.FTextVisible && !(this.FText === "")) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Top + bs));
      };
      return Result;
    };
    this.GetCompactBitmapSize = function () {
      var Result = 0.0;
      var bmp = null;
      Result = this.FCompactBitmapSize;
      if (this.FCompactAutoBitmapSize) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FCompactBitmaps,0,this.GetBitmapContainer());
        if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = Math.max(bmp.GetHeight(),bmp.GetWidth());
      };
      return Result;
    };
    this.GetQuickMenuButtonRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(this.GetWidth() - 16,this.GetHeight() - 16,this.GetWidth(),this.GetHeight()));
      if (this.FAppearance.FSeparator) {
        Result.Left = Result.Left - this.FAppearance.FSeparatorStroke.FWidth;
        Result.Right = Result.Right - this.FAppearance.FSeparatorStroke.FWidth;
      };
      return Result;
    };
    this.HandleQuickMenuButton = function () {
      if (this.FOnQuickMenuButtonClick != null) this.FOnQuickMenuButtonClick(this);
    };
    this.CompactAppearanceChanged = function (Sender) {
      this.Invalidate();
    };
    this.QuickMenuButtonAppearanceChanged = function (Sender) {
      this.Invalidate();
    };
    this.CompactBitmapsChanged = function (Sender) {
      var bmp = null;
      bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FCompactBitmaps,0,this.GetBitmapContainer());
      this.SetCompactBitmapVisible((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp));
      this.Invalidate();
    };
    this.CompactExpanderBitmapsChanged = function (Sender) {
      this.Invalidate();
    };
    this.QuickMenuButtonBitmapsChanged = function (Sender) {
      this.Invalidate();
    };
    this.ApplyFlatStyle = function () {
      var I = 0;
      var c = null;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBar).FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      };
      this.Invalidate();
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.SetAdaptToStyle.apply(this,arguments);
      this.UpdateControls();
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.apply(this,arguments);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FFill.SetColor(c);
      };
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColorTo({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FAppearance.FFill.SetColorTo(c);
      };
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.apply(this,arguments);
      this.FAppearance.SetDragGripColor(13882323);
      this.FAppearance.FFill.SetColor(16777215);
      this.FAppearance.FStroke.SetColor(8421504);
      this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FFill.SetColor(16777215);
      this.FAppearance.FFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,230,230));
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      if (this.FAppearance.FDragGrip && !this.FDragGripMoving) {
        this.FDragGripDown = pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetDragGripRect(true),pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
        this.FDragGripDownPt = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
      };
      if (!this.FDragGripDown) {
        if (this.FCompact) {
          this.FDown = true;
          this.Invalidate();
          this.CaptureEx();
        } else if (this.FQuickMenuButton) {
          this.FQuickMenuButtonDown = pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetQuickMenuButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
          if (this.FQuickMenuButtonDown) {
            this.Invalidate();
            this.CaptureEx();
          };
        };
      };
      if ((this.FOnInternalMouseDown$1 != null) && !(Button === pas["WEBLib.Controls"].TMouseButton.mbRight)) this.FOnInternalMouseDown$1(this);
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var absx = 0.0;
      var absy = 0.0;
      var pt = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var d = null;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      if (this.FCompact) {
        this.FHoverP = this.FHover;
        this.FHover = true;
        if (this.FHover !== this.FHoverP) this.Invalidate();
      } else if (this.FQuickMenuButton) {
        this.FQuickMenuButtonHoverP = this.FQuickMenuButtonHover;
        this.FQuickMenuButtonHover = pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetQuickMenuButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
        if (this.FQuickMenuButtonHover !== this.FQuickMenuButtonHoverP) this.Invalidate();
      };
      if (this.FAppearance.FDragGrip) {
        if (this.FDragGripDown) {
          if (!this.FDragGripMoving) {
            this.CaptureEx();
            this.FDragGripMoving = true;
          };
          if (this.FDragGripMoving) {
            absx = this.FDragGripDownPt.X - X;
            absy = this.FDragGripDownPt.Y - Y;
            if (this.FAutoMoveToolBar) {
              pt = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(this.GetLeft() - absx,this.GetTop() - absy));
              if ($mod.TTMSFNCCustomDockPanel.isPrototypeOf(this.FParent)) {
                d = rtl.as(this.FParent,$mod.TTMSFNCCustomDockPanel);
                if (d.FAutoAlign) {
                  if (pt.Y < d.FAppearance.FMargins.FTop) pt.Y = Math.round(d.FAppearance.FMargins.FTop);
                  if (pt.X < d.FAppearance.FMargins.FLeft) {
                    pt.X = Math.round(d.FAppearance.FMargins.FLeft)}
                   else if ((pt.X + this.GetWidth()) > (d.GetWidth() - d.FAppearance.FMargins.FRight)) pt.X = Math.round((d.GetWidth() - d.FAppearance.FMargins.FRight) - this.GetWidth());
                  this.SetBounds(Math.round(pt.X),Math.round(pt.Y),this.GetWidth(),this.GetHeight());
                };
              };
            };
            this.FDragGripDownPt = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(X + absx,Y + absy));
            this.DoDragGripMoving(absx,absy);
          };
        } else {
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetDragGripRect(true));
          if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(r,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
            if (!this.FInsideDrag) {
              this.FInsideDrag = true;
              this.SetCursor(22);
            };
          } else if (this.FInsideDrag) {
            this.FInsideDrag = false;
            this.SetCursor(0);
          };
        };
      };
      if (this.FOnInternalMouseMove$1 != null) this.FOnInternalMouseMove$1(this);
    };
    this.HandleMouseLeave = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseLeave.apply(this,arguments);
      this.FHover = false;
      this.FQuickMenuButtonHover = false;
      this.SetCursor(0);
      this.FInsideDrag = false;
      this.Invalidate();
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      if (this.FDragGripDown) {
        this.ReleaseCaptureEx()}
       else if (this.FDown && this.FCompact) {
        this.Invalidate();
        this.ReleaseCaptureEx();
        this.HandleCompact();
      } else if ((this.FQuickMenuButtonDown && this.FQuickMenuButton) && !this.FCompact) {
        this.Invalidate();
        this.ReleaseCaptureEx();
        this.HandleQuickMenuButton();
      };
      this.FDragGripDown = false;
      this.FDragGripMoving = false;
      this.FDown = false;
      this.FQuickMenuButtonDown = false;
      if ((this.FOnInternalMouseUp$1 != null) && !(Button === pas["WEBLib.Controls"].TMouseButton.mbRight)) this.FOnInternalMouseUp$1(this);
    };
    this.HandleCompact = function () {
      var I = 0;
      var cc = null;
      this.DeactivateAllPopups();
      if (this.FCompactToolbar != null) {
        rtl.free(this,"FCompactToolbar");
        this.FCompactToolbar = null;
      };
      this.FCompactToolbar = $mod.TTMSFNCCustomToolBar.$create("Create$1",[this.FCompactPopup]);
      this.FCompactToolbar.Assign(this);
      this.FCompactToolbar.SetCompact(false);
      this.FCompactToolbar.SetAS(true);
      this.FCompactToolbar.SetAutoHeight(false);
      this.FCompactToolbar.SetAutoWidth(true);
      this.FCompactToolbar.SetAutoStretchHeight(false);
      this.FCompactToolbar.FAppearance.SetSeparator(false);
      this.FCompactToolbar.SetControlMargins(1,1,1,1);
      this.FCompactToolbar.SetHeight(this.GetHeight() + 2);
      for (var $l1 = this.FCompactControls.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        cc = this.FCompactControls.GetItem$1(I);
        if (cc.FControl != null) {
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc.FControl)) rtl.as(cc.FControl,$mod.TTMSFNCDefaultToolBarButton).SetLayout(rtl.as(cc.FControl,$mod.TTMSFNCDefaultToolBarButton).FCompactLayout);
          cc.FControl.SetVisible(true);
          cc.FControl.SetParent(this.FCompactToolbar);
        };
      };
      this.FCompactToolbar.UpdateControls();
      this.FCompactPopup.SetContentControl(this.FCompactToolbar);
      this.FCompactPopup.Activate();
      this.DoCompactClick();
    };
    this.DeactivateAllPopups = function () {
      var I = 0;
      if ((this.FParent != null) && pas["WEBLib.Controls"].TWinControl.isPrototypeOf(this.FParent)) for (var $l1 = 0, $end2 = rtl.as(this.FParent,pas["WEBLib.Controls"].TWinControl).GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(rtl.as(this.FParent,pas["WEBLib.Controls"].TWinControl).GetControls(I))) rtl.as(rtl.as(this.FParent,pas["WEBLib.Controls"].TWinControl).GetControls(I),$mod.TTMSFNCCustomToolBar).CloseCompactPopup();
      };
    };
    this.DoCompactClick = function () {
      if (this.FOnCompactClick != null) this.FOnCompactClick(this);
    };
    this.HandleDblClick = function (X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleDblClick.apply(this,arguments);
      if (this.FOnInternalDblClick$1 != null) this.FOnInternalDblClick$1(this);
    };
    this.UpdateDockPanel = function () {
      if (this.FOnUpdateDockPanel != null) this.FOnUpdateDockPanel(this);
    };
    this.InsertToolBarControl = function (AControl, AIndex) {
      AControl.SetParent(this);
      if (AIndex > -1) this.SetChildOrder(AControl,AIndex);
      if (this.FOnInternalInsertControl != null) this.FOnInternalInsertControl(AControl);
    };
    this.DoDragGripMoving = function (ADeltaX, ADeltaY) {
      if (this.FOnDragGripMoving != null) this.FOnDragGripMoving(this,ADeltaX,ADeltaY);
    };
    this.VisibleChanging = function () {
      pas["WEBLib.Controls"].TControl.VisibleChanging.apply(this,arguments);
      this.UpdateDockPanel();
    };
    this.GetDragGripRect = function (AInteraction) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var f = 0.0;
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      f = 1;
      if (this.FState === $mod.TTMSFNCToolBarElementState.esLarge) f = 1.75;
      if (AInteraction) {
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left + (8 * f),r.Bottom))}
       else Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Left + (6 * f),r.Bottom - 3));
      return Result;
    };
    this.CompactControls = function () {
      var I = 0;
      var cc = null;
      var c = null;
      this.FBlockUpdate = true;
      this.FCompactControls.Clear();
      for (var $l1 = this.GetControlsCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        c = this.GetControls(I);
        if (c !== this.FOptionsMenuButton) {
          cc = $mod.TTMSFNCToolBarControl.$create("Create$1");
          cc.FControl = c;
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) {
            cc.FLayout = rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout;
            if ((rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FCompactLayout === $mod.TTMSFNCToolBarButtonLayout.bblNone) && (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout !== $mod.TTMSFNCToolBarButtonLayout.bblNone)) rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).SetCompactLayout(rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FMaximumLayout);
          };
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
            cc.FControlIndex = rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FControlIndex}
           else cc.FControlIndex = c.FTag$1;
          c.SetParent(null);
          c.SetVisible(false);
          this.FCompactControls.Add$1(cc);
        };
      };
      this.FBlockUpdate = true;
      this.UpdateControls();
      this.Invalidate();
    };
    this.UncompactControls = function () {
      var I = 0;
      var cc = null;
      var c = null;
      this.FBlockUpdate = true;
      for (var $l1 = this.FCompactControls.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        cc = this.FCompactControls.GetItem$1(I);
        c = cc.FControl;
        if (c != null) {
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FBlockUpdate = true;
          c.SetParent(this);
          c.SetVisible(true);
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FBlockUpdate = false;
        };
      };
      this.FBlockUpdate = false;
      this.UpdateControls();
      this.Invalidate();
    };
    this.UpdateToolBar = function (Sender) {
      this.UpdateControls();
    };
    this.DoIsLastElement = function (AControl, ALastElement) {
      if (this.FOnIsLastElement != null) this.FOnIsLastElement(this,AControl,ALastElement);
    };
    this.UpdateToolBarControl = function (Sender) {
      var tb = null;
      var bmp = null;
      var c = null;
      var tc = null;
      var tci = 0;
      if (!(Sender != null)) return;
      this.FBlockUpdate = true;
      c = rtl.as(Sender,pas["WEBLib.Controls"].TControl);
      tb = this.GetHiddenControl(c);
      if (tb != null) {
        tc = tb.FControl;
        tci = Math.max(0,Math.min(this.GetControlsCount(),tb.FControlIndex - this.GetHiddenControlCount(tc)));
        this.FHiddenControls.Remove$1(tb);
        this.InsertToolBarControl(tc,tci);
        tc.SetVisible(true);
      } else {
        tb = $mod.TTMSFNCToolBarControl.$create("Create$1");
        if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
          tb.FControlIndex = rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FControlIndex}
         else tb.FControlIndex = c.FTag$1;
        tb.FControl = c;
        this.FBlockUpdate = true;
        bmp = c.MakeScreenshot();
        this.FBlockUpdate = false;
        tb.FBitmap.Assign(bmp);
        bmp = rtl.freeLoc(bmp);
        this.FHiddenControls.Add$1(tb);
        c.SetParent(null);
        c.SetVisible(false);
      };
      this.FBlockUpdate = false;
      this.UpdateControls();
    };
    this.OptionsButtonClick = function (Sender) {
      var pt = new pas["WEBLib.TMSFNCTypes"].TPointF();
      if (this.FOnOptionsMenuButtonClick != null) {
        this.FOnOptionsMenuButtonClick(this)}
       else {
        pt = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(this.FOptionsMenuButton.GetLeft(),this.FOptionsMenuButton.GetTop()));
        pt = new pas["WEBLib.TMSFNCTypes"].TPointF(this.LocalToScreenEx(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(pt.X,pt.Y + this.FOptionsMenuButton.GetHeight()))));
        this.ShowOptionsMenu(pt.X,pt.Y);
      };
    };
    this.DoCloseCompactPopup = function (Sender) {
      var I = 0;
      var cc = null;
      this.FCompactPopup.SetContentControl(null);
      for (var $l1 = 0, $end2 = this.FCompactControls.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        cc = this.FCompactControls.GetItem$1(I);
        if (cc.FControl != null) {
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc.FControl)) rtl.as(cc.FControl,$mod.TTMSFNCDefaultToolBarButton).SetLayout(cc.FLayout);
          cc.FControl.SetParent(null);
          cc.FControl.SetVisible(false);
        };
      };
      if (this.FCompactToolbar != null) {
        rtl.free(this,"FCompactToolbar");
        this.FCompactToolbar = null;
      };
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FCustomOptionsMenu)) this.FCustomOptionsMenu = null;
    };
    this.AlignControls = function (AControl, Rect) {
      pas["WEBLib.Controls"].TControl.AlignControls.apply(this,arguments);
      this.UpdateControls();
    };
    this.UpdateControlAfterResize = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.UpdateControlAfterResize.apply(this,arguments);
      this.UpdateDockPanel();
    };
    this.UpdateControls = function () {
      var Self = this;
      var I = 0;
      var c = null;
      var idx = 0;
      var fu = false;
      var hc = null;
      var maxx = 0;
      var x = 0;
      var w = 0;
      var y = 0;
      var h = 0;
      var hs = 0;
      var hsm = 0;
      var vs = 0;
      var xs = 0;
      var ys = 0;
      var txth = 0;
      var txtw = 0;
      var mgr = null;
      var l = false;
      var ia = null;
      var sz = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      var cn = null;
      var lm = 0.0;
      var tm = 0.0;
      var rm = 0.0;
      var bm = 0.0;
      function GetControl(AIndex) {
        var Result = null;
        Result = null;
        if ((AIndex >= 0) && (AIndex <= (Self.GetControlsCount() - 1))) {
          if (Self.GetControls(AIndex).FVisible) {
            Result = Self.GetControls(AIndex);
            return Result;
          };
        };
        while ((AIndex >= 0) && (AIndex <= (Self.GetControlsCount() - 1))) {
          AIndex += 1;
          if ((AIndex >= 0) && (AIndex <= (Self.GetControlsCount() - 1))) {
            if (Self.GetControls(AIndex).FVisible) {
              Result = Self.GetControls(AIndex);
              return Result;
            };
          };
        };
        return Result;
      };
      try {
        if ((((Self.FBlockUpdate || Self.FBlockResize) || Self.IsLoading()) || Self.IsDestroying()) || !Self.CanBuildControls()) return;
        Self.FBlockUpdate = true;
        hs = Math.round(Self.FAppearance.FHorizontalSpacing);
        vs = Math.round(Self.FAppearance.FVerticalSpacing);
        x = hs;
        if (Self.FAppearance.FDragGrip) {
          x = x + Math.round(Self.GetDragGripRect(false).Right);
          if (hs === 0) x = x + 3;
        };
        y = vs;
        xs = x;
        ys = y;
        hsm = 30;
        txth = 0;
        txtw = 0;
        sz = new pas["WEBLib.TMSFNCTypes"].TSizeF(Self.GetTextSize());
        if (sz.cy > 0) txth = Math.round(sz.cy + 4);
        if (sz.cx > 0) txtw = Math.round(sz.cx + 8);
        w = txtw;
        maxx = 0;
        h = 0;
        idx = 0;
        fu = false;
        for (var $l1 = 0, $end2 = Self.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = Self.GetControls(I);
          hc = Self.GetHiddenControl(c);
          fu = !(hc != null);
          if (fu) break;
        };
        l = false;
        for (var $l3 = 0, $end4 = Self.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
          I = $l3;
          c = Self.GetControls(I);
          if (pas.SysUtils.Supports$3(c,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle.$guid,{get: function () {
              return ia;
            }, set: function (v) {
              ia = v;
            }})) ia.SetAdaptToStyle(Self.GetAdaptToStyle());
          if (l) {
            x = xs;
            y = (ys + h) - vs;
            ys = y;
          };
          l = false;
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
            l = rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FLastElement;
            rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FOnUpdateToolBar = rtl.createCallback(Self,"UpdateToolBar");
            rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FOnUpdateToolBarControl = rtl.createCallback(Self,"UpdateToolBarControl");
          };
          Self.DoIsLastElement(c,{get: function () {
              return l;
            }, set: function (v) {
              l = v;
            }});
          if (l) l = true;
          if (!(c === Self.FOptionsMenuButton)) {
            if (fu) {
              if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
                rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FControlIndex = idx}
               else c.FTag$1 = idx;
            };
            if (c.FVisible) {
              if (c.FAlignWithMargins) {
                if (Self.FAutoAlign) {
                  c.SetLeft(x + c.FMargins.FLeft);
                  c.SetTop(y + c.FMargins.FTop);
                };
                if (Self.FAutoStretchHeight || ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c) && (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge))) {
                  h = ((Self.GetHeight() - c.FMargins.FBottom) - txth) - y;
                  c.SetHeight(h);
                } else h = Math.max(h,((c.GetTop() + c.GetHeight()) + vs) + c.FMargins.FBottom);
                cn = GetControl(I + 1);
                if ((cn != null) && $mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cn)) {
                  var $tmp5 = rtl.as(cn,$mod.TTMSFNCDefaultToolBarButton).FLayout;
                  if (($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblBitmap) || ($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblLabel)) {
                    y = Math.max(y,((c.GetTop() + c.GetHeight()) + vs) + c.FMargins.FBottom);
                    if (((y + cn.FMargins.FTop) + cn.GetHeight()) > ((Self.GetHeight() - cn.FMargins.FBottom) - txth)) {
                      x = Math.max(x,Math.max(maxx,((c.GetLeft() + c.GetWidth()) + hs) + c.FMargins.FRight));
                      y = ys;
                    } else {
                      c.SetLeft(x + c.FMargins.FLeft);
                      maxx = Math.max(x,Math.max(maxx,((c.GetLeft() + c.GetWidth()) + hs) + c.FMargins.FRight));
                    };
                  } else if (($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblNone) || ($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblLarge)) {
                    x = Math.max(x,((c.GetLeft() + c.GetWidth()) + hs) + c.FMargins.FRight);
                    y = ys;
                  };
                } else {
                  x = Math.max(x,Math.max(maxx,((c.GetLeft() + c.GetWidth()) + hs) + c.FMargins.FRight));
                  y = ys;
                };
              } else {
                if (Self.FAutoAlign) {
                  c.SetLeft(x);
                  c.SetTop(y);
                };
                if (Self.FAutoStretchHeight || ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c) && (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge))) {
                  h = (Self.GetHeight() - txth) - y;
                  c.SetHeight(h);
                } else h = Math.max(h,(c.GetTop() + c.GetHeight()) + vs);
                cn = GetControl(I + 1);
                if ((cn != null) && $mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cn)) {
                  var $tmp6 = rtl.as(cn,$mod.TTMSFNCDefaultToolBarButton).FLayout;
                  if (($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblBitmap) || ($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblLabel)) {
                    y = Math.max(y,(c.GetTop() + c.GetHeight()) + vs);
                    if ((y + cn.GetHeight()) > (Self.GetHeight() - txth)) {
                      x = Math.max(x,Math.max(maxx,(c.GetLeft() + c.GetWidth()) + hs));
                      y = ys;
                    } else {
                      c.SetLeft(x);
                      maxx = Math.max(x,Math.max(maxx,(c.GetLeft() + c.GetWidth()) + hs));
                    };
                  } else if (($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblNone) || ($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblLarge)) {
                    x = Math.max(x,(c.GetLeft() + c.GetWidth()) + hs);
                    y = ys;
                  };
                } else {
                  x = Math.max(x,Math.max(maxx,(c.GetLeft() + c.GetWidth()) + hs));
                  y = ys;
                };
              };
              w = Math.max(w,x);
            };
            idx += 1;
          };
        };
        if (h === 0) h = hsm;
        Self.FOptionsMenuButton.SetVisible(Self.FOptionsMenu.FShowButton);
        if (Self.FOptionsMenu.FShowButton) {
          Self.FOptionsMenuButton.SetParent(Self)}
         else Self.FOptionsMenuButton.SetParent(null);
        if (Self.FOptionsMenuButton.FVisible) {
          Self.FOptionsMenuButton.FControlIndex = Self.GetControlsCount() - 1;
          Self.FOptionsMenuButton.SetTop(Self.FOptionsMenuButton.FMargins.FTop);
          mgr = Self.FOptionsMenuButton.FMargins;
          if (!Self.FOptionsMenuButton.FAlignWithMargins) {
            mgr.SetLeft(0);
            mgr.SetTop(0);
            mgr.SetRight(0);
            mgr.SetBottom(0);
          };
          if (Self.FAutoSize) {
            Self.FOptionsMenuButton.SetLeft(w + mgr.FLeft);
            if (Self.FAutoHeight) {
              Self.FOptionsMenuButton.SetHeight((h - mgr.FBottom) - mgr.FTop)}
             else if (Self.FAutoStretchHeight) Self.FOptionsMenuButton.SetHeight(((Self.GetHeight() - mgr.FBottom) - txth) - mgr.FTop);
          } else {
            Self.FOptionsMenuButton.SetLeft((Self.GetWidth() - Self.FOptionsMenuButton.GetWidth()) - mgr.FRight);
            Self.FOptionsMenuButton.SetHeight(((Self.GetHeight() - mgr.FBottom) - mgr.FTop) - txth);
          };
          w = ((w + Self.FOptionsMenuButton.GetWidth()) + mgr.FRight) + mgr.FLeft;
        };
        if (Self.FAutoSize) {
          if (Self.FAppearance.FSeparator) w = w + Math.round(Self.FAppearance.FSeparatorStroke.FWidth);
          w = Math.round(Math.max(Self.FMinimumWidth,w));
          if (Self.GetControlAlignment() === pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caNone) {
            lm = 0;
            rm = 0;
            tm = 0;
            bm = 0;
            Self.GetControlMargins({get: function () {
                return lm;
              }, set: function (v) {
                lm = v;
              }},{get: function () {
                return tm;
              }, set: function (v) {
                tm = v;
              }},{get: function () {
                return rm;
              }, set: function (v) {
                rm = v;
              }},{get: function () {
                return bm;
              }, set: function (v) {
                bm = v;
              }});
            w = w + Math.round(lm + rm);
          };
          h = h + txth;
          if ((Self.FAutoHeight && Self.FAutoWidth) && (Self.GetControlAlignment() === pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caNone)) {
            Self.SetBounds(Self.GetLeft(),Self.GetTop(),w,h)}
           else if (Self.FAutoHeight && !(Self.GetControlAlignment() in rtl.createSet(pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caLeft,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caRight,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caClient))) {
            Self.SetBounds(Self.GetLeft(),Self.GetTop(),Self.GetWidth(),h)}
           else if (Self.FAutoWidth && !(Self.GetControlAlignment() in rtl.createSet(pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caTop,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caBottom,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caClient))) Self.SetBounds(Self.GetLeft(),Self.GetTop(),w,Self.GetHeight());
        };
        if (Self.FOnUpdateControls != null) Self.FOnUpdateControls(Self);
        Self.FBlockUpdate = false;
      } finally {
        rtl._Release(ia);
      };
    };
    this.DrawDragGrip = function (AGraphics) {
      var Self = this;
      var cnt = 0;
      function DrawDots(ARect) {
        var i = 0;
        var rdg = new pas["WEBLib.TMSFNCTypes"].TRectF();
        var sz = 0;
        if (Self.FState === $mod.TTMSFNCToolBarElementState.esLarge) {
          sz = 3}
         else sz = 2;
        ARect.Left = ARect.Left;
        ARect.Top = ARect.Top;
        cnt = Math.floor(Math.round(ARect.Bottom) / (Math.round(sz) * 2));
        for (var $l1 = 1, $end2 = cnt; $l1 <= $end2; $l1++) {
          i = $l1;
          rdg = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left + (((ARect.Right - ARect.Left) - sz) / 2),ARect.Top + 1,(ARect.Left + sz) + (((ARect.Right - ARect.Left) - sz) / 2),(ARect.Top + 1) + sz));
          rdg = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(rdg.Left),pas.System.Int(rdg.Top),pas.System.Int(rdg.Right),pas.System.Int(rdg.Bottom)));
          AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(rdg),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
          ARect.Top = ARect.Top + (sz * 2);
        };
      };
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      AGraphics.FFill.SetColor(Self.FAppearance.FDragGripColor);
      AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(Self.GetDragGripRect(false));
      DrawDots(new pas["WEBLib.TMSFNCTypes"].TRectF(r));
    };
    this.DrawText = function (AGraphics) {
      var sz = 0.0;
      var h = 0.0;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (this.FTextVisible && (this.FText !== "")) {
        sz = 0;
        if (this.FAppearance.FDragGrip) {
          if (this.FState === $mod.TTMSFNCToolBarElementState.esLarge) {
            sz = 3}
           else sz = 2;
        };
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + sz,r.Top,r.Right,r.Bottom));
        pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
            return r;
          }, set: function (v) {
            r = v;
          }},-2,-2);
        AGraphics.FFont.Assign(this.FFont$1);
        h = this.GetTextSize().cy;
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Bottom - h,r.Right,r.Bottom));
        AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FText,this.FWordWrapping,this.FHorizontalTextAlign,this.FVerticalTextAlign,this.FTrimming,0,-1,-1,true,false,-1,-1);
      };
    };
    this.DrawCompactBitmap = function (AGraphics, ARect) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCompactBitmapRect(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect)));
      AGraphics.FBitmapContainer = this.GetBitmapContainer();
      AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FCompactBitmaps,0,true,false,true,false);
    };
    this.DrawCompactText = function (AGraphics) {
      var tr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var st = null;
      if (!this.FTextVisible || (this.FText === "")) return;
      tr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCompactTextRect());
      st = AGraphics.SaveState(false);
      try {
        AGraphics.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(tr));
        AGraphics.FFont.Assign(this.FFont$1);
        AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(tr),this.FText,this.FWordWrapping,this.FHorizontalTextAlign,this.FVerticalTextAlign,this.FTrimming,0,-1,-1,true,false,-1,-1);
      } finally {
        AGraphics.RestoreState(st,false);
      };
    };
    this.DrawCompactExpander = function (AGraphics) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Bottom - 20,r.Right,r.Bottom));
      pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
          return r;
        }, set: function (v) {
          r = v;
        }},-2,-2);
      AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(r),this.FCompactExpanderBitmaps,0,true,false,true,false);
    };
    this.ShowOptionsMenu = function (X, Y) {
    };
    this.Assign = function (Source) {
      var c = null;
      var cc = null;
      var I = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(Source)) {
        this.FCompactAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactAppearance);
        this.FQuickMenuButtonAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FQuickMenuButtonAppearance);
        this.FQuickMenuButton = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FQuickMenuButton;
        this.FCompactBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactBitmaps);
        this.FCompact = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompact;
        this.FCanCompact = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCanCompact;
        this.FMinimumWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FMinimumWidth;
        this.FCompactWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactWidth;
        this.FCompactBitmapSize = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactBitmapSize;
        this.FCompactAutoBitmapSize = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactAutoBitmapSize;
        this.FCompactExpanderBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactExpanderBitmaps);
        this.FQuickMenuButtonBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FQuickMenuButtonBitmaps);
        this.FCompactBitmapVisible = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactBitmapVisible;
        this.FText = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FText;
        this.FTextVisible = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FTextVisible;
        this.FWordWrapping = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FWordWrapping;
        this.FHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FHorizontalTextAlign;
        this.FVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FVerticalTextAlign;
        this.FTrimming = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FTrimming;
        this.FFont$1.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FFont$1);
        this.FAutoSize = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoSize;
        this.FAutoHeight = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoHeight;
        this.FAutoWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoWidth;
        this.FAutoAlign = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoAlign;
        this.FAutoStretchHeight = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoStretchHeight;
        this.FAutoMoveToolBar = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoMoveToolBar;
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAppearance);
        for (var $l1 = 0, $end2 = rtl.as(Source,$mod.TTMSFNCCustomToolBar).GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          cc = rtl.as(Source,$mod.TTMSFNCCustomToolBar).GetControls(I);
          if (($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc) && rtl.as(cc,$mod.TTMSFNCDefaultToolBarButton).FCanCopy) || !($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc) && pas["WEBLib.Controls"].TControl.isPrototypeOf(cc))) {
            if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc)) rtl.as(cc,$mod.TTMSFNCDefaultToolBarButton).FApplyName = false;
            c = rtl.as(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.Clone(cc),pas["WEBLib.Controls"].TControl);
            if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc)) rtl.as(cc,$mod.TTMSFNCDefaultToolBarButton).FApplyName = true;
            this.AddCustomControl(c,-1);
          };
        };
        this.Invalidate();
      } else pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FHiddenControls = $mod.TTMSFNCToolBarControlObjectList.$create("Create$2");
      this.FCompactControls = $mod.TTMSFNCToolBarControlObjectList.$create("Create$2");
      this.FState = $mod.TTMSFNCToolBarElementState.esNormal;
      this.FAppearance = $mod.TTMSFNCToolBarAppearance.$create("Create$1",[this]);
      this.FCompactAppearance = $mod.TTMSFNCToolBarCompactAppearance.$create("Create$1",[null]);
      this.FCompactAppearance.FOnChange = rtl.createCallback(this,"CompactAppearanceChanged");
      this.FQuickMenuButtonAppearance = $mod.TTMSFNCToolBarQuickMenuButtonAppearance.$create("Create$1",[null]);
      this.FQuickMenuButtonAppearance.FOnChange = rtl.createCallback(this,"QuickMenuButtonAppearanceChanged");
      this.FCompactBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FCompactBitmaps.FOnChange = rtl.createCallback(this,"CompactBitmapsChanged");
      this.FOptionsMenu = $mod.TTMSFNCToolBarOptionsMenu.$create("Create$1",[this]);
      this.FMinimumWidth = 30;
      this.FCompactWidth = 50;
      this.FCompactBitmapSize = 24;
      this.FCompactAutoBitmapSize = false;
      this.FCompactBitmapVisible = false;
      this.FCompactExpanderBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FCompactExpanderBitmaps.FOnChange = rtl.createCallback(this,"CompactExpanderBitmapsChanged");
      this.FQuickMenuButtonBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FQuickMenuButtonBitmaps.FOnChange = rtl.createCallback(this,"QuickMenuButtonBitmapsChanged");
      this.FCanCompact = true;
      this.FQuickMenuButton = false;
      this.FCompact = false;
      this.FAutoSize = true;
      this.FAutoWidth = true;
      this.FAutoHeight = true;
      this.FAutoAlign = true;
      this.FAutoStretchHeight = false;
      this.FAutoMoveToolBar = true;
      this.FOptionsMenuButton = this.GetOptionsMenuButtonClass().$create("Create$1",[this]);
      this.FOptionsMenuButton.FAppearance.FNormalFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      c = 13882323;
      this.FOptionsMenuButton.FAppearance.FNormalFill.SetColor(c);
      this.FOptionsMenuButton.FAppearance.SetShowInnerStroke(false);
      this.FOptionsMenuButton.FAppearance.SetRounding(0);
      this.FOptionsMenuButton.FAppearance.FHoverFill.Assign(this.FOptionsMenuButton.FAppearance.FNormalFill);
      this.FOptionsMenuButton.FAppearance.FDisabledFill.Assign(this.FOptionsMenuButton.FAppearance.FNormalFill);
      this.FOptionsMenuButton.FAppearance.FDownFill.Assign(this.FOptionsMenuButton.FAppearance.FNormalFill);
      this.FOptionsMenuButton.FAppearance.FHoverFill.SetColor(15128749);
      this.FOptionsMenuButton.FAppearance.FDownFill.SetColor(14599344);
      this.FOptionsMenuButton.FAppearance.FDisabledFill.SetColor(13882323);
      this.FOptionsMenuButton.SetAlignWithMargins(true);
      this.FOptionsMenuButton.FMargins.SetTop(3);
      this.FOptionsMenuButton.FMargins.SetBottom(3);
      this.FOptionsMenuButton.FMargins.SetRight(3);
      this.FOptionsMenuButton.FCanCopy = false;
      this.FAutoOptionsMenu = pas["WEBLib.TMSFNCTypes"].TPopupMenu.$create("Create$1",[this]);
      this.FOptionsMenuButton.FOnClick = rtl.createCallback(this,"OptionsButtonClick");
      this.FOptionsMenuButton.SetWidth(17);
      this.FOptionsMenuButton.SetText("");
      this.FOptionsMenuButton.FStored = false;
      this.FOptionsMenuButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FOptionsMenuButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENULARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FOptionsMenuButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FOptionsMenuButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENULARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FOptionsMenuButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FOptionsMenuButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENULARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FTrimming = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter;
      this.FWordWrapping = false;
      this.FTextVisible = true;
      this.FFont$1 = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FCompactPopup = $mod.TTMSFNCToolBarPopup.$create("Create$1",[this]);
      this.FCompactPopup.FOnClosePopup = rtl.createCallback(this,"DoCloseCompactPopup");
      this.FCompactPopup.SetPlacementControl(this);
      this.FCompactExpanderBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCGraphics"].TMSFNCGRAPHICSDOWN,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FQuickMenuButtonBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBARQUICKMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
    };
    this.Destroy = function () {
      rtl.free(this,"FQuickMenuButtonBitmaps");
      rtl.free(this,"FCompactExpanderBitmaps");
      rtl.free(this,"FCompactPopup");
      rtl.free(this,"FQuickMenuButtonAppearance");
      rtl.free(this,"FCompactAppearance");
      rtl.free(this,"FCompactBitmaps");
      rtl.free(this,"FFont$1");
      rtl.free(this,"FOptionsMenu");
      rtl.free(this,"FAppearance");
      rtl.free(this,"FHiddenControls");
      rtl.free(this,"FCompactControls");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.apply(this,arguments);
    };
    this.Draw = function (AGraphics, ARect) {
      var qr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var w = 0.0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      if (this.FCompact) {
        if (this.FDown) {
          AGraphics.FFill.Assign(this.FCompactAppearance.FDownFill);
          AGraphics.FStroke.Assign(this.FCompactAppearance.FDownStroke);
        } else if (this.FHover) {
          AGraphics.FFill.Assign(this.FCompactAppearance.FHoverFill);
          AGraphics.FStroke.Assign(this.FCompactAppearance.FHoverStroke);
        } else {
          AGraphics.FFill.Assign(this.FCompactAppearance.FNormalFill);
          AGraphics.FStroke.Assign(this.FCompactAppearance.FNormalStroke);
        };
        if (this.FCompactAppearance.FFlatStyle) AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top + 2,r.Right - 3,r.Bottom - 2)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      } else {
        AGraphics.FFill.Assign(this.FAppearance.FFill);
        AGraphics.FStroke.Assign(this.FAppearance.FStroke);
        if (this.FAppearance.FFlatStyle) AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      if (this.FCompact) {
        this.DrawCompactBitmap(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect));
        this.DrawCompactText(AGraphics);
        this.DrawCompactExpander(AGraphics);
      } else {
        if (this.FAppearance.FDragGrip) this.DrawDragGrip(AGraphics);
        this.DrawText(AGraphics);
        if (this.FQuickMenuButton) {
          if (this.FQuickMenuButtonDown) {
            AGraphics.FFill.Assign(this.FQuickMenuButtonAppearance.FDownFill);
            AGraphics.FStroke.Assign(this.FQuickMenuButtonAppearance.FDownStroke);
          } else if (this.FQuickMenuButtonHover) {
            AGraphics.FFill.Assign(this.FQuickMenuButtonAppearance.FHoverFill);
            AGraphics.FStroke.Assign(this.FQuickMenuButtonAppearance.FHoverStroke);
          } else {
            AGraphics.FFill.Assign(this.FQuickMenuButtonAppearance.FNormalFill);
            AGraphics.FStroke.Assign(this.FQuickMenuButtonAppearance.FNormalStroke);
          };
          if (this.FQuickMenuButtonAppearance.FFlatStyle) AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          qr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetQuickMenuButtonRect());
          AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(qr),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
          pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
              return qr;
            }, set: function (v) {
              qr = v;
            }},-2,-2);
          AGraphics.DrawScaledBitmap(new pas["WEBLib.TMSFNCTypes"].TRectF(qr),this.FQuickMenuButtonBitmaps,0,true,false,true,false);
        };
      };
      if (this.FAppearance.FSeparator) {
        AGraphics.FStroke.Assign(this.FAppearance.FSeparatorStroke);
        w = this.FAppearance.FSeparatorStroke.FWidth;
        AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - w,r.Top + 4)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - w,r.Bottom - 4)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      };
      if (this.IsDesignTime() && this.CanDrawDesignTime()) AGraphics.DrawFocusRectangle$3(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),0,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.DropDownActive = function () {
      var Result = false;
      var I = 0;
      var c = null;
      Result = false;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) {
          if (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FPopup != null) {
            Result = rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FPopup.FIsOpen;
            if (Result) break;
          };
        };
      };
      return Result;
    };
    this.CloseCompactPopup = function () {
      if (this.FCompactPopup != null) this.FCompactPopup.Deactivate();
    };
    this.AddCustomControl = function (AControl, AIndex) {
      this.FBlockUpdate = true;
      this.InsertToolBarControl(AControl,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCToolBar",$mod.TTMSFNCCustomToolBar,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBar);
    };
    var $r = this.$rtti;
    $r.addProperty("OnOptionsMenuButtonClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnOptionsMenuButtonClick","FOnOptionsMenuButtonClick");
    $r.addProperty("OnOptionsMenuItemCanShow",0,$mod.$rtti["TTMSFNCToolBarCanShowOptionsMenuItem"],"FOnOptionsMenuItemCanShow","FOnOptionsMenuItemCanShow");
    $r.addProperty("OnOptionsMenuCustomize",0,$mod.$rtti["TTMSFNCToolBarCustomizeOptionsMenu"],"FOnOptionsMenuCustomize","FOnOptionsMenuCustomize");
    $r.addProperty("OnOptionsMenuItemCustomize",0,$mod.$rtti["TTMSFNCToolBarCustomizeOptionsMenuItem"],"FOnOptionsMenuItemCustomize","FOnOptionsMenuItemCustomize");
    $r.addProperty("OnOptionsMenuItemApplyStyle",0,$mod.$rtti["TTMSFNCToolBarCustomizeOptionsMenuItem"],"FOnOptionsMenuItemApplyStyle","FOnOptionsMenuItemApplyStyle");
    $r.addProperty("OnOptionsMenuItemClick",0,$mod.$rtti["TTMSFNCToolBarOptionsMenuItemClick"],"FOnOptionsMenuItemClick","FOnOptionsMenuItemClick");
    $r.addProperty("OnIsLastElement",0,$mod.$rtti["TTMSFNCToolBarIsLastElement"],"FOnIsLastElement","FOnIsLastElement");
    $r.addProperty("OnDragGripMoving",0,$mod.$rtti["TTMSFNCToolBarDragGripMovingEvent"],"FOnDragGripMoving","FOnDragGripMoving");
    $r.addProperty("OnQuickMenuButtonClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnQuickMenuButtonClick","FOnQuickMenuButtonClick");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("AutoHeight",2,rtl.boolean,"FAutoHeight","SetAutoHeight",{Default: true});
    $r.addProperty("AutoWidth",2,rtl.boolean,"FAutoWidth","SetAutoWidth",{Default: true});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAS",{Default: true});
    $r.addProperty("AutoAlign",2,rtl.boolean,"FAutoAlign","SetAutoAlign",{Default: true});
    $r.addProperty("AutoStretchHeight",2,rtl.boolean,"FAutoStretchHeight","SetAutoStretchHeight",{Default: false});
    $r.addProperty("AutoMoveToolBar",0,rtl.boolean,"FAutoMoveToolBar","FAutoMoveToolBar",{Default: true});
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCToolBarAppearance"],"FAppearance","SetAppearance");
    $r.addProperty("CanCompact",2,rtl.boolean,"FCanCompact","SetCanCompact",{Default: true});
    $r.addProperty("OnCompactClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnCompactClick","FOnCompactClick");
    $r.addProperty("CompactBitmapVisible",2,rtl.boolean,"FCompactBitmapVisible","SetCompactBitmapVisible",{Default: false});
    $r.addProperty("CompactBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FCompactBitmaps","SetCompactBitmaps");
    $r.addProperty("Compact",2,rtl.boolean,"FCompact","SetCompact",{Default: false});
    $r.addProperty("CompactWidth",14,rtl.double,"FCompactWidth","SetCompactWidth",{stored: "IsCompactWidthStored"});
    $r.addProperty("CompactAppearance",2,$mod.$rtti["TTMSFNCToolBarCompactAppearance"],"FCompactAppearance","SetCompactAppearance");
    $r.addProperty("CompactBitmapSize",14,rtl.double,"FCompactBitmapSize","SetCompactBitmapSize",{stored: "IsCompactBitmapSizeStored"});
    $r.addProperty("CompactAutoBitmapSize",2,rtl.boolean,"FCompactAutoBitmapSize","SetCompactAutoBitmapSize",{Default: false});
    $r.addProperty("QuickMenuButtonHint",0,rtl.string,"FQuickMenuButtonHint","FQuickMenuButtonHint");
    $r.addProperty("QuickMenuButton",2,rtl.boolean,"FQuickMenuButton","SetQuickMenuButton",{Default: false});
    $r.addProperty("QuickMenuButtonAppearance",2,$mod.$rtti["TTMSFNCToolBarQuickMenuButtonAppearance"],"FQuickMenuButtonAppearance","SetQuickMenuButtonAppearance");
    $r.addProperty("MinimumWidth",14,rtl.double,"FMinimumWidth","SetMinimumWidth",{stored: "IsMinimumWidthStored"});
    $r.addProperty("WordWrapping",2,rtl.boolean,"FWordWrapping","SetWordWrapping",{Default: false});
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("Trimming",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextTrimming"],"FTrimming","SetTrimming",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter});
    $r.addProperty("HorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FHorizontalTextAlign","SetHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("VerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FVerticalTextAlign","SetVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont$1","SetFont$1");
    $r.addProperty("OptionsMenu",2,$mod.$rtti["TTMSFNCToolBarOptionsMenu"],"FOptionsMenu","SetOptionsMenu");
    $r.addProperty("CustomOptionsMenu",0,pas["WEBLib.TMSFNCTypes"].$rtti["TPopupMenu"],"FCustomOptionsMenu","FCustomOptionsMenu");
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
  });
  rtl.createClass($mod,"TTMSFNCCustomDockPanelAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FFill = null;
      this.FStroke = null;
      this.FMargins = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FMargins = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.FillChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.StrokeChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FMargins = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      this.FMargins.SetLeft(3);
      this.FMargins.SetTop(3);
      this.FMargins.SetBottom(3);
      this.FMargins.SetRight(3);
    };
    this.Destroy = function () {
      rtl.free(this,"FMargins");
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCDockPanelAppearance",$mod.TTMSFNCCustomDockPanelAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
  });
  rtl.createClass($mod,"TTMSFNCCustomDockPanel",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FBlockUpdate = false;
      this.FAppearance = null;
      this.FAutoSize = false;
      this.FAutoAlign = false;
      this.FState = 0;
    };
    this.$final = function () {
      this.FAppearance = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetAutoAlign = function (Value) {
      if (this.FAutoAlign !== Value) {
        this.FAutoAlign = Value;
        this.UpdateControls();
      };
    };
    this.SetAS = function (Value) {
      if (this.FAutoSize !== Value) {
        this.FAutoSize = Value;
        this.UpdateControls();
      };
    };
    this.SetState = function (Value) {
      var I = 0;
      var c = null;
      if (this.FState !== Value) {
        this.FState = Value;
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = this.GetControls(I);
          if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBar).SetState(this.FState);
        };
      };
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.SetAdaptToStyle.apply(this,arguments);
      this.UpdateControls();
    };
    this.UpdateControls = function () {
      var I = 0;
      var h = 0;
      var hsm = 0;
      var c = null;
      var ia = null;
      try {
        if ((this.FBlockUpdate || this.IsLoading()) || this.IsDestroying()) return;
        this.FBlockUpdate = true;
        h = 0;
        hsm = 30;
        if (this.FAutoAlign) {
          this.InitializeControls();
          this.RearrangeControls();
        };
        if (this.FAutoSize) {
          for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            c = this.GetControls(I);
            if (pas.SysUtils.Supports$3(c,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle.$guid,{get: function () {
                return ia;
              }, set: function (v) {
                ia = v;
              }})) ia.SetAdaptToStyle(this.GetAdaptToStyle());
            if (c.FVisible) h = Math.round(Math.max(h,(c.GetTop() + c.GetHeight()) + this.FAppearance.FMargins.FBottom));
          };
          if (h === 0) h = hsm;
          if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) h = h + 15;
          this.SetBounds(this.GetLeft(),this.GetTop(),this.GetWidth(),h);
        };
        this.FBlockUpdate = false;
      } finally {
        rtl._Release(ia);
      };
    };
    this.InitializeControls = function () {
      var I = 0;
      var c = null;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) {
          rtl.as(c,$mod.TTMSFNCCustomToolBar).FOnUpdateDockPanel = rtl.createCallback(this,"UpdateDockPanel");
          if (rtl.as(c,$mod.TTMSFNCCustomToolBar).FDragGripMoving) continue;
        };
        if (c.FVisible) {
          if (c.GetTop() < this.FAppearance.FMargins.FTop) c.SetTop(Math.round(this.FAppearance.FMargins.FTop));
          if (c.GetLeft() < this.FAppearance.FMargins.FLeft) {
            c.SetLeft(Math.round(this.FAppearance.FMargins.FLeft))}
           else if ((c.GetLeft() + c.GetWidth()) > (this.GetWidth() - this.FAppearance.FMargins.FRight)) c.SetLeft(Math.round((this.GetWidth() - this.FAppearance.FMargins.FRight) - c.GetWidth()));
        };
      };
    };
    this.RearrangeControls = function () {
      var c = null;
      var cl = null;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var clr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var I = 0;
      var J = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if (!c.FVisible) continue;
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) {
          if (rtl.as(c,$mod.TTMSFNCCustomToolBar).FDragGripMoving) continue;
        };
        for (var $l3 = 0, $end4 = this.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
          J = $l3;
          cl = this.GetControls(J);
          if ((cl === c) || !cl.FVisible) continue;
          cr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(c.GetLeft(),c.GetTop(),c.GetLeft() + c.GetWidth(),c.GetTop() + c.GetHeight()));
          clr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cl.GetLeft(),cl.GetTop(),cl.GetLeft() + cl.GetWidth(),cl.GetTop() + cl.GetHeight()));
          if ((clr.Left >= (cr.Left - 3)) && (clr.Left <= (cr.Right + 3))) {
            if ((clr.Top < pas["WEBLib.TMSFNCTypes"].CenterPointEx(cr).Y) && (clr.Top >= (cr.Top - 3))) {
              cl.SetLeft((c.GetLeft() + c.GetWidth()) + 3);
              cl.SetTop(c.GetTop());
            } else if ((clr.Top >= pas["WEBLib.TMSFNCTypes"].CenterPointEx(cr).Y) && (clr.Top <= (cr.Bottom + 3))) {
              cl.SetTop((c.GetTop() + c.GetHeight()) + 3);
              cl.SetLeft(c.GetLeft());
            };
          };
        };
      };
    };
    this.UpdateDockPanel = function (Sender) {
      this.UpdateControls();
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.apply(this,arguments);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FFill.SetColor(c);
      };
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColorTo({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FAppearance.FFill.SetColorTo(c);
      };
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.apply(this,arguments);
    };
    this.AlignControls = function (AControl, Rect) {
      pas["WEBLib.Controls"].TControl.AlignControls.apply(this,arguments);
      this.UpdateControls();
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomDockPanel.isPrototypeOf(Source)) {
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FAppearance);
        this.SetAS(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FAutoSize);
        this.SetAutoAlign(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FAutoAlign);
        this.SetState(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FState);
      } else pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FState = $mod.TTMSFNCToolBarElementState.esNormal;
      this.FAppearance = $mod.TTMSFNCDockPanelAppearance.$create("Create$1",[this]);
      this.FAutoSize = true;
      this.FAutoAlign = true;
      this.SetAlign(pas["WEBLib.Controls"].TAlign.alTop);
      this.SetHeight(40);
    };
    this.Destroy = function () {
      rtl.free(this,"FAppearance");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.apply(this,arguments);
    };
    this.Draw = function (AGraphics, ARect) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      AGraphics.FFill.Assign(this.FAppearance.FFill);
      AGraphics.FStroke.Assign(this.FAppearance.FStroke);
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
  });
  $mod.$init = function () {
    pas.Classes.RegisterClass($mod.TTMSFNCToolBarButton);
  };
},["math","SysUtils","WEBLib.TMSFNCUtils","WEBLib.Graphics","WEBLib.TMSFNCStyles"]);
rtl.module("WEBLib.TMSFNCToolBarPopup",["System","Classes","WEBLib.TMSFNCPopup","WEBLib.TMSFNCToolBar","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  rtl.createClass($mod,"TTMSFNCToolBarPopupButton",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FOwner = null;
      this.FButton = null;
      this.FText = "";
      this.FTag = 0;
      this.FWidth = 0.0;
      this.FHeight = 0.0;
      this.FEnabled = false;
      this.FVisible = false;
      this.FTop = 0.0;
      this.FLeft = 0.0;
      this.FLastElement = false;
      this.FBitmap = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FButton = undefined;
      this.FBitmap = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        if (this.FButton != null) this.FButton.SetText(this.FText);
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.SetHeight = function (Value) {
      if (this.FHeight !== Value) {
        this.FHeight = Value;
        if ((this.FButton != null) && (this.FHeight > -1)) this.FButton.SetHeight(Math.round(this.FHeight));
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.SetWidth = function (Value) {
      if (this.FWidth !== Value) {
        this.FWidth = Value;
        if ((this.FButton != null) && (this.FWidth > -1)) this.FButton.SetWidth(Math.round(this.FWidth));
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.IsHeightStored = function () {
      var Result = false;
      Result = this.FHeight !== -1;
      return Result;
    };
    this.IsWidthStored = function () {
      var Result = false;
      Result = this.FWidth !== -1;
      return Result;
    };
    this.SetEnabled = function (Value) {
      if (this.FEnabled !== Value) {
        this.FEnabled = Value;
        if (this.FButton != null) this.FButton.SetEnabled(this.FEnabled);
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.SetVisible = function (Value) {
      if (this.FVisible !== Value) {
        this.FVisible = Value;
        if (this.FButton != null) this.FButton.SetVisible(this.FVisible);
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.IsLeftStored = function () {
      var Result = false;
      Result = this.FLeft !== -1;
      return Result;
    };
    this.IsTopStored = function () {
      var Result = false;
      Result = this.FTop !== -1;
      return Result;
    };
    this.SetLeft = function (Value) {
      if (this.FLeft !== Value) {
        this.FLeft = Value;
        if ((this.FButton != null) && (this.FLeft > -1)) this.FButton.SetLeft(Math.round(this.FLeft));
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.SetTop = function (Value) {
      if (this.FTop !== Value) {
        this.FTop = Value;
        if ((this.FButton != null) && (this.FTop > -1)) this.FButton.SetTop(Math.round(this.FTop));
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.SetLastElement = function (Value) {
      if (this.FLastElement !== Value) {
        this.FLastElement = Value;
        if (this.FButton != null) this.FButton.SetLastElement(this.FLastElement);
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.SetBitmap = function (Value) {
      if (this.FBitmap !== Value) {
        this.FBitmap.Assign(Value);
        if ((this.FButton != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(this.FBitmap)) {
          this.FButton.FBitmaps.Clear();
          this.FButton.FBitmaps.AddBitmap(this.FBitmap,1.0);
        };
        if (this.FOwner != null) this.FOwner.UpdateToolBar();
      };
    };
    this.BitmapChanged = function (Sender) {
      if ((this.FButton != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(this.FBitmap)) {
        this.FButton.FBitmaps.Clear();
        this.FButton.FBitmaps.AddBitmap(this.FBitmap,1.0);
      };
      if (this.FOwner != null) this.FOwner.UpdateToolBar();
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) this.FOwner = rtl.as(this.FCollection,$mod.TTMSFNCToolBarPopupButtons).FOwner$1;
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FWidth = -1;
      this.FHeight = -1;
      this.FTop = -1;
      this.FLeft = -1;
      this.FVisible = true;
      this.FEnabled = true;
      this.FLastElement = false;
      if ((this.FOwner != null) && (this.FOwner.FToolBar != null)) {
        this.FButton = pas["WEBLib.TMSFNCToolBar"].TTMSFNCToolBarButton.$create("Create$1",[this.FOwner.FToolBar]);
        this.FButton.SetTabStop(false);
        this.FButton.SetAllowFocus(false);
        this.FButton.SetParent(this.FOwner.FToolBar);
        this.FButton.FOnClick = rtl.createCallback(this.FOwner,"ToolBarButtonClick");
      };
      if (this.FOwner != null) {
        if (this.FOwner.FToolBar != null) this.FOwner.FToolBar.AddCustomControl(this.FButton,this.GetIndex());
        this.FOwner.UpdateToolBar();
      };
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCToolBarPopupButton.isPrototypeOf(Source)) {
        this.FText = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FText;
        this.FWidth = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FWidth;
        this.FHeight = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FHeight;
        this.FLeft = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FLeft;
        this.FTop = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FTop;
        this.FEnabled = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FEnabled;
        this.FVisible = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FVisible;
        this.FBitmap.Assign(rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FBitmap);
        this.FLastElement = rtl.as(Source,$mod.TTMSFNCToolBarPopupButton).FLastElement;
      };
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas.Classes.TCollectionItem.Destroy.apply(this,arguments);
      if (this.FOwner != null) this.FOwner.UpdateToolBar();
    };
    var $r = this.$rtti;
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("Tag",0,rtl.longint,"FTag","FTag");
    $r.addProperty("Left",14,rtl.double,"FLeft","SetLeft",{stored: "IsLeftStored"});
    $r.addProperty("Top",14,rtl.double,"FTop","SetTop",{stored: "IsTopStored"});
    $r.addProperty("Width",14,rtl.double,"FWidth","SetWidth",{stored: "IsWidthStored"});
    $r.addProperty("Height",14,rtl.double,"FHeight","SetHeight",{stored: "IsHeightStored"});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("LastElement",2,rtl.boolean,"FLastElement","SetLastElement",{Default: false});
    $r.addProperty("Bitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
  });
  rtl.createClass($mod,"TTMSFNCToolBarPopupButtons",pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$init.call(this);
      this.FOwner$1 = null;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.CreateItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarPopupButton;
      return Result;
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner$1;
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,this.CreateItemClass());
      this.FOwner$1 = AOwner;
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomToolBarPopup",pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomNonFocusablePopup,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomNonFocusablePopup.$init.call(this);
      this.FActivate = false;
      this.FToolBar = null;
      this.FButtons = null;
      this.FButtonClick = null;
      this.FOnDeactivate = null;
      this.FOnActivate = null;
    };
    this.$final = function () {
      this.FToolBar = undefined;
      this.FButtons = undefined;
      this.FButtonClick = undefined;
      this.FOnDeactivate = undefined;
      this.FOnActivate = undefined;
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomNonFocusablePopup.$final.call(this);
    };
    this.GetAutoAlign = function () {
      var Result = false;
      Result = this.FToolBar.FAutoAlign;
      return Result;
    };
    this.SetAutoAlign = function (Value) {
      this.FToolBar.SetAutoAlign(Value);
    };
    this.GetDragGrip = function () {
      var Result = false;
      Result = this.FToolBar.FAppearance.FDragGrip;
      return Result;
    };
    this.SetDragGrip = function (Value) {
      this.FToolBar.FAppearance.SetDragGrip(Value);
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.CreateToolBar = function () {
      var Result = null;
      Result = pas["WEBLib.TMSFNCToolBar"].TTMSFNCToolBar.$create("Create$1",[this]);
      return Result;
    };
    this.FindPopupButton = function (AButton) {
      var Result = null;
      var I = 0;
      Result = null;
      for (var $l1 = 0, $end2 = this.FButtons.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (AButton === this.FButtons.GetItem$1(I).FButton) {
          Result = this.FButtons.GetItem$1(I);
          break;
        };
      };
      return Result;
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomPopup.SetAdaptToStyle.apply(this,arguments);
      if (this.FToolBar != null) this.FToolBar.SetAdaptToStyle(this.FAdaptToStyle);
    };
    this.UpdateControls = function (Sender) {
      this.UpdateToolBar();
    };
    this.UpdateToolBar = function () {
      if ((pas.Classes.TComponentStateItem.csLoading in this.FComponentState) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) return;
      this.SetDropDownWidth(this.FToolBar.GetWidth());
      this.SetDropDownHeight(this.FToolBar.GetHeight());
    };
    this.PrepareToolBar = function () {
      if (this.FToolBar != null) this.FToolBar.SetAdaptToStyle(this.FAdaptToStyle);
    };
    this.ActivatePopup = function () {
      this.DoCreatePopup(false);
    };
    this.DeactivatePopup = function () {
      this.ClosePopup();
    };
    this.DoClosePopup = function () {
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomPopup.DoClosePopup.apply(this,arguments);
      if (this.FPopupForm != null) this.FPopupForm.DisposeOf();
    };
    this.ToolBarClick = function (Sender) {
      this.ActivatePreviousWindow();
    };
    this.ToolBarButtonClick = function (Sender) {
      if (this.FButtonClick != null) this.FButtonClick(this,this.FindPopupButton(rtl.as(Sender,pas["WEBLib.TMSFNCToolBar"].TTMSFNCToolBarButton)));
      this.ActivatePreviousWindow();
    };
    this.DoDragGripMoving = function (Sender, ADeltaX, ADeltaY) {
      if (this.FPopupForm != null) {
        this.FPopupForm.SetLeft(this.FPopupForm.GetLeft() - Math.round(ADeltaX));
        this.FPopupForm.SetTop(this.FPopupForm.GetTop() - Math.round(ADeltaY));
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomNonFocusablePopup.Create$1.apply(this,arguments);
      this.SetPlacement(pas["WEBLib.TMSFNCPopup"].TTMSFNCPopupPlacement.ppMouse);
      this.FButtons = $mod.TTMSFNCToolBarPopupButtons.$create("Create$3",[this]);
      this.FToolBar = this.CreateToolBar();
      if (!(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) this.FToolBar.SetParent(this);
      this.FToolBar.SetAutoAlign(true);
      this.FToolBar.FOnClick = rtl.createCallback(this,"ToolBarClick");
      this.FToolBar.SetTabStop(false);
      this.FToolBar.SetAllowFocus(false);
      this.FToolBar.FOptionsMenu.SetShowButton(false);
      this.FToolBar.FAppearance.SetDragGrip(false);
      this.FToolBar.FOnDragGripMoving = rtl.createCallback(this,"DoDragGripMoving");
      this.FToolBar.FAutoMoveToolBar = false;
      this.FToolBar.FOnUpdateControls = rtl.createCallback(this,"UpdateControls");
      this.SetContentControl(this.FToolBar);
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomPopup.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBarPopup.isPrototypeOf(Source)) {
        this.FButtons.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarPopup).FButtons);
        this.SetAutoAlign(rtl.as(Source,$mod.TTMSFNCCustomToolBarPopup).GetAutoAlign());
        this.SetDragGrip(rtl.as(Source,$mod.TTMSFNCCustomToolBarPopup).GetDragGrip());
      };
    };
    this.Destroy = function () {
      rtl.free(this,"FButtons");
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomNonFocusablePopup.Destroy.apply(this,arguments);
    };
    this.Activate = function () {
      var frm = null;
      if (this.Activated()) this.Deactivate();
      if (this.FToolBar != null) {
        this.FToolBar.SetParent(frm);
        this.FToolBar.SetVisible(false);
      };
      this.PrepareToolBar();
      this.ActivatePopup();
      this.UpdateToolBar();
      this.FActivate = true;
      if (this.FOnActivate != null) this.FOnActivate(this);
    };
    this.Deactivate = function () {
      this.DeactivatePopup();
      this.FActivate = false;
      if (this.FOnDeactivate != null) this.FOnDeactivate(this);
    };
    this.DropDownActive = function () {
      var Result = false;
      Result = false;
      if (this.FToolBar != null) Result = this.FToolBar.DropDownActive();
      return Result;
    };
    this.Activated = function () {
      var Result = false;
      Result = this.HasPopupForm();
      return Result;
    };
  });
},["WEBLib.Forms","WEBLib.TMSFNCUtils","Types"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($impl,"TTMSFNCToolBarOpen",pas["WEBLib.TMSFNCToolBar"].TTMSFNCToolBar,function () {
  });
});
rtl.module("WEBLib.TMSFNCPlanner",["System","Classes","Types","WEBLib.Controls","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCImage","WEBLib.TMSFNCPlannerData","WEBLib.Graphics","WEBLib.TMSFNCBitmapContainer","WEBLib.TMSFNCGraphics","WEBLib.StdCtrls","WEBLib.ExtCtrls","WEBLib.TMSFNCPopup","WEBLib.TMSFNCPlannerBase","WEBLib.TMSFNCTypes","WEBLib.TMSFNCCustomComponent","WEBLib.TMSFNCToolBarPopup","WEBLib.TMSFNCGraphicsTypes","contnrs","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.CACHEWIDTH = 1000;
  this.CACHEHEIGHT = 1000;
  this.SCROLLINGDELAY = 0;
  this.TMSFNCPlannerAreaColor = 0xBDAA86;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 9;
  rtl.createClass($mod,"TTMSFNCPlannerDateEdit",pas["WEBLib.StdCtrls"].TDateTimePicker,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerTimeEdit",pas["WEBLib.StdCtrls"].TDateTimePicker,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerMemo",pas["WEBLib.StdCtrls"].TMemo,function () {
    this.$init = function () {
      pas["WEBLib.StdCtrls"].TMemo.$init.call(this);
      this.FPlanner = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas["WEBLib.StdCtrls"].TMemo.$final.call(this);
    };
    this.KeyDown = function (Key, Shift) {
      pas["WEBLib.Controls"].TControl.KeyDown.apply(this,arguments);
      if ((this.FPlanner != null) && this.FPlanner.FInplaceEditorActive) {
        var $tmp1 = Key.get();
        if ($tmp1 === 27) {
          this.FPlanner.CloseInplaceEditor(true);
          this.FPlanner.FInplaceEditorClosed = true;
          Key.set(0);
        } else if ($tmp1 === 113) {
          this.FPlanner.CloseInplaceEditor(false);
          this.FPlanner.FInplaceEditorClosed = true;
          Key.set(0);
        };
      };
    };
    this.DoExit = function () {
      pas["WEBLib.Controls"].TControl.DoExit.apply(this,arguments);
      if ((this.FPlanner != null) && this.FPlanner.FInplaceEditorActive) this.FPlanner.CloseInplaceEditor(false);
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      if ($mod.TTMSFNCCustomPlanner.isPrototypeOf(AOwner)) this.FPlanner = rtl.as(AOwner,$mod.TTMSFNCCustomPlanner);
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerCache",pas.contnrs.TObjectList,function () {
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerDisplayList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerGridCache",$mod.TTMSFNCPlannerCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerItemCache",$mod.TTMSFNCPlannerCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerPositionsCache",$mod.TTMSFNCPlannerCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerPositionsTopCache",$mod.TTMSFNCPlannerPositionsCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerPositionsBottomCache",$mod.TTMSFNCPlannerPositionsCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroupsCache",$mod.TTMSFNCPlannerCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroupsTopCache",$mod.TTMSFNCPlannerGroupsCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroupsBottomCache",$mod.TTMSFNCPlannerGroupsCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerTimeLineCache",$mod.TTMSFNCPlannerCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerTimeLineLeftCache",$mod.TTMSFNCPlannerTimeLineCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerTimeLineRightCache",$mod.TTMSFNCPlannerTimeLineCache,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerGridDisplayList",$mod.TTMSFNCPlannerDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerItemDisplayList",$mod.TTMSFNCPlannerDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerPositionsDisplayList",$mod.TTMSFNCPlannerDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerPositionsTopDisplayList",$mod.TTMSFNCPlannerPositionsDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerPositionsBottomDisplayList",$mod.TTMSFNCPlannerPositionsDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroupsDisplayList",$mod.TTMSFNCPlannerDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroupsTopDisplayList",$mod.TTMSFNCPlannerGroupsDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroupsBottomDisplayList",$mod.TTMSFNCPlannerGroupsDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerTimeLineDisplayList",$mod.TTMSFNCPlannerDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerTimeLineLeftDisplayList",$mod.TTMSFNCPlannerTimeLineDisplayList,function () {
  });
  rtl.createClass($mod,"TTMSFNCPlannerTimeLineRightDisplayList",$mod.TTMSFNCPlannerTimeLineDisplayList,function () {
  });
  this.TTMSFNCPlannerPositionsLayout = {"0": "pplTop", pplTop: 0, "1": "pplBottom", pplBottom: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerPositionsLayout",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerPositionsLayout});
  $mod.$rtti.$Set("TTMSFNCPlannerPositionsLayouts",{comptype: $mod.$rtti["TTMSFNCPlannerPositionsLayout"]});
  this.TTMSFNCPlannerGroupLayout = {"0": "pglTop", pglTop: 0, "1": "pglBottom", pglBottom: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerGroupLayout",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerGroupLayout});
  $mod.$rtti.$Set("TTMSFNCPlannerGroupsLayouts",{comptype: $mod.$rtti["TTMSFNCPlannerGroupLayout"]});
  this.TTMSFNCPlannerTimeLineLayout = {"0": "ptlLeft", ptlLeft: 0, "1": "ptlRight", ptlRight: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerTimeLineLayout",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerTimeLineLayout});
  $mod.$rtti.$Set("TTMSFNCPlannerTimeLineLayouts",{comptype: $mod.$rtti["TTMSFNCPlannerTimeLineLayout"]});
  this.TTMSFNCPlannerDisplayGroup = function (s) {
    if (s) {
      this.StartPosition = s.StartPosition;
      this.EndPosition = s.EndPosition;
    } else {
      this.StartPosition = 0;
      this.EndPosition = 0;
    };
    this.$equal = function (b) {
      return (this.StartPosition === b.StartPosition) && (this.EndPosition === b.EndPosition);
    };
  };
  rtl.createClass($mod,"TTMSFNCPlannerAdapter",pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$init.call(this);
      this.FPlanner = null;
      this.FActive = false;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$final.call(this);
    };
    this.SetActive = function (Value) {
      if (Value !== this.FActive) {
        this.FActive = Value;
        this.LoadItems();
      };
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FPlanner)) this.FPlanner = null;
    };
    this.LoadItems = function () {
      if (!(this.FPlanner != null)) return;
      this.FPlanner.FItems.Clear$1();
      if (this.FActive) this.GetItems(this.FPlanner.DisplayStartDateTime(),this.FPlanner.DisplayEndDateTime());
    };
    this.Create$1 = function (AOwner) {
      var I = 0;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.Create$1.apply(this,arguments);
      this.FActive = false;
      if ((AOwner != null) && pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(AOwner)) {
        for (var $l1 = 0, $end2 = AOwner.GetComponentCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if ($mod.TTMSFNCCustomPlanner.isPrototypeOf(AOwner.GetComponent(I))) {
            this.FPlanner = rtl.as(AOwner.GetComponent(I),$mod.TTMSFNCCustomPlanner);
            break;
          };
        };
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Active",2,rtl.boolean,"FActive","SetActive",{Default: false});
  });
  $mod.$rtti.$ClassRef("TTMSFNCPlannerInplaceEditorClass",{instancetype: pas["WEBLib.Controls"].$rtti["TWinControl"]});
  rtl.createClass($mod,"TTMSFNCPlannerCustomItemEditor",pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$init.call(this);
      this.FPlanner = null;
      this.FCreated = false;
      this.FInitialized = false;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$final.call(this);
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FPlanner)) this.FPlanner = null;
    };
    this.Create$1 = function (AOwner) {
      var I = 0;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.Create$1.apply(this,arguments);
      if ((AOwner != null) && pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(AOwner)) {
        for (var $l1 = 0, $end2 = AOwner.GetComponentCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if ($mod.TTMSFNCCustomPlanner.isPrototypeOf(AOwner.GetComponent(I))) {
            this.FPlanner = rtl.as(AOwner.GetComponent(I),$mod.TTMSFNCCustomPlanner);
            break;
          };
        };
      };
    };
    this.Assign = function (Source) {
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerDisplayGroups",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = new $mod.TTMSFNCPlannerDisplayGroup();
      Result = new $mod.TTMSFNCPlannerDisplayGroup(rtl.getObject(this.Get(Index)));
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerConflict",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FPlanner = null;
      this.FNeedsConflictsUpdate = false;
      this.FItems = null;
      this.FDates = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FItems = undefined;
      this.FDates = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.UpdateItems = function () {
      var I = 0;
      var it = null;
      if (!(this.FPlanner != null)) return;
      this.FItems.Clear();
      for (var $l1 = 0, $end2 = this.FPlanner.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.FPlanner.FItems.GetItem$1(I);
        if ((it.FPositionsList.IndexOf(this.FPosition) > -1) && this.FPlanner.IsValidItem(it)) this.FItems.Add(it);
      };
    };
    this.UpdateDates = function () {
      var I = 0;
      var it = null;
      var rcs = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate();
      var rce = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate();
      if (!(this.FPlanner != null)) return;
      this.FDates.Clear();
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.FItems.GetItem(I);
        if (it != null) {
          rcs.X = 0;
          rcs.Y = 0;
          rcs.Z = [];
          rcs.DateTime = this.FPlanner.MaxPositionDateTime(it.FStartTime,false,this.FPosition);
          if (~this.FDates.IndexOf(new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rcs)) > -1) this.FDates.Add(new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rcs));
          rce.X = 0;
          rce.Y = 0;
          rcs.Z = [];
          rce.DateTime = this.FPlanner.MaxPositionDateTime(it.FEndTime,true,this.FPosition);
          if (~this.FDates.IndexOf(new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rce)) > -1) this.FDates.Add(new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rce));
        };
      };
      this.FDates.Sort($impl.CompareRes);
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FNeedsConflictsUpdate = true;
      this.FItems = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceItems.$create("Create$1");
      this.FDates = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDates.$create("Create$1");
    };
    this.Destroy = function () {
      rtl.free(this,"FDates");
      rtl.free(this,"FItems");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerConflicts",pas.contnrs.TObjectList,function () {
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerGridCellAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FVerticalStroke = null;
      this.FHorizontalStroke = null;
      this.FFill = null;
      this.FDisabledFill = null;
      this.FInActiveFill = null;
      this.FHorizontalSubStroke = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FVerticalStroke = undefined;
      this.FHorizontalStroke = undefined;
      this.FFill = undefined;
      this.FDisabledFill = undefined;
      this.FInActiveFill = undefined;
      this.FHorizontalSubStroke = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetHorizontalStroke = function (Value) {
      if (this.FHorizontalStroke !== Value) this.FHorizontalStroke.Assign(Value);
    };
    this.SetVerticalStroke = function (Value) {
      if (this.FVerticalStroke !== Value) this.FVerticalStroke.Assign(Value);
    };
    this.SetFill = function (Value) {
      if (this.FFill !== Value) this.FFill.Assign(Value);
    };
    this.SetDisabledFill = function (Value) {
      if (this.FDisabledFill !== Value) this.FDisabledFill.Assign(Value);
    };
    this.SetInActiveFill = function (Value) {
      if (this.FInActiveFill !== Value) this.FInActiveFill.Assign(Value);
    };
    this.SetHorizontalSubStroke = function (Value) {
      if (this.FHorizontalSubStroke !== Value) this.FHorizontalSubStroke.Assign(Value);
    };
    this.Changed = function (Sender) {
      this.FPlanner.UpdatePlannerCache(true);
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FVerticalStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FHorizontalStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FHorizontalSubStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,13882323]);
      this.FInActiveFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,245,255)]);
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone,16777215]);
      this.FDisabledFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,230,230)]);
      this.FFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FInActiveFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FDisabledFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FVerticalStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FHorizontalStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FHorizontalSubStroke.FOnChanged = rtl.createCallback(this,"Changed");
    };
    this.Destroy = function () {
      rtl.free(this,"FFill");
      rtl.free(this,"FInActiveFill");
      rtl.free(this,"FDisabledFill");
      rtl.free(this,"FVerticalStroke");
      rtl.free(this,"FHorizontalStroke");
      rtl.free(this,"FHorizontalSubStroke");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerGridCellAppearance.isPrototypeOf(Source)) {
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGridCellAppearance).FFill);
        this.FInActiveFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGridCellAppearance).FInActiveFill);
        this.FDisabledFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGridCellAppearance).FDisabledFill);
        this.FVerticalStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGridCellAppearance).FVerticalStroke);
        this.FHorizontalStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGridCellAppearance).FHorizontalStroke);
        this.FHorizontalSubStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGridCellAppearance).FHorizontalSubStroke);
      };
    };
    var $r = this.$rtti;
    $r.addProperty("VerticalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FVerticalStroke","SetVerticalStroke");
    $r.addProperty("HorizontalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHorizontalStroke","SetHorizontalStroke");
    $r.addProperty("HorizontalSubStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHorizontalSubStroke","SetHorizontalSubStroke");
    $r.addProperty("InActiveFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FInActiveFill","SetInActiveFill");
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
  });
  this.TTMSFNCPlannerLinkArrowShape = {"0": "lasNormal", lasNormal: 0, "1": "lasFilled", lasFilled: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerLinkArrowShape",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerLinkArrowShape});
  rtl.createClass($mod,"TTMSFNCPlannerItemsAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FGap = 0.0;
      this.FFill = null;
      this.FStroke = null;
      this.FFont = null;
      this.FTitleFill = null;
      this.FTitleStroke = null;
      this.FTitleFont = null;
      this.FDisabledTitleStroke = null;
      this.FSelectedTitleStroke = null;
      this.FActiveTitleStroke = null;
      this.FDisabledFont = null;
      this.FSelectedFont = null;
      this.FActiveFont = null;
      this.FDisabledFill = null;
      this.FSelectedFill = null;
      this.FActiveFill = null;
      this.FDisabledStroke = null;
      this.FDisabledTitleFont = null;
      this.FSelectedStroke = null;
      this.FSelectedTitleFont = null;
      this.FActiveStroke = null;
      this.FActiveTitleFont = null;
      this.FDisabledTitleFill = null;
      this.FSelectedTitleFill = null;
      this.FActiveTitleFill = null;
      this.FSizeAreaSize = 0.0;
      this.FMoveAreaSize = 0.0;
      this.FMoveAreaColor = 0;
      this.FSizeAreaColor = 0;
      this.FShowMoveArea = false;
      this.FShowSizeArea = false;
      this.FTextVerticalTextAlign = 0;
      this.FTitleHorizontalTextAlign = 0;
      this.FTextHorizontalTextAlign = 0;
      this.FTitleVerticalTextAlign = 0;
      this.FShowItemHelpers = false;
      this.FShowItemSizeHandlers = false;
      this.FSizeHandlerWidth = 0.0;
      this.FSizeHandlerHeight = 0.0;
      this.FSizeHandlerUpBitmap = null;
      this.FSizeHandlerLeftBitmap = null;
      this.FSizeHandlerRightBitmap = null;
      this.FSizeHandlerDownBitmap = null;
      this.FDeleteHandlerBitmap = null;
      this.FDeleteHandlerWidth = 0.0;
      this.FDeleteHandlerHeight = 0.0;
      this.FDeleteAreaSize = 0.0;
      this.FDeleteAreaColor = 0;
      this.FShowDeleteArea = false;
      this.FShowLinks = false;
      this.FLinkStroke = null;
      this.FLinkArrowShape = 0;
      this.FLinkArrowSize = 0.0;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FFont = undefined;
      this.FTitleFill = undefined;
      this.FTitleStroke = undefined;
      this.FTitleFont = undefined;
      this.FDisabledTitleStroke = undefined;
      this.FSelectedTitleStroke = undefined;
      this.FActiveTitleStroke = undefined;
      this.FDisabledFont = undefined;
      this.FSelectedFont = undefined;
      this.FActiveFont = undefined;
      this.FDisabledFill = undefined;
      this.FSelectedFill = undefined;
      this.FActiveFill = undefined;
      this.FDisabledStroke = undefined;
      this.FDisabledTitleFont = undefined;
      this.FSelectedStroke = undefined;
      this.FSelectedTitleFont = undefined;
      this.FActiveStroke = undefined;
      this.FActiveTitleFont = undefined;
      this.FDisabledTitleFill = undefined;
      this.FSelectedTitleFill = undefined;
      this.FActiveTitleFill = undefined;
      this.FSizeHandlerUpBitmap = undefined;
      this.FSizeHandlerLeftBitmap = undefined;
      this.FSizeHandlerRightBitmap = undefined;
      this.FSizeHandlerDownBitmap = undefined;
      this.FDeleteHandlerBitmap = undefined;
      this.FLinkStroke = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetGap = function (Value) {
      if (this.FGap !== Value) {
        this.FGap = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetFill = function (Value) {
      if (this.FFill !== Value) this.FFill.Assign(Value);
    };
    this.SetStroke = function (Value) {
      if (this.FStroke !== Value) this.FStroke.Assign(Value);
    };
    this.SetFont = function (Value) {
      if (this.FFont !== Value) this.FFont.Assign(Value);
    };
    this.SetTitleFill = function (Value) {
      if (this.FTitleFill !== Value) this.FTitleFill.Assign(Value);
    };
    this.SetTitleStroke = function (Value) {
      if (this.FTitleStroke !== Value) this.FTitleStroke.Assign(Value);
    };
    this.SetTitleFont = function (Value) {
      if (this.FTitleFont !== Value) this.FTitleFont.Assign(Value);
    };
    this.SetDisabledFill = function (Value) {
      if (this.FDisabledFill !== Value) this.FDisabledFill.Assign(Value);
    };
    this.SetDisabledFont = function (Value) {
      if (this.FDisabledFont !== Value) this.FDisabledFont.Assign(Value);
    };
    this.SetDisabledStroke = function (Value) {
      if (this.FDisabledStroke !== Value) this.FDisabledStroke.Assign(Value);
    };
    this.SetDisabledTitleFill = function (Value) {
      if (this.FDisabledTitleFill !== Value) this.FDisabledTitleFill.Assign(Value);
    };
    this.SetDisabledTitleFont = function (Value) {
      if (this.FDisabledTitleFont !== Value) this.FDisabledTitleFont.Assign(Value);
    };
    this.SetDisabledTitleStroke = function (Value) {
      if (this.FDisabledTitleStroke !== Value) this.FDisabledTitleStroke.Assign(Value);
    };
    this.SetSelectedFill = function (Value) {
      if (this.FSelectedFill !== Value) this.FSelectedFill.Assign(Value);
    };
    this.SetSelectedFont = function (Value) {
      if (this.FSelectedFont !== Value) this.FSelectedFont.Assign(Value);
    };
    this.SetSelectedStroke = function (Value) {
      if (this.FSelectedStroke !== Value) this.FSelectedStroke.Assign(Value);
    };
    this.SetSelectedTitleFill = function (Value) {
      if (this.FSelectedTitleFill !== Value) this.FSelectedTitleFill.Assign(Value);
    };
    this.SetSelectedTitleFont = function (Value) {
      if (this.FSelectedTitleFont !== Value) this.FSelectedTitleFont.Assign(Value);
    };
    this.SetSelectedTitleStroke = function (Value) {
      if (this.FSelectedTitleStroke !== Value) this.FSelectedTitleStroke.Assign(Value);
    };
    this.SetActiveFill = function (Value) {
      if (this.FActiveFill !== Value) this.FActiveFill.Assign(Value);
    };
    this.SetActiveFont = function (Value) {
      if (this.FActiveFont !== Value) this.FActiveFont.Assign(Value);
    };
    this.SetActiveStroke = function (Value) {
      if (this.FActiveStroke !== Value) this.FActiveStroke.Assign(Value);
    };
    this.SetActiveTitleFill = function (Value) {
      if (this.FActiveTitleFill !== Value) this.FActiveTitleFill.Assign(Value);
    };
    this.SetActiveTitleFont = function (Value) {
      if (this.FActiveTitleFont !== Value) this.FActiveTitleFont.Assign(Value);
    };
    this.SetActiveTitleStroke = function (Value) {
      if (this.FActiveTitleStroke !== Value) this.FActiveTitleStroke.Assign(Value);
    };
    this.SetMoveAreaSize = function (Value) {
      if (this.FMoveAreaSize !== Value) {
        this.FMoveAreaSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetSizeAreaSize = function (Value) {
      if (this.FSizeAreaSize !== Value) {
        this.FSizeAreaSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetMoveAreaColor = function (Value) {
      if (this.FMoveAreaColor !== Value) {
        this.FMoveAreaColor = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetSizeAreaColor = function (Value) {
      if (this.FSizeAreaColor !== Value) {
        this.FSizeAreaColor = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetShowMoveArea = function (Value) {
      if (this.FShowMoveArea !== Value) {
        this.FShowMoveArea = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetShowSizeArea = function (Value) {
      if (this.FShowSizeArea !== Value) {
        this.FShowSizeArea = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetTextHorizontalTextAlign = function (Value) {
      if (this.FTextHorizontalTextAlign !== Value) {
        this.FTextHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetTextVerticalTextAlign = function (Value) {
      if (this.FTextVerticalTextAlign !== Value) {
        this.FTextVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetTitleHorizontalTextAlign = function (Value) {
      if (this.FTitleHorizontalTextAlign !== Value) {
        this.FTitleHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetTitleVerticalTextAlign = function (Value) {
      if (this.FTitleVerticalTextAlign !== Value) {
        this.FTitleVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetShowItemHelpers = function (Value) {
      if (this.FShowItemHelpers !== Value) this.FShowItemHelpers = Value;
    };
    this.SetSizeHandlerHeight = function (Value) {
      if (this.FSizeHandlerHeight !== Value) {
        this.FSizeHandlerHeight = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetSizeHandlerWidth = function (Value) {
      if (this.FSizeHandlerHeight !== Value) {
        this.FSizeHandlerWidth = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetSizeHandlerDownBitmap = function (Value) {
      if (this.FSizeHandlerDownBitmap !== Value) {
        this.FSizeHandlerDownBitmap.Assign(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetSizeHandlerLeftBitmap = function (Value) {
      if (this.FSizeHandlerLeftBitmap !== Value) {
        this.FSizeHandlerLeftBitmap.Assign(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetSizeHandlerRightBitmap = function (Value) {
      if (this.FSizeHandlerRightBitmap !== Value) {
        this.FSizeHandlerRightBitmap.Assign(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetSizeHandlerUpBitmap = function (Value) {
      if (this.FSizeHandlerUpBitmap !== Value) {
        this.FSizeHandlerUpBitmap.Assign(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDeleteHandlerBitmap = function (Value) {
      if (this.FDeleteHandlerBitmap !== Value) {
        this.FDeleteHandlerBitmap.Assign(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDeleteHandlerHeight = function (Value) {
      if (this.FDeleteHandlerHeight !== Value) {
        this.FDeleteHandlerHeight = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDeleteHandlerWidth = function (Value) {
      if (this.FDeleteHandlerWidth !== Value) {
        this.FDeleteHandlerWidth = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDeleteAreaColor = function (Value) {
      if (this.FDeleteAreaColor !== Value) {
        this.FDeleteAreaColor = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDeleteAreaSize = function (Value) {
      if (this.FDeleteAreaSize !== Value) {
        this.FDeleteAreaSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetShowDeleteArea = function (Value) {
      if (this.FShowDeleteArea !== Value) {
        this.FShowDeleteArea = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetShowLinks = function (Value) {
      if (this.FShowLinks !== Value) {
        this.FShowLinks = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.SetLinkStroke = function (Value) {
      if (this.FLinkStroke !== Value) this.FLinkStroke.Assign(Value);
    };
    this.SetLinkArrowShape = function (Value) {
      if (this.FLinkArrowShape !== Value) {
        this.FLinkArrowShape = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.SetLinkArrowSize = function (Value) {
      if (this.FLinkArrowSize !== Value) {
        this.FLinkArrowSize = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.Changed = function (Sender) {
      this.FPlanner.UpdatePlannerCache(true);
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FGap = 10;
      this.FSizeAreaSize = 4;
      this.FMoveAreaSize = 4;
      this.FDeleteAreaSize = 16;
      this.FShowItemSizeHandlers = true;
      this.FShowItemHelpers = true;
      this.FSizeHandlerWidth = 50;
      this.FSizeHandlerHeight = 30;
      this.FDeleteHandlerWidth = 30;
      this.FDeleteHandlerHeight = 30;
      this.FShowLinks = false;
      this.FLinkArrowShape = $mod.TTMSFNCPlannerLinkArrowShape.lasNormal;
      this.FLinkArrowSize = 7;
      this.FTitleHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FTitleVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FTextHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FTextVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FSizeHandlerUpBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FSizeHandlerUpBitmap.LoadFromResource$1("TTMSFNCPLANNERARROWUP",pas["WEBLib.TMSFNCTypes"].HInstance());
      this.FSizeHandlerUpBitmap.FOnChange = rtl.createCallback(this,"Changed");
      this.FSizeHandlerRightBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FSizeHandlerRightBitmap.LoadFromResource$1("TTMSFNCPLANNERARROWRIGHT",pas["WEBLib.TMSFNCTypes"].HInstance());
      this.FSizeHandlerRightBitmap.FOnChange = rtl.createCallback(this,"Changed");
      this.FDeleteHandlerBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FDeleteHandlerBitmap.LoadFromResource$1("TTMSFNCPLANNERDELETE",pas["WEBLib.TMSFNCTypes"].HInstance());
      this.FDeleteHandlerBitmap.FOnChange = rtl.createCallback(this,"Changed");
      this.FSizeHandlerLeftBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FSizeHandlerLeftBitmap.LoadFromResource$1("TTMSFNCPLANNERARROWLEFT",pas["WEBLib.TMSFNCTypes"].HInstance());
      this.FSizeHandlerLeftBitmap.FOnChange = rtl.createCallback(this,"Changed");
      this.FSizeHandlerDownBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FSizeHandlerDownBitmap.LoadFromResource$1("TTMSFNCPLANNERARROWDOWN",pas["WEBLib.TMSFNCTypes"].HInstance());
      this.FSizeHandlerDownBitmap.FOnChange = rtl.createCallback(this,"Changed");
      this.FMoveAreaColor = 12429958;
      this.FSizeAreaColor = 12429958;
      this.FDeleteAreaColor = 11829830;
      this.FShowMoveArea = true;
      this.FShowSizeArea = true;
      this.FShowDeleteArea = false;
      this.FLinkStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FLinkStroke.SetWidth(2);
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,11119017]);
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FTitleFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FTitleStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FSelectedFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16297243]);
      this.FSelectedStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FSelectedTitleFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FSelectedTitleStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FActiveFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16297243]);
      this.FActiveStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FActiveTitleFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FActiveTitleStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FDisabledFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,11119017]);
      this.FDisabledStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FDisabledTitleFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,11119017]);
      this.FDisabledTitleStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone,11119017]);
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FTitleFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
      this.FSelectedFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FSelectedTitleFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FSelectedTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
      this.FActiveFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FActiveTitleFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FActiveTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
      this.FDisabledFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FDisabledTitleFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FDisabledTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FTitleFont,16);
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FSelectedTitleFont,16);
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FActiveTitleFont,16);
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FDisabledTitleFont,16);
      this.FFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTitleFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTitleStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTitleFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FSelectedFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FSelectedStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FSelectedFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FSelectedTitleFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FSelectedTitleStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FSelectedTitleFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FActiveFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FActiveStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FActiveFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FActiveTitleFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FActiveTitleStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FActiveTitleFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FDisabledFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FDisabledStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FDisabledFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FDisabledTitleFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FDisabledTitleStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FDisabledTitleFont.FOnChanged = rtl.createCallback(this,"Changed");
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerItemsAppearance.isPrototypeOf(Source)) {
        this.FGap = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FGap;
        this.FMoveAreaSize = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FMoveAreaSize;
        this.FMoveAreaColor = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FMoveAreaColor;
        this.FSizeAreaSize = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeAreaSize;
        this.FDeleteAreaSize = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDeleteAreaSize;
        this.FSizeAreaColor = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeAreaColor;
        this.FDeleteAreaColor = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDeleteAreaColor;
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FFill);
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FStroke);
        this.FFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FFont);
        this.FTitleFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FTitleFill);
        this.FTitleStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FTitleStroke);
        this.FTitleFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FTitleFont);
        this.FSelectedFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSelectedFill);
        this.FSelectedStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSelectedStroke);
        this.FSelectedFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSelectedFont);
        this.FSelectedTitleFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSelectedTitleFill);
        this.FSelectedTitleStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSelectedTitleStroke);
        this.FSelectedTitleFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSelectedTitleFont);
        this.FActiveFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FActiveFill);
        this.FActiveStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FActiveStroke);
        this.FActiveFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FActiveFont);
        this.FActiveTitleFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FActiveTitleFill);
        this.FActiveTitleStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FActiveTitleStroke);
        this.FActiveTitleFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FActiveTitleFont);
        this.FDisabledFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDisabledFill);
        this.FDisabledStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDisabledStroke);
        this.FDisabledFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDisabledFont);
        this.FDisabledTitleFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDisabledTitleFill);
        this.FDisabledTitleStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDisabledTitleStroke);
        this.FDisabledTitleFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDisabledTitleFont);
        this.FShowItemHelpers = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FShowItemHelpers;
        this.FSizeHandlerHeight = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeHandlerHeight;
        this.FSizeHandlerWidth = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeHandlerWidth;
        this.FDeleteHandlerHeight = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDeleteHandlerHeight;
        this.FDeleteHandlerWidth = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDeleteHandlerWidth;
        this.FSizeHandlerUpBitmap.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeHandlerUpBitmap);
        this.FSizeHandlerDownBitmap.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeHandlerDownBitmap);
        this.FSizeHandlerLeftBitmap.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeHandlerLeftBitmap);
        this.FSizeHandlerRightBitmap.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FSizeHandlerRightBitmap);
        this.FDeleteHandlerBitmap.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FDeleteHandlerBitmap);
        this.FShowLinks = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FShowLinks;
        this.FLinkArrowSize = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FLinkArrowSize;
        this.FLinkArrowShape = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FLinkArrowShape;
        this.FLinkStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FLinkStroke);
        this.FTextVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FTextVerticalTextAlign;
        this.FTextHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FTextHorizontalTextAlign;
        this.FTitleVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FTitleVerticalTextAlign;
        this.FTitleHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerItemsAppearance).FTitleHorizontalTextAlign;
      };
    };
    this.Destroy = function () {
      rtl.free(this,"FDeleteHandlerBitmap");
      rtl.free(this,"FSizeHandlerUpBitmap");
      rtl.free(this,"FSizeHandlerLeftBitmap");
      rtl.free(this,"FSizeHandlerDownBitmap");
      rtl.free(this,"FSizeHandlerRightBitmap");
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      rtl.free(this,"FLinkStroke");
      rtl.free(this,"FFont");
      rtl.free(this,"FTitleFill");
      rtl.free(this,"FTitleStroke");
      rtl.free(this,"FTitleFont");
      rtl.free(this,"FSelectedFill");
      rtl.free(this,"FSelectedStroke");
      rtl.free(this,"FSelectedFont");
      rtl.free(this,"FSelectedTitleFill");
      rtl.free(this,"FSelectedTitleStroke");
      rtl.free(this,"FSelectedTitleFont");
      rtl.free(this,"FActiveFill");
      rtl.free(this,"FActiveStroke");
      rtl.free(this,"FActiveFont");
      rtl.free(this,"FActiveTitleFill");
      rtl.free(this,"FActiveTitleStroke");
      rtl.free(this,"FActiveTitleFont");
      rtl.free(this,"FDisabledFill");
      rtl.free(this,"FDisabledStroke");
      rtl.free(this,"FDisabledFont");
      rtl.free(this,"FDisabledTitleFill");
      rtl.free(this,"FDisabledTitleStroke");
      rtl.free(this,"FDisabledTitleFont");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    var $r = this.$rtti;
    $r.addProperty("Gap",2,rtl.double,"FGap","SetGap");
    $r.addProperty("MoveAreaSize",2,rtl.double,"FMoveAreaSize","SetMoveAreaSize");
    $r.addProperty("SizeAreaSize",2,rtl.double,"FSizeAreaSize","SetSizeAreaSize");
    $r.addProperty("DeleteAreaSize",2,rtl.double,"FDeleteAreaSize","SetDeleteAreaSize");
    $r.addProperty("DeleteHandlerBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FDeleteHandlerBitmap","SetDeleteHandlerBitmap");
    $r.addProperty("SizeHandlerHeight",2,rtl.double,"FSizeHandlerHeight","SetSizeHandlerHeight");
    $r.addProperty("SizeHandlerWidth",2,rtl.double,"FSizeHandlerWidth","SetSizeHandlerWidth");
    $r.addProperty("DeleteHandlerHeight",2,rtl.double,"FDeleteHandlerHeight","SetDeleteHandlerHeight");
    $r.addProperty("DeleteHandlerWidth",2,rtl.double,"FDeleteHandlerWidth","SetDeleteHandlerWidth");
    $r.addProperty("SizeHandlerLeftBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FSizeHandlerLeftBitmap","SetSizeHandlerLeftBitmap");
    $r.addProperty("SizeHandlerRightBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FSizeHandlerRightBitmap","SetSizeHandlerRightBitmap");
    $r.addProperty("SizeHandlerUpBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FSizeHandlerUpBitmap","SetSizeHandlerUpBitmap");
    $r.addProperty("SizeHandlerDownBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FSizeHandlerDownBitmap","SetSizeHandlerDownBitmap");
    $r.addProperty("MoveAreaColor",2,rtl.longint,"FMoveAreaColor","SetMoveAreaColor",{Default: 12429958});
    $r.addProperty("SizeAreaColor",2,rtl.longint,"FSizeAreaColor","SetSizeAreaColor",{Default: 12429958});
    $r.addProperty("DeleteAreaColor",2,rtl.longint,"FDeleteAreaColor","SetDeleteAreaColor",{Default: 11829830});
    $r.addProperty("ShowMoveArea",2,rtl.boolean,"FShowMoveArea","SetShowMoveArea",{Default: true});
    $r.addProperty("ShowSizeArea",2,rtl.boolean,"FShowSizeArea","SetShowSizeArea",{Default: true});
    $r.addProperty("ShowDeleteArea",2,rtl.boolean,"FShowDeleteArea","SetShowDeleteArea",{Default: false});
    $r.addProperty("ShowItemHelpers",2,rtl.boolean,"FShowItemHelpers","SetShowItemHelpers",{Default: true});
    $r.addProperty("ShowLinks",2,rtl.boolean,"FShowLinks","SetShowLinks",{Default: false});
    $r.addProperty("LinkStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FLinkStroke","SetLinkStroke");
    $r.addProperty("LinkArrowShape",2,$mod.$rtti["TTMSFNCPlannerLinkArrowShape"],"FLinkArrowShape","SetLinkArrowShape",{Default: $mod.TTMSFNCPlannerLinkArrowShape.lasNormal});
    $r.addProperty("LinkArrowSize",2,rtl.double,"FLinkArrowSize","SetLinkArrowSize");
    $r.addProperty("TitleFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FTitleFill","SetTitleFill");
    $r.addProperty("TitleStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FTitleStroke","SetTitleStroke");
    $r.addProperty("TitleFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FTitleFont","SetTitleFont");
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont","SetFont");
    $r.addProperty("SelectedTitleFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FSelectedTitleFill","SetSelectedTitleFill");
    $r.addProperty("SelectedTitleStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FSelectedTitleStroke","SetSelectedTitleStroke");
    $r.addProperty("SelectedTitleFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FSelectedTitleFont","SetSelectedTitleFont");
    $r.addProperty("ActiveTitleFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FActiveTitleFill","SetActiveTitleFill");
    $r.addProperty("ActiveTitleStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FActiveTitleStroke","SetActiveTitleStroke");
    $r.addProperty("ActiveTitleFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FActiveTitleFont","SetActiveTitleFont");
    $r.addProperty("SelectedFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FSelectedFill","SetSelectedFill");
    $r.addProperty("SelectedStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FSelectedStroke","SetSelectedStroke");
    $r.addProperty("SelectedFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FSelectedFont","SetSelectedFont");
    $r.addProperty("ActiveFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FActiveFill","SetActiveFill");
    $r.addProperty("ActiveStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FActiveStroke","SetActiveStroke");
    $r.addProperty("ActiveFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FActiveFont","SetActiveFont");
    $r.addProperty("DisabledTitleFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledTitleFill","SetDisabledTitleFill");
    $r.addProperty("DisabledTitleStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledTitleStroke","SetDisabledTitleStroke");
    $r.addProperty("DisabledTitleFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FDisabledTitleFont","SetDisabledTitleFont");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
    $r.addProperty("DisabledStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledStroke","SetDisabledStroke");
    $r.addProperty("DisabledFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FDisabledFont","SetDisabledFont");
    $r.addProperty("TitleHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTitleHorizontalTextAlign","SetTitleHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("TitleVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTitleVerticalTextAlign","SetTitleVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("TextHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTextHorizontalTextAlign","SetTextHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("TextVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTextVerticalTextAlign","SetTextVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
  });
  rtl.createClass($mod,"TTMSFNCPlannerSelectionAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FFill = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FFill = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetFill = function (Value) {
      if (this.FFill !== Value) this.FFill.Assign(Value);
    };
    this.Changed = function (Sender) {
      this.FPlanner.Invalidate();
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(149,213,246)]);
      this.FFill.FOnChanged = rtl.createCallback(this,"Changed");
    };
    this.Destroy = function () {
      rtl.free(this,"FFill");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerSelectionAppearance.isPrototypeOf(Source)) {
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerSelectionAppearance).FFill);
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
  });
  this.TTMSFNCPlannerVerticalTextMode = {"0": "pvtmAuto", pvtmAuto: 0, "1": "pvtmAlways", pvtmAlways: 1, "2": "pvtmNone", pvtmNone: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerVerticalTextMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerVerticalTextMode});
  rtl.createClass($mod,"TTMSFNCPlannerTimeLineAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FLayouts = {};
      this.FLeftSize = 0.0;
      this.FRightSize = 0.0;
      this.FRightStroke = null;
      this.FLeftFill = null;
      this.FLeftStroke = null;
      this.FRightFill = null;
      this.FLeftFont = null;
      this.FRightFont = null;
      this.FStretch = false;
      this.FLeftSubUnitFontSize = 0.0;
      this.FRightSubUnitFontSize = 0.0;
      this.FCurrentTimeColor = 0;
      this.FLeftSubVerticalTextAlign = 0;
      this.FLeftVerticalTextAlign = 0;
      this.FRightSubVerticalTextAlign = 0;
      this.FLeftSubHorizontalTextAlign = 0;
      this.FRightVerticalTextAlign = 0;
      this.FLeftHorizontalTextAlign = 0;
      this.FRightSubHorizontalTextAlign = 0;
      this.FRightHorizontalTextAlign = 0;
      this.FLeftSubStroke = null;
      this.FRightSubStroke = null;
      this.FLeftSubVerticalTextMode = 0;
      this.FLeftVerticalTextMode = 0;
      this.FRightSubVerticalTextMode = 0;
      this.FRightVerticalTextMode = 0;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FLayouts = undefined;
      this.FRightStroke = undefined;
      this.FLeftFill = undefined;
      this.FLeftStroke = undefined;
      this.FRightFill = undefined;
      this.FLeftFont = undefined;
      this.FRightFont = undefined;
      this.FLeftSubStroke = undefined;
      this.FRightSubStroke = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetLayouts = function (Value) {
      if (rtl.neSet(this.FLayouts,Value)) {
        this.FLayouts = rtl.refSet(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetLeftSize = function (Value) {
      if (this.FLeftSize !== Value) {
        this.FLeftSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetRightSize = function (Value) {
      if (this.FRightSize !== Value) {
        this.FRightSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetLeftFill = function (Value) {
      if (this.FLeftFill !== Value) this.FLeftFill.Assign(Value);
    };
    this.SetLeftStroke = function (Value) {
      if (this.FLeftStroke !== Value) this.FLeftStroke.Assign(Value);
    };
    this.SetRightFill = function (Value) {
      if (this.FRightFill !== Value) this.FRightFill.Assign(Value);
    };
    this.SetRightStroke = function (Value) {
      if (this.FRightStroke !== Value) this.FRightStroke.Assign(Value);
    };
    this.SetLeftFont = function (Value) {
      if (this.FLeftFont !== Value) this.FLeftFont.Assign(Value);
    };
    this.SetRightFont = function (Value) {
      if (this.FRightFont !== Value) this.FRightFont.Assign(Value);
    };
    this.SetStretch = function (Value) {
      if (this.FStretch !== Value) {
        this.FStretch = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetLeftSubUnitFontSize = function (Value) {
      if (this.FLeftSubUnitFontSize !== Value) {
        this.FLeftSubUnitFontSize = Value;
        this.Changed(this);
      };
    };
    this.SetRightSubUnitFontSize = function (Value) {
      if (this.FRightSubUnitFontSize !== Value) {
        this.FRightSubUnitFontSize = Value;
        this.Changed(this);
      };
    };
    this.SetCurrentTimeColor = function (Value) {
      if (this.FCurrentTimeColor !== Value) {
        this.FCurrentTimeColor = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.SetLeftHorizontalTextAlign = function (Value) {
      if (this.FLeftHorizontalTextAlign !== Value) {
        this.FLeftHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetLeftSubHorizontalTextAlign = function (Value) {
      if (this.FLeftSubHorizontalTextAlign !== Value) {
        this.FLeftSubHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetLeftSubVerticalTextAlign = function (Value) {
      if (this.FLeftSubVerticalTextAlign !== Value) {
        this.FLeftSubVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetLeftVerticalTextAlign = function (Value) {
      if (this.FLeftVerticalTextAlign !== Value) {
        this.FLeftVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetRightHorizontalTextAlign = function (Value) {
      if (this.FRightHorizontalTextAlign !== Value) {
        this.FRightHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetRightSubHorizontalTextAlign = function (Value) {
      if (this.FRightSubHorizontalTextAlign !== Value) {
        this.FRightSubHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetRightSubVerticalTextAlign = function (Value) {
      if (this.FRightSubVerticalTextAlign !== Value) {
        this.FRightSubVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetRightVerticalTextAlign = function (Value) {
      if (this.FRightVerticalTextAlign !== Value) {
        this.FRightVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetLeftSubStroke = function (Value) {
      if (this.FLeftSubStroke !== Value) this.FLeftSubStroke.Assign(Value);
    };
    this.SetRightSubStroke = function (Value) {
      if (this.FRightSubStroke !== Value) this.FRightSubStroke.Assign(Value);
    };
    this.SetLeftSubVerticalTextMode = function (Value) {
      if (this.FLeftSubVerticalTextMode !== Value) {
        this.FLeftSubVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.SetLeftVerticalTextMode = function (Value) {
      if (this.FLeftVerticalTextMode !== Value) {
        this.FLeftVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.SetRightSubVerticalTextMode = function (Value) {
      if (this.FRightSubVerticalTextMode !== Value) {
        this.FRightSubVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.SetRightVerticalTextMode = function (Value) {
      if (this.FRightVerticalTextMode !== Value) {
        this.FRightVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.Changed = function (Sender) {
      this.FPlanner.UpdatePlannerCache(true);
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FStretch = false;
      this.FCurrentTimeColor = 42495;
      this.FLayouts = rtl.createSet($mod.TTMSFNCPlannerTimeLineLayout.ptlLeft);
      this.FLeftSize = 50;
      this.FRightSize = 50;
      this.FLeftVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone;
      this.FRightVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone;
      this.FLeftSubVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone;
      this.FRightSubVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone;
      this.FLeftHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FLeftVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FRightHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FRightVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading;
      this.FLeftSubHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing;
      this.FLeftSubVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing;
      this.FRightSubHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing;
      this.FRightSubVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing;
      this.FRightFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone,16777215]);
      this.FRightStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FRightSubStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,13882323]);
      this.FLeftFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone,16777215]);
      this.FLeftStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FLeftSubStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,13882323]);
      this.FLeftFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FLeftFont.SetColor(8421504);
      this.FRightFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FRightFont.SetColor(8421504);
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FLeftFont,18);
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FRightFont,18);
      this.FLeftSubUnitFontSize = 14;
      this.FRightSubUnitFontSize = 14;
      this.FLeftSubUnitFontSize = Math.round((this.FLeftSubUnitFontSize / 96) * 72);
      this.FRightSubUnitFontSize = Math.round((this.FRightSubUnitFontSize / 96) * 72);
      this.FRightFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FLeftFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FRightFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FLeftFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FRightStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FRightSubStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FLeftStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FLeftSubStroke.FOnChanged = rtl.createCallback(this,"Changed");
    };
    this.Destroy = function () {
      rtl.free(this,"FLeftFont");
      rtl.free(this,"FRightFont");
      rtl.free(this,"FRightStroke");
      rtl.free(this,"FRightSubStroke");
      rtl.free(this,"FRightFill");
      rtl.free(this,"FLeftStroke");
      rtl.free(this,"FLeftSubStroke");
      rtl.free(this,"FLeftFill");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerTimeLineAppearance.isPrototypeOf(Source)) {
        this.FLayouts = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLayouts);
        this.FRightSize = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightSize;
        this.FLeftSize = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftSize;
        this.FRightFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightFill);
        this.FRightStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightStroke);
        this.FRightSubStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightSubStroke);
        this.FLeftFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftFill);
        this.FLeftFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftFont);
        this.FLeftStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftStroke);
        this.FLeftSubStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftSubStroke);
        this.FRightFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightFont);
        this.FRightSubUnitFontSize = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightSubUnitFontSize;
        this.FLeftSubUnitFontSize = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftSubUnitFontSize;
        this.FCurrentTimeColor = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FCurrentTimeColor;
        this.FStretch = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FStretch;
        this.FLeftVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftVerticalTextAlign;
        this.FLeftSubVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftSubVerticalTextAlign;
        this.FLeftHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftHorizontalTextAlign;
        this.FLeftSubHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftSubHorizontalTextAlign;
        this.FRightVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightVerticalTextAlign;
        this.FRightSubVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightSubVerticalTextAlign;
        this.FRightHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightHorizontalTextAlign;
        this.FRightSubHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightSubHorizontalTextAlign;
        this.FLeftSubVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftSubVerticalTextMode;
        this.FRightSubVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightSubVerticalTextMode;
        this.FLeftVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FLeftVerticalTextMode;
        this.FRightVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerTimeLineAppearance).FRightVerticalTextMode;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Layouts",2,$mod.$rtti["TTMSFNCPlannerTimeLineLayouts"],"FLayouts","SetLayouts",{Default: rtl.createSet($mod.TTMSFNCPlannerTimeLineLayout.ptlLeft)});
    $r.addProperty("Stretch",2,rtl.boolean,"FStretch","SetStretch",{Default: false});
    $r.addProperty("LeftSize",2,rtl.double,"FLeftSize","SetLeftSize");
    $r.addProperty("RightSize",2,rtl.double,"FRightSize","SetRightSize");
    $r.addProperty("LeftFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FLeftFill","SetLeftFill");
    $r.addProperty("RightFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FRightFill","SetRightFill");
    $r.addProperty("LeftStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FLeftStroke","SetLeftStroke");
    $r.addProperty("RightStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FRightStroke","SetRightStroke");
    $r.addProperty("LeftSubStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FLeftSubStroke","SetLeftSubStroke");
    $r.addProperty("RightSubStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FRightSubStroke","SetRightSubStroke");
    $r.addProperty("LeftFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FLeftFont","SetLeftFont");
    $r.addProperty("RightFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FRightFont","SetRightFont");
    $r.addProperty("LeftSubUnitFontSize",2,rtl.double,"FLeftSubUnitFontSize","SetLeftSubUnitFontSize");
    $r.addProperty("RightSubUnitFontSize",2,rtl.double,"FRightSubUnitFontSize","SetRightSubUnitFontSize");
    $r.addProperty("CurrentTimeColor",2,rtl.longint,"FCurrentTimeColor","SetCurrentTimeColor",{Default: 42495});
    $r.addProperty("LeftHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FLeftHorizontalTextAlign","SetLeftHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("LeftVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FLeftVerticalTextAlign","SetLeftVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("RightHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FRightHorizontalTextAlign","SetRightHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("RightVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FRightVerticalTextAlign","SetRightVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading});
    $r.addProperty("LeftSubHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FLeftSubHorizontalTextAlign","SetLeftSubHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing});
    $r.addProperty("LeftSubVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FLeftSubVerticalTextAlign","SetLeftSubVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing});
    $r.addProperty("RightSubHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FRightSubHorizontalTextAlign","SetRightSubHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing});
    $r.addProperty("RightSubVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FRightSubVerticalTextAlign","SetRightSubVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing});
    $r.addProperty("LeftVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FLeftVerticalTextMode","SetLeftVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone});
    $r.addProperty("RightVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FRightVerticalTextMode","SetRightVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone});
    $r.addProperty("LeftSubVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FLeftSubVerticalTextMode","SetLeftSubVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone});
    $r.addProperty("RightSubVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FRightSubVerticalTextMode","SetRightSubVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone});
  });
  rtl.createClass($mod,"TTMSFNCPlannerPositionsAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FLayouts = {};
      this.FStretch = false;
      this.FBottomSize = 0.0;
      this.FTopSize = 0.0;
      this.FBottomFill = null;
      this.FBottomStroke = null;
      this.FTopFill = null;
      this.FTopStroke = null;
      this.FTopFont = null;
      this.FBottomFont = null;
      this.FTopVerticalTextAlign = 0;
      this.FTopHorizontalTextAlign = 0;
      this.FBottomHorizontalTextAlign = 0;
      this.FBottomVerticalTextAlign = 0;
      this.FSize = 0.0;
      this.FTopVerticalTextMode = 0;
      this.FBottomVerticalTextMode = 0;
      this.FTopNavigationButtonStroke = null;
      this.FBottomNavigationButtonFill = null;
      this.FBottomNavigationButtonStroke = null;
      this.FTopNavigationButtonFill = null;
      this.FFillEmptySpaces = false;
      this.FBottomNavigationButtonDownFill = null;
      this.FTopNavigationButtonHoverFill = null;
      this.FBottomNavigationButtonDownStroke = null;
      this.FTopNavigationButtonHoverStroke = null;
      this.FTopNavigationButtonDownFill = null;
      this.FTopNavigationButtonDownStroke = null;
      this.FBottomNavigationButtonHoverFill = null;
      this.FBottomNavigationButtonHoverStroke = null;
      this.FTopRightNavigationButtonSize = 0.0;
      this.FBottomLeftNavigationButtonSize = 0.0;
      this.FBottomRightNavigationButtonSize = 0.0;
      this.FTopLeftNavigationButtonSize = 0.0;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FLayouts = undefined;
      this.FBottomFill = undefined;
      this.FBottomStroke = undefined;
      this.FTopFill = undefined;
      this.FTopStroke = undefined;
      this.FTopFont = undefined;
      this.FBottomFont = undefined;
      this.FTopNavigationButtonStroke = undefined;
      this.FBottomNavigationButtonFill = undefined;
      this.FBottomNavigationButtonStroke = undefined;
      this.FTopNavigationButtonFill = undefined;
      this.FBottomNavigationButtonDownFill = undefined;
      this.FTopNavigationButtonHoverFill = undefined;
      this.FBottomNavigationButtonDownStroke = undefined;
      this.FTopNavigationButtonHoverStroke = undefined;
      this.FTopNavigationButtonDownFill = undefined;
      this.FTopNavigationButtonDownStroke = undefined;
      this.FBottomNavigationButtonHoverFill = undefined;
      this.FBottomNavigationButtonHoverStroke = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetLayouts = function (Value) {
      if (rtl.neSet(this.FLayouts,Value)) {
        this.FLayouts = rtl.refSet(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetStretch = function (Value) {
      if (this.FStretch !== Value) {
        this.FStretch = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetBottomSize = function (Value) {
      if (this.FBottomSize !== Value) {
        this.FBottomSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetTopSize = function (Value) {
      if (this.FTopSize !== Value) {
        this.FTopSize = Value;
        this.Changed(this);
      };
    };
    this.SetBottomFill = function (Value) {
      if (this.FBottomFill !== Value) this.FBottomFill.Assign(Value);
    };
    this.SetBottomStroke = function (Value) {
      if (this.FBottomStroke !== Value) this.FBottomStroke.Assign(Value);
    };
    this.SetTopFill = function (Value) {
      if (this.FTopFill !== Value) this.FTopFill.Assign(Value);
    };
    this.SetTopStroke = function (Value) {
      if (this.FTopStroke !== Value) this.FTopStroke.Assign(Value);
    };
    this.SetBottomFont = function (Value) {
      if (this.FBottomFont !== Value) this.FBottomFont.Assign(Value);
    };
    this.SetTopFont = function (Value) {
      if (this.FTopFont !== Value) this.FTopFont.Assign(Value);
    };
    this.SetTopHorizontalTextAlign = function (Value) {
      if (this.FTopHorizontalTextAlign !== Value) {
        this.FTopHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetTopVerticalTextAlign = function (Value) {
      if (this.FTopVerticalTextAlign !== Value) {
        this.FTopVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetBottomHorizontalTextAlign = function (Value) {
      if (this.FBottomHorizontalTextAlign !== Value) {
        this.FBottomHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetBottomVerticalTextAlign = function (Value) {
      if (this.FBottomVerticalTextAlign !== Value) {
        this.FBottomVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetSize = function (Value) {
      if (this.FSize !== Value) {
        this.FSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetTopVerticalTextMode = function (Value) {
      if (this.FTopVerticalTextMode !== Value) {
        this.FTopVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.SetBottomVerticalTextMode = function (Value) {
      if (this.FBottomVerticalTextMode !== Value) {
        this.FBottomVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.SetBottomNavigationButtonFill = function (Value) {
      if (this.FBottomNavigationButtonFill !== Value) this.FBottomNavigationButtonFill.Assign(Value);
    };
    this.SetBottomNavigationButtonStroke = function (Value) {
      if (this.FBottomNavigationButtonStroke !== Value) this.FBottomNavigationButtonStroke.Assign(Value);
    };
    this.SetTopNavigationButtonFill = function (Value) {
      if (this.FTopNavigationButtonFill !== Value) this.FTopNavigationButtonFill.Assign(Value);
    };
    this.SetTopNavigationButtonStroke = function (Value) {
      if (this.FTopNavigationButtonStroke !== Value) this.FTopNavigationButtonStroke.Assign(Value);
    };
    this.SetFillEmptySpaces = function (Value) {
      if (this.FFillEmptySpaces !== Value) {
        this.FFillEmptySpaces = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.SetBottomNavigationButtonDownFill = function (Value) {
      if (this.FBottomNavigationButtonDownFill !== Value) this.FBottomNavigationButtonDownFill.Assign(Value);
    };
    this.SetBottomNavigationButtonDownStroke = function (Value) {
      if (this.FBottomNavigationButtonDownStroke !== Value) this.FBottomNavigationButtonDownStroke.Assign(Value);
    };
    this.SetBottomNavigationButtonHoverFill = function (Value) {
      if (this.FBottomNavigationButtonHoverFill !== Value) this.FBottomNavigationButtonHoverFill.Assign(Value);
    };
    this.SetBottomNavigationButtonHoverStroke = function (Value) {
      if (this.FBottomNavigationButtonStroke !== Value) this.FBottomNavigationButtonHoverStroke.Assign(Value);
    };
    this.SetTopNavigationButtonDownFill = function (Value) {
      if (this.FTopNavigationButtonDownFill !== Value) this.FTopNavigationButtonDownFill.Assign(Value);
    };
    this.SetTopNavigationButtonDownStroke = function (Value) {
      if (this.FTopNavigationButtonDownStroke !== Value) this.FTopNavigationButtonDownStroke.Assign(Value);
    };
    this.SetTopNavigationButtonHoverFill = function (Value) {
      if (this.FTopNavigationButtonHoverFill !== Value) this.FTopNavigationButtonHoverFill.Assign(Value);
    };
    this.SetTopNavigationButtonHoverStroke = function (Value) {
      if (this.FTopNavigationButtonHoverStroke !== Value) this.FTopNavigationButtonHoverStroke.Assign(Value);
    };
    this.SetBottomLeftNavigationButtonSize = function (Value) {
      if (this.FBottomLeftNavigationButtonSize !== Value) {
        this.FBottomLeftNavigationButtonSize = Value;
        this.Changed(this);
      };
    };
    this.SetBottomRightNavigationButtonSize = function (Value) {
      if (this.FBottomRightNavigationButtonSize !== Value) {
        this.FBottomRightNavigationButtonSize = Value;
        this.Changed(this);
      };
    };
    this.SetTopLeftNavigationButtonSize = function (Value) {
      if (this.FTopLeftNavigationButtonSize !== Value) {
        this.FTopLeftNavigationButtonSize = Value;
        this.Changed(this);
      };
    };
    this.SetTopRightNavigationButtonSize = function (Value) {
      if (this.FTopRightNavigationButtonSize !== Value) {
        this.FTopRightNavigationButtonSize = Value;
        this.Changed(this);
      };
    };
    this.Changed = function (Sender) {
      this.FPlanner.UpdatePlannerCache(true);
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FLayouts = rtl.createSet($mod.TTMSFNCPlannerPositionsLayout.pplTop);
      this.FFillEmptySpaces = true;
      this.FStretch = true;
      this.FBottomSize = 50;
      this.FTopVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto;
      this.FBottomVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto;
      this.FTopSize = 50;
      this.FSize = 100;
      this.FTopHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FTopVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FBottomHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FBottomVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FBottomFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone,16777215]);
      this.FBottomStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FTopFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone,16777215]);
      this.FTopStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FBottomNavigationButtonFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FBottomNavigationButtonStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FTopNavigationButtonFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FTopNavigationButtonStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FBottomNavigationButtonHoverFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,245,255)]);
      this.FBottomNavigationButtonHoverStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FTopNavigationButtonHoverFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,245,255)]);
      this.FTopNavigationButtonHoverStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FBottomNavigationButtonDownFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(149,213,246)]);
      this.FBottomNavigationButtonDownStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FTopNavigationButtonDownFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(149,213,246)]);
      this.FTopNavigationButtonDownStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FTopFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FTopFont.SetColor(8421504);
      this.FBottomFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FBottomFont.SetColor(8421504);
      this.FTopLeftNavigationButtonSize = 18;
      this.FTopRightNavigationButtonSize = 18;
      this.FBottomLeftNavigationButtonSize = 18;
      this.FBottomRightNavigationButtonSize = 18;
      this.FBottomFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomNavigationButtonFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopNavigationButtonFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomNavigationButtonStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopNavigationButtonStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomNavigationButtonHoverFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopNavigationButtonHoverFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomNavigationButtonHoverStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopNavigationButtonHoverStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomNavigationButtonDownFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopNavigationButtonDownFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomNavigationButtonDownStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopNavigationButtonDownStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomFont.FOnChanged = rtl.createCallback(this,"Changed");
    };
    this.Destroy = function () {
      rtl.free(this,"FTopNavigationButtonStroke");
      rtl.free(this,"FTopNavigationButtonFill");
      rtl.free(this,"FBottomNavigationButtonStroke");
      rtl.free(this,"FBottomNavigationButtonFill");
      rtl.free(this,"FBottomNavigationButtonHoverFill");
      rtl.free(this,"FTopNavigationButtonHoverFill");
      rtl.free(this,"FBottomNavigationButtonHoverStroke");
      rtl.free(this,"FTopNavigationButtonHoverStroke");
      rtl.free(this,"FBottomNavigationButtonDownFill");
      rtl.free(this,"FTopNavigationButtonDownFill");
      rtl.free(this,"FBottomNavigationButtonDownStroke");
      rtl.free(this,"FTopNavigationButtonDownStroke");
      rtl.free(this,"FTopFont");
      rtl.free(this,"FBottomFont");
      rtl.free(this,"FBottomFill");
      rtl.free(this,"FTopFill");
      rtl.free(this,"FBottomStroke");
      rtl.free(this,"FTopStroke");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerPositionsAppearance.isPrototypeOf(Source)) {
        this.FLayouts = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FLayouts);
        this.FTopSize = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopSize;
        this.FSize = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FSize;
        this.FBottomSize = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomSize;
        this.FBottomFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomFill);
        this.FBottomFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomFont);
        this.FBottomStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomStroke);
        this.FTopFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopFill);
        this.FTopStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopStroke);
        this.FTopNavigationButtonFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopNavigationButtonFill);
        this.FTopNavigationButtonStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopNavigationButtonStroke);
        this.FBottomNavigationButtonFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomNavigationButtonFill);
        this.FBottomNavigationButtonStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomNavigationButtonStroke);
        this.FTopNavigationButtonHoverFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopNavigationButtonHoverFill);
        this.FTopNavigationButtonHoverStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopNavigationButtonHoverStroke);
        this.FBottomNavigationButtonHoverFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomNavigationButtonHoverFill);
        this.FBottomNavigationButtonHoverStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomNavigationButtonHoverStroke);
        this.FTopNavigationButtonDownFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopNavigationButtonDownFill);
        this.FTopNavigationButtonDownStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopNavigationButtonDownStroke);
        this.FBottomNavigationButtonDownFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomNavigationButtonDownFill);
        this.FBottomNavigationButtonDownStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomNavigationButtonDownStroke);
        this.FTopFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopFont);
        this.FStretch = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FStretch;
        this.FTopHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopHorizontalTextAlign;
        this.FTopVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopVerticalTextAlign;
        this.FBottomHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomHorizontalTextAlign;
        this.FBottomVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomVerticalTextAlign;
        this.FTopVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FTopVerticalTextMode;
        this.FBottomVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FBottomVerticalTextMode;
        this.FFillEmptySpaces = rtl.as(Source,$mod.TTMSFNCPlannerPositionsAppearance).FFillEmptySpaces;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Size",2,rtl.double,"FSize","SetSize");
    $r.addProperty("Layouts",2,$mod.$rtti["TTMSFNCPlannerPositionsLayouts"],"FLayouts","SetLayouts",{Default: rtl.createSet($mod.TTMSFNCPlannerPositionsLayout.pplTop)});
    $r.addProperty("Stretch",2,rtl.boolean,"FStretch","SetStretch",{Default: true});
    $r.addProperty("TopSize",2,rtl.double,"FTopSize","SetTopSize");
    $r.addProperty("BottomSize",2,rtl.double,"FBottomSize","SetBottomSize");
    $r.addProperty("TopFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FTopFont","SetTopFont");
    $r.addProperty("BottomFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FBottomFont","SetBottomFont");
    $r.addProperty("TopFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FTopFill","SetTopFill");
    $r.addProperty("BottomFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FBottomFill","SetBottomFill");
    $r.addProperty("TopStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FTopStroke","SetTopStroke");
    $r.addProperty("BottomStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FBottomStroke","SetBottomStroke");
    $r.addProperty("TopHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTopHorizontalTextAlign","SetTopHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("TopVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTopVerticalTextAlign","SetTopVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("BottomHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FBottomHorizontalTextAlign","SetBottomHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("BottomVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FBottomVerticalTextAlign","SetBottomVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("TopVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FTopVerticalTextMode","SetTopVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto});
    $r.addProperty("BottomVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FBottomVerticalTextMode","SetBottomVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto});
    $r.addProperty("TopNavigationButtonFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FTopNavigationButtonFill","SetTopNavigationButtonFill");
    $r.addProperty("BottomNavigationButtonFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FBottomNavigationButtonFill","SetBottomNavigationButtonFill");
    $r.addProperty("TopNavigationButtonStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FTopNavigationButtonStroke","SetTopNavigationButtonStroke");
    $r.addProperty("BottomNavigationButtonStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FBottomNavigationButtonStroke","SetBottomNavigationButtonStroke");
    $r.addProperty("TopNavigationButtonHoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FTopNavigationButtonHoverFill","SetTopNavigationButtonHoverFill");
    $r.addProperty("BottomNavigationButtonHoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FBottomNavigationButtonHoverFill","SetBottomNavigationButtonHoverFill");
    $r.addProperty("TopNavigationButtonHoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FTopNavigationButtonHoverStroke","SetTopNavigationButtonHoverStroke");
    $r.addProperty("BottomNavigationButtonHoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FBottomNavigationButtonHoverStroke","SetBottomNavigationButtonHoverStroke");
    $r.addProperty("TopNavigationButtonDownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FTopNavigationButtonDownFill","SetTopNavigationButtonDownFill");
    $r.addProperty("BottomNavigationButtonDownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FBottomNavigationButtonDownFill","SetBottomNavigationButtonDownFill");
    $r.addProperty("TopNavigationButtonDownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FTopNavigationButtonDownStroke","SetTopNavigationButtonDownStroke");
    $r.addProperty("BottomNavigationButtonDownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FBottomNavigationButtonDownStroke","SetBottomNavigationButtonDownStroke");
    $r.addProperty("TopLeftNavigationButtonSize",2,rtl.double,"FTopLeftNavigationButtonSize","SetTopLeftNavigationButtonSize");
    $r.addProperty("TopRightNavigationButtonSize",2,rtl.double,"FTopRightNavigationButtonSize","SetTopRightNavigationButtonSize");
    $r.addProperty("BottomLeftNavigationButtonSize",2,rtl.double,"FBottomLeftNavigationButtonSize","SetBottomLeftNavigationButtonSize");
    $r.addProperty("BottomRightNavigationButtonSize",2,rtl.double,"FBottomRightNavigationButtonSize","SetBottomRightNavigationButtonSize");
    $r.addProperty("FillEmptySpaces",2,rtl.boolean,"FFillEmptySpaces","SetFillEmptySpaces",{Default: true});
  });
  this.TTMSFNCPlannerPositionEmptySpace = {"0": "ppesTopLeft", ppesTopLeft: 0, "1": "ppesTopRight", ppesTopRight: 1, "2": "ppesBottomLeft", ppesBottomLeft: 2, "3": "ppesBottomRight", ppesBottomRight: 3};
  $mod.$rtti.$Enum("TTMSFNCPlannerPositionEmptySpace",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCPlannerPositionEmptySpace});
  this.TTMSFNCPlannerGroupEmptySpace = {"0": "pgesTopLeft", pgesTopLeft: 0, "1": "pgesTopRight", pgesTopRight: 1, "2": "pgesBottomLeft", pgesBottomLeft: 2, "3": "pgesBottomRight", pgesBottomRight: 3};
  $mod.$rtti.$Enum("TTMSFNCPlannerGroupEmptySpace",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCPlannerGroupEmptySpace});
  rtl.createClass($mod,"TTMSFNCPlannerPositions",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FCount = 0;
      this.FFormat = "";
      this.FViewStart = 0;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetCount = function (Value) {
      if (this.FCount !== Value) {
        this.FCount = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetFormat = function (Value) {
      if (this.FFormat !== Value) {
        this.FFormat = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.GetViewStart = function () {
      var Result = 0;
      Result = this.FViewStart;
      return Result;
    };
    this.SetViewStart = function (Value) {
      if (this.FViewStart !== Value) {
        this.FViewStart = Value;
        this.FPlanner.UpdateScrollPosition(true);
        this.FPlanner.UpdateDisplay();
      };
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FCount = 3;
      this.FViewStart = 0;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerPositions.isPrototypeOf(Source)) {
        this.FCount = rtl.as(Source,$mod.TTMSFNCPlannerPositions).FCount;
        this.FFormat = rtl.as(Source,$mod.TTMSFNCPlannerPositions).FFormat;
        this.FViewStart = rtl.as(Source,$mod.TTMSFNCPlannerPositions).GetViewStart();
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Count",2,rtl.longint,"FCount","SetCount",{Default: 3});
    $r.addProperty("Format",2,rtl.string,"FFormat","SetFormat");
    $r.addProperty("ViewStart",3,rtl.longint,"GetViewStart","SetViewStart",{Default: 0});
  });
  rtl.createClass($mod,"TTMSFNCPlannerGroupsAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FLayouts = {};
      this.FBottomSize = 0.0;
      this.FTopSize = 0.0;
      this.FBottomFill = null;
      this.FBottomStroke = null;
      this.FTopFill = null;
      this.FTopStroke = null;
      this.FTopFont = null;
      this.FBottomFont = null;
      this.FBottomHorizontalTextAlign = 0;
      this.FTopVerticalTextAlign = 0;
      this.FTopHorizontalTextAlign = 0;
      this.FBottomVerticalTextAlign = 0;
      this.FTopVerticalTextMode = 0;
      this.FBottomVerticalTextMode = 0;
      this.FFillEmptySpaces = false;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FLayouts = undefined;
      this.FBottomFill = undefined;
      this.FBottomStroke = undefined;
      this.FTopFill = undefined;
      this.FTopStroke = undefined;
      this.FTopFont = undefined;
      this.FBottomFont = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetLayouts = function (Value) {
      if (rtl.neSet(this.FLayouts,Value)) {
        this.FLayouts = rtl.refSet(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetBottomSize = function (Value) {
      if (this.FBottomSize !== Value) {
        this.FBottomSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetTopSize = function (Value) {
      if (this.FTopSize !== Value) {
        this.FTopSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetBottomFill = function (Value) {
      if (this.FBottomFill !== Value) this.FBottomFill.Assign(Value);
    };
    this.SetBottomStroke = function (Value) {
      if (this.FBottomStroke !== Value) this.FBottomStroke.Assign(Value);
    };
    this.SetTopFill = function (Value) {
      if (this.FTopFill !== Value) this.FTopFill.Assign(Value);
    };
    this.SetTopStroke = function (Value) {
      if (this.FTopStroke !== Value) this.FTopStroke.Assign(Value);
    };
    this.SetBottomFont = function (Value) {
      if (this.FBottomFont !== Value) this.FBottomFont.Assign(Value);
    };
    this.SetTopFont = function (Value) {
      if (this.FTopFont !== Value) this.FTopFont.Assign(Value);
    };
    this.SetBottomHorizontalTextAlign = function (Value) {
      if (this.FBottomHorizontalTextAlign !== Value) {
        this.FBottomHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetBottomVerticalTextAlign = function (Value) {
      if (this.FBottomVerticalTextAlign !== Value) {
        this.FBottomVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetTopHorizontalTextAlign = function (Value) {
      if (this.FTopHorizontalTextAlign !== Value) {
        this.FTopHorizontalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetTopVerticalTextAlign = function (Value) {
      if (this.FTopVerticalTextAlign !== Value) {
        this.FTopVerticalTextAlign = Value;
        this.Changed(this);
      };
    };
    this.SetTopVerticalTextMode = function (Value) {
      if (this.FTopVerticalTextMode !== Value) {
        this.FTopVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.SetBottomVerticalTextMode = function (Value) {
      if (this.FBottomVerticalTextMode !== Value) {
        this.FBottomVerticalTextMode = Value;
        this.Changed(this);
      };
    };
    this.SetFillEmptySpaces = function (Value) {
      if (this.FFillEmptySpaces !== Value) {
        this.FFillEmptySpaces = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.Changed = function (Sender) {
      this.FPlanner.UpdatePlannerCache(true);
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FLayouts = rtl.createSet($mod.TTMSFNCPlannerGroupLayout.pglTop);
      this.FFillEmptySpaces = true;
      this.FTopSize = 50;
      this.FBottomSize = 50;
      this.FTopVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto;
      this.FBottomVerticalTextMode = $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto;
      this.FTopHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FTopVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FBottomHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FBottomVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FBottomFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone,16777215]);
      this.FBottomStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FTopFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone,16777215]);
      this.FTopStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,11119017]);
      this.FTopFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FTopFont.SetColor(8421504);
      this.FBottomFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FBottomFont.SetColor(8421504);
      this.FTopFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomFont.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopFill.FOnChanged = rtl.createCallback(this,"Changed");
      this.FBottomStroke.FOnChanged = rtl.createCallback(this,"Changed");
      this.FTopStroke.FOnChanged = rtl.createCallback(this,"Changed");
    };
    this.Destroy = function () {
      rtl.free(this,"FBottomFont");
      rtl.free(this,"FTopFont");
      rtl.free(this,"FBottomFill");
      rtl.free(this,"FBottomStroke");
      rtl.free(this,"FTopFill");
      rtl.free(this,"FTopStroke");
      pas.System.TObject.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerGroupsAppearance.isPrototypeOf(Source)) {
        this.FLayouts = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FLayouts);
        this.FTopSize = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FTopSize;
        this.FBottomSize = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FBottomSize;
        this.FBottomFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FBottomFill);
        this.FBottomFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FBottomFont);
        this.FBottomStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FBottomStroke);
        this.FTopFill.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FTopFill);
        this.FTopStroke.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FTopStroke);
        this.FTopFont.Assign(rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FTopFont);
        this.FTopHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FTopHorizontalTextAlign;
        this.FTopVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FTopVerticalTextAlign;
        this.FBottomHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FBottomHorizontalTextAlign;
        this.FBottomVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FBottomVerticalTextAlign;
        this.FTopVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FTopVerticalTextMode;
        this.FBottomVerticalTextMode = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FBottomVerticalTextMode;
        this.FFillEmptySpaces = rtl.as(Source,$mod.TTMSFNCPlannerGroupsAppearance).FFillEmptySpaces;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Layouts",2,$mod.$rtti["TTMSFNCPlannerGroupsLayouts"],"FLayouts","SetLayouts",{Default: rtl.createSet($mod.TTMSFNCPlannerGroupLayout.pglTop)});
    $r.addProperty("TopSize",2,rtl.double,"FTopSize","SetTopSize");
    $r.addProperty("BottomSize",2,rtl.double,"FBottomSize","SetBottomSize");
    $r.addProperty("TopFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FTopFill","SetTopFill");
    $r.addProperty("BottomFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FBottomFill","SetBottomFill");
    $r.addProperty("TopFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FTopFont","SetTopFont");
    $r.addProperty("BottomFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FBottomFont","SetBottomFont");
    $r.addProperty("TopStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FTopStroke","SetTopStroke");
    $r.addProperty("BottomStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FBottomStroke","SetBottomStroke");
    $r.addProperty("TopHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTopHorizontalTextAlign","SetTopHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("TopVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FTopVerticalTextAlign","SetTopVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("BottomHorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FBottomHorizontalTextAlign","SetBottomHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("BottomVerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FBottomVerticalTextAlign","SetBottomVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("TopVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FTopVerticalTextMode","SetTopVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto});
    $r.addProperty("BottomVerticalTextMode",2,$mod.$rtti["TTMSFNCPlannerVerticalTextMode"],"FBottomVerticalTextMode","SetBottomVerticalTextMode",{Default: $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto});
    $r.addProperty("FillEmptySpaces",2,rtl.boolean,"FFillEmptySpaces","SetFillEmptySpaces",{Default: true});
  });
  this.TTMSFNCPlannerMode = {"0": "pmDay", pmDay: 0, "1": "pmDayPeriod", pmDayPeriod: 1, "2": "pmHalfDayPeriod", pmHalfDayPeriod: 2, "3": "pmMultiDay", pmMultiDay: 3, "4": "pmMultiResDay", pmMultiResDay: 4, "5": "pmMultiDayRes", pmMultiDayRes: 5, "6": "pmMonth", pmMonth: 6, "7": "pmMultiMonth", pmMultiMonth: 7, "8": "pmCustom", pmCustom: 8};
  $mod.$rtti.$Enum("TTMSFNCPlannerMode",{minvalue: 0, maxvalue: 8, ordtype: 1, enumtype: this.TTMSFNCPlannerMode});
  this.TTMSFNCPlannerDisplayUnitType = {"0": "pduMilliSecond", pduMilliSecond: 0, "1": "pduSecond", pduSecond: 1, "2": "pduMinute", pduMinute: 2, "3": "pduHour", pduHour: 3, "4": "pduDay", pduDay: 4};
  $mod.$rtti.$Enum("TTMSFNCPlannerDisplayUnitType",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TTMSFNCPlannerDisplayUnitType});
  this.TTMSFNCPlannerCurrentTimeMode = {"0": "pctmNone", pctmNone: 0, "1": "pctmLine", pctmLine: 1, "2": "pctmText", pctmText: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerCurrentTimeMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerCurrentTimeMode});
  this.TTMSFNCPlannerCurrentTimePosition = {"0": "pctpUnderItems", pctpUnderItems: 0, "1": "pctpOverItems", pctpOverItems: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerCurrentTimePosition",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerCurrentTimePosition});
  rtl.createClass($mod,"TTMSFNCPlannerTimeLine",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FDisplayUnit = 0;
      this.FDisplayUnitSize = 0.0;
      this.FDisplayStart = 0;
      this.FDisplayEnd = 0;
      this.FDisplaySubUnitFormat = "";
      this.FDisplayUnitType = 0;
      this.FDisplayOffsetType = 0;
      this.FDisplayOffset = 0;
      this.FDisplayUnitFormat = "";
      this.FViewStart = 0.0;
      this.FCurrentTimeMode = 0;
      this.FActiveStart = 0;
      this.FActiveEnd = 0;
      this.FCurrentTimePosition = 0;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetDisplayUnit = function (Value) {
      if (this.FDisplayUnit !== Value) {
        this.FDisplayUnit = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDisplayUnitSize = function (Value) {
      if (this.FDisplayUnitSize !== Value) {
        this.FDisplayUnitSize = Value;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDisplayEnd = function (Value) {
      if (this.FDisplayEnd !== Value) {
        this.FDisplayEnd = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDisplayStart = function (Value) {
      if (this.FDisplayStart !== Value) {
        this.FDisplayStart = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDisplaySubUnitFormat = function (Value) {
      if (this.FDisplaySubUnitFormat !== Value) {
        this.FDisplaySubUnitFormat = Value;
        this.FPlanner.UpdatePlannerCache(false);
      };
    };
    this.SetDisplayUnitType = function (Value) {
      if (this.FDisplayUnitType !== Value) {
        this.FDisplayUnitType = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDisplayOffset = function (Value) {
      if (this.FDisplayOffset !== Value) {
        this.FDisplayOffset = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDisplayOffsetType = function (Value) {
      if (this.FDisplayOffsetType !== Value) {
        this.FDisplayOffsetType = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetDisplayUnitFormat = function (Value) {
      if (this.FDisplayUnitFormat !== Value) {
        this.FDisplayUnitFormat = Value;
        this.FPlanner.UpdatePlannerCache(false);
      };
    };
    this.SetCurrentTimeMode = function (Value) {
      if (this.FCurrentTimeMode !== Value) {
        this.FCurrentTimeMode = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.GetViewStart = function () {
      var Result = 0.0;
      Result = this.FViewStart;
      return Result;
    };
    this.SetViewStart = function (Value) {
      if (this.FViewStart !== Value) {
        this.FViewStart = Value;
        this.FPlanner.UpdateScrollPosition(true);
        this.FPlanner.UpdateDisplay();
      };
    };
    this.SetActiveEnd = function (Value) {
      if (this.FActiveEnd !== Value) {
        this.FActiveEnd = Value;
        this.FPlanner.UpdatePlannerCache(false);
      };
    };
    this.SetActiveStart = function (Value) {
      if (this.FActiveStart !== Value) {
        this.FActiveStart = Value;
        this.FPlanner.UpdatePlannerCache(false);
      };
    };
    this.SetCurrentTimePosition = function (Value) {
      if (this.FCurrentTimePosition !== Value) {
        this.FCurrentTimePosition = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FCurrentTimeMode = $mod.TTMSFNCPlannerCurrentTimeMode.pctmLine;
      this.FCurrentTimePosition = $mod.TTMSFNCPlannerCurrentTimePosition.pctpUnderItems;
      this.FDisplayUnit = 30;
      this.FDisplayUnitSize = 25;
      this.FDisplayStart = 0;
      this.FDisplayEnd = 47;
      this.FActiveStart = 16;
      this.FActiveEnd = 40;
      this.FDisplaySubUnitFormat = "";
      this.FDisplayUnitType = $mod.TTMSFNCPlannerDisplayUnitType.pduMinute;
      this.FDisplayOffsetType = $mod.TTMSFNCPlannerDisplayUnitType.pduMinute;
      this.FDisplayOffset = 0;
      this.FViewStart = pas.System.Int(pas.SysUtils.Now());
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerTimeLine.isPrototypeOf(Source)) {
        this.FCurrentTimeMode = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FCurrentTimeMode;
        this.FCurrentTimePosition = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FCurrentTimePosition;
        this.FDisplayUnit = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayUnit;
        this.FDisplayUnitSize = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayUnitSize;
        this.FDisplaySubUnitFormat = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplaySubUnitFormat;
        this.FDisplayUnitFormat = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayUnitFormat;
        this.FDisplayUnitType = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayUnitType;
        this.FDisplayOffsetType = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayOffsetType;
        this.FDisplayOffset = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayOffset;
        this.FDisplayStart = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayStart;
        this.FDisplayEnd = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FDisplayEnd;
        this.FActiveStart = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FActiveStart;
        this.FActiveEnd = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).FActiveEnd;
        this.FViewStart = rtl.as(Source,$mod.TTMSFNCPlannerTimeLine).GetViewStart();
      };
    };
    var $r = this.$rtti;
    $r.addProperty("DisplayUnitFormat",2,rtl.string,"FDisplayUnitFormat","SetDisplayUnitFormat");
    $r.addProperty("DisplaySubUnitFormat",2,rtl.string,"FDisplaySubUnitFormat","SetDisplaySubUnitFormat");
    $r.addProperty("DisplayUnit",2,rtl.longint,"FDisplayUnit","SetDisplayUnit",{Default: 30});
    $r.addProperty("DisplayUnitType",2,$mod.$rtti["TTMSFNCPlannerDisplayUnitType"],"FDisplayUnitType","SetDisplayUnitType",{Default: $mod.TTMSFNCPlannerDisplayUnitType.pduMinute});
    $r.addProperty("DisplayStart",2,rtl.longint,"FDisplayStart","SetDisplayStart",{Default: 0});
    $r.addProperty("DisplayEnd",2,rtl.longint,"FDisplayEnd","SetDisplayEnd",{Default: 47});
    $r.addProperty("ActiveStart",2,rtl.longint,"FActiveStart","SetActiveStart",{Default: 16});
    $r.addProperty("ActiveEnd",2,rtl.longint,"FActiveEnd","SetActiveEnd",{Default: 40});
    $r.addProperty("DisplayOffset",2,rtl.longint,"FDisplayOffset","SetDisplayOffset",{Default: 0});
    $r.addProperty("DisplayOffsetType",2,$mod.$rtti["TTMSFNCPlannerDisplayUnitType"],"FDisplayOffsetType","SetDisplayOffsetType",{Default: $mod.TTMSFNCPlannerDisplayUnitType.pduMinute});
    $r.addProperty("DisplayUnitSize",2,rtl.double,"FDisplayUnitSize","SetDisplayUnitSize");
    $r.addProperty("ViewStart",3,pas.System.$rtti["TDateTime"],"GetViewStart","SetViewStart");
    $r.addProperty("CurrentTimeMode",2,$mod.$rtti["TTMSFNCPlannerCurrentTimeMode"],"FCurrentTimeMode","SetCurrentTimeMode",{Default: $mod.TTMSFNCPlannerCurrentTimeMode.pctmLine});
    $r.addProperty("CurrentTimePosition",2,$mod.$rtti["TTMSFNCPlannerCurrentTimePosition"],"FCurrentTimePosition","SetCurrentTimePosition",{Default: $mod.TTMSFNCPlannerCurrentTimePosition.pctpUnderItems});
  });
  this.TTMSFNCPlannerGetTextMode = {"0": "pgtmDrawing", pgtmDrawing: 0, "1": "pgtmEditing", pgtmEditing: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerGetTextMode",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerGetTextMode});
  this.TTMSFNCPlannerNavigationDirection = {"0": "pndPrevious", pndPrevious: 0, "1": "pndNext", pndNext: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerNavigationDirection",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerNavigationDirection});
  this.TTMSFNCPlannerNavigationButton = {"0": "pnbPrevious", pnbPrevious: 0, "1": "pnbNext", pnbNext: 1};
  $mod.$rtti.$Enum("TTMSFNCPlannerNavigationButton",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCPlannerNavigationButton});
  $mod.$rtti.$Set("TTMSFNCPlannerNavigationButtons",{comptype: $mod.$rtti["TTMSFNCPlannerNavigationButton"]});
  this.TTMSFNCPlannerNavigationButtonState = {"0": "pnbsNormal", pnbsNormal: 0, "1": "pnbsDown", pnbsDown: 1, "2": "pnbsHover", pnbsHover: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerNavigationButtonState",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerNavigationButtonState});
  this.TTMSFNCPlannerItemDeleteMode = {"0": "pidmKeyboard", pidmKeyboard: 0, "1": "pidmDialog", pidmDialog: 1, "2": "pidmTouch", pidmTouch: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerItemDeleteMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerItemDeleteMode});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerItemChangedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawPositionEmptySpaceEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASpace",$mod.$rtti["TTMSFNCPlannerPositionEmptySpace"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawPositionEmptySpaceEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASpace",$mod.$rtti["TTMSFNCPlannerPositionEmptySpace"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawGroupEmptySpaceEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASpace",$mod.$rtti["TTMSFNCPlannerGroupEmptySpace"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawGroupEmptySpaceEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASpace",$mod.$rtti["TTMSFNCPlannerGroupEmptySpace"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawItemLink",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ALinkedItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ACanDrawLink",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawItemLink",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ALinkedItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawTopNavigationButtonEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AButton",$mod.$rtti["TTMSFNCPlannerNavigationButton"]],["AButtonState",$mod.$rtti["TTMSFNCPlannerNavigationButtonState"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawBottomNavigationButtonEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AButton",$mod.$rtti["TTMSFNCPlannerNavigationButton"]],["AButtonState",$mod.$rtti["TTMSFNCPlannerNavigationButtonState"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawTopNavigationButtonEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AButton",$mod.$rtti["TTMSFNCPlannerNavigationButton"]],["AButtonState",$mod.$rtti["TTMSFNCPlannerNavigationButtonState"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawBottomNavigationButtonEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AButton",$mod.$rtti["TTMSFNCPlannerNavigationButton"]],["AButtonState",$mod.$rtti["TTMSFNCPlannerNavigationButtonState"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawCurrentTimeInTimeLineEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AValue",rtl.double],["ACurrentTime",pas.System.$rtti["TDateTime"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawCurrentTimeInTimeLineEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AValue",rtl.double],["ACurrentTime",pas.System.$rtti["TDateTime"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawCurrentTimeInGridEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ACurrentTime",pas.System.$rtti["TDateTime"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawCurrentTimeInGridEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ACurrentTime",pas.System.$rtti["TDateTime"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawCellEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ACol",rtl.longint],["ARow",rtl.longint],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawCellEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ACol",rtl.longint],["ARow",rtl.longint],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawCellVerticalLineEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ACol",rtl.longint],["ARow",rtl.longint],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawCellVerticalLineEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ACol",rtl.longint],["ARow",rtl.longint],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawCellHorizontalLineEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASubUnit",rtl.boolean],["ACol",rtl.longint],["ARow",rtl.longint],["ADateTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawCellHorizontalLineEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASubUnit",rtl.boolean],["ACol",rtl.longint],["ARow",rtl.longint],["ADateTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawPositionEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawPositionEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawGroupEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AGroup",rtl.longint],["AStartPosition",rtl.longint],["AEndPosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawGroupEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AGroup",rtl.longint],["AStartPosition",rtl.longint],["AEndPosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawTimeStrokeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ASubUnit",rtl.boolean],["ARow",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawTimeStrokeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ASubUnit",rtl.boolean],["ARow",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawTimeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ARow",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawTimeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ARow",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawMoveAreaEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawMoveAreaEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawSizeAreaEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawSizeAreaEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawDeleteAreaEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawDeleteAreaEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawItemTitleEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ATitle",rtl.string],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawItemTitleEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ATitle",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetCustomContentPanelEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AContentPanel",$mod.$rtti["TWinControl"],1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerInitializeCustomContentPanelEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AContentPanel",$mod.$rtti["TWinControl"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerItemToCustomContentPanelEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AContentPanel",$mod.$rtti["TWinControl"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerCustomContentPanelToItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AContentPanel",$mod.$rtti["TWinControl"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetPositionTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawPositionTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string],["AAllow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawPositionTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["APosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetGroupTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGroup",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawGroupTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AGroup",rtl.longint],["AStartPosition",rtl.longint],["AEndPosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string],["AAllow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawGroupTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AGroup",rtl.longint],["AStartPosition",rtl.longint],["AEndPosition",rtl.longint],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetTimeTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AValue",rtl.double],["ARow",rtl.longint],["ASubUnit",rtl.boolean],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawTimeTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ARow",rtl.longint],["ASubUnit",rtl.boolean],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string],["AAllow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawTimeTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["ARow",rtl.longint],["ASubUnit",rtl.boolean],["AKind",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerCacheItemKind"]],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerItemAnchorClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AAnchor",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetItemTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AMode",$mod.$rtti["TTMSFNCPlannerGetTextMode"]],["AText",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawItemTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AText",rtl.string],["AAllow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawItemTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetItemTitleTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AMode",$mod.$rtti["TTMSFNCPlannerGetTextMode"]],["ATitle",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawItemTitleTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ATitle",rtl.string],["AAllow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawItemTitleTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ATitle",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerIsItemDeletableEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ADeletable",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetInplaceEditorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AInplaceEditorClass",$mod.$rtti["TTMSFNCPlannerInplaceEditorClass"],1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerIsDateTimeDisabledEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ADateTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["ADisabled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerIsDateTimeInActiveEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ADateTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AInActive",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerIsDateTimeSubEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ADateTime",pas.System.$rtti["TDateTime"]],["AIsSub",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerHasDateTimeSubEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AHasSub",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerSelectTimeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerSelectCellEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartCell",pas["WEBLib.TMSFNCPlannerBase"].$rtti["TTMSFNCPlannerCell"]],["AEndCell",pas["WEBLib.TMSFNCPlannerBase"].$rtti["TTMSFNCPlannerCell"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeInsertItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["ATitle",rtl.string,1],["AText",rtl.string,1],["ACanInsert",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterInsertItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeUpdateItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ATitle",rtl.string,1],["AText",rtl.string,1],["ACanUpdate",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterUpdateItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeOpenInsertDialogEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["ACanOpen",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterOpenInsertDialogEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeOpenUpdateDialogEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ACanOpen",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterOpenUpdateDialogEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeOpenInplaceEditorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ACanOpen",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterOpenInplaceEditorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AInplaceEditor",$mod.$rtti["TWinControl"]],["AInplaceEditorRect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerCloseInplaceEditorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ACancelled",rtl.boolean],["ACanClose",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerCloseInsertDialogEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ACancelled",rtl.boolean],["ACanClose",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerCloseUpdateDialogEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStartTime",pas.System.$rtti["TDateTime"]],["AEndTime",pas.System.$rtti["TDateTime"]],["APosition",rtl.longint],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ACancelled",rtl.boolean],["ACanClose",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDeleteItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AMode",$mod.$rtti["TTMSFNCPlannerItemDeleteMode"]],["ACanDelete",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeSelectItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ACanSelect",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterSelectItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDeleteItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItemIndex",rtl.longint],["ADBKey",rtl.string],["AMode",$mod.$rtti["TTMSFNCPlannerItemDeleteMode"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeMoveItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ANewStartTime",pas.System.$rtti["TDateTime"],1],["ANewEndTime",pas.System.$rtti["TDateTime"],1],["ANewPosition",rtl.longint,1],["ACanMove",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeSizeItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ANewStartTime",pas.System.$rtti["TDateTime"],1],["ANewEndTime",pas.System.$rtti["TDateTime"],1],["ANewPosition",rtl.longint,1],["ACanSize",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterMoveItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ANewStartTime",pas.System.$rtti["TDateTime"]],["ANewEndTime",pas.System.$rtti["TDateTime"]],["ANewPosition",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterSizeItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ANewStartTime",pas.System.$rtti["TDateTime"]],["ANewEndTime",pas.System.$rtti["TDateTime"]],["ANewPosition",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerMoveItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ANewStartTime",pas.System.$rtti["TDateTime"]],["ANewEndTime",pas.System.$rtti["TDateTime"]],["ANewPosition",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerSizeItemEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["ANewStartTime",pas.System.$rtti["TDateTime"]],["ANewEndTime",pas.System.$rtti["TDateTime"]],["ANewPosition",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerScrollEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["APosition",rtl.double]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawItemHelperEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AIsStartTime",rtl.boolean],["AValue",pas.System.$rtti["TDateTime"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeDrawItemHelperTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AIsStartTime",rtl.boolean],["AValue",pas.System.$rtti["TDateTime"]],["AText",rtl.string],["AAllow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawItemHelperEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AIsStartTime",rtl.boolean],["AValue",pas.System.$rtti["TDateTime"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterDrawItemHelperTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AIsStartTime",rtl.boolean],["AValue",pas.System.$rtti["TDateTime"]],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerGetItemHelperTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItem",pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"]],["AIsStartTime",rtl.boolean],["AValue",pas.System.$rtti["TDateTime"]],["AText",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerBeforeNavigateToDateTimeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ADirection",$mod.$rtti["TTMSFNCPlannerNavigationDirection"]],["ACurrentDateTime",pas.System.$rtti["TDateTime"]],["ANewDateTime",pas.System.$rtti["TDateTime"],1],["AAllow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCPlannerAfterNavigateToDateTimeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ADirection",$mod.$rtti["TTMSFNCPlannerNavigationDirection"]],["ACurrentDateTime",pas.System.$rtti["TDateTime"]],["ANewDateTime",pas.System.$rtti["TDateTime"]]]), methodkind: 0});
  this.TTMSFNCPlannerInActiveDay = {"0": "padMonday", padMonday: 0, "1": "padTuesday", padTuesday: 1, "2": "padWednesday", padWednesday: 2, "3": "padThursday", padThursday: 3, "4": "padFriday", padFriday: 4, "5": "padSaturday", padSaturday: 5, "6": "padSunday", padSunday: 6};
  $mod.$rtti.$Enum("TTMSFNCPlannerInActiveDay",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TTMSFNCPlannerInActiveDay});
  $mod.$rtti.$Set("TTMSFNCPlannerInActiveDays",{comptype: $mod.$rtti["TTMSFNCPlannerInActiveDay"]});
  rtl.createClass($mod,"TTMSFNCPlannerModeSettings",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FStartTime = 0.0;
      this.FEndTime = 0.0;
      this.FInActiveDays = {};
      this.FOverlappableItems = false;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FInActiveDays = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetStartTime = function (Value) {
      if (this.FStartTime !== Value) {
        this.FStartTime = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
        this.FPlanner.FTimeLine.SetViewStart(pas.System.Int(this.FStartTime));
      };
    };
    this.SetEndTime = function (Value) {
      if (this.FEndTime !== Value) {
        this.FEndTime = Value;
        this.FPlanner.FNeedsConflictsUpdate = true;
        this.FPlanner.FNeedsInitialization = true;
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetInActiveDays = function (Value) {
      if (rtl.neSet(this.FInActiveDays,Value)) {
        this.FInActiveDays = rtl.refSet(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetOverlappableItems = function (Value) {
      if (this.FOverlappableItems !== Value) this.FOverlappableItems = Value;
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FStartTime = pas.SysUtils.Now();
      this.FEndTime = pas.SysUtils.Now() + 20;
      this.FInActiveDays = rtl.createSet($mod.TTMSFNCPlannerInActiveDay.padSaturday,$mod.TTMSFNCPlannerInActiveDay.padSunday);
      this.FOverlappableItems = true;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerModeSettings.isPrototypeOf(Source)) {
        this.FStartTime = rtl.as(Source,$mod.TTMSFNCPlannerModeSettings).FStartTime;
        this.FEndTime = rtl.as(Source,$mod.TTMSFNCPlannerModeSettings).FEndTime;
        this.FInActiveDays = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerModeSettings).FInActiveDays);
        this.FOverlappableItems = rtl.as(Source,$mod.TTMSFNCPlannerModeSettings).FOverlappableItems;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("StartTime",2,pas.System.$rtti["TDateTime"],"FStartTime","SetStartTime");
    $r.addProperty("EndTime",2,pas.System.$rtti["TDateTime"],"FEndTime","SetEndTime");
    $r.addProperty("InActiveDays",2,$mod.$rtti["TTMSFNCPlannerInActiveDays"],"FInActiveDays","SetInActiveDays",{Default: rtl.createSet($mod.TTMSFNCPlannerInActiveDay.padSaturday,$mod.TTMSFNCPlannerInActiveDay.padSunday)});
    $r.addProperty("OverlappableItems",2,rtl.boolean,"FOverlappableItems","SetOverlappableItems",{Default: true});
  });
  this.TTMSFNCPlannerMouseInsertMode = {"0": "pmimNone", pmimNone: 0, "1": "pmimAfterSelection", pmimAfterSelection: 1, "2": "pmimDialogAfterSelection", pmimDialogAfterSelection: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerMouseInsertMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerMouseInsertMode});
  this.TTMSFNCPlannerKeyboardInsertMode = {"0": "pkimNone", pkimNone: 0, "1": "pkimSelection", pkimSelection: 1, "2": "pkimSelectionDialog", pkimSelectionDialog: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerKeyboardInsertMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerKeyboardInsertMode});
  this.TTMSFNCPlannerMouseEditMode = {"0": "pmemDoubleClick", pmemDoubleClick: 0, "1": "pmemSingleClick", pmemSingleClick: 1, "2": "pmemSingleClickOnSelectedItem", pmemSingleClickOnSelectedItem: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerMouseEditMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerMouseEditMode});
  this.TTMSFNCPlannerUpdateMode = {"0": "pumNone", pumNone: 0, "1": "pumInplace", pumInplace: 1, "2": "pumDialog", pumDialog: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerUpdateMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerUpdateMode});
  this.TTMSFNCPlannerInplaceEditorMode = {"0": "piemText", piemText: 0, "1": "piemTitle", piemTitle: 1, "2": "piemItem", piemItem: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerInplaceEditorMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerInplaceEditorMode});
  this.TTMSFNCPlannerSizeMode = {"0": "psmDesktop", psmDesktop: 0, "1": "psmMobile", psmMobile: 1, "2": "psmAuto", psmAuto: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerSizeMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerSizeMode});
  this.TTMSFNCPlannerMoveMode = {"0": "pmmDesktop", pmmDesktop: 0, "1": "pmmMobile", pmmMobile: 1, "2": "pmmAuto", pmmAuto: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerMoveMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerMoveMode});
  this.TTMSFNCPlannerDeleteMode = {"0": "pdmDesktop", pdmDesktop: 0, "1": "pdmMobile", pdmMobile: 1, "2": "pdmAuto", pdmAuto: 2};
  $mod.$rtti.$Enum("TTMSFNCPlannerDeleteMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCPlannerDeleteMode});
  this.TTMSFNCPlannerMouseInteractionMode = {"0": "pmmMove", pmmMove: 0, "1": "pmmSizeDown", pmmSizeDown: 1, "2": "pmmSizeUp", pmmSizeUp: 2};
  rtl.createClass($mod,"TTMSFNCPlannerInteraction",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FPlanner = null;
      this.FMouseInsertMode = 0;
      this.FUpdateMode = 0;
      this.FMouseEditMode = 0;
      this.FKeyboardDelete = false;
      this.FKeyboardInsertMode = 0;
      this.FMultiSelect = false;
      this.FTouchScrolling = false;
      this.FInplaceEditorMode = 0;
      this.FKeyboardEdit = false;
      this.FSwipeToNextDateTime = false;
      this.FSwipeToPreviousDateTime = false;
      this.FKeepSelection = false;
      this.FTopNavigationButtons = {};
      this.FBottomNavigationButtons = {};
      this.FSizeMode = 0;
      this.FMoveMode = 0;
      this.FShowSelection = false;
      this.FReadOnly = false;
      this.FDeleteMode = 0;
      this.FAutoDeleteLinkedItems = false;
      this.FAutoSelectLinkedItems = false;
      this.FAutoOpenURL = false;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FTopNavigationButtons = undefined;
      this.FBottomNavigationButtons = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetMouseInsertMode = function (Value) {
      if (this.FMouseInsertMode !== Value) this.FMouseInsertMode = Value;
    };
    this.SetUpdateMode = function (Value) {
      if (this.FUpdateMode !== Value) this.FUpdateMode = Value;
    };
    this.SetMouseEditMode = function (Value) {
      if (this.FMouseEditMode !== Value) this.FMouseEditMode = Value;
    };
    this.SetKeyboardDelete = function (Value) {
      if (this.FKeyboardDelete !== Value) this.FKeyboardDelete = Value;
    };
    this.SetKeyboardInsertMode = function (Value) {
      if (this.FKeyboardInsertMode !== Value) this.FKeyboardInsertMode = Value;
    };
    this.SetMultiSelect = function (Value) {
      if (this.FMultiSelect !== Value) this.FMultiSelect = Value;
    };
    this.SetTouchScrolling = function (Value) {
      if (this.FTouchScrolling !== Value) this.FTouchScrolling = Value;
    };
    this.SetInplaceEditorMode = function (Value) {
      if (this.FInplaceEditorMode !== Value) this.FInplaceEditorMode = Value;
    };
    this.SetKeyboardEdit = function (Value) {
      if (this.FKeyboardEdit !== Value) this.FKeyboardEdit = Value;
    };
    this.SetSwipeToNextDateTime = function (Value) {
      if (this.FSwipeToNextDateTime !== Value) {
        this.FSwipeToNextDateTime = Value;
      };
    };
    this.SetSwipeToPreviousDateTime = function (Value) {
      if (this.FSwipeToPreviousDateTime !== Value) {
        this.FSwipeToPreviousDateTime = Value;
      };
    };
    this.SetKeepSelection = function (Value) {
      if (this.FKeepSelection !== Value) this.FKeepSelection = Value;
    };
    this.SetSizeMode = function (Value) {
      if (this.FSizeMode !== Value) {
        this.FSizeMode = Value;
      };
    };
    this.SetTopNavigationButtons = function (Value) {
      if (rtl.neSet(this.FTopNavigationButtons,Value)) {
        this.FTopNavigationButtons = rtl.refSet(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetBottomNavigationButtons = function (Value) {
      if (rtl.neSet(this.FBottomNavigationButtons,Value)) {
        this.FBottomNavigationButtons = rtl.refSet(Value);
        this.FPlanner.UpdatePlannerCache(true);
      };
    };
    this.SetMoveMode = function (Value) {
      if (this.FMoveMode !== Value) {
        this.FMoveMode = Value;
      };
    };
    this.SetShowSelection = function (Value) {
      if (this.FShowSelection !== Value) {
        this.FShowSelection = Value;
        this.FPlanner.Invalidate();
      };
    };
    this.SetReadOnly = function (Value) {
      if (this.FReadOnly !== Value) {
        this.FReadOnly = Value;
      };
    };
    this.SetDeleteMode = function (Value) {
      if (this.FDeleteMode !== Value) this.FDeleteMode = Value;
    };
    this.Create$1 = function (APlanner) {
      this.FPlanner = APlanner;
      this.FAutoOpenURL = true;
      this.FSizeMode = $mod.TTMSFNCPlannerSizeMode.psmAuto;
      this.FDeleteMode = $mod.TTMSFNCPlannerDeleteMode.pdmAuto;
      this.FReadOnly = false;
      this.FMoveMode = $mod.TTMSFNCPlannerMoveMode.pmmAuto;
      this.FMouseInsertMode = $mod.TTMSFNCPlannerMouseInsertMode.pmimNone;
      this.FUpdateMode = $mod.TTMSFNCPlannerUpdateMode.pumInplace;
      this.FTopNavigationButtons = {};
      this.FBottomNavigationButtons = {};
      this.FMouseEditMode = $mod.TTMSFNCPlannerMouseEditMode.pmemSingleClickOnSelectedItem;
      this.FKeyboardDelete = false;
      this.FKeyboardInsertMode = $mod.TTMSFNCPlannerKeyboardInsertMode.pkimNone;
      this.FSwipeToNextDateTime = true;
      this.FShowSelection = true;
      this.FSwipeToPreviousDateTime = true;
      this.FKeyboardEdit = true;
      this.FKeepSelection = true;
      this.FTouchScrolling = true;
      this.FMultiSelect = false;
      this.FInplaceEditorMode = $mod.TTMSFNCPlannerInplaceEditorMode.piemText;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPlannerInteraction.isPrototypeOf(Source)) {
        this.FTopNavigationButtons = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FTopNavigationButtons);
        this.FBottomNavigationButtons = rtl.refSet(rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FBottomNavigationButtons);
        this.FSizeMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FSizeMode;
        this.FDeleteMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FDeleteMode;
        this.FMoveMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FMoveMode;
        this.FMouseInsertMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FMouseInsertMode;
        this.FMouseEditMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FMouseEditMode;
        this.FUpdateMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FUpdateMode;
        this.FKeyboardInsertMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FKeyboardInsertMode;
        this.FKeyboardDelete = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FKeyboardDelete;
        this.FKeyboardEdit = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FKeyboardEdit;
        this.FMultiSelect = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FMultiSelect;
        this.FTouchScrolling = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FTouchScrolling;
        this.FInplaceEditorMode = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FInplaceEditorMode;
        this.FSwipeToNextDateTime = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FSwipeToNextDateTime;
        this.FSwipeToPreviousDateTime = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FSwipeToPreviousDateTime;
        this.FKeepSelection = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FKeepSelection;
        this.FShowSelection = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FShowSelection;
        this.FReadOnly = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FReadOnly;
        this.FAutoSelectLinkedItems = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FAutoSelectLinkedItems;
        this.FAutoDeleteLinkedItems = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FAutoDeleteLinkedItems;
        this.FAutoOpenURL = rtl.as(Source,$mod.TTMSFNCPlannerInteraction).FAutoOpenURL;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("AutoOpenURL",0,rtl.boolean,"FAutoOpenURL","FAutoOpenURL",{Default: true});
    $r.addProperty("MouseInsertMode",2,$mod.$rtti["TTMSFNCPlannerMouseInsertMode"],"FMouseInsertMode","SetMouseInsertMode",{Default: $mod.TTMSFNCPlannerMouseInsertMode.pmimNone});
    $r.addProperty("MouseEditMode",2,$mod.$rtti["TTMSFNCPlannerMouseEditMode"],"FMouseEditMode","SetMouseEditMode",{Default: $mod.TTMSFNCPlannerMouseEditMode.pmemSingleClickOnSelectedItem});
    $r.addProperty("KeyboardDelete",2,rtl.boolean,"FKeyboardDelete","SetKeyboardDelete",{Default: false});
    $r.addProperty("KeyboardEdit",2,rtl.boolean,"FKeyboardEdit","SetKeyboardEdit",{Default: true});
    $r.addProperty("KeyboardInsertMode",2,$mod.$rtti["TTMSFNCPlannerKeyboardInsertMode"],"FKeyboardInsertMode","SetKeyboardInsertMode",{Default: $mod.TTMSFNCPlannerKeyboardInsertMode.pkimNone});
    $r.addProperty("UpdateMode",2,$mod.$rtti["TTMSFNCPlannerUpdateMode"],"FUpdateMode","SetUpdateMode",{Default: $mod.TTMSFNCPlannerUpdateMode.pumInplace});
    $r.addProperty("MultiSelect",2,rtl.boolean,"FMultiSelect","SetMultiSelect",{Default: false});
    $r.addProperty("TouchScrolling",2,rtl.boolean,"FTouchScrolling","SetTouchScrolling",{Default: true});
    $r.addProperty("InplaceEditorMode",2,$mod.$rtti["TTMSFNCPlannerInplaceEditorMode"],"FInplaceEditorMode","SetInplaceEditorMode",{Default: $mod.TTMSFNCPlannerInplaceEditorMode.piemText});
    $r.addProperty("SwipeToNextDateTime",2,rtl.boolean,"FSwipeToNextDateTime","SetSwipeToNextDateTime",{Default: true});
    $r.addProperty("SwipeToPreviousDateTime",2,rtl.boolean,"FSwipeToPreviousDateTime","SetSwipeToPreviousDateTime",{Default: true});
    $r.addProperty("KeepSelection",2,rtl.boolean,"FKeepSelection","SetKeepSelection",{Default: true});
    $r.addProperty("ShowSelection",2,rtl.boolean,"FShowSelection","SetShowSelection",{Default: true});
    $r.addProperty("SizeMode",2,$mod.$rtti["TTMSFNCPlannerSizeMode"],"FSizeMode","SetSizeMode",{Default: $mod.TTMSFNCPlannerSizeMode.psmAuto});
    $r.addProperty("DeleteMode",2,$mod.$rtti["TTMSFNCPlannerDeleteMode"],"FDeleteMode","SetDeleteMode",{Default: $mod.TTMSFNCPlannerDeleteMode.pdmAuto});
    $r.addProperty("MoveMode",2,$mod.$rtti["TTMSFNCPlannerMoveMode"],"FMoveMode","SetMoveMode",{Default: $mod.TTMSFNCPlannerMoveMode.pmmAuto});
    $r.addProperty("TopNavigationButtons",2,$mod.$rtti["TTMSFNCPlannerNavigationButtons"],"FTopNavigationButtons","SetTopNavigationButtons",{Default: {}});
    $r.addProperty("BottomNavigationButtons",2,$mod.$rtti["TTMSFNCPlannerNavigationButtons"],"FBottomNavigationButtons","SetBottomNavigationButtons",{Default: {}});
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly",{Default: false});
    $r.addProperty("AutoSelectLinkedItems",0,rtl.boolean,"FAutoSelectLinkedItems","FAutoSelectLinkedItems",{Default: false});
    $r.addProperty("AutoDeleteLinkedItems",0,rtl.boolean,"FAutoDeleteLinkedItems","FAutoDeleteLinkedItems",{Default: false});
  });
  this.TTMSFNCPlannerSizeHandlerPanelKind = {"0": "pshpkStartTime", pshpkStartTime: 0, "1": "pshpkEndTime", pshpkEndTime: 1};
  rtl.createClass($mod,"TTMSFNCPlannerDeleteHandlerPanel",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FPlanner = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCPlannerDeleteHandlerPanel);
    };
    this.Click = function () {
      pas["WEBLib.Controls"].TControl.Click.apply(this,arguments);
      if ((this.FPlanner != null) && (this.FPlanner.FActiveItem != null)) this.FPlanner.HandleItemDelete(this.FPlanner.FActiveItem,$mod.TTMSFNCPlannerItemDeleteMode.pidmKeyboard);
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.DisableBackground();
    };
    this.Draw = function (AGraphics, ARect) {
      var bmp = null;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      if (!(this.FPlanner != null)) return;
      bmp = this.FPlanner.FItemsAppearance.FDeleteHandlerBitmap;
      AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight())),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerSizeHandlerPanel",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FDownPoint = new pas["WEBLib.TMSFNCTypes"].TPointF();
      this.FMouseDown = false;
      this.FPlanner = null;
      this.FKind = 0;
    };
    this.$final = function () {
      this.FDownPoint = undefined;
      this.FPlanner = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
      pas.Classes.RegisterClass($mod.TTMSFNCPlannerSizeHandlerPanel);
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      this.FMouseDown = true;
      this.FDownPoint = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
      if (this.FPlanner != null) {
        this.FPlanner.FDrawItemHelpers = true;
        this.FPlanner.Invalidate();
      };
      this.CaptureEx();
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      var pt = new pas.Types.TPoint();
      var cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var clsn = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var clen = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var m = 0;
      var offx = 0.0;
      var offy = 0.0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      if ((this.FMouseDown && (this.FPlanner != null)) && (this.FPlanner.FActiveItem != null)) {
        offx = 0;
        offy = 0;
        var $tmp1 = this.FPlanner.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          var $tmp2 = this.FKind;
          if ($tmp2 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkStartTime) {
            offx = this.GetWidth() - this.FDownPoint.X}
           else if ($tmp2 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkEndTime) offx = -this.FDownPoint.X;
        } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          var $tmp3 = this.FKind;
          if ($tmp3 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkStartTime) {
            offy = this.GetHeight() - this.FDownPoint.Y}
           else if ($tmp3 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkEndTime) offy = -this.FDownPoint.Y;
        };
        pt = new pas.Types.TPoint(this.FPlanner.ScreenToClient(this.ClientToScreen(pas.Types.Point(Math.round(X + offx),Math.round(Y + offy)))));
        cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FPlanner.XYToCell(pt.x,pt.y));
        if ((cl.Col !== -1) && (cl.Row !== -1)) {
          cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FPlanner.ItemToStartCell(this.FPlanner.FActiveItem));
          cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FPlanner.ItemToEndCell(this.FPlanner.FActiveItem));
          clsn.Col = cls.Col;
          clen.Col = cle.Col;
          clsn.Row = cls.Row;
          clen.Row = cle.Row;
          var $tmp4 = this.FKind;
          if ($tmp4 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkStartTime) {
            if (((cls.Row >= cle.Row) && ((cle.Col - cl.Col) > 0)) || ((cls.Row < cle.Row) && ((cle.Col - cl.Col) >= 0))) clsn.Col = cl.Col;
            if (clsn.Col === cle.Col) {
              clsn.Row = Math.min(cle.Row - 1,cl.Row)}
             else clsn.Row = cl.Row;
          } else if ($tmp4 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkEndTime) {
            if (((cle.Row <= cls.Row) && ((cl.Col - cls.Col) > 0)) || ((cle.Row > cls.Row) && ((cl.Col - cls.Col) >= 0))) clen.Col = cl.Col;
            if (clen.Col === cls.Col) {
              clen.Row = Math.max(cls.Row + 1,cl.Row + 1)}
             else clen.Row = cl.Row + 1;
          };
          m = $mod.TTMSFNCPlannerMouseInteractionMode.pmmSizeUp;
          this.FPlanner.HandleItemMouseInteraction(this.FPlanner.FActiveItem,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clsn),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clen),m);
        };
      };
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      this.ReleaseCaptureEx();
      this.FMouseDown = false;
      if (this.FPlanner != null) {
        this.FPlanner.HandleAfterEvents();
        this.FPlanner.FDrawItemHelpers = false;
        this.FPlanner.Invalidate();
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.DisableBackground();
    };
    this.Draw = function (AGraphics, ARect) {
      var bmp = null;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      if (!(this.FPlanner != null)) return;
      var $tmp1 = this.FPlanner.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        var $tmp2 = this.FKind;
        if ($tmp2 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkStartTime) {
          bmp = this.FPlanner.FItemsAppearance.FSizeHandlerLeftBitmap}
         else if ($tmp2 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkEndTime) {
          bmp = this.FPlanner.FItemsAppearance.FSizeHandlerRightBitmap}
         else {
          bmp = null;
        };
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        var $tmp3 = this.FKind;
        if ($tmp3 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkStartTime) {
          bmp = this.FPlanner.FItemsAppearance.FSizeHandlerUpBitmap}
         else if ($tmp3 === $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkEndTime) {
          bmp = this.FPlanner.FItemsAppearance.FSizeHandlerDownBitmap}
         else {
          bmp = null;
        };
      } else {
        bmp = null;
      };
      if (bmp != null) AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight())),pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(bmp),true,false,true,false);
    };
  });
  this.TTMSFNCPlannerDeleteHandler = function (s) {
    if (s) {
      this.Background = s.Background;
    } else {
      this.Background = null;
    };
    this.$equal = function (b) {
      return this.Background === b.Background;
    };
  };
  this.TTMSFNCPlannerSizeHandler = function (s) {
    if (s) {
      this.Background = s.Background;
    } else {
      this.Background = null;
    };
    this.$equal = function (b) {
      return this.Background === b.Background;
    };
  };
  this.TTMSFNCPlannerHintPopup = function (s) {
    if (s) {
      this.Panel = s.Panel;
      this.TextLabel = s.TextLabel;
    } else {
      this.Panel = null;
      this.TextLabel = null;
    };
    this.$equal = function (b) {
      return (this.Panel === b.Panel) && (this.TextLabel === b.TextLabel);
    };
  };
  this.TTMSFNCPlannerEditingDialog = function (s) {
    if (s) {
      this.Background = s.Background;
      this.ResourcesComboBox = s.ResourcesComboBox;
      this.Panel = s.Panel;
      this.StartTimeEdit = s.StartTimeEdit;
      this.StartDateEdit = s.StartDateEdit;
      this.EndTimeEdit = s.EndTimeEdit;
      this.EndDateEdit = s.EndDateEdit;
      this.TitleEdit = s.TitleEdit;
      this.TextMemo = s.TextMemo;
      this.TitleLabel = s.TitleLabel;
      this.TextLabel = s.TextLabel;
      this.StartTimeLabel = s.StartTimeLabel;
      this.EndTimeLabel = s.EndTimeLabel;
      this.BottomPanel = s.BottomPanel;
      this.ButtonOK = s.ButtonOK;
      this.ButtonRemove = s.ButtonRemove;
      this.ButtonCancel = s.ButtonCancel;
      this.ResourceLabel = s.ResourceLabel;
      this.ContentPanel = s.ContentPanel;
      this.CustomContentPanel = s.CustomContentPanel;
    } else {
      this.Background = null;
      this.ResourcesComboBox = null;
      this.Panel = null;
      this.StartTimeEdit = null;
      this.StartDateEdit = null;
      this.EndTimeEdit = null;
      this.EndDateEdit = null;
      this.TitleEdit = null;
      this.TextMemo = null;
      this.TitleLabel = null;
      this.TextLabel = null;
      this.StartTimeLabel = null;
      this.EndTimeLabel = null;
      this.BottomPanel = null;
      this.ButtonOK = null;
      this.ButtonRemove = null;
      this.ButtonCancel = null;
      this.ResourceLabel = null;
      this.ContentPanel = null;
      this.CustomContentPanel = false;
    };
    this.$equal = function (b) {
      return (this.Background === b.Background) && ((this.ResourcesComboBox === b.ResourcesComboBox) && ((this.Panel === b.Panel) && ((this.StartTimeEdit === b.StartTimeEdit) && ((this.StartDateEdit === b.StartDateEdit) && ((this.EndTimeEdit === b.EndTimeEdit) && ((this.EndDateEdit === b.EndDateEdit) && ((this.TitleEdit === b.TitleEdit) && ((this.TextMemo === b.TextMemo) && ((this.TitleLabel === b.TitleLabel) && ((this.TextLabel === b.TextLabel) && ((this.StartTimeLabel === b.StartTimeLabel) && ((this.EndTimeLabel === b.EndTimeLabel) && ((this.BottomPanel === b.BottomPanel) && ((this.ButtonOK === b.ButtonOK) && ((this.ButtonRemove === b.ButtonRemove) && ((this.ButtonCancel === b.ButtonCancel) && ((this.ResourceLabel === b.ResourceLabel) && ((this.ContentPanel === b.ContentPanel) && (this.CustomContentPanel === b.CustomContentPanel)))))))))))))))))));
    };
  };
  rtl.createClass($mod,"TTMSFNCPlannerDateTimes",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = 0.0;
      Result = rtl.getNumber(this.Get(Index));
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCPlannerSelectedItems",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
  });
  this.TTMSFNCPlannerInteractionDirection = {"0": "idNone", idNone: 0, "1": "idLeft", idLeft: 1, "2": "idRight", idRight: 2, "3": "idUp", idUp: 3, "4": "idDown", idDown: 4};
  this.TTMSFNCPlannerArrowKind = {"0": "pakLeft", pakLeft: 0, "1": "pakRight", pakRight: 1, "2": "pakUp", pakUp: 2, "3": "pakDown", pakDown: 3};
  rtl.createClass($mod,"TTMSFNCPlannerCustomToolBarPopup",pas["WEBLib.TMSFNCToolBarPopup"].TTMSFNCCustomToolBarPopup,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCToolBarPopup"].TTMSFNCCustomToolBarPopup.$init.call(this);
      this.FPlanner = null;
      this.FPlannerItem = null;
    };
    this.$final = function () {
      this.FPlanner = undefined;
      this.FPlannerItem = undefined;
      pas["WEBLib.TMSFNCToolBarPopup"].TTMSFNCCustomToolBarPopup.$final.call(this);
    };
    this.Notification = function (AComponent, Operation) {
      pas["WEBLib.TMSFNCPopup"].TTMSFNCCustomPopup.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FPlanner)) this.FPlanner = null;
    };
    this.Create$1 = function (AOwner) {
      var I = 0;
      pas["WEBLib.TMSFNCToolBarPopup"].TTMSFNCCustomToolBarPopup.Create$1.apply(this,arguments);
      if ((AOwner != null) && pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(AOwner)) {
        for (var $l1 = 0, $end2 = AOwner.GetComponentCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if ($mod.TTMSFNCCustomPlanner.isPrototypeOf(AOwner.GetComponent(I))) {
            this.FPlanner = rtl.as(AOwner.GetComponent(I),$mod.TTMSFNCCustomPlanner);
            this.FPlanner.FToolBarPopup = this;
            break;
          };
        };
      };
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomPlanner",pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerData,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerData.$init.call(this);
      this.FToolBarPopup = null;
      this.FClosing = false;
      this.FInplaceEditorClosed = false;
      this.FAdapter = null;
      this.FCurrentPanel = null;
      this.FSaveHScrollPos = 0.0;
      this.FSaveVScrollPos = 0.0;
      this.FCallItemIndex = 0;
      this.FCallAfterMoveEvent = false;
      this.FCallAfterSizeEvent = false;
      this.FFindItemIndex = 0;
      this.FNavigationButtonDown = false;
      this.FTopLeftNavigationButtonState = 0;
      this.FTopRightNavigationButtonState = 0;
      this.FBottomLeftNavigationButtonState = 0;
      this.FBottomRightNavigationButtonState = 0;
      this.FDialogStartDate = 0.0;
      this.FDialogEndDate = 0.0;
      this.FDialogStartTime = 0.0;
      this.FDialogEndTime = 0.0;
      this.FDblClicked = false;
      this.FCloseWithDialogKey = false;
      this.FInplaceEditorActive = false;
      this.FEditorDialogActive = false;
      this.FInplaceEditorClass = null;
      this.FNeedsInitialization = false;
      this.FSelectedItems = null;
      this.FDoItemAnchor = "";
      this.FDoItemSizeUp = false;
      this.FDoItemSizeDown = false;
      this.FDoItemMove = false;
      this.FDoItemDelete = false;
      this.FInplaceEditor = null;
      this.FDrawItemHelpers = false;
      this.FCustomDatesList = null;
      this.FNeedsConflictsUpdate = false;
      this.FInsertResource = 0;
      this.FUpdateItem = 0;
      this.FEditingDialogCreated = false;
      this.FHintPopupCreated = false;
      this.FDeleteHandlerCreated = false;
      this.FStartTimeSizeHandlerCreated = false;
      this.FEndTimeSizeHandlerCreated = false;
      this.FEditingBackground = null;
      this.FResourcesComboBox = null;
      this.FEditingDialog = null;
      this.FBottomPanel = null;
      this.FContentPanel = null;
      this.FStartTimeLabel = null;
      this.FResourceLabel = null;
      this.FStartTimeEdit = null;
      this.FStartDateEdit = null;
      this.FEndTimeLabel = null;
      this.FEndTimeEdit = null;
      this.FEndDateEdit = null;
      this.FTitleLabel = null;
      this.FTitleEdit = null;
      this.FTextLabel = null;
      this.FTextMemo = null;
      this.FDeletePanel = null;
      this.FStartTimeSizePanel = null;
      this.FEndTimeSizePanel = null;
      this.FHintPanel = null;
      this.FHintLabel = null;
      this.FButtonCancel = null;
      this.FButtonOK = null;
      this.FButtonRemove = null;
      this.FDisplayStartTime = 0.0;
      this.FDisplayEndTime = 0.0;
      this.FActiveStartTime = 0.0;
      this.FActiveEndTime = 0.0;
      this.FDisplayStart = 0;
      this.FDisplayEnd = 0;
      this.FActiveStart = 0;
      this.FActiveEnd = 0;
      this.FPrevSelection = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerSelection();
      this.FScrolling = false;
      this.FSelection = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerSelection();
      this.FDownOnPositions = false;
      this.FMoveOnPositions = false;
      this.FDownCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      this.FSizeCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      this.FRangeCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      this.FDownItem = null;
      this.FActiveItem = null;
      this.FDownCacheItemIdx = 0;
      this.FDoubleSelection = false;
      this.FRangeSelection = false;
      this.FDownTime = 0;
      this.FMouseUp = false;
      this.FAnimateVerticalPos = false;
      this.FAnimateHorizontalPos = false;
      this.FAnimating = false;
      this.FSpX = 0.0;
      this.FSpY = 0.0;
      this.FMovePositionPrevious = false;
      this.FMovePositionNext = false;
      this.FScrollX = 0.0;
      this.FScrollY = 0.0;
      this.FDownX = 0.0;
      this.FDownY = 0.0;
      this.FMouseX = 0.0;
      this.FMouseY = 0.0;
      this.FScrollVTo = 0.0;
      this.FScrollHTo = 0.0;
      this.FTimeStart = 0.0;
      this.FTimeStop = 0.0;
      this.FAnimateTimer = null;
      this.FDownTimer = null;
      this.FGridCache = null;
      this.FItemCache = null;
      this.FPositionsTopCache = null;
      this.FPositionsBottomCache = null;
      this.FConflicts = null;
      this.FDisplayGroups = null;
      this.FGroupsTopCache = null;
      this.FGroupsBottomCache = null;
      this.FTimeLineLeftCache = null;
      this.FTimeLineRightCache = null;
      this.FGridDisplay = null;
      this.FItemDisplay = null;
      this.FPositionsTopDisplay = null;
      this.FPositionsBottomDisplay = null;
      this.FGroupsTopDisplay = null;
      this.FGroupsBottomDisplay = null;
      this.FTimeLineLeftDisplay = null;
      this.FTimeLineRightDisplay = null;
      this.FGridCaching = false;
      this.FItemsAppearance = null;
      this.FPositionsCaching = false;
      this.FGroupsCaching = false;
      this.FTimeLineCaching = false;
      this.FTimeLine = null;
      this.FGroupsAppearance = null;
      this.FPositionsAppearance = null;
      this.FTimeLineAppearance = null;
      this.FOnAfterDrawGroup = null;
      this.FOnBeforeDrawPosition = null;
      this.FOnBeforeDrawItem = null;
      this.FOnBeforeDrawTime = null;
      this.FOnAfterDrawPosition = null;
      this.FOnBeforeDrawGroup = null;
      this.FOnAfterDrawItem = null;
      this.FOnAfterDrawTime = null;
      this.FOnAfterDrawCell = null;
      this.FOnBeforeDrawCell = null;
      this.FGridCellAppearance = null;
      this.FOnBeforeDrawItemText = null;
      this.FOnBeforeDrawTimeText = null;
      this.FOnAfterDrawPositionText = null;
      this.FOnBeforeDrawGroupText = null;
      this.FOnAfterDrawItemText = null;
      this.FOnAfterDrawTimeText = null;
      this.FOnAfterDrawGroupText = null;
      this.FOnBeforeDrawPositionText = null;
      this.FSelectionAppearance = null;
      this.FMode = 0;
      this.FModeSettings = null;
      this.FInteraction = null;
      this.FOnSelectTime = null;
      this.FOnBeforeInsertItem = null;
      this.FOnAfterInsertItem = null;
      this.FOnAfterUpdateItem = null;
      this.FOnBeforeUpdateItem = null;
      this.FOnAfterDrawItemTitleText = null;
      this.FOnBeforeDrawItemTitleText = null;
      this.FOnAfterDrawItemTitle = null;
      this.FOnBeforeDrawItemTitle = null;
      this.FOnBeforeSelectItem = null;
      this.FOnAfterSelectItem = null;
      this.FDefaultItem = null;
      this.FOnBeforeOpenUpdateDialog = null;
      this.FOnBeforeOpenInsertDialog = null;
      this.FOnAfterOpenUpdateDialog = null;
      this.FOnAfterOpenInsertDialog = null;
      this.FOnBeforeDrawCellVerticalLine = null;
      this.FOnBeforeDrawCellHorizontalLine = null;
      this.FOnAfterDrawCellVerticalLine = null;
      this.FOnAfterDrawCellHorizontalLine = null;
      this.FPositions = null;
      this.FOnIsDateTimeDisabled = null;
      this.FCustomDateTimes = null;
      this.FOnAfterMoveItem = null;
      this.FOnAfterSizeItem = null;
      this.FOnBeforeMoveItem = null;
      this.FOnBeforeSizeItem = null;
      this.FOnSelectingTime = null;
      this.FOnSelectCell = null;
      this.FOnSelectingCell = null;
      this.FOnBeforeOpenInplaceEditor = null;
      this.FOnAfterOpenInplaceEditor = null;
      this.FOnGetInplaceEditor = null;
      this.FBitmapContainer = null;
      this.FOnAfterDrawMoveArea = null;
      this.FOnAfterDrawSizeArea = null;
      this.FOnBeforeDrawMoveArea = null;
      this.FOnBeforeDrawSizeArea = null;
      this.FOnGetItemText = null;
      this.FOnGetTimeText = null;
      this.FOnGetPositionText = null;
      this.FOnGetGroupText = null;
      this.FOnGetItemTitleText = null;
      this.FOnItemAnchorClick = null;
      this.FOnBeforeDrawCurrentTimeInGrid = null;
      this.FOnAfterDrawCurrentTimeInTimeLine = null;
      this.FOnAfterDrawCurrentTimeInGrid = null;
      this.FOnBeforeDrawCurrentTimeInTimeLine = null;
      this.FOnCloseUpdateDialog = null;
      this.FOnCloseInsertDialog = null;
      this.FOnCloseInplaceEditor = null;
      this.FOnVScroll = null;
      this.FOnHScroll = null;
      this.FOnIsDateTimeInActive = null;
      this.FOnAfterDrawItemHelperText = null;
      this.FOnAfterDrawItemHelper = null;
      this.FOnBeforeDrawItemHelperText = null;
      this.FOnBeforeDrawItemHelper = null;
      this.FOnGetItemHelperText = null;
      this.FOnBeforeDrawTimeStroke = null;
      this.FOnAfterDrawTimeStroke = null;
      this.FOnAfterNavigateToDateTime = null;
      this.FOnBeforeNavigateToDateTime = null;
      this.FOnBeforeDrawTopNavigationButton = null;
      this.FOnAfterDrawBottomNavigationButton = null;
      this.FOnAfterDrawTopNavigationButton = null;
      this.FOnBeforeDrawBottomNavigationButton = null;
      this.FOnBeforeDrawPositionEmptySpace = null;
      this.FOnAfterDrawPositionEmptySpace = null;
      this.FOnBeforeDrawGroupEmptySpace = null;
      this.FOnAfterDrawGroupEmptySpace = null;
      this.FOnAfterDeleteItem = null;
      this.FOnBeforeDeleteItem = null;
      this.FOnMoveItem = null;
      this.FOnSizeItem = null;
      this.FOnItemChanged = null;
      this.FOnAfterItemChanged = null;
      this.FOnItemToCustomContentPanel = null;
      this.FOnCustomContentPanelToItem = null;
      this.FOnGetCustomContentPanel = null;
      this.FOnInitializeCustomContentPanel = null;
      this.FItemEditor = null;
      this.FOnIsDateTimeSub = null;
      this.FOnHasDateTimeSub = null;
      this.FOnIsItemDeletable = null;
      this.FOnBeforeDrawDeleteArea = null;
      this.FOnAfterDrawDeleteArea = null;
      this.FOnAfterDrawItemLink = null;
      this.FOnBeforeDrawItemLink = null;
    };
    this.$final = function () {
      this.FToolBarPopup = undefined;
      this.FAdapter = undefined;
      this.FCurrentPanel = undefined;
      this.FInplaceEditorClass = undefined;
      this.FSelectedItems = undefined;
      this.FInplaceEditor = undefined;
      this.FCustomDatesList = undefined;
      this.FEditingBackground = undefined;
      this.FResourcesComboBox = undefined;
      this.FEditingDialog = undefined;
      this.FBottomPanel = undefined;
      this.FContentPanel = undefined;
      this.FStartTimeLabel = undefined;
      this.FResourceLabel = undefined;
      this.FStartTimeEdit = undefined;
      this.FStartDateEdit = undefined;
      this.FEndTimeLabel = undefined;
      this.FEndTimeEdit = undefined;
      this.FEndDateEdit = undefined;
      this.FTitleLabel = undefined;
      this.FTitleEdit = undefined;
      this.FTextLabel = undefined;
      this.FTextMemo = undefined;
      this.FDeletePanel = undefined;
      this.FStartTimeSizePanel = undefined;
      this.FEndTimeSizePanel = undefined;
      this.FHintPanel = undefined;
      this.FHintLabel = undefined;
      this.FButtonCancel = undefined;
      this.FButtonOK = undefined;
      this.FButtonRemove = undefined;
      this.FPrevSelection = undefined;
      this.FSelection = undefined;
      this.FDownCell = undefined;
      this.FSizeCell = undefined;
      this.FRangeCell = undefined;
      this.FDownItem = undefined;
      this.FActiveItem = undefined;
      this.FAnimateTimer = undefined;
      this.FDownTimer = undefined;
      this.FGridCache = undefined;
      this.FItemCache = undefined;
      this.FPositionsTopCache = undefined;
      this.FPositionsBottomCache = undefined;
      this.FConflicts = undefined;
      this.FDisplayGroups = undefined;
      this.FGroupsTopCache = undefined;
      this.FGroupsBottomCache = undefined;
      this.FTimeLineLeftCache = undefined;
      this.FTimeLineRightCache = undefined;
      this.FGridDisplay = undefined;
      this.FItemDisplay = undefined;
      this.FPositionsTopDisplay = undefined;
      this.FPositionsBottomDisplay = undefined;
      this.FGroupsTopDisplay = undefined;
      this.FGroupsBottomDisplay = undefined;
      this.FTimeLineLeftDisplay = undefined;
      this.FTimeLineRightDisplay = undefined;
      this.FItemsAppearance = undefined;
      this.FTimeLine = undefined;
      this.FGroupsAppearance = undefined;
      this.FPositionsAppearance = undefined;
      this.FTimeLineAppearance = undefined;
      this.FOnAfterDrawGroup = undefined;
      this.FOnBeforeDrawPosition = undefined;
      this.FOnBeforeDrawItem = undefined;
      this.FOnBeforeDrawTime = undefined;
      this.FOnAfterDrawPosition = undefined;
      this.FOnBeforeDrawGroup = undefined;
      this.FOnAfterDrawItem = undefined;
      this.FOnAfterDrawTime = undefined;
      this.FOnAfterDrawCell = undefined;
      this.FOnBeforeDrawCell = undefined;
      this.FGridCellAppearance = undefined;
      this.FOnBeforeDrawItemText = undefined;
      this.FOnBeforeDrawTimeText = undefined;
      this.FOnAfterDrawPositionText = undefined;
      this.FOnBeforeDrawGroupText = undefined;
      this.FOnAfterDrawItemText = undefined;
      this.FOnAfterDrawTimeText = undefined;
      this.FOnAfterDrawGroupText = undefined;
      this.FOnBeforeDrawPositionText = undefined;
      this.FSelectionAppearance = undefined;
      this.FModeSettings = undefined;
      this.FInteraction = undefined;
      this.FOnSelectTime = undefined;
      this.FOnBeforeInsertItem = undefined;
      this.FOnAfterInsertItem = undefined;
      this.FOnAfterUpdateItem = undefined;
      this.FOnBeforeUpdateItem = undefined;
      this.FOnAfterDrawItemTitleText = undefined;
      this.FOnBeforeDrawItemTitleText = undefined;
      this.FOnAfterDrawItemTitle = undefined;
      this.FOnBeforeDrawItemTitle = undefined;
      this.FOnBeforeSelectItem = undefined;
      this.FOnAfterSelectItem = undefined;
      this.FDefaultItem = undefined;
      this.FOnBeforeOpenUpdateDialog = undefined;
      this.FOnBeforeOpenInsertDialog = undefined;
      this.FOnAfterOpenUpdateDialog = undefined;
      this.FOnAfterOpenInsertDialog = undefined;
      this.FOnBeforeDrawCellVerticalLine = undefined;
      this.FOnBeforeDrawCellHorizontalLine = undefined;
      this.FOnAfterDrawCellVerticalLine = undefined;
      this.FOnAfterDrawCellHorizontalLine = undefined;
      this.FPositions = undefined;
      this.FOnIsDateTimeDisabled = undefined;
      this.FCustomDateTimes = undefined;
      this.FOnAfterMoveItem = undefined;
      this.FOnAfterSizeItem = undefined;
      this.FOnBeforeMoveItem = undefined;
      this.FOnBeforeSizeItem = undefined;
      this.FOnSelectingTime = undefined;
      this.FOnSelectCell = undefined;
      this.FOnSelectingCell = undefined;
      this.FOnBeforeOpenInplaceEditor = undefined;
      this.FOnAfterOpenInplaceEditor = undefined;
      this.FOnGetInplaceEditor = undefined;
      this.FBitmapContainer = undefined;
      this.FOnAfterDrawMoveArea = undefined;
      this.FOnAfterDrawSizeArea = undefined;
      this.FOnBeforeDrawMoveArea = undefined;
      this.FOnBeforeDrawSizeArea = undefined;
      this.FOnGetItemText = undefined;
      this.FOnGetTimeText = undefined;
      this.FOnGetPositionText = undefined;
      this.FOnGetGroupText = undefined;
      this.FOnGetItemTitleText = undefined;
      this.FOnItemAnchorClick = undefined;
      this.FOnBeforeDrawCurrentTimeInGrid = undefined;
      this.FOnAfterDrawCurrentTimeInTimeLine = undefined;
      this.FOnAfterDrawCurrentTimeInGrid = undefined;
      this.FOnBeforeDrawCurrentTimeInTimeLine = undefined;
      this.FOnCloseUpdateDialog = undefined;
      this.FOnCloseInsertDialog = undefined;
      this.FOnCloseInplaceEditor = undefined;
      this.FOnVScroll = undefined;
      this.FOnHScroll = undefined;
      this.FOnIsDateTimeInActive = undefined;
      this.FOnAfterDrawItemHelperText = undefined;
      this.FOnAfterDrawItemHelper = undefined;
      this.FOnBeforeDrawItemHelperText = undefined;
      this.FOnBeforeDrawItemHelper = undefined;
      this.FOnGetItemHelperText = undefined;
      this.FOnBeforeDrawTimeStroke = undefined;
      this.FOnAfterDrawTimeStroke = undefined;
      this.FOnAfterNavigateToDateTime = undefined;
      this.FOnBeforeNavigateToDateTime = undefined;
      this.FOnBeforeDrawTopNavigationButton = undefined;
      this.FOnAfterDrawBottomNavigationButton = undefined;
      this.FOnAfterDrawTopNavigationButton = undefined;
      this.FOnBeforeDrawBottomNavigationButton = undefined;
      this.FOnBeforeDrawPositionEmptySpace = undefined;
      this.FOnAfterDrawPositionEmptySpace = undefined;
      this.FOnBeforeDrawGroupEmptySpace = undefined;
      this.FOnAfterDrawGroupEmptySpace = undefined;
      this.FOnAfterDeleteItem = undefined;
      this.FOnBeforeDeleteItem = undefined;
      this.FOnMoveItem = undefined;
      this.FOnSizeItem = undefined;
      this.FOnItemChanged = undefined;
      this.FOnAfterItemChanged = undefined;
      this.FOnItemToCustomContentPanel = undefined;
      this.FOnCustomContentPanelToItem = undefined;
      this.FOnGetCustomContentPanel = undefined;
      this.FOnInitializeCustomContentPanel = undefined;
      this.FItemEditor = undefined;
      this.FOnIsDateTimeSub = undefined;
      this.FOnHasDateTimeSub = undefined;
      this.FOnIsItemDeletable = undefined;
      this.FOnBeforeDrawDeleteArea = undefined;
      this.FOnAfterDrawDeleteArea = undefined;
      this.FOnAfterDrawItemLink = undefined;
      this.FOnBeforeDrawItemLink = undefined;
      pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerData.$final.call(this);
    };
    this.SetItemsAppearance = function (Value) {
      if (this.FItemsAppearance !== Value) this.FItemsAppearance.Assign(Value);
    };
    this.SetTimeLine = function (Value) {
      if (this.FTimeLine !== Value) this.FTimeLine.Assign(Value);
    };
    this.SetGroupsAppearance = function (Value) {
      if (this.FGroupsAppearance !== Value) this.FGroupsAppearance.Assign(Value);
    };
    this.SetPositionsAppearance = function (Value) {
      if (this.FPositionsAppearance !== Value) this.FPositionsAppearance.Assign(Value);
    };
    this.SetTimeLineAppearance = function (Value) {
      if (this.FTimeLineAppearance !== Value) this.FTimeLineAppearance.Assign(Value);
    };
    this.SetGridCellAppearance = function (Value) {
      if (this.FGridCellAppearance !== Value) this.FGridCellAppearance.Assign(Value);
    };
    this.SetSelectionAppearance = function (Value) {
      if (this.FSelectionAppearance !== Value) this.FSelectionAppearance = Value;
    };
    this.SetMode = function (Value) {
      if (this.FMode !== Value) {
        this.FMode = Value;
        var $tmp1 = this.GetDisplayMode();
        if (((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) {
          this.FTimeLine.FDisplayUnit = 30;
          this.FTimeLine.FDisplayUnitType = $mod.TTMSFNCPlannerDisplayUnitType.pduMinute;
          this.FTimeLine.FDisplayStart = 0;
          this.FTimeLine.FDisplayEnd = 47;
        } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod) {
          this.FTimeLine.FDisplayUnit = 12;
          this.FTimeLine.FDisplayUnitType = $mod.TTMSFNCPlannerDisplayUnitType.pduHour;
        } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod) {
          this.FTimeLine.FDisplayUnit = 1;
          this.FTimeLine.FDisplayUnitType = $mod.TTMSFNCPlannerDisplayUnitType.pduDay;
        } else if (($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth)) {
          this.FTimeLine.FDisplayUnit = 1;
          this.FTimeLine.FDisplayUnitType = $mod.TTMSFNCPlannerDisplayUnitType.pduDay;
          this.FTimeLine.FDisplayStart = 0;
          this.FTimeLine.FDisplayEnd = 30;
        };
        var $tmp2 = this.GetDisplayMode();
        if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMonth) {
          this.FTimeLineAppearance.FLeftSize = 110;
          this.FTimeLineAppearance.FRightSize = 110;
        } else if ((($tmp2 === $mod.TTMSFNCPlannerMode.pmDayPeriod) || ($tmp2 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp2 === $mod.TTMSFNCPlannerMode.pmCustom)) {
          this.FTimeLineAppearance.FLeftSize = 150;
          this.FTimeLineAppearance.FRightSize = 150;
        } else {
          this.FTimeLineAppearance.FLeftSize = 50;
          this.FTimeLineAppearance.FRightSize = 50;
        };
        this.FNeedsConflictsUpdate = true;
        this.FNeedsInitialization = true;
        this.UpdatePlannerCache(true);
        var $tmp3 = this.GetDisplayMode();
        if (((($tmp3 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) {
          this.FTimeLine.SetViewStart(pas.System.Int(this.FModeSettings.FStartTime))}
         else if ($tmp3 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod) {
          this.FTimeLine.SetViewStart(pas.System.Int(this.FModeSettings.FStartTime))}
         else if ($tmp3 === $mod.TTMSFNCPlannerMode.pmDayPeriod) {
          this.FTimeLine.SetViewStart(pas.System.Int(this.FModeSettings.FStartTime))}
         else if (($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiMonth) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMonth)) this.FTimeLine.SetViewStart(pas.SysUtils.EncodeDate(pas.DateUtils.YearOf(this.FModeSettings.FStartTime),pas.DateUtils.MonthOf(this.FModeSettings.FStartTime),1));
      };
    };
    this.SetModeSettings = function (Value) {
      if (this.FModeSettings !== Value) this.FModeSettings.Assign(Value);
    };
    this.SetInteraction = function (Value) {
      if (this.FInteraction !== Value) this.FInteraction.Assign(Value);
    };
    this.SetActiveItem = function (Value) {
      this.HandleSelectItem(Value,false);
    };
    this.SetDefaultItem = function (Value) {
      this.FDefaultItem.Assign(Value);
    };
    this.SetPositions = function (Value) {
      if (this.FPositions !== Value) this.FPositions.Assign(Value);
    };
    this.SetAdapter = function (Value) {
      if (Value != null) Value.FPlanner = this;
      this.FAdapter = Value;
    };
    this.SetItemEditor = function (Value) {
      if (Value != null) Value.FPlanner = this;
      this.FItemEditor = Value;
    };
    this.SetBitmapContainer = function (Value) {
      this.FBitmapContainer = Value;
      this.Invalidate();
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,9);
      return Result;
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.apply(this,arguments);
      this.BeginUpdate();
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FFill.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundStrokeColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FStroke.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FGroupsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FGroupsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FTimeLineAppearance.FLeftFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FTimeLineAppearance.FRightFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FPositionsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FPositionsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FPositionsAppearance.FTopNavigationButtonFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FPositionsAppearance.FBottomNavigationButtonFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FGroupsAppearance.FTopFill.SetColor(c);
        this.FGroupsAppearance.FBottomFill.SetColor(c);
        this.FTimeLineAppearance.FLeftFill.SetColor(c);
        this.FTimeLineAppearance.FRightFill.SetColor(c);
        this.FPositionsAppearance.FTopFill.SetColor(c);
        this.FPositionsAppearance.FBottomFill.SetColor(c);
        this.FPositionsAppearance.FTopNavigationButtonFill.SetColor(c);
        this.FPositionsAppearance.FBottomNavigationButtonFill.SetColor(c);
        this.FPositionsAppearance.FTopNavigationButtonHoverFill.Assign(this.FSelectionAppearance.FFill);
        this.FPositionsAppearance.FBottomNavigationButtonHoverFill.Assign(this.FSelectionAppearance.FFill);
        this.FPositionsAppearance.FTopNavigationButtonDownFill.Assign(this.FGridCellAppearance.FFill);
        this.FPositionsAppearance.FBottomNavigationButtonDownFill.Assign(this.FGridCellAppearance.FFill);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColorTo({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FGroupsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FGroupsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FTimeLineAppearance.FLeftFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FTimeLineAppearance.FRightFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FPositionsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FPositionsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FPositionsAppearance.FTopNavigationButtonFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FPositionsAppearance.FBottomNavigationButtonFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FGroupsAppearance.FTopFill.SetColorTo(c);
        this.FGroupsAppearance.FBottomFill.SetColorTo(c);
        this.FTimeLineAppearance.FLeftFill.SetColorTo(c);
        this.FTimeLineAppearance.FRightFill.SetColorTo(c);
        this.FPositionsAppearance.FTopFill.SetColorTo(c);
        this.FPositionsAppearance.FBottomFill.SetColorTo(c);
        this.FPositionsAppearance.FTopNavigationButtonFill.SetColorTo(c);
        this.FPositionsAppearance.FBottomNavigationButtonFill.SetColorTo(c);
        this.FPositionsAppearance.FTopNavigationButtonHoverFill.Assign(this.FSelectionAppearance.FFill);
        this.FPositionsAppearance.FBottomNavigationButtonHoverFill.Assign(this.FSelectionAppearance.FFill);
        this.FPositionsAppearance.FTopNavigationButtonDownFill.Assign(this.FGridCellAppearance.FFill);
        this.FPositionsAppearance.FBottomNavigationButtonDownFill.Assign(this.FGridCellAppearance.FFill);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleLineFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FTimeLineAppearance.FLeftStroke.SetColor(c);
        this.FTimeLineAppearance.FRightStroke.SetColor(c);
        this.FPositionsAppearance.FTopStroke.SetColor(c);
        this.FPositionsAppearance.FBottomStroke.SetColor(c);
        this.FPositionsAppearance.FTopNavigationButtonStroke.SetColor(c);
        this.FPositionsAppearance.FBottomNavigationButtonStroke.SetColor(c);
        this.FPositionsAppearance.FTopNavigationButtonHoverStroke.SetColor(c);
        this.FPositionsAppearance.FBottomNavigationButtonHoverStroke.SetColor(c);
        this.FPositionsAppearance.FTopNavigationButtonDownStroke.SetColor(c);
        this.FPositionsAppearance.FBottomNavigationButtonDownStroke.SetColor(c);
        this.FGroupsAppearance.FTopStroke.SetColor(c);
        this.FGroupsAppearance.FBottomStroke.SetColor(c);
        this.FGridCellAppearance.FVerticalStroke.SetColor(c);
        this.FGridCellAppearance.FHorizontalStroke.SetColor(c);
        this.FGridCellAppearance.FHorizontalSubStroke.SetColor(c);
        this.FTimeLineAppearance.FLeftSubStroke.SetColor(c);
        this.FTimeLineAppearance.FRightSubStroke.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FSelectionAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FSelectionAppearance.FFill.SetColor(c);
        this.FGridCellAppearance.FFill.Assign(this.FSelectionAppearance.FFill);
        this.FGridCellAppearance.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,this.FFill.FColor,25));
        this.FGridCellAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColorTo({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FSelectionAppearance.FFill.SetColorTo(c);
        this.FSelectionAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleTextFontColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FTimeLineAppearance.FLeftFont.SetColor(c);
        this.FTimeLineAppearance.FRightFont.SetColor(c);
        this.FPositionsAppearance.FTopFont.SetColor(c);
        this.FPositionsAppearance.FBottomFont.SetColor(c);
        this.FGroupsAppearance.FTopFont.SetColor(c);
        this.FGroupsAppearance.FBottomFont.SetColor(c);
      };
      this.FGridCellAppearance.FInActiveFill.Assign(this.FFill);
      this.EndUpdate();
    };
    this.ResetToDefaultStyle = function () {
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FFill.SetColor(16777215);
      this.FStroke.SetColor(11119017);
      this.FGridCellAppearance.FVerticalStroke.SetColor(11119017);
      this.FGridCellAppearance.FHorizontalStroke.SetColor(11119017);
      this.FGridCellAppearance.FHorizontalSubStroke.SetColor(13882323);
      this.FGridCellAppearance.FInActiveFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,245,255));
      this.FGridCellAppearance.FDisabledFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,230,230));
      this.FGridCellAppearance.FFill.SetColor(16777215);
      this.FPositionsAppearance.FTopFill.SetColor(16777215);
      this.FPositionsAppearance.FBottomFill.SetColor(16777215);
      this.FPositionsAppearance.FTopStroke.SetColor(11119017);
      this.FPositionsAppearance.FBottomStroke.SetColor(11119017);
      this.FPositionsAppearance.FBottomNavigationButtonFill.SetColor(16777215);
      this.FPositionsAppearance.FBottomNavigationButtonStroke.SetColor(11119017);
      this.FPositionsAppearance.FTopNavigationButtonFill.SetColor(16777215);
      this.FPositionsAppearance.FTopNavigationButtonStroke.SetColor(11119017);
      this.FPositionsAppearance.FBottomNavigationButtonHoverFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,245,255));
      this.FPositionsAppearance.FBottomNavigationButtonHoverStroke.SetColor(11119017);
      this.FPositionsAppearance.FTopNavigationButtonHoverFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,245,255));
      this.FPositionsAppearance.FTopNavigationButtonHoverStroke.SetColor(11119017);
      this.FPositionsAppearance.FBottomNavigationButtonDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(149,213,246));
      this.FPositionsAppearance.FBottomNavigationButtonDownStroke.SetColor(11119017);
      this.FPositionsAppearance.FTopNavigationButtonDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(149,213,246));
      this.FPositionsAppearance.FTopNavigationButtonDownStroke.SetColor(11119017);
      this.FPositionsAppearance.FTopFont.SetColor(8421504);
      this.FPositionsAppearance.FBottomFont.SetColor(8421504);
      this.FGroupsAppearance.FTopFill.SetColor(16777215);
      this.FGroupsAppearance.FBottomFill.SetColor(16777215);
      this.FGroupsAppearance.FTopStroke.SetColor(11119017);
      this.FGroupsAppearance.FBottomStroke.SetColor(11119017);
      this.FGroupsAppearance.FTopFont.SetColor(8421504);
      this.FGroupsAppearance.FBottomFont.SetColor(8421504);
      this.FTimeLineAppearance.FLeftFill.SetColor(16777215);
      this.FTimeLineAppearance.FRightFill.SetColor(16777215);
      this.FTimeLineAppearance.FLeftStroke.SetColor(11119017);
      this.FTimeLineAppearance.FRightStroke.SetColor(11119017);
      this.FTimeLineAppearance.FLeftSubStroke.SetColor(13882323);
      this.FTimeLineAppearance.FRightSubStroke.SetColor(13882323);
      this.FTimeLineAppearance.FLeftFont.SetColor(8421504);
      this.FTimeLineAppearance.FRightFont.SetColor(8421504);
      this.FSelectionAppearance.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(149,213,246));
      this.FSelectionAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FGridCellAppearance.FVerticalStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FGridCellAppearance.FHorizontalStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FGridCellAppearance.FHorizontalSubStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FGridCellAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FGridCellAppearance.FDisabledFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FGridCellAppearance.FInActiveFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FPositionsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FPositionsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FPositionsAppearance.FTopStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FPositionsAppearance.FBottomStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FPositionsAppearance.FTopNavigationButtonFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FPositionsAppearance.FBottomNavigationButtonFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FPositionsAppearance.FTopNavigationButtonStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FPositionsAppearance.FBottomNavigationButtonStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FPositionsAppearance.FTopNavigationButtonHoverFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FPositionsAppearance.FBottomNavigationButtonHoverFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FPositionsAppearance.FTopNavigationButtonHoverStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FPositionsAppearance.FBottomNavigationButtonHoverStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FPositionsAppearance.FTopNavigationButtonDownFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FPositionsAppearance.FBottomNavigationButtonDownFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FPositionsAppearance.FTopNavigationButtonDownStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FPositionsAppearance.FBottomNavigationButtonDownStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FGroupsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FGroupsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FGroupsAppearance.FTopStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FGroupsAppearance.FBottomStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FTimeLineAppearance.FLeftFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FTimeLineAppearance.FRightFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FTimeLineAppearance.FLeftStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FTimeLineAppearance.FRightStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
    };
    this.FixStroke = function (AGraphics) {
      if ((AGraphics.FStroke.FColor === -1) || (AGraphics.FStroke.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) {
        AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        AGraphics.FStroke.SetColor(AGraphics.FFill.FColor);
      };
    };
    this.ProcessNavigationButtonsMove = function (X, Y) {
      var ch = false;
      var tlnb = 0;
      var trnb = 0;
      var blnb = 0;
      var brnb = 0;
      tlnb = this.FTopLeftNavigationButtonState;
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        if (this.FNavigationButtonDown) {
          this.FTopLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown}
         else this.FTopLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover;
      } else if (!pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) this.FTopLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
      trnb = this.FTopRightNavigationButtonState;
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        if (this.FNavigationButtonDown) {
          this.FTopRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown}
         else this.FTopRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover;
      } else if (!pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) this.FTopRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
      blnb = this.FBottomLeftNavigationButtonState;
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        if (this.FNavigationButtonDown) {
          this.FBottomLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown}
         else this.FBottomLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover;
      } else if (!pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) this.FBottomLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
      brnb = this.FBottomRightNavigationButtonState;
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        if (this.FNavigationButtonDown) {
          this.FBottomRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown}
         else this.FBottomRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover;
      } else if (!pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) this.FBottomRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
      ch = (((tlnb !== this.FTopLeftNavigationButtonState) || (trnb !== this.FTopRightNavigationButtonState)) || (blnb !== this.FBottomLeftNavigationButtonState)) || (brnb !== this.FBottomRightNavigationButtonState);
      if (ch) this.Invalidate();
    };
    this.ProcessNavigationButtonsDown = function (X, Y) {
      this.FNavigationButtonDown = false;
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.FNavigationButtonDown = true;
        this.FTopLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown;
      };
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.FNavigationButtonDown = true;
        this.FTopRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown;
      };
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.FNavigationButtonDown = true;
        this.FBottomLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown;
      };
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.FNavigationButtonDown = true;
        this.FBottomRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown;
      };
      if (this.FNavigationButtonDown) this.Invalidate();
    };
    this.ProcessNavigationButtonsUp = function (X, Y) {
      var dtc = 0.0;
      var dtn = 0.0;
      if (this.FNavigationButtonDown) {
        if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) || pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomLeftNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
          dtc = this.FDisplayStartTime;
          dtn = this.GetPreviousDateTime();
          this.HandleDateTimeNavigation($mod.TTMSFNCPlannerNavigationDirection.pndPrevious,dtc,dtn);
        };
        if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetTopRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) || pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetBottomRightNavigationButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
          dtc = this.FDisplayStartTime;
          dtn = this.GetNextDateTime();
          this.HandleDateTimeNavigation($mod.TTMSFNCPlannerNavigationDirection.pndNext,dtc,dtn);
        };
        this.FTopLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
        this.FTopRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
        this.FBottomLeftNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
        this.FBottomRightNavigationButtonState = $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal;
      };
    };
    this.DrawArrow = function (AGraphics, ARect, AArrowKind) {
      var pth = null;
      var s = 0.0;
      AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      AGraphics.FFill.SetColor(8421504);
      AGraphics.FStroke.SetColor(8421504);
      s = 7;
      pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
      var $tmp1 = AArrowKind;
      if ($tmp1 === $mod.TTMSFNCPlannerArrowKind.pakLeft) {
        pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + (((ARect.Right - ARect.Left) - s) / 2)) + s,ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + (((ARect.Right - ARect.Left) - s) / 2),(ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)) + (s / 2)));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + (((ARect.Right - ARect.Left) - s) / 2)) + s,(ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)) + s));
      } else if ($tmp1 === $mod.TTMSFNCPlannerArrowKind.pakRight) {
        pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + (((ARect.Right - ARect.Left) - s) / 2),ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + (((ARect.Right - ARect.Left) - s) / 2)) + s,(ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)) + (s / 2)));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + (((ARect.Right - ARect.Left) - s) / 2),(ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)) + s));
      } else if ($tmp1 === $mod.TTMSFNCPlannerArrowKind.pakUp) {
        pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + (((ARect.Right - ARect.Left) - s) / 2),(ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)) + s));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + (((ARect.Right - ARect.Left) - s) / 2)) + (s / 2),ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + (((ARect.Right - ARect.Left) - s) / 2)) + s,(ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)) + s));
      } else if ($tmp1 === $mod.TTMSFNCPlannerArrowKind.pakDown) {
        pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + (((ARect.Right - ARect.Left) - s) / 2),ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + (((ARect.Right - ARect.Left) - s) / 2)) + (s / 2),(ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)) + s));
        pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + (((ARect.Right - ARect.Left) - s) / 2)) + s,ARect.Top + (((ARect.Bottom - ARect.Top) - s) / 2)));
      };
      pth.ClosePath();
      AGraphics.DrawPath(pth,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon);
      pth = rtl.freeLoc(pth);
    };
    this.UpdateScrollPosition = function (AForce) {
      var cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && !AForce) return;
      cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.DateTimeToCell(this.FTimeLine.GetViewStart(),false));
      var $tmp1 = this.GetDisplayMode();
      if (($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) {}
      else {
        cl.Col = cl.Col + this.PositionToResource(this.FPositions.GetViewStart());
      };
      this.FBlockScrollingUpdate = true;
      var $tmp2 = this.FOrientationMode;
      if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        this.SetVScrollValue(this.GetColPos(cl.Col));
        this.SetHScrollValue(this.GetRowPos(cl.Row));
      } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        this.SetHScrollValue(this.GetColPos(cl.Col));
        this.SetVScrollValue(this.GetRowPos(cl.Row));
      };
      this.FBlockScrollingUpdate = false;
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((AComponent === this.FBitmapContainer) && (Operation === pas.Classes.TOperation.opRemove)) this.FBitmapContainer = null;
      if ((AComponent === this.FAdapter) && (Operation === pas.Classes.TOperation.opRemove)) this.FAdapter = null;
      if ((AComponent === this.FItemEditor) && (Operation === pas.Classes.TOperation.opRemove)) this.FItemEditor = null;
      if ((AComponent === this.FToolBarPopup) && (Operation === pas.Classes.TOperation.opRemove)) this.FToolBarPopup = null;
    };
    this.DoBeforeDrawItemLink = function (AGraphics, AItem, ALinkedItem, ACanDrawLink) {
      if (this.FOnBeforeDrawItemLink != null) this.FOnBeforeDrawItemLink(this,AGraphics,AItem,ALinkedItem,ACanDrawLink);
    };
    this.DoAfterDrawItemLink = function (AGraphics, AItem, ALinkedItem) {
      if (this.FOnAfterDrawItemLink != null) this.FOnAfterDrawItemLink(this,AGraphics,AItem,ALinkedItem);
    };
    this.DoBeforeDrawPositionEmptySpace = function (AGraphics, ARect, ASpace, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawPositionEmptySpace != null) this.FOnBeforeDrawPositionEmptySpace(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ASpace,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawPositionEmptySpace = function (AGraphics, ARect, ASpace) {
      if (this.FOnAfterDrawPositionEmptySpace != null) this.FOnAfterDrawPositionEmptySpace(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ASpace);
    };
    this.DoBeforeDrawGroupEmptySpace = function (AGraphics, ARect, ASpace, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawGroupEmptySpace != null) this.FOnBeforeDrawGroupEmptySpace(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ASpace,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawGroupEmptySpace = function (AGraphics, ARect, ASpace) {
      if (this.FOnAfterDrawGroupEmptySpace != null) this.FOnAfterDrawGroupEmptySpace(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ASpace);
    };
    this.DoBeforeDrawTopNavigationButton = function (AGraphics, ARect, AButton, AButtonState, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawTopNavigationButton != null) this.FOnBeforeDrawTopNavigationButton(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AButton,AButtonState,AAllow,ADefaultDraw);
    };
    this.DoBeforeDrawBottomNavigationButton = function (AGraphics, ARect, AButton, AButtonState, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawBottomNavigationButton != null) this.FOnBeforeDrawBottomNavigationButton(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AButton,AButtonState,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawTopNavigationButton = function (AGraphics, ARect, AButton, AButtonState) {
      if (this.FOnAfterDrawTopNavigationButton != null) this.FOnAfterDrawTopNavigationButton(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AButton,AButtonState);
    };
    this.DoAfterDrawBottomNavigationButton = function (AGraphics, ARect, AButton, AButtonState) {
      if (this.FOnAfterDrawBottomNavigationButton != null) this.FOnAfterDrawBottomNavigationButton(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AButton,AButtonState);
    };
    this.DoBeforeDrawCurrentTimeInTimeLine = function (AGraphics, ARect, AKind, AValue, ACurrentTime, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawCurrentTimeInTimeLine != null) this.FOnBeforeDrawCurrentTimeInTimeLine(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AKind,AValue,ACurrentTime,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawCurrentTimeInTimeLine = function (AGraphics, ARect, AKind, AValue, ACurrentTime) {
      if (this.FOnAfterDrawCurrentTimeInTimeLine != null) this.FOnAfterDrawCurrentTimeInTimeLine(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AKind,AValue,ACurrentTime);
    };
    this.DoBeforeDrawCurrentTimeInGrid = function (AGraphics, ARect, AValue, ACurrentTime, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawCurrentTimeInGrid != null) this.FOnBeforeDrawCurrentTimeInGrid(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ACurrentTime,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawCurrentTimeInGrid = function (AGraphics, ARect, AValue, ACurrentTime) {
      if (this.FOnAfterDrawCurrentTimeInGrid != null) this.FOnAfterDrawCurrentTimeInGrid(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ACurrentTime);
    };
    this.DoBeforeDrawPosition = function (AGraphics, ARect, APosition, AKind, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawPosition != null) this.FOnBeforeDrawPosition(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),APosition,AKind,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawPosition = function (AGraphics, ARect, APosition, AKind) {
      if (this.FOnAfterDrawPosition != null) this.FOnAfterDrawPosition(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),APosition,AKind);
    };
    this.DoBeforeDrawCell = function (AGraphics, ARect, ACol, ARow, AStartTime, AEndTime, APosition, AKind, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawCell != null) this.FOnBeforeDrawCell(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawCell = function (AGraphics, ARect, ACol, ARow, AStartTime, AEndTime, APosition, AKind) {
      if (this.FOnAfterDrawCell != null) this.FOnAfterDrawCell(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind);
    };
    this.DoBeforeDrawCellVerticalLine = function (AGraphics, ARect, ACol, ARow, AStartTime, AEndTime, APosition, AKind, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawCellVerticalLine != null) this.FOnBeforeDrawCellVerticalLine(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawCellVerticalLine = function (AGraphics, ARect, ACol, ARow, AStartTime, AEndTime, APosition, AKind) {
      if (this.FOnAfterDrawCellVerticalLine != null) this.FOnAfterDrawCellVerticalLine(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind);
    };
    this.DoBeforeDrawCellHorizontalLine = function (AGraphics, ARect, ASubUnit, ACol, ARow, ADateTime, APosition, AKind, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawCellHorizontalLine != null) this.FOnBeforeDrawCellHorizontalLine(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ASubUnit,ACol,ARow,ADateTime,APosition,AKind,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawCellHorizontalLine = function (AGraphics, ARect, ASubUnit, ACol, ARow, ADateTime, APosition, AKind) {
      if (this.FOnAfterDrawCellHorizontalLine != null) this.FOnAfterDrawCellHorizontalLine(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ASubUnit,ACol,ARow,ADateTime,APosition,AKind);
    };
    this.DoBeforeDrawGroup = function (AGraphics, ARect, AGroup, AStartPosition, AEndPosition, AKind, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawGroup != null) this.FOnBeforeDrawGroup(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AGroup,AStartPosition,AEndPosition,AKind,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawGroup = function (AGraphics, ARect, AGroup, AStartPosition, AEndPosition, AKind) {
      if (this.FOnAfterDrawGroup != null) this.FOnAfterDrawGroup(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AGroup,AStartPosition,AEndPosition,AKind);
    };
    this.DoBeforeDrawTime = function (AGraphics, ARect, AValue, ARow, AKind, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawTime != null) this.FOnBeforeDrawTime(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ARow,AKind,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawTime = function (AGraphics, ARect, AValue, ARow, AKind) {
      if (this.FOnAfterDrawTime != null) this.FOnAfterDrawTime(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ARow,AKind);
    };
    this.DoBeforeDrawTimeStroke = function (AGraphics, ARect, AValue, ASubUnit, ARow, AKind, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawTimeStroke != null) this.FOnBeforeDrawTimeStroke(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ASubUnit,ARow,AKind,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawTimeStroke = function (AGraphics, ARect, AValue, ASubUnit, ARow, AKind) {
      if (this.FOnAfterDrawTimeStroke != null) this.FOnAfterDrawTimeStroke(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ASubUnit,ARow,AKind);
    };
    this.DoBeforeDrawItem = function (AGraphics, ARect, AItem, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawItem != null) this.FOnBeforeDrawItem(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawItem = function (AGraphics, ARect, AItem) {
      if (this.FOnAfterDrawItem != null) this.FOnAfterDrawItem(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem);
    };
    this.DoBeforeDrawMoveArea = function (AGraphics, ARect, AItem, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawMoveArea != null) this.FOnBeforeDrawMoveArea(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawMoveArea = function (AGraphics, ARect, AItem) {
      if (this.FOnAfterDrawMoveArea != null) this.FOnAfterDrawMoveArea(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem);
    };
    this.DoBeforeDrawSizeArea = function (AGraphics, ARect, AItem, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawSizeArea != null) this.FOnBeforeDrawSizeArea(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawSizeArea = function (AGraphics, ARect, AItem) {
      if (this.FOnAfterDrawSizeArea != null) this.FOnAfterDrawSizeArea(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem);
    };
    this.DoBeforeDrawDeleteArea = function (AGraphics, ARect, AItem, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawDeleteArea != null) this.FOnBeforeDrawDeleteArea(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawDeleteArea = function (AGraphics, ARect, AItem) {
      if (this.FOnAfterDrawDeleteArea != null) this.FOnAfterDrawDeleteArea(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem);
    };
    this.DoBeforeDrawItemTitle = function (AGraphics, ARect, AItem, ATitle, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawItemTitle != null) this.FOnBeforeDrawItemTitle(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,ATitle,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawItemTitle = function (AGraphics, ARect, AItem, ATitle) {
      if (this.FOnAfterDrawItemTitle != null) this.FOnAfterDrawItemTitle(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,ATitle);
    };
    this.DoGetPositionText = function (APosition, AKind, AText) {
      if (this.FOnGetPositionText != null) this.FOnGetPositionText(this,APosition,AKind,AText);
    };
    this.DoBeforeDrawPositionText = function (AGraphics, ARect, APosition, AKind, AText, AAllow) {
      if (this.FOnBeforeDrawPositionText != null) this.FOnBeforeDrawPositionText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),APosition,AKind,AText,AAllow);
    };
    this.DoAfterDrawPositionText = function (AGraphics, ARect, APosition, AKind, AText) {
      if (this.FOnAfterDrawPositionText != null) this.FOnAfterDrawPositionText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),APosition,AKind,AText);
    };
    this.DoGetGroupText = function (AGroup, AKind, AText) {
      if (this.FOnGetGroupText != null) this.FOnGetGroupText(this,AGroup,AKind,AText);
    };
    this.DoBeforeDrawGroupText = function (AGraphics, ARect, AGroup, AStartPosition, AEndPosition, AKind, AText, AAllow) {
      if (this.FOnBeforeDrawGroupText != null) this.FOnBeforeDrawGroupText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AGroup,AStartPosition,AEndPosition,AKind,AText,AAllow);
    };
    this.DoAfterDrawGroupText = function (AGraphics, ARect, AGroup, AStartPosition, AEndPosition, AKind, AText) {
      if (this.FOnAfterDrawGroupText != null) this.FOnAfterDrawGroupText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AGroup,AStartPosition,AEndPosition,AKind,AText);
    };
    this.DoGetTimeText = function (AValue, ARow, ASubUnit, AKind, AText) {
      if (this.FOnGetTimeText != null) this.FOnGetTimeText(this,AValue,ARow,ASubUnit,AKind,AText);
    };
    this.DoBeforeDrawTimeText = function (AGraphics, ARect, AValue, ARow, ASubUnit, AKind, AText, AAllow) {
      if (this.FOnBeforeDrawTimeText != null) this.FOnBeforeDrawTimeText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ARow,ASubUnit,AKind,AText,AAllow);
    };
    this.DoAfterDrawTimeText = function (AGraphics, ARect, AValue, ARow, ASubUnit, AKind, AText) {
      if (this.FOnAfterDrawTimeText != null) this.FOnAfterDrawTimeText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ARow,ASubUnit,AKind,AText);
    };
    this.DoGetItemText = function (AItem, AMode, AText) {
      if (this.FOnGetItemText != null) this.FOnGetItemText(this,AItem,AMode,AText);
    };
    this.DoBeforeDrawItemText = function (AGraphics, ARect, AItem, AText, AAllow) {
      if (this.FOnBeforeDrawItemText != null) this.FOnBeforeDrawItemText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AText,AAllow);
    };
    this.DoAfterDrawItemText = function (AGraphics, ARect, AItem, AText) {
      if (this.FOnAfterDrawItemText != null) this.FOnAfterDrawItemText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AText);
    };
    this.DoGetItemTitleText = function (AItem, AMode, ATitle) {
      if (this.FOnGetItemTitleText != null) this.FOnGetItemTitleText(this,AItem,AMode,ATitle);
    };
    this.DoBeforeDrawItemTitleText = function (AGraphics, ARect, AItem, ATitle, AAllow) {
      if (this.FOnBeforeDrawItemTitleText != null) this.FOnBeforeDrawItemTitleText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,ATitle,AAllow);
    };
    this.DoAfterDrawItemTitleText = function (AGraphics, ARect, AItem, ATitle) {
      if (this.FOnAfterDrawItemTitleText != null) this.FOnAfterDrawItemTitleText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,ATitle);
    };
    this.DoGetCustomContentPanel = function (AItem, AContentPanel) {
      if (this.FItemEditor != null) {
        if (!this.FItemEditor.FCreated) {
          this.FItemEditor.CreateCustomContentPanel();
          this.FItemEditor.FCreated = true;
        };
        this.FItemEditor.GetCustomContentPanel(AItem,AContentPanel);
      };
      if (this.FOnGetCustomContentPanel != null) this.FOnGetCustomContentPanel(this,AItem,AContentPanel);
    };
    this.DoInitializeCustomContentPanel = function (AItem, AContentPanel) {
      if (this.FItemEditor != null) {
        if (!this.FItemEditor.FInitialized) {
          this.FItemEditor.InitializeCustomContentPanel();
          this.FItemEditor.FInitialized = true;
        };
      };
      if (this.FOnInitializeCustomContentPanel != null) this.FOnInitializeCustomContentPanel(this,AItem,AContentPanel);
    };
    this.DoItemToCustomContentPanel = function (AItem, AContentPanel) {
      if (this.FItemEditor != null) this.FItemEditor.ItemToCustomContentPanel(AItem,AContentPanel);
      if (this.FOnItemToCustomContentPanel != null) this.FOnItemToCustomContentPanel(this,AItem,AContentPanel);
    };
    this.DoCustomContentPanelToItem = function (AContentPanel, AItem) {
      if (this.FItemEditor != null) this.FItemEditor.CustomContentPanelToItem(AContentPanel,AItem);
      if (this.FOnCustomContentPanelToItem != null) this.FOnCustomContentPanelToItem(this,AContentPanel,AItem);
    };
    this.DoSelectTime = function (AStartTime, AEndTime, APosition) {
      if (this.FOnSelectTime != null) this.FOnSelectTime(this,AStartTime,AEndTime,APosition);
    };
    this.DoSelectingTime = function (AStartTime, AEndTime, APosition) {
      if (this.FOnSelectingTime != null) this.FOnSelectingTime(this,AStartTime,AEndTime,APosition);
    };
    this.DoSelectCell = function (AStartCell, AEndCell) {
      if (this.FOnSelectCell != null) this.FOnSelectCell(this,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AStartCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AEndCell));
    };
    this.DoSelectingCell = function (AStartCell, AEndCell) {
      if (this.FOnSelectingCell != null) this.FOnSelectingCell(this,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AStartCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AEndCell));
    };
    this.DoIsItemDeletable = function (AItem, ADeletable) {
      if (this.FOnIsItemDeletable != null) this.FOnIsItemDeletable(this,AItem,ADeletable);
    };
    this.DoIsDateTimeDisabled = function (ADateTime, APosition, ADisabled) {
      if (this.FOnIsDateTimeDisabled != null) this.FOnIsDateTimeDisabled(this,ADateTime,APosition,ADisabled);
    };
    this.DoIsDateTimeInActive = function (ADateTime, APosition, AInActive) {
      if (this.FOnIsDateTimeInActive != null) this.FOnIsDateTimeInActive(this,ADateTime,APosition,AInActive);
    };
    this.DoIsDateTimeSub = function (ADateTime, AIsSub) {
      if (this.FOnIsDateTimeSub != null) this.FOnIsDateTimeSub(this,ADateTime,AIsSub);
    };
    this.DoHasDateTimeSub = function (AHasSub) {
      if (this.FOnHasDateTimeSub != null) this.FOnHasDateTimeSub(this,AHasSub);
    };
    this.DoBeforeInsertItem = function (AStartTime, AEndTime, APosition, ATitle, AText, ACanInsert) {
      if (this.FOnBeforeInsertItem != null) this.FOnBeforeInsertItem(this,AStartTime,AEndTime,APosition,ATitle,AText,ACanInsert);
    };
    this.DoAfterInsertItem = function (AStartTime, AEndTime, APosition, AItem) {
      if (this.FOnAfterInsertItem != null) this.FOnAfterInsertItem(this,AStartTime,AEndTime,APosition,AItem);
      if (this.FAdapter != null) this.FAdapter.InsertItem(AItem);
    };
    this.DoBeforeOpenInsertDialog = function (AStartTime, AEndTime, APosition, ACanOpen) {
      if (this.FOnBeforeOpenInsertDialog != null) this.FOnBeforeOpenInsertDialog(this,AStartTime,AEndTime,APosition,ACanOpen);
    };
    this.DoAfterOpenInsertDialog = function (AStartTime, AEndTime, APosition) {
      if (this.FOnAfterOpenInsertDialog != null) this.FOnAfterOpenInsertDialog(this,AStartTime,AEndTime,APosition);
    };
    this.DoBeforeOpenUpdateDialog = function (AStartTime, AEndTime, APosition, AItem, ACanOpen) {
      if (this.FOnBeforeOpenUpdateDialog != null) this.FOnBeforeOpenUpdateDialog(this,AStartTime,AEndTime,APosition,AItem,ACanOpen);
    };
    this.DoAfterOpenUpdateDialog = function (AStartTime, AEndTime, APosition, AItem) {
      if (this.FOnAfterOpenUpdateDialog != null) this.FOnAfterOpenUpdateDialog(this,AStartTime,AEndTime,APosition,AItem);
    };
    this.DoCloseInsertDialog = function (AStartTime, AEndTime, APosition, AItem, ACancelled, ACanClose) {
      if (this.FOnCloseInsertDialog != null) this.FOnCloseInsertDialog(this,AStartTime,AEndTime,APosition,AItem,ACancelled,ACanClose);
    };
    this.DoCloseUpdateDialog = function (AStartTime, AEndTime, APosition, AItem, ACancelled, ACanClose) {
      if (this.FOnCloseUpdateDialog != null) this.FOnCloseUpdateDialog(this,AStartTime,AEndTime,APosition,AItem,ACancelled,ACanClose);
    };
    this.DoBeforeOpenInplaceEditor = function (AStartTime, AEndTime, APosition, AItem, ACanOpen) {
      if (this.FOnBeforeOpenInplaceEditor != null) this.FOnBeforeOpenInplaceEditor(this,AStartTime,AEndTime,APosition,AItem,ACanOpen);
    };
    this.DoAfterOpenInplaceEditor = function (AStartTime, AEndTime, APosition, AItem, AInplaceEditor, AInplaceEditorRect) {
      if (this.FOnAfterOpenInplaceEditor != null) this.FOnAfterOpenInplaceEditor(this,AStartTime,AEndTime,APosition,AItem,AInplaceEditor,new pas["WEBLib.TMSFNCTypes"].TRectF(AInplaceEditorRect));
    };
    this.DoCloseInplaceEditor = function (AStartTime, AEndTime, APosition, AItem, ACancelled, ACanClose) {
      if (this.FOnCloseInplaceEditor != null) this.FOnCloseInplaceEditor(this,AStartTime,AEndTime,APosition,AItem,ACancelled,ACanClose);
    };
    this.DoBeforeUpdateItem = function (AStartTime, AEndTime, APosition, AItem, ATitle, AText, ACanUpdate) {
      if (this.FOnBeforeUpdateItem != null) this.FOnBeforeUpdateItem(this,AStartTime,AEndTime,APosition,AItem,ATitle,AText,ACanUpdate);
    };
    this.DoAfterUpdateItem = function (AStartTime, AEndTime, APosition, AItem) {
      if (this.FOnAfterUpdateItem != null) this.FOnAfterUpdateItem(this,AStartTime,AEndTime,APosition,AItem);
    };
    this.DoItemAnchorClick = function (AItem, AAnchor) {
      if (this.FOnItemAnchorClick != null) {
        this.FOnItemAnchorClick(this,AItem,AAnchor)}
       else if (this.FInteraction.FAutoOpenURL) pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.OpenURL(AAnchor);
    };
    this.CallBeforeMoveLinkedItems = function (AItem, ADiffStartDateTime, ADiffEndDateTime, ADiffResource) {
      var li = null;
      var lio = null;
      var b = false;
      var nst = 0.0;
      var net = 0.0;
      var nrs = 0;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if (AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) {
        nst = lio.FNewStartTime;
        net = lio.FNewEndTime;
        this.GetNewDateTimeAndResource(li,AItem.FLinkType,ADiffStartDateTime,ADiffEndDateTime,{get: function () {
            return nst;
          }, set: function (v) {
            nst = v;
          }},{get: function () {
            return net;
          }, set: function (v) {
            net = v;
          }});
        nrs = this.ResourceToPosition(li.FResource + ADiffResource);
        lio.FCanUpdate = true;
        b = true;
        this.DoBeforeMoveItem(li,{get: function () {
            return nst;
          }, set: function (v) {
            nst = v;
          }},{get: function () {
            return net;
          }, set: function (v) {
            net = v;
          }},{get: function () {
            return nrs;
          }, set: function (v) {
            nrs = v;
          }},{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        lio.FNewStartTime = nst;
        lio.FNewEndTime = net;
        lio.FNewPosition = nrs;
        lio.FCanUpdate = b;
      };
      this.CallBeforeMoveLinkedItems(li,ADiffStartDateTime,ADiffEndDateTime,ADiffResource);
      lio.FUpdatingLinked = false;
    };
    this.CallBeforeSizeLinkedItems = function (AItem, ADiffStartDateTime, ADiffEndDateTime, ADiffResource) {
      var li = null;
      var lio = null;
      var b = false;
      var nst = 0.0;
      var net = 0.0;
      var nrs = 0;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if (AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) {
        nst = lio.FNewStartTime;
        net = lio.FNewEndTime;
        this.GetNewDateTimeAndResource(li,AItem.FLinkType,ADiffStartDateTime,ADiffEndDateTime,{get: function () {
            return nst;
          }, set: function (v) {
            nst = v;
          }},{get: function () {
            return net;
          }, set: function (v) {
            net = v;
          }});
        nrs = this.ResourceToPosition(li.FResource + ADiffResource);
        lio.FCanUpdate = true;
        b = true;
        this.DoBeforeSizeItem(li,{get: function () {
            return nst;
          }, set: function (v) {
            nst = v;
          }},{get: function () {
            return net;
          }, set: function (v) {
            net = v;
          }},{get: function () {
            return nrs;
          }, set: function (v) {
            nrs = v;
          }},{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        lio.FNewStartTime = nst;
        lio.FNewEndTime = net;
        lio.FNewPosition = nrs;
        lio.FCanUpdate = b;
      };
      this.CallBeforeSizeLinkedItems(li,ADiffStartDateTime,ADiffEndDateTime,ADiffResource);
      lio.FUpdatingLinked = false;
    };
    this.CallBeforeUpdateLinkedItems = function (AItem, ADiffStartDateTime, ADiffEndDateTime, ADiffResource) {
      var li = null;
      var lio = null;
      var b = false;
      var nst = 0.0;
      var net = 0.0;
      var nrs = 0;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if (AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) {
        nst = lio.FNewStartTime;
        net = lio.FNewEndTime;
        this.GetNewDateTimeAndResource(li,AItem.FLinkType,ADiffStartDateTime,ADiffEndDateTime,{get: function () {
            return nst;
          }, set: function (v) {
            nst = v;
          }},{get: function () {
            return net;
          }, set: function (v) {
            net = v;
          }});
        nrs = this.ResourceToPosition(li.FResource + ADiffResource);
        lio.FCanUpdate = true;
        b = true;
        this.DoBeforeMoveItem(li,{get: function () {
            return nst;
          }, set: function (v) {
            nst = v;
          }},{get: function () {
            return net;
          }, set: function (v) {
            net = v;
          }},{get: function () {
            return nrs;
          }, set: function (v) {
            nrs = v;
          }},{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        lio.FNewStartTime = nst;
        lio.FNewEndTime = net;
        lio.FNewPosition = nrs;
        lio.FCanUpdate = b;
      };
      this.CallBeforeUpdateLinkedItems(li,ADiffStartDateTime,ADiffEndDateTime,ADiffResource);
      lio.FUpdatingLinked = false;
    };
    this.CallMoveLinkedItems = function (AItem) {
      var li = null;
      var lio = null;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if ((AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) && lio.FCanUpdate) this.DoMoveItem(li,li.FStartTime,li.FEndTime,li.FNewPosition);
      this.CallMoveLinkedItems(li);
      lio.FUpdatingLinked = false;
    };
    this.CallSizeLinkedItems = function (AItem) {
      var li = null;
      var lio = null;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if ((AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) && lio.FCanUpdate) this.DoSizeItem(li,li.FStartTime,li.FEndTime,li.FNewPosition);
      this.CallSizeLinkedItems(li);
      lio.FUpdatingLinked = false;
    };
    this.CallAfterMoveLinkedItems = function (AItem) {
      var li = null;
      var lio = null;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if ((AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) && lio.FCanUpdate) {
        this.DoAfterMoveItem(li,li.FStartTime,li.FEndTime,li.FNewPosition);
        this.DoItemChanged(li);
      };
      lio.FCanUpdate = false;
      this.CallAfterMoveLinkedItems(li);
      lio.FUpdatingLinked = false;
    };
    this.CallAfterSizeLinkedItems = function (AItem) {
      var li = null;
      var lio = null;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if ((AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) && lio.FCanUpdate) {
        this.DoAfterSizeItem(li,li.FStartTime,li.FEndTime,li.FNewPosition);
        this.DoItemChanged(li);
      };
      lio.FCanUpdate = false;
      this.CallAfterSizeLinkedItems(li);
      lio.FUpdatingLinked = false;
    };
    this.CallAfterUpdateLinkedItems = function (AItem) {
      var li = null;
      var lio = null;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      lio = li;
      if (lio.FUpdatingLinked) return;
      lio.FUpdatingLinked = true;
      if ((AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone) && lio.FCanUpdate) {
        this.DoAfterUpdateItem(li.FStartTime,li.FEndTime,li.FNewPosition,li);
        this.DoItemChanged(li);
      };
      lio.FCanUpdate = false;
      this.CallAfterUpdateLinkedItems(li);
      lio.FUpdatingLinked = false;
    };
    this.DoBeforeMoveItem = function (AItem, ANewStartTime, ANewEndTime, ANewPosition, ACanMove) {
      if (this.FOnBeforeMoveItem != null) this.FOnBeforeMoveItem(this,AItem,ANewStartTime,ANewEndTime,ANewPosition,ACanMove);
    };
    this.DoBeforeSizeItem = function (AItem, ANewStartTime, ANewEndTime, ANewPosition, ACanSize) {
      if (this.FOnBeforeSizeItem != null) this.FOnBeforeSizeItem(this,AItem,ANewStartTime,ANewEndTime,ANewPosition,ACanSize);
    };
    this.DoAfterMoveItem = function (AItem, ANewStartTime, ANewEndTime, ANewPosition) {
      if (this.FOnAfterMoveItem != null) this.FOnAfterMoveItem(this,AItem,ANewStartTime,ANewEndTime,ANewPosition);
    };
    this.DoAfterSizeItem = function (AItem, ANewStartTime, ANewEndTime, ANewPosition) {
      if (this.FOnAfterSizeItem != null) this.FOnAfterSizeItem(this,AItem,ANewStartTime,ANewEndTime,ANewPosition);
    };
    this.DoMoveItem = function (AItem, ANewStartTime, ANewEndTime, ANewPosition) {
      if (this.FOnMoveItem != null) this.FOnMoveItem(this,AItem,ANewStartTime,ANewEndTime,ANewPosition);
    };
    this.DoSizeItem = function (AItem, ANewStartTime, ANewEndTime, ANewPosition) {
      if (this.FOnSizeItem != null) this.FOnSizeItem(this,AItem,ANewStartTime,ANewEndTime,ANewPosition);
    };
    this.DoItemChanged = function (AItem) {
      if (this.FOnItemChanged != null) this.FOnItemChanged(this,AItem);
      if (this.FAdapter != null) this.FAdapter.UpdateItem(AItem);
    };
    this.DoAfterItemChanged = function (AItem) {
      if (this.FOnAfterItemChanged != null) this.FOnAfterItemChanged(this,AItem);
      if (this.FAdapter != null) this.FAdapter.AfterUpdateItem(AItem);
    };
    this.DoBeforeSelectItem = function (AItem, ACanSelect) {
      if (this.FOnBeforeSelectItem != null) this.FOnBeforeSelectItem(this,AItem,ACanSelect);
    };
    this.DoBeforeDeleteItem = function (AItem, AMode, ACanDelete) {
      if (this.FOnBeforeDeleteItem != null) this.FOnBeforeDeleteItem(this,AItem,AMode,ACanDelete);
    };
    this.DoBeforeNavigateToDateTime = function (ADirection, ACurrentDateTime, ANewDateTime, AAllow) {
      if (this.FOnBeforeNavigateToDateTime != null) this.FOnBeforeNavigateToDateTime(this,ADirection,ACurrentDateTime,ANewDateTime,AAllow);
    };
    this.DoAfterNavigateToDateTime = function (ADirection, ACurrentDateTime, ANewDateTime) {
      if (this.FOnAfterNavigateToDateTime != null) this.FOnAfterNavigateToDateTime(this,ADirection,ACurrentDateTime,ANewDateTime);
    };
    this.DoAfterSelectItem = function (AItem) {
      if (this.FOnAfterSelectItem != null) this.FOnAfterSelectItem(this,AItem);
      if (this.FAdapter != null) this.FAdapter.SelectItem(AItem);
    };
    this.DoAfterDeleteItem = function (AItemIndex, ADBKey, AMode) {
      if (this.FOnAfterDeleteItem != null) this.FOnAfterDeleteItem(this,AItemIndex,ADBKey,AMode);
    };
    this.DoHScroll = function (APosition) {
      if (this.FOnHScroll != null) this.FOnHScroll(this,APosition);
    };
    this.DoVScroll = function (APosition) {
      if (this.FOnVScroll != null) this.FOnVScroll(this,APosition);
    };
    this.DoBeforeDrawItemHelper = function (AGraphics, ARect, AItem, AIsStartTime, AValue, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawItemHelper != null) this.FOnBeforeDrawItemHelper(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AIsStartTime,AValue,AAllow,ADefaultDraw);
    };
    this.DoBeforeDrawItemHelperText = function (AGraphics, ARect, AItem, AIsStartTime, AValue, AText, AAllow) {
      if (this.FOnBeforeDrawItemHelperText != null) this.FOnBeforeDrawItemHelperText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AIsStartTime,AValue,AText,AAllow);
    };
    this.DoAfterDrawItemHelper = function (AGraphics, ARect, AItem, AIsStartTime, AValue) {
      if (this.FOnAfterDrawItemHelper != null) this.FOnAfterDrawItemHelper(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AIsStartTime,AValue);
    };
    this.DoAfterDrawItemHelperText = function (AGraphics, ARect, AItem, AIsStartTime, AValue, AText) {
      if (this.FOnAfterDrawItemHelperText != null) this.FOnAfterDrawItemHelperText(this,AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,AIsStartTime,AValue,AText);
    };
    this.DoGetItemHelperText = function (AItem, AIsStartTime, AValue, AText) {
      if (this.FOnGetItemHelperText != null) this.FOnGetItemHelperText(this,AItem,AIsStartTime,AValue,AText);
    };
    this.DoGetInplaceEditor = function (AStartTime, AEndTime, APosition, AItem, AInplaceEditorClass) {
      if (this.FOnGetInplaceEditor != null) this.FOnGetInplaceEditor(this,AStartTime,AEndTime,APosition,AItem,AInplaceEditorClass);
    };
    this.CloseInplaceEditor = function (ACancel) {
      var str = "";
      var it = null;
      var sta = 0.0;
      var ste = 0.0;
      var p = 0;
      var b = false;
      var c = false;
      var t = "";
      var n = "";
      if (this.FClosing) return;
      this.FClosing = true;
      if ((this.FUpdateItem >= 0) && (this.FUpdateItem <= (this.FItems.GetCount() - 1))) {
        it = this.FItems.GetItem$1(this.FUpdateItem);
        sta = it.FStartTime;
        ste = it.FEndTime;
        t = it.FTitle;
        n = it.FText;
        p = this.ItemToStartCell(it).Col;
        if (!ACancel) {
          str = "";
          if (pas["WEBLib.StdCtrls"].TEdit.isPrototypeOf(this.FInplaceEditor)) str = rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TEdit).GetText();
          if (pas["WEBLib.StdCtrls"].TComboBox.isPrototypeOf(this.FInplaceEditor)) str = rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TComboBox).GetText();
          if (pas["WEBLib.StdCtrls"].TMemo.isPrototypeOf(this.FInplaceEditor)) str = rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TMemo).GetText();
          var $tmp1 = this.FInteraction.FInplaceEditorMode;
          if (($tmp1 === $mod.TTMSFNCPlannerInplaceEditorMode.piemText) || ($tmp1 === $mod.TTMSFNCPlannerInplaceEditorMode.piemItem)) {
            n = str}
           else if ($tmp1 === $mod.TTMSFNCPlannerInplaceEditorMode.piemTitle) t = str;
          b = true;
          this.DoBeforeUpdateItem(sta,ste,p,it,{get: function () {
              return t;
            }, set: function (v) {
              t = v;
            }},{get: function () {
              return n;
            }, set: function (v) {
              n = v;
            }},{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }});
          if (b) {
            it.FUpdatingLinked = true;
            this.CallBeforeUpdateLinkedItems(it,sta - it.FStartTime,ste - it.FEndTime,this.PositionToResource(p) - it.FResource);
            it.FUpdatingLinked = false;
            it = this.AddOrUpdateItem$1(this.PositionToResource(p),sta,ste,t,n,this.FUpdateItem);
            this.DoAfterUpdateItem(sta,ste,p,it);
            this.DoItemChanged(it);
            it.FUpdatingLinked = true;
            this.CallAfterUpdateLinkedItems(it);
            it.FUpdatingLinked = false;
          };
        };
        c = true;
        this.DoCloseInplaceEditor(sta,ste,p,it,ACancel,{get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }});
        if (c) {
          if (this.FInplaceEditor != null) {
            this.FInplaceEditor.SetParent(null);
            rtl.free(this,"FInplaceEditor");
            this.FInplaceEditor = null;
            this.FInplaceEditorActive = false;
            it.UpdateItem(false,true);
          };
          if (this.CanFocus()) this.SetFocus();
        };
      };
      this.FClosing = false;
    };
    this.Animate = function (Sender) {
      var dx = 0.0;
      var dy = 0.0;
      var posx = 0.0;
      var posy = 0.0;
      var animh = false;
      var animv = false;
      posy = this.GetVScrollValue();
      posx = this.GetHScrollValue();
      dx = Math.abs(this.FScrollHTo - posx) / Math.max(1,Math.abs(this.FSpX) * 6);
      dy = Math.abs(this.FScrollVTo - posy) / Math.max(1,Math.abs(this.FSpY) * 6);
      animv = false;
      if (this.FAnimateVerticalPos) animv = $impl.AnimateDouble({get: function () {
          return posy;
        }, set: function (v) {
          posy = v;
        }},{p: this, get: function () {
          return this.p.FScrollVTo;
        }, set: function (v) {
          this.p.FScrollVTo = v;
        }},dy,0.01);
      animh = false;
      if (this.FAnimateHorizontalPos) animh = $impl.AnimateDouble({get: function () {
          return posx;
        }, set: function (v) {
          posx = v;
        }},{p: this, get: function () {
          return this.p.FScrollHTo;
        }, set: function (v) {
          this.p.FScrollHTo = v;
        }},dx,0.01);
      this.FAnimating = animv || animh;
      if (this.FAnimating) {
        this.Scroll(posx,posy)}
       else {
        this.FAnimateVerticalPos = false;
        this.FAnimateTimer.SetEnabled(false);
        this.FAnimateHorizontalPos = false;
      };
    };
    this.DownTime = function (Sender) {
      this.FDownTime += 1;
      if (this.FDownItem != null) {
        if (this.FDownTime === 100) {
          this.FDownTimer.SetEnabled(false);
          this.FDoItemMove = (this.FDownItem.FMovable && this.AllowMobileMove()) && !this.FInteraction.FReadOnly;
          this.FDrawItemHelpers = true;
          if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
            this.HandleSelectLinkedItems(this.FDownItem,false)}
           else this.HandleSelectItem(this.FDownItem,false);
        };
      } else if (!(this.FDownItem != null)) {
        if ((this.FDownTime === 100) || !this.FInteraction.FTouchScrolling) {
          this.FRangeSelection = true;
          this.FDownTimer.SetEnabled(false);
          if ($impl.IsValidCell(this.FDownCell.Col,this.FDownCell.Row)) {
            this.HandleSelection(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FDownCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FDownCell));
            this.HandleCellSelection(true);
          };
        };
      };
    };
    this.StopAnimationTimer = function () {
      this.FAnimateTimer.SetEnabled(false);
      this.FAnimating = false;
    };
    this.HandleDblClick = function (X, Y) {
      var pf = new pas["WEBLib.TMSFNCTypes"].TPointF();
      var c = null;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleDblClick.apply(this,arguments);
      this.FDblClicked = true;
      pf = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
      this.FDownItem = null;
      this.FDownCacheItemIdx = -1;
      c = this.XYToCacheItem(pf.X,pf.Y);
      if (c != null) {
        this.FDownItem = c.FItem;
        this.FDownCacheItemIdx = this.FDownItem.FCacheList.IndexOf(c);
      };
      if ((((this.FDownItem != null) && this.FDownItem.FEnabled) && (this.FInteraction.FMouseEditMode === $mod.TTMSFNCPlannerMouseEditMode.pmemDoubleClick)) && !this.FInteraction.FReadOnly) this.HandleItemEditing(this.FDownItem,c);
    };
    this.HandleSelection = function (AStartCell, AEndCell) {
      this.HandleSelectItem(null,false);
      AStartCell.Row = Math.max(0,Math.min(AStartCell.Row,this.FRowCount - 1));
      AStartCell.Col = Math.max(0,Math.min(AStartCell.Col,this.FColumnCount - 1));
      AEndCell.Row = Math.max(0,Math.min(AEndCell.Row,this.FRowCount - 1));
      AEndCell.Col = Math.max(0,Math.min(AEndCell.Col,this.FColumnCount - 1));
      this.FPrevSelection = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerSelection(this.FSelection);
      if (AStartCell.Row > AEndCell.Row) {
        this.FSelection.StartCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AEndCell);
        this.FSelection.EndCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AStartCell);
      } else {
        this.FSelection.StartCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AStartCell);
        this.FSelection.EndCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AEndCell);
      };
      if (this.FPrevSelection.StartCell.Row === this.FSelection.StartCell.Row) {
        this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.EndCell),false)}
       else this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.StartCell),false);
    };
    this.HandleCellSelection = function (ASelecting) {
      var p = 0;
      var sta = 0.0;
      var ste = 0.0;
      p = this.FSelection.StartCell.Col;
      sta = this.ValueToDateTime(this.GetRowPos(this.FSelection.StartCell.Row),p,this.FSelection.StartCell.Row);
      ste = this.ValueToDateTime(this.GetRowPos(this.FSelection.EndCell.Row + 1),p,this.FSelection.EndCell.Row + 1);
      if (ASelecting) {
        this.DoSelectingCell(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.StartCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.EndCell));
        this.DoSelectingTime(sta,ste,p);
      } else {
        this.DoSelectCell(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.StartCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.EndCell));
        this.DoSelectTime(sta,ste,p);
      };
    };
    this.HandleDateTimeNavigation = function (ADirection, ACurrentDateTime, ANewDateTime) {
      var b = false;
      b = true;
      this.DoBeforeNavigateToDateTime(ADirection,ACurrentDateTime,{get: function () {
          return ANewDateTime;
        }, set: function (v) {
          ANewDateTime = v;
        }},{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }});
      if (b) {
        var $tmp1 = ADirection;
        if ($tmp1 === $mod.TTMSFNCPlannerNavigationDirection.pndPrevious) {
          this.NavigateToPreviousDateTime(ANewDateTime);
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            this.SetVScrollValue(0)}
           else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.SetHScrollValue(0);
        } else if ($tmp1 === $mod.TTMSFNCPlannerNavigationDirection.pndNext) {
          this.NavigateToNextDateTime(ANewDateTime);
          var $tmp3 = this.FOrientationMode;
          if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            this.SetVScrollValue(this.VerticalScrollBar().FMax)}
           else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.SetHScrollValue(this.HorizontalScrollBar().FMax);
        };
        this.DoAfterNavigateToDateTime(ADirection,ACurrentDateTime,ANewDateTime);
      };
    };
    this.HandleItemInsert = function (ADialog) {
      var p = 0;
      var sta = 0.0;
      var ste = 0.0;
      var ins = false;
      var s = false;
      var it = null;
      var t = "";
      var n = "";
      p = this.FSelection.StartCell.Col;
      sta = this.ValueToDateTime(this.GetRowPos(this.FSelection.StartCell.Row),p,this.FSelection.StartCell.Row);
      ste = this.ValueToDateTime(this.GetRowPos(this.FSelection.EndCell.Row + 1),p,this.FSelection.EndCell.Row + 1);
      if (!ADialog) {
        ins = true;
        t = this.FDefaultItem.FTitle;
        n = this.FDefaultItem.FText;
        if (!this.HasItem(sta,ste,p,-1,true)) {
          this.DoBeforeInsertItem(sta,ste,p,{get: function () {
              return t;
            }, set: function (v) {
              t = v;
            }},{get: function () {
              return n;
            }, set: function (v) {
              n = v;
            }},{get: function () {
              return ins;
            }, set: function (v) {
              ins = v;
            }});
          if (ins) {
            it = this.AddOrUpdateItem$1(this.PositionToResource(p),sta,ste,t,n,-1);
            this.DoAfterInsertItem(sta,ste,p,it);
            s = it.FSelectable && it.FEnabled;
            this.DoBeforeSelectItem(it,{get: function () {
                return s;
              }, set: function (v) {
                s = v;
              }});
            if (s) {
              if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
                this.HandleSelectLinkedItems(it,false)}
               else this.HandleSelectItem(it,false);
              this.DoAfterSelectItem(it);
            };
          };
        };
      } else {
        ins = true;
        this.DoBeforeOpenInsertDialog(sta,ste,p,{get: function () {
            return ins;
          }, set: function (v) {
            ins = v;
          }});
        if (ins) {
          this.OpenEditingDialog(sta,ste,this.PositionToResource(p),this.FDefaultItem.FTitle,this.FDefaultItem.FText,-1,null);
          this.DoAfterOpenInsertDialog(sta,ste,p);
        };
      };
    };
    this.HandleItemDelete = function (AItem, AMode) {
      var b = false;
      var idx = 0;
      var k = "";
      var i = null;
      if (AItem != null) {
        i = AItem.FLinkedItem;
        b = AItem.FDeletable;
        this.DoIsItemDeletable(AItem,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        this.DoBeforeDeleteItem(AItem,AMode,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        if (b) {
          this.FActiveItem = null;
          if (this.FAdapter != null) this.FAdapter.DeleteItem(AItem);
          this.FSelectedItems.Remove(AItem);
          idx = AItem.GetIndex();
          k = AItem.FDBKey;
          this.FItems.Delete(AItem.GetIndex());
          this.UpdateSizeHandlers();
          this.UpdateDeleteHandler();
          this.DoAfterDeleteItem(idx,k,AMode);
        };
        if ((i != null) && this.FInteraction.FAutoDeleteLinkedItems) this.HandleItemDelete(i,AMode);
      };
    };
    this.HandleItemEditing = function (AItem, ACacheItem) {
      var ins = false;
      var sta = 0.0;
      var ste = 0.0;
      var p = 0;
      var t = "";
      var n = "";
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if ((AItem != null) && AItem.FEditable) {
        sta = AItem.FStartTime;
        ste = AItem.FEndTime;
        p = this.ItemToStartCell(AItem).Col;
        var $tmp1 = this.FInteraction.FUpdateMode;
        if ($tmp1 === $mod.TTMSFNCPlannerUpdateMode.pumInplace) {
          ins = true;
          this.DoBeforeOpenInplaceEditor(sta,ste,p,AItem,{get: function () {
              return ins;
            }, set: function (v) {
              ins = v;
            }});
          if (ins) {
            this.FInplaceEditorClass = null;
            this.DoGetInplaceEditor(sta,ste,p,AItem,{p: this, get: function () {
                return this.p.FInplaceEditorClass;
              }, set: function (v) {
                this.p.FInplaceEditorClass = v;
              }});
            if (this.FInplaceEditor != null) {
              rtl.free(this,"FInplaceEditor");
              this.FInplaceEditor = null;
            };
            if (this.FInplaceEditorClass != null) {
              this.FInplaceEditor = this.FInplaceEditorClass.$create("Create$1",[this])}
             else {
              this.FInplaceEditor = $mod.TTMSFNCPlannerMemo.$create("Create$1",[this]);
              this.FInplaceEditor.SetShowFocus(false);
            };
            r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetInplaceEditorRect(ACacheItem,AItem));
            if (this.FInplaceEditor != null) {
              this.FUpdateItem = AItem.GetIndex();
              this.FInplaceEditor.SetParent(this);
              this.FInplaceEditor.SetBoundsRect(new pas.Types.TRect(pas.Types.Bounds(Math.round(r.Left),Math.round(r.Top),Math.round(r.Right - r.Left),Math.round(r.Bottom - r.Top))));
              if (pas["WEBLib.StdCtrls"].TMemo.isPrototypeOf(this.FInplaceEditor)) {
                var $tmp2 = this.FInteraction.FInplaceEditorMode;
                if (($tmp2 === $mod.TTMSFNCPlannerInplaceEditorMode.piemText) || ($tmp2 === $mod.TTMSFNCPlannerInplaceEditorMode.piemItem)) {
                  rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TMemo).FFont.Assign(this.FItemsAppearance.FActiveFont);
                } else if ($tmp2 === $mod.TTMSFNCPlannerInplaceEditorMode.piemTitle) {
                  rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TMemo).FFont.Assign(this.FItemsAppearance.FActiveTitleFont);
                };
              };
              var $tmp3 = this.FInteraction.FInplaceEditorMode;
              if (($tmp3 === $mod.TTMSFNCPlannerInplaceEditorMode.piemText) || ($tmp3 === $mod.TTMSFNCPlannerInplaceEditorMode.piemItem)) {
                n = AItem.FText;
                this.DoGetItemText(AItem,$mod.TTMSFNCPlannerGetTextMode.pgtmEditing,{get: function () {
                    return n;
                  }, set: function (v) {
                    n = v;
                  }});
                if (pas["WEBLib.StdCtrls"].TEdit.isPrototypeOf(this.FInplaceEditor)) rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TEdit).SetText(n);
                if (pas["WEBLib.StdCtrls"].TComboBox.isPrototypeOf(this.FInplaceEditor)) rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TComboBox).SetText(n);
                if (pas["WEBLib.StdCtrls"].TMemo.isPrototypeOf(this.FInplaceEditor)) rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TMemo).SetText(n);
              } else if ($tmp3 === $mod.TTMSFNCPlannerInplaceEditorMode.piemTitle) {
                t = AItem.FTitle;
                this.DoGetItemTitleText(AItem,$mod.TTMSFNCPlannerGetTextMode.pgtmEditing,{get: function () {
                    return t;
                  }, set: function (v) {
                    t = v;
                  }});
                if (pas["WEBLib.StdCtrls"].TEdit.isPrototypeOf(this.FInplaceEditor)) rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TEdit).SetText(n);
                if (pas["WEBLib.StdCtrls"].TComboBox.isPrototypeOf(this.FInplaceEditor)) rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TComboBox).SetText(n);
                if (pas["WEBLib.StdCtrls"].TMemo.isPrototypeOf(this.FInplaceEditor)) rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TMemo).SetText(n);
              };
              if (this.FInplaceEditor.CanFocus()) this.FInplaceEditor.SetFocus();
              if (pas["WEBLib.StdCtrls"].TMemo.isPrototypeOf(this.FInplaceEditor)) rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TMemo).SetSelStart(rtl.as(this.FInplaceEditor,pas["WEBLib.StdCtrls"].TMemo).GetText().length);
              this.FInplaceEditorActive = true;
              AItem.UpdateItem(false,true);
            };
            this.DoAfterOpenInplaceEditor(sta,ste,p,AItem,this.FInplaceEditor,new pas["WEBLib.TMSFNCTypes"].TRectF(r));
          };
        } else if ($tmp1 === $mod.TTMSFNCPlannerUpdateMode.pumDialog) {
          ins = true;
          this.DoBeforeOpenUpdateDialog(sta,ste,p,AItem,{get: function () {
              return ins;
            }, set: function (v) {
              ins = v;
            }});
          if (ins) {
            t = AItem.FTitle;
            this.DoGetItemTitleText(AItem,$mod.TTMSFNCPlannerGetTextMode.pgtmEditing,{get: function () {
                return t;
              }, set: function (v) {
                t = v;
              }});
            n = AItem.FText;
            this.DoGetItemText(AItem,$mod.TTMSFNCPlannerGetTextMode.pgtmEditing,{get: function () {
                return n;
              }, set: function (v) {
                n = v;
              }});
            this.OpenEditingDialog(sta,ste,p,t,n,AItem.GetIndex(),null);
            this.DoAfterOpenUpdateDialog(sta,ste,p,AItem);
          };
        };
      };
    };
    this.ProcessSelection = function (ADirection, AShift, AStepCol, AStepRow) {
      var Self = this;
      var prevk = 0;
      var k = 0;
      var prev = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerSelection();
      function CompareSelection(ASelPrev, ASel) {
        var Result = false;
        Result = (((ASelPrev.StartCell.Col === ASel.StartCell.Col) && (ASelPrev.StartCell.Row === ASel.StartCell.Row)) && (ASelPrev.EndCell.Col === ASel.EndCell.Col)) && (ASelPrev.EndCell.Row === ASel.EndCell.Row);
        return Result;
      };
      k = ADirection;
      if (k !== $mod.TTMSFNCPlannerInteractionDirection.idNone) {
        if (!Self.IsCellDisabled(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(Self.FSelection.StartCell)) && !Self.IsCellDisabled(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(Self.FSelection.EndCell))) {
          prevk = ADirection;
          Self.ProcessNavigation(ADirection,rtl.refSet(AShift),AStepCol,AStepRow);
          while (Self.IsCellDisabled(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(Self.FSelection.StartCell)) || Self.IsCellDisabled(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(Self.FSelection.EndCell))) {
            prev = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerSelection(Self.FSelection);
            Self.ProcessNavigation(k,rtl.refSet(AShift),1,1);
            if (CompareSelection(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerSelection(prev),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerSelection(Self.FSelection))) {
              var $tmp1 = prevk;
              if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) {
                k = $mod.TTMSFNCPlannerInteractionDirection.idRight}
               else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idRight) {
                k = $mod.TTMSFNCPlannerInteractionDirection.idLeft}
               else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idUp) {
                k = $mod.TTMSFNCPlannerInteractionDirection.idDown}
               else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idDown) k = $mod.TTMSFNCPlannerInteractionDirection.idUp;
            };
          };
        };
      };
    };
    this.BuildDisplay = function (ACache, ADisplay) {
      var x = 0.0;
      var y = 0.0;
      var I = 0;
      var cache = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rrt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rrb = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var trl = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var trr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rg = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var grt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var grb = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if ((((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || !(ACache != null)) || !(ADisplay != null)) return;
      ADisplay.Clear();
      x = -this.GetHorizontalScrollPosition();
      y = -this.GetVerticalScrollPosition();
      r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
      grt = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsTopRect());
      grb = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsBottomRect());
      rrt = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
      rrb = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
      trl = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineLeftRect());
      trr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineRightRect());
      for (var $l1 = 0, $end2 = ACache.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        cache = ACache.GetItem$1(I);
        rg = new pas["WEBLib.TMSFNCTypes"].TRectF(cache.FRect);
        var $tmp3 = cache.FKind;
        if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupTop) {
          var $tmp4 = this.FOrientationMode;
          if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rg;
              }, set: function (v) {
                rg = v;
              }},grt.Left,pas.System.Int(y) + grt.Top)}
           else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rg;
            }, set: function (v) {
              rg = v;
            }},pas.System.Int(x) + grt.Left,grt.Top);
        } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupBottom) {
          var $tmp5 = this.FOrientationMode;
          if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rg;
              }, set: function (v) {
                rg = v;
              }},grb.Left - 1,pas.System.Int(y) + grb.Top)}
           else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rg;
            }, set: function (v) {
              rg = v;
            }},pas.System.Int(x) + grb.Left,grb.Top - 1);
        } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionTop) {
          var $tmp6 = this.FOrientationMode;
          if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rg;
              }, set: function (v) {
                rg = v;
              }},rrt.Left,pas.System.Int(y) + rrt.Top)}
           else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rg;
            }, set: function (v) {
              rg = v;
            }},pas.System.Int(x) + rrt.Left,rrt.Top);
        } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionBottom) {
          var $tmp7 = this.FOrientationMode;
          if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rg;
              }, set: function (v) {
                rg = v;
              }},rrb.Left - 1,pas.System.Int(y) + rrb.Top)}
           else if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rg;
            }, set: function (v) {
              rg = v;
            }},pas.System.Int(x) + rrb.Left,rrb.Top - 1);
        } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
          var $tmp8 = this.FOrientationMode;
          if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rg;
              }, set: function (v) {
                rg = v;
              }},pas.System.Int(x) + trl.Left,trl.Top)}
           else if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rg;
            }, set: function (v) {
              rg = v;
            }},trl.Left,pas.System.Int(y) + trl.Top);
        } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) {
          var $tmp9 = this.FOrientationMode;
          if ($tmp9 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rg;
              }, set: function (v) {
                rg = v;
              }},pas.System.Int(x) + trr.Left,trr.Top - 1)}
           else if ($tmp9 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rg;
            }, set: function (v) {
              rg = v;
            }},trr.Left - 1,pas.System.Int(y) + trr.Top);
        } else {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rg;
            }, set: function (v) {
              rg = v;
            }},pas.System.Int(x) + r.Left,pas.System.Int(y) + r.Top);
        };
        cache.FDrawRect = new pas["WEBLib.TMSFNCTypes"].TRectF(rg);
        var $tmp10 = cache.FKind;
        if (($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikItem) || ($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikCell)) {
          if (pas["WEBLib.TMSFNCTypes"].RectIntersectsWithEx(rg,r)) ADisplay.Add(cache);
        } else if ($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionTop) {
          if (pas["WEBLib.TMSFNCTypes"].RectIntersectsWithEx(rg,rrt)) ADisplay.Add(cache);
        } else if ($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionBottom) {
          if (pas["WEBLib.TMSFNCTypes"].RectIntersectsWithEx(rg,rrb)) ADisplay.Add(cache);
        } else if ($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupTop) {
          if (pas["WEBLib.TMSFNCTypes"].RectIntersectsWithEx(rg,grt)) ADisplay.Add(cache);
        } else if ($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupBottom) {
          if (pas["WEBLib.TMSFNCTypes"].RectIntersectsWithEx(rg,grb)) ADisplay.Add(cache);
        } else if ($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
          if (pas["WEBLib.TMSFNCTypes"].RectIntersectsWithEx(rg,trl)) ADisplay.Add(cache);
        } else if ($tmp10 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) {
          if (pas["WEBLib.TMSFNCTypes"].RectIntersectsWithEx(rg,trr)) ADisplay.Add(cache);
        };
      };
    };
    this.UpdateCalculations = function (AForce) {
      var du = 0.0;
      var duoff = 0.0;
      var di = 0.0;
      var y = 0;
      var m = 0;
      var d = 0;
      var h = 0;
      var mn = 0;
      var s = 0;
      var z = 0;
      var ye = 0;
      var me = 0;
      var de = 0;
      var he = 0;
      var mne = 0;
      var se = 0;
      var ze = 0;
      var dt = 0.0;
      var dte = 0.0;
      var I = 0;
      var p = 0;
      var cnt = 0;
      var grp = new $mod.TTMSFNCPlannerDisplayGroup();
      var g = null;
      var conf = null;
      if ((((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || (pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) && !AForce) return;
      this.FCustomDatesList.Clear();
      if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmCustom) {
        for (var $l1 = 0, $end2 = this.FCustomDateTimes.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.FCustomDatesList.Add(this.FCustomDateTimes.GetItem(I));
        };
        this.FCustomDatesList.Sort($impl.CompareDT);
      };
      this.SetColumnCount(this.FPositions.FCount);
      dt = this.FModeSettings.FStartTime;
      dte = this.FModeSettings.FEndTime;
      du = this.GetDisplayUnitValue();
      duoff = this.GetDisplayOffsetValue();
      pas.DateUtils.DecodeDateTime(dt,{get: function () {
          return y;
        }, set: function (v) {
          y = v;
        }},{get: function () {
          return m;
        }, set: function (v) {
          m = v;
        }},{get: function () {
          return d;
        }, set: function (v) {
          d = v;
        }},{get: function () {
          return h;
        }, set: function (v) {
          h = v;
        }},{get: function () {
          return mn;
        }, set: function (v) {
          mn = v;
        }},{get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},{get: function () {
          return z;
        }, set: function (v) {
          z = v;
        }});
      pas.DateUtils.DecodeDateTime(dte,{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return me;
        }, set: function (v) {
          me = v;
        }},{get: function () {
          return de;
        }, set: function (v) {
          de = v;
        }},{get: function () {
          return he;
        }, set: function (v) {
          he = v;
        }},{get: function () {
          return mne;
        }, set: function (v) {
          mne = v;
        }},{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return ze;
        }, set: function (v) {
          ze = v;
        }});
      var $tmp3 = this.GetDisplayMode();
      if ($tmp3 === $mod.TTMSFNCPlannerMode.pmCustom) {
        if (this.FCustomDatesList.GetCount() > 0) {
          this.FDisplayStartTime = this.FCustomDatesList.GetItem(0);
          this.FDisplayEndTime = this.FCustomDatesList.GetItem(this.FCustomDatesList.GetCount() - 1);
        };
      } else if (((($tmp3 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
        this.FDisplayStartTime = pas.SysUtils.EncodeDate(y,m,d);
        this.FDisplayEndTime = pas.SysUtils.EncodeDate(y,m,d);
      } else if (($tmp3 === $mod.TTMSFNCPlannerMode.pmDayPeriod) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) {
        this.FDisplayStartTime = pas.SysUtils.EncodeDate(y,m,d);
        this.FDisplayEndTime = pas.SysUtils.EncodeDate(ye,me,de);
      } else if (($tmp3 === $mod.TTMSFNCPlannerMode.pmMonth) || ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiMonth)) {
        this.FDisplayStartTime = pas.SysUtils.EncodeDate(y,m,1);
        this.FDisplayEndTime = pas.SysUtils.EncodeDate(y,m,1);
      };
      this.FDisplayStart = this.FTimeLine.FDisplayStart;
      this.FDisplayEnd = this.FTimeLine.FDisplayEnd + 1;
      this.FActiveStart = this.FTimeLine.FActiveStart;
      this.FActiveEnd = this.FTimeLine.FActiveEnd;
      di = this.GetMaxDisplayUnitValue();
      if (du > 0) {
        var $tmp4 = this.GetDisplayMode();
        if (((($tmp4 === $mod.TTMSFNCPlannerMode.pmMultiMonth) || ($tmp4 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp4 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp4 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
          this.FDisplayStart = Math.max(0,this.FDisplayStart);
          this.FDisplayEnd = Math.round(Math.min(di,this.FDisplayEnd));
          this.FActiveStart = Math.max(0,this.FActiveStart);
          this.FActiveEnd = Math.round(Math.min(di,this.FActiveEnd));
          if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiMonth) du = 1;
        };
      };
      var $tmp5 = this.GetDisplayMode();
      if (((((($tmp5 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp5 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp5 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp5 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) || ($tmp5 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp5 === $mod.TTMSFNCPlannerMode.pmMultiMonth)) {
        this.FActiveStartTime = this.FDisplayStartTime + (du * this.FActiveStart);
        this.FActiveEndTime = this.FDisplayEndTime + (du * this.FActiveEnd);
        this.FDisplayStartTime = this.FDisplayStartTime + (du * this.FDisplayStart);
        this.FDisplayEndTime = this.FDisplayEndTime + (du * this.FDisplayEnd);
      };
      var $tmp6 = this.GetDisplayMode();
      if (((($tmp6 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp6 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp6 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp6 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) {
        this.FDisplayStartTime = this.FDisplayStartTime + duoff;
        this.FDisplayEndTime = this.FDisplayEndTime + duoff;
        this.FActiveStartTime = this.FActiveStartTime + duoff;
        this.FActiveEndTime = this.FActiveEndTime + duoff;
      };
      this.SetDefaultRowHeight(this.FTimeLine.FDisplayUnitSize);
      this.SetDefaultColumnWidth(this.FPositionsAppearance.FSize);
      if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmCustom) {
        this.SetRowCount(this.FCustomDatesList.GetCount() - 1)}
       else {
        if (du > 0) {
          var $tmp7 = this.GetDisplayMode();
          if ($tmp7 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
            this.SetRowCount(this.FDisplayEnd - this.FDisplayStart)}
           else {
            this.SetRowCount(Math.round((this.FDisplayEndTime - this.FDisplayStartTime) / du));
          };
        } else this.SetRowCount(0);
      };
      this.FDisplayGroups.Clear();
      var $tmp8 = this.GetDisplayMode();
      if ((((((($tmp8 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp8 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp8 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp8 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp8 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp8 === $mod.TTMSFNCPlannerMode.pmMultiMonth)) || ($tmp8 === $mod.TTMSFNCPlannerMode.pmCustom)) {
        for (var $l9 = 0, $end10 = this.FGroups.GetCount() - 1; $l9 <= $end10; $l9++) {
          I = $l9;
          g = this.FGroups.GetItem$1(I);
          grp.StartPosition = Math.max(0,Math.min(g.FStartPosition,this.FColumnCount - 1));
          grp.EndPosition = Math.max(0,Math.min(g.FEndPosition,this.FColumnCount - 1));
          this.FDisplayGroups.Add(new $mod.TTMSFNCPlannerDisplayGroup(grp));
        };
      } else if (($tmp8 === $mod.TTMSFNCPlannerMode.pmMultiResDay) || ($tmp8 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
        if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
          cnt = this.FResources.GetCount();
          p = this.GetNumDays();
        } else {
          cnt = this.GetNumDays();
          p = this.FResources.GetCount();
        };
        for (var $l11 = 0, $end12 = p - 1; $l11 <= $end12; $l11++) {
          I = $l11;
          grp.StartPosition = Math.max(0,Math.min(cnt * I,this.FColumnCount - 1));
          grp.EndPosition = Math.max(0,Math.min((grp.StartPosition + cnt) - 1,this.FColumnCount - 1));
          this.FDisplayGroups.Add(new $mod.TTMSFNCPlannerDisplayGroup(grp));
        };
      };
      this.FConflicts.Clear();
      for (var $l13 = 0, $end14 = this.FColumnCount - 1; $l13 <= $end14; $l13++) {
        I = $l13;
        conf = $mod.TTMSFNCPlannerConflict.$create("Create$1",[this]);
        conf.FNeedsConflictsUpdate = false;
        conf.FPosition = I;
        this.FConflicts.Add$1(conf);
      };
      if (this.FNeedsInitialization) {
        this.FNeedsInitialization = false;
        this.FSelectedItems.Clear();
        this.FActiveItem = null;
        this.FSelection.StartCell.Col = Math.max(0,Math.min(this.FSelection.StartCell.Col,this.FColumnCount - 1));
        this.FSelection.StartCell.Row = Math.max(0,Math.min(this.FSelection.StartCell.Row,this.FRowCount - 1));
        this.FSelection.EndCell.Col = Math.max(0,Math.min(this.FSelection.EndCell.Col,this.FColumnCount - 1));
        this.FSelection.EndCell.Row = Math.max(0,Math.min(this.FSelection.EndCell.Row,this.FRowCount - 1));
      };
    };
    this.RemoveLinkedItem = function (AItem) {
      var I = 0;
      if (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState) return;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (this.FItems.GetItem$1(I).FLinkedItem === AItem) this.FItems.GetItem$1(I).SetLinkedItem(null);
      };
    };
    this.NeedsConflictsUpdate = function (AItem) {
      var I = 0;
      var pos = 0;
      var lst = null;
      if (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState) return;
      if (this.GetUpdateCount() > 0) {
        this.FNeedsConflictsUpdate = true;
        return;
      };
      if (AItem != null) {
        lst = AItem.FOldPositionsList;
        for (var $l1 = 0, $end2 = lst.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          pos = lst.GetItem(I);
          if ((pos >= 0) && (pos <= (this.FConflicts.GetCount() - 1))) this.FConflicts.GetItem$1(pos).FNeedsConflictsUpdate = true;
        };
        lst = AItem.FPositionsList;
        for (var $l3 = 0, $end4 = lst.GetCount() - 1; $l3 <= $end4; $l3++) {
          I = $l3;
          pos = lst.GetItem(I);
          if ((pos >= 0) && (pos <= (this.FConflicts.GetCount() - 1))) this.FConflicts.GetItem$1(pos).FNeedsConflictsUpdate = true;
        };
      } else {
        for (var $l5 = 0, $end6 = this.FConflicts.GetCount() - 1; $l5 <= $end6; $l5++) {
          I = $l5;
          this.FConflicts.GetItem$1(I).FNeedsConflictsUpdate = true;
        };
      };
    };
    this.UpdateAutoSizing = function () {
      if (this.FPositionsAppearance.FStretch) {
        this.StretchColumn(-1,-1)}
       else this.FColumnW.Clear();
      if (this.FTimeLineAppearance.FStretch) {
        this.StretchRow(-1,-1)}
       else this.FRowH.Clear();
    };
    this.UpdateColumnRowCalculations = function () {
      var I = 0;
      var r = 0.0;
      var c = 0.0;
      this.FRowP.Clear();
      r = 0;
      this.SetRowPos(0,r);
      for (var $l1 = 0, $end2 = this.FRowCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        r = r + this.GetRowHeights(I);
        this.SetRowPos(I + 1,r);
      };
      this.FColumnP.Clear();
      c = 0;
      this.SetColPos(0,c);
      for (var $l3 = 0, $end4 = this.FColumnCount - 1; $l3 <= $end4; $l3++) {
        I = $l3;
        c = c + this.GetColWidths(I);
        this.SetColPos(I + 1,c);
      };
      this.FTotalColumnWidth = c;
      this.FTotalRowHeight = r;
    };
    this.UpdatePositionsCache = function () {
      this.UpdatePositionCache(this.FPositionsTopCache);
      this.UpdatePositionCache(this.FPositionsBottomCache);
      this.UpdatePositionsDisplay();
    };
    this.UpdatePositionCache = function (ACache) {
      var w = 0.0;
      var h = 0.0;
      var bmpw = 0.0;
      var bmph = 0.0;
      var bw = 0.0;
      var bh = 0.0;
      var bmp = null;
      var rt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var c = 0;
      var dx = 0.0;
      var offsetx = 0.0;
      var ac = 0;
      var rc = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cnt = 0;
      var cache = null;
      var bmpvalid = false;
      var g = null;
      if (((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || !(ACache != null)) return;
      ACache.Clear();
      if ($mod.TTMSFNCPlannerPositionsTopCache.isPrototypeOf(ACache) && (!($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts) || (this.FPositionsAppearance.FTopSize <= 0))) return;
      if ($mod.TTMSFNCPlannerPositionsBottomCache.isPrototypeOf(ACache) && (!($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts) || (this.FPositionsAppearance.FBottomSize <= 0))) return;
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        h = this.GetTotalColumnWidth();
        if ($mod.TTMSFNCPlannerPositionsTopCache.isPrototypeOf(ACache)) {
          w = this.GetPositionsTopSize() + 1}
         else w = this.GetPositionsBottomSize() + 1;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        w = this.GetTotalColumnWidth();
        if ($mod.TTMSFNCPlannerPositionsTopCache.isPrototypeOf(ACache)) {
          h = this.GetPositionsTopSize() + 1}
         else h = this.GetPositionsBottomSize() + 1;
      } else {
        w = 0;
        h = 0;
      };
      offsetx = 0;
      bmpw = 0;
      bmph = 0;
      ac = 0;
      c = 0;
      dx = 0;
      bmpvalid = false;
      cnt = this.FColumnCount - 1;
      while (bmpw < w) {
        if (this.FPositionsCaching) {
          bw = Math.min(w - bmpw,this.GetCacheWidth())}
         else bw = w;
        while (bmph < h) {
          if (this.FPositionsCaching) {
            bh = Math.min(h - bmph,this.GetCacheHeight())}
           else bh = h;
          bmp = null;
          if (this.FPositionsCaching) bmpvalid = this.CreateAndPrepareBitmap({get: function () {
              return bmp;
            }, set: function (v) {
              bmp = v;
            }},bw,bh);
          g = null;
          if (bmpvalid) g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
          rt = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bw,bh));
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            dx = rt.Top + offsetx}
           else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) dx = rt.Left + offsetx;
          for (var $l3 = ac, $end4 = cnt; $l3 <= $end4; $l3++) {
            c = $l3;
            var $tmp5 = this.FOrientationMode;
            if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              rc.Left = pas.System.Int(rt.Left) + 0.5;
              rc.Right = pas.System.Int(rt.Right) - 0.5;
              rc.Top = pas.System.Int(dx) + 0.5;
              dx = dx + this.GetColWidths(c);
              rc.Bottom = pas.System.Int(dx) + 0.5;
            } else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
              rc.Top = pas.System.Int(rt.Top) + 0.5;
              rc.Bottom = pas.System.Int(rt.Bottom) - 0.5;
              rc.Left = pas.System.Int(dx) + 0.5;
              dx = dx + this.GetColWidths(c);
              rc.Right = pas.System.Int(dx) + 0.5;
            };
            if (this.FPositionsCaching) {
              if (bmpvalid) {
                if ($mod.TTMSFNCPlannerPositionsTopCache.isPrototypeOf(ACache)) {
                  this.DrawPosition(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),c,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionTop)}
                 else this.DrawPosition(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),c,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionBottom);
              };
            } else {
              pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                  return rc;
                }, set: function (v) {
                  rc = v;
                }},bmpw,bmph);
              if ($mod.TTMSFNCPlannerPositionsTopCache.isPrototypeOf(ACache)) {
                ACache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreatePositionTop(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),c))}
               else ACache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreatePositionBottom(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),c));
            };
            var $tmp6 = this.FOrientationMode;
            if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              if (dx > (rt.Bottom - rt.Top)) {
                ac = c;
                offsetx = -this.GetColWidths(c) - (bh - dx);
                break;
              };
            } else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
              if (dx > (rt.Right - rt.Left)) break;
            };
          };
          if (this.FPositionsCaching) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rt;
              }, set: function (v) {
                rt = v;
              }},bmpw,bmph);
            if (bmpvalid) {
              if (g != null) g = rtl.freeLoc(g);
            };
            if ($mod.TTMSFNCPlannerPositionsTopCache.isPrototypeOf(ACache)) {
              cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionTop,-1)}
             else cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionBottom,-1);
            ACache.Add$1(cache);
          };
          bmph = bmph + bh;
        };
        bmpw = bmpw + bw;
        bmph = 0;
        var $tmp7 = this.FOrientationMode;
        if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          ac = c;
          offsetx = -this.GetColWidths(c) - (bw - dx);
        };
      };
    };
    this.UpdateGroupsCache = function () {
      this.UpdateGroupCache(this.FGroupsTopCache);
      this.UpdateGroupCache(this.FGroupsBottomCache);
      this.UpdateGroupsDisplay();
    };
    this.UpdateGroupCache = function (ACache) {
      var w = 0.0;
      var h = 0.0;
      var I = 0;
      var grp = new $mod.TTMSFNCPlannerDisplayGroup();
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var x = 0.0;
      var y = 0.0;
      var bw = 0.0;
      var bh = 0.0;
      var rt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rc = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bmp = null;
      var g = null;
      var cache = null;
      var bmpvalid = false;
      if (((((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || (this.FColumnCount === 0)) || (this.FDisplayGroups.GetCount() === 0)) || !(ACache != null)) return;
      ACache.Clear();
      if ($mod.TTMSFNCPlannerGroupsTopCache.isPrototypeOf(ACache) && (!($mod.TTMSFNCPlannerGroupLayout.pglTop in this.FGroupsAppearance.FLayouts) || (this.FGroupsAppearance.FTopSize <= 0))) return;
      if ($mod.TTMSFNCPlannerGroupsBottomCache.isPrototypeOf(ACache) && (!($mod.TTMSFNCPlannerGroupLayout.pglBottom in this.FGroupsAppearance.FLayouts) || (this.FGroupsAppearance.FBottomSize <= 0))) return;
      bmpvalid = false;
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        h = cr.Bottom - cr.Top;
        if ($mod.TTMSFNCPlannerGroupsTopCache.isPrototypeOf(ACache)) {
          w = this.GetGroupsTopSize() + 1}
         else w = this.GetGroupsBottomSize() + 1;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        w = cr.Right - cr.Left;
        if ($mod.TTMSFNCPlannerGroupsTopCache.isPrototypeOf(ACache)) {
          h = this.GetGroupsTopSize() + 1}
         else h = this.GetGroupsBottomSize() + 1;
      } else {
        w = 0;
        h = 0;
      };
      for (var $l2 = 0, $end3 = this.FDisplayGroups.GetCount() - 1; $l2 <= $end3; $l2++) {
        I = $l2;
        grp = new $mod.TTMSFNCPlannerDisplayGroup(this.FDisplayGroups.GetItem(I));
        var $tmp4 = this.FOrientationMode;
        if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          x = 0;
          y = pas.System.Int(this.GetColPos(grp.StartPosition));
          bw = w;
          bh = pas.System.Int(this.GetColPos(grp.EndPosition + 1) - y);
        } else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          y = 0;
          x = pas.System.Int(this.GetColPos(grp.StartPosition));
          bh = h;
          bw = pas.System.Int(this.GetColPos(grp.EndPosition + 1) - x);
        } else {
          bw = 0;
          bh = 0;
          x = 0;
          y = 0;
        };
        if ((bw <= 0) || (bh <= 0)) continue;
        rt = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bw,bh));
        bmp = null;
        if (this.FGroupsCaching) bmpvalid = this.CreateAndPrepareBitmap({get: function () {
            return bmp;
          }, set: function (v) {
            bmp = v;
          }},bw,bh);
        g = null;
        if (bmpvalid) g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
        var $tmp5 = this.FOrientationMode;
        if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          rc.Left = pas.System.Int(rt.Left) + 0.5;
          rc.Right = pas.System.Int(rt.Right) - 0.5;
          rc.Top = pas.System.Int(rt.Top) + 0.5;
          rc.Bottom = pas.System.Int(rt.Bottom) + 0.5;
        } else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          rc.Top = pas.System.Int(rt.Top) + 0.5;
          rc.Bottom = pas.System.Int(rt.Bottom) - 0.5;
          rc.Left = pas.System.Int(rt.Left) + 0.5;
          rc.Right = pas.System.Int(rt.Right) + 0.5;
        };
        if (this.FGroupsCaching) {
          if (bmpvalid) {
            if ($mod.TTMSFNCPlannerGroupsTopCache.isPrototypeOf(ACache)) {
              this.DrawGroup(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),I,grp.StartPosition,grp.EndPosition,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupTop)}
             else this.DrawGroup(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),I,grp.StartPosition,grp.EndPosition,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupBottom);
            if (g != null) g = rtl.freeLoc(g);
          };
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rt;
            }, set: function (v) {
              rt = v;
            }},x,y);
          if ($mod.TTMSFNCPlannerGroupsTopCache.isPrototypeOf(ACache)) {
            cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupTop,-1)}
           else cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupBottom,-1);
          cache.FGroup = I;
          ACache.Add$1(cache);
        } else {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
              return rc;
            }, set: function (v) {
              rc = v;
            }},x,y);
          if ($mod.TTMSFNCPlannerGroupsTopCache.isPrototypeOf(ACache)) {
            cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateGroupTop(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),I,grp.StartPosition,grp.EndPosition)}
           else cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateGroupBottom(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),I,grp.StartPosition,grp.EndPosition);
          ACache.Add$1(cache);
        };
      };
    };
    this.UpdateTimeLinesCache = function () {
      this.UpdateTimeLineCache(this.FTimeLineLeftCache);
      this.UpdateTimeLineCache(this.FTimeLineRightCache);
      this.UpdateTimeLineDisplay();
    };
    this.UpdateTimeLineCache = function (ACache) {
      var w = 0.0;
      var h = 0.0;
      var bmpw = 0.0;
      var bmph = 0.0;
      var bw = 0.0;
      var bh = 0.0;
      var bmp = null;
      var rt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var r = 0;
      var dy = 0.0;
      var offsety = 0.0;
      var ar = 0;
      var rc = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cnt = 0;
      var dt = 0.0;
      var bmpvalid = false;
      var du = 0.0;
      var g = null;
      if (((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || !(ACache != null)) return;
      ACache.Clear();
      if ($mod.TTMSFNCPlannerTimeLineLeftCache.isPrototypeOf(ACache) && (!($mod.TTMSFNCPlannerTimeLineLayout.ptlLeft in this.FTimeLineAppearance.FLayouts) || (this.FTimeLineAppearance.FLeftSize <= 0))) return;
      if ($mod.TTMSFNCPlannerTimeLineRightCache.isPrototypeOf(ACache) && (!($mod.TTMSFNCPlannerTimeLineLayout.ptlRight in this.FTimeLineAppearance.FLayouts) || (this.FTimeLineAppearance.FRightSize <= 0))) return;
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        w = this.GetTotalRowHeight();
        if ($mod.TTMSFNCPlannerTimeLineLeftCache.isPrototypeOf(ACache)) {
          h = this.GetTimeLineLeftSize() + 1}
         else h = this.GetTimeLineRightSize() + 1;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        h = this.GetTotalRowHeight();
        if ($mod.TTMSFNCPlannerTimeLineLeftCache.isPrototypeOf(ACache)) {
          w = this.GetTimeLineLeftSize() + 1}
         else w = this.GetTimeLineRightSize() + 1;
      } else {
        w = 0;
        h = 0;
      };
      bmpvalid = false;
      offsety = 0;
      bmpw = 0;
      bmph = 0;
      ar = 0;
      r = 0;
      dy = 0;
      cnt = this.FRowCount - 1;
      while (bmpw < w) {
        if (this.FTimeLineCaching) {
          bw = Math.min(w - bmpw,this.GetCacheWidth())}
         else bw = w;
        while (bmph < h) {
          if (this.FTimeLineCaching) {
            bh = Math.min(h - bmph,this.GetCacheHeight())}
           else bh = h;
          bmp = null;
          if (this.FTimeLineCaching) bmpvalid = this.CreateAndPrepareBitmap({get: function () {
              return bmp;
            }, set: function (v) {
              bmp = v;
            }},bw,bh);
          g = null;
          if (bmpvalid) g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
          rt = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bw,bh));
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            dy = rt.Left + offsety}
           else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) dy = rt.Top + offsety;
          var $tmp3 = this.GetDisplayMode();
          if ($tmp3 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
            dt = this.FDisplayStart + 1;
            du = 1;
          } else {
            dt = this.FDisplayStartTime;
            du = this.GetDisplayUnitValue();
          };
          dt = dt + (ar * du);
          for (var $l4 = ar, $end5 = cnt; $l4 <= $end5; $l4++) {
            r = $l4;
            if (((this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmCustom) && (r >= 0)) && (r <= (this.FCustomDatesList.GetCount() - 1))) dt = this.FCustomDatesList.GetItem(r);
            var $tmp6 = this.FOrientationMode;
            if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              rc.Top = pas.System.Int(rt.Top) + 0.5;
              rc.Bottom = pas.System.Int(rt.Bottom) - 0.5;
              rc.Left = pas.System.Int(dy) + 0.5;
              dy = dy + this.GetRowHeights(r);
              if (r === cnt) {
                rc.Right = pas.System.Int(dy) - 0.5}
               else rc.Right = pas.System.Int(dy) + 0.5;
            } else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
              rc.Left = pas.System.Int(rt.Left) + 0.5;
              rc.Right = pas.System.Int(rt.Right) - 0.5;
              rc.Top = pas.System.Int(dy) + 0.5;
              dy = dy + this.GetRowHeights(r);
              if (r === cnt) {
                rc.Bottom = pas.System.Int(dy) - 0.5}
               else rc.Bottom = pas.System.Int(dy) + 0.5;
            };
            if (this.FTimeLineCaching) {
              if (bmpvalid) {
                if ($mod.TTMSFNCPlannerTimeLineLeftCache.isPrototypeOf(ACache)) {
                  this.DrawTime(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),dt,r,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft)}
                 else this.DrawTime(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),dt,r,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight);
              };
            } else {
              pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                  return rc;
                }, set: function (v) {
                  rc = v;
                }},bmpw,bmph);
              if ($mod.TTMSFNCPlannerTimeLineLeftCache.isPrototypeOf(ACache)) {
                ACache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateTimeLineLeft(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),dt,r))}
               else ACache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateTimeLineRight(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),dt,r));
            };
            var $tmp7 = this.FOrientationMode;
            if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              if (dy > (rt.Right - rt.Left)) break;
            } else if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
              if (dy > (rt.Bottom - rt.Top)) {
                ar = r;
                offsety = -this.GetRowHeights(r) - (bh - dy);
                break;
              };
            };
            if (this.GetDisplayMode() !== $mod.TTMSFNCPlannerMode.pmCustom) dt = dt + du;
          };
          if (this.FTimeLineCaching) {
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                return rt;
              }, set: function (v) {
                rt = v;
              }},bmpw,bmph);
            if (bmpvalid) {
              if (g != null) g = rtl.freeLoc(g);
            };
            if ($mod.TTMSFNCPlannerTimeLineLeftCache.isPrototypeOf(ACache)) {
              ACache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft,-1))}
             else ACache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight,-1));
          };
          bmph = bmph + bh;
        };
        bmpw = bmpw + bw;
        bmph = 0;
        var $tmp8 = this.FOrientationMode;
        if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          ar = r;
          offsety = -this.GetRowHeights(r) - (bw - dy);
        };
      };
    };
    this.UpdateGridCache = function () {
      var w = 0.0;
      var h = 0.0;
      var bmpw = 0.0;
      var bmph = 0.0;
      var bw = 0.0;
      var bh = 0.0;
      var offh = 0.0;
      var offw = 0.0;
      var bmp = null;
      var rt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var c = 0;
      var r = 0;
      var dx = 0.0;
      var dy = 0.0;
      var sdx = 0.0;
      var offsetx = 0.0;
      var offsety = 0.0;
      var ac = 0;
      var ar = 0;
      var rc = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rcnt = 0;
      var ccnt = 0;
      var bmpvalid = false;
      var dt = 0.0;
      var dte = 0.0;
      var p = 0;
      var g = null;
      if (((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || !(this.FGridCache != null)) return;
      this.FGridCache.Clear();
      if (this.FColumnCount > 0) {
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          h = this.GetTotalColumnWidth();
          w = this.GetTotalRowHeight();
        } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          w = this.GetTotalColumnWidth();
          h = this.GetTotalRowHeight();
        } else {
          w = 0;
          h = 0;
        };
        bmpvalid = false;
        offsetx = 0;
        offsety = 0;
        bmpw = 0;
        bmph = 0;
        ac = 0;
        ar = 0;
        dx = 0;
        dy = 0;
        c = 0;
        r = 0;
        var $tmp2 = this.FOrientationMode;
        if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          ccnt = this.FRowCount - 1;
          rcnt = this.FColumnCount - 1;
        } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          rcnt = this.FRowCount - 1;
          ccnt = this.FColumnCount - 1;
        } else {
          ccnt = 0;
          rcnt = 0;
        };
        while (bmpw < w) {
          if (this.FGridCaching) {
            bw = Math.min(w - bmpw,this.GetCacheWidth());
            offw = bmpw;
          } else {
            bw = w;
            offw = 0;
          };
          while (bmph < h) {
            if (this.FGridCaching) {
              bh = Math.min(h - bmph,this.GetCacheHeight());
              offh = bmph;
            } else {
              bh = h;
              offh = 0;
            };
            bmp = null;
            if (this.FGridCaching) bmpvalid = this.CreateAndPrepareBitmap({get: function () {
                return bmp;
              }, set: function (v) {
                bmp = v;
              }},bw,bh);
            g = null;
            if (bmpvalid) g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
            rt = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bw,bh));
            dx = rt.Left + offsetx;
            for (var $l3 = ac, $end4 = ccnt; $l3 <= $end4; $l3++) {
              c = $l3;
              sdx = dx;
              rc.Left = pas.System.Int(dx) + 0.5;
              var $tmp5 = this.FOrientationMode;
              if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                dx = dx + this.GetRowHeights(c)}
               else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) dx = dx + this.GetColWidths(c);
              rc.Right = pas.System.Int(dx) + 0.5;
              dy = rt.Top + offsety;
              for (var $l6 = ar, $end7 = rcnt; $l6 <= $end7; $l6++) {
                r = $l6;
                var $tmp8 = this.FOrientationMode;
                if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  dt = this.ValueToDateTime(sdx + offw,r,c)}
                 else if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                  dt = this.ValueToDateTime(dy + offh,c,r)}
                 else {
                  dt = 0;
                };
                rc.Top = pas.System.Int(dy) + 0.5;
                var $tmp9 = this.FOrientationMode;
                if ($tmp9 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  dy = dy + this.GetColWidths(r)}
                 else if ($tmp9 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) dy = dy + this.GetRowHeights(r);
                rc.Bottom = pas.System.Int(dy) + 0.5;
                var $tmp10 = this.FOrientationMode;
                if ($tmp10 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  dte = this.ValueToDateTime(dx + offw,r,c)}
                 else if ($tmp10 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                  dte = this.ValueToDateTime(dy + offh,c,r)}
                 else {
                  dte = 0;
                };
                var $tmp11 = this.FOrientationMode;
                if ($tmp11 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  p = r}
                 else if ($tmp11 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                  p = c}
                 else {
                  p = 0;
                };
                if (this.FGridCaching) {
                  if (bmpvalid) {
                    var $tmp12 = this.FOrientationMode;
                    if ($tmp12 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                      this.DrawCell(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),r,c,dt,dte,p,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikCell)}
                     else if ($tmp12 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.DrawCell(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),c,r,dt,dte,p,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikCell);
                  };
                } else {
                  pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                      return rc;
                    }, set: function (v) {
                      rc = v;
                    }},bmpw,bmph);
                  var $tmp13 = this.FOrientationMode;
                  if ($tmp13 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                    this.FGridCache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCell(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),r,c,dt,dte,p))}
                   else if ($tmp13 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.FGridCache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCell(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),c,r,dt,dte,p));
                };
                if (dy > (rt.Bottom - rt.Top)) break;
              };
              if (dx > (rt.Right - rt.Left)) break;
            };
            if (this.FGridCaching) {
              pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                  return rt;
                }, set: function (v) {
                  rt = v;
                }},bmpw,bmph);
              if (bmpvalid) {
                if (g != null) g = rtl.freeLoc(g);
              };
              this.FGridCache.Add$1(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikCell,-1));
            };
            bmph = bmph + bh;
            ar = r;
            var $tmp14 = this.FOrientationMode;
            if ($tmp14 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              offsety = -this.GetColWidths(r) - (bh - dy)}
             else if ($tmp14 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) offsety = -this.GetRowHeights(r) - (bh - dy);
          };
          bmpw = bmpw + bw;
          bmph = 0;
          ar = 0;
          ac = c;
          offsety = 0;
          var $tmp15 = this.FOrientationMode;
          if ($tmp15 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            offsetx = -this.GetRowHeights(c) - (bw - dx)}
           else if ($tmp15 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) offsetx = -this.GetColWidths(c) - (bw - dx);
        };
      };
      this.UpdateGridDisplay();
    };
    this.UpdateItemCache = function () {
      var ri = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var bmp = null;
      var rt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cp = 0;
      var bw = 0.0;
      var bh = 0.0;
      var isz = 0.0;
      var ispos = 0.0;
      var x = 0.0;
      var y = 0.0;
      var it = null;
      var rc = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cache = null;
      var cw = 0.0;
      var ch = 0.0;
      var I = 0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var hs = 0.0;
      var vs = 0.0;
      var bmpvalid = false;
      var std = 0.0;
      var etd = 0.0;
      var sta = 0.0;
      var ste = 0.0;
      var stadr = 0.0;
      var stedr = 0.0;
      var K = 0;
      var g = null;
      if (((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || !(this.FItemCache != null)) return;
      if (this.FColumnCount > 0) {
        cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
        hs = this.GetHorizontalScrollPosition();
        vs = this.GetVerticalScrollPosition();
        bmpvalid = false;
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          cw = this.GetTotalRowHeight();
          ch = this.GetTotalColumnWidth();
        } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          ch = this.GetTotalRowHeight();
          cw = this.GetTotalColumnWidth();
        } else {
          cw = 0;
          ch = 0;
        };
        for (var $l2 = 0, $end3 = this.FItems.GetCount() - 1; $l2 <= $end3; $l2++) {
          I = $l2;
          it = this.FItems.GetItem$1(I);
          for (var $l4 = it.FCleanupList.GetCount() - 1; $l4 >= 0; $l4--) {
            K = $l4;
            this.RemoveItemsFromCache(it.FCacheList,it.FCleanupList.GetItem(K));
            it.FCleanupList.Delete(K);
          };
          if (!this.IsValidItem(it)) {
            this.RemoveItemsFromCache(it.FCacheList,-1);
            continue;
          };
          if (!(this.FItemCachingMode === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerItemCachingMode.picmDelayedCaching)) {
            if (it.FDirtyList.GetCount() === 0) {
              continue}
             else this.RemoveItemsFromCache(it.FCacheList,-1);
          };
          sta = it.FStartTime;
          ste = it.FEndTime;
          for (var $l5 = it.FDirtyList.GetCount() - 1; $l5 >= 0; $l5--) {
            K = $l5;
            cp = it.FDirtyList.GetItem(K);
            if ((cp >= 0) && (cp <= (this.FColumnCount - 1))) {
              ispos = this.GetColPos(cp);
              isz = this.GetColPos(cp + 1) - ispos;
              if ((K >= 0) && (K <= (it.FConflictsList.GetCount() - 1))) {
                if (it.FConflictsList.GetItem(K) > 0) isz = isz / it.FConflictsList.GetItem(K);
              };
              if ((K >= 0) && (K <= (it.FConflictsPosList.GetCount() - 1))) ispos = ispos + (isz * it.FConflictsPosList.GetItem(K));
              stadr = this.MaxPositionDateTime(sta,false,cp);
              stedr = this.MaxPositionDateTime(ste,true,cp);
              std = this.DateTimeToValue(stadr,false,true);
              if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
                if (Math.abs(stedr - stadr) >= 1) {
                  etd = this.DateTimeToValue(stedr,true,true)}
                 else etd = this.DateTimeToValue(stedr,false,true);
              } else etd = this.DateTimeToValue(stedr,true,true);
              var $tmp6 = this.FOrientationMode;
              if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                y = pas.math.Floor(ispos);
                x = Math.round(std);
                bw = Math.round(etd - std);
                bh = Math.max(1,Math.round(isz - this.FItemsAppearance.FGap));
              } else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                x = pas.math.Floor(ispos);
                y = Math.round(std);
                bh = Math.round(etd - std);
                bw = Math.max(1,Math.round(isz - this.FItemsAppearance.FGap));
              } else {
                x = 0;
                y = 0;
                bw = 0;
                bh = 0;
              };
              if ((bw <= 0) || (bh <= 0)) {
                this.RemoveItemsFromCache(it.FCacheList,cp);
                continue;
              };
              ri = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(x,y,x + bw,y + bh));
              pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                  return ri;
                }, set: function (v) {
                  ri = v;
                }},cr.Left,cr.Top);
              pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                  return ri;
                }, set: function (v) {
                  ri = v;
                }},-hs,-vs);
              if (this.FItemCachingMode === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerItemCachingMode.picmDelayedCaching) {
                if (!pas["WEBLib.TMSFNCTypes"].IntersectRectEx(ri,cr)) {
                  if (~it.FDirtyList.IndexOf(cp) > -1) it.FDirtyList.Add(cp);
                  this.RemoveItemsFromCache(it.FCacheList,cp);
                  continue;
                } else if (~it.FDirtyList.IndexOf(cp) > -1) {
                  continue}
                 else this.RemoveItemsFromCache(it.FCacheList,cp);
              };
              rt = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bw,bh));
              rc = new pas["WEBLib.TMSFNCTypes"].TRectF(rt);
              bmp = null;
              if (this.FItemCachingMode !== pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerItemCachingMode.picmNoCaching) bmpvalid = this.CreateAndPrepareBitmap({get: function () {
                  return bmp;
                }, set: function (v) {
                  bmp = v;
                }},bw,bh);
              g = null;
              if (bmpvalid) g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
              pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                  return rc;
                }, set: function (v) {
                  rc = v;
                }},-0.5,-0.5);
              rc.Left = rc.Left + 1;
              rc.Top = rc.Top + 1;
              var $tmp7 = this.FOrientationMode;
              if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                if ((y + bh) === ch) rc.Bottom = rc.Bottom - 1;
                if ((x + bw) === cw) rc.Right = rc.Right - 1;
              } else if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                if ((y + bh) === ch) rc.Bottom = rc.Bottom - 1;
                if ((x + bw) === cw) rc.Right = rc.Right - 1;
              };
              if (this.FItemCachingMode !== pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerItemCachingMode.picmNoCaching) {
                if (bmpvalid) {
                  this.DrawItem(g,new pas["WEBLib.TMSFNCTypes"].TRectF(rc),it,K,true);
                  if (g != null) g = rtl.freeLoc(g);
                };
                pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                    return rt;
                  }, set: function (v) {
                    rt = v;
                  }},x,y);
                cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateCache(new pas["WEBLib.TMSFNCTypes"].TRectF(rt),bmp,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikItem,cp);
                cache.FItem = it;
                cache.FIdx = K;
                this.FItemCache.Add$1(cache);
              } else {
                pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1({get: function () {
                    return rc;
                  }, set: function (v) {
                    rc = v;
                  }},x,y);
                cache = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItem.CreateItem(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),cp,it,K);
                this.FItemCache.Add$1(cache);
              };
              it.FDirtyList.Remove(cp);
              it.FCacheList.Add(cache);
            };
          };
        };
      } else this.FItemCache.Clear();
    };
    this.RemoveItemsFromCache = function (AList, APosition) {
      var I = 0;
      var it = null;
      if (AList != null) {
        for (var $l1 = AList.GetCount() - 1; $l1 >= 0; $l1--) {
          I = $l1;
          it = AList.GetItem(I);
          if ((it != null) && ((APosition === -1) || (APosition === it.FPosition))) {
            if (this.FItemDisplay != null) this.FItemDisplay.Remove(it);
            if (this.FItemCache != null) this.FItemCache.Remove$1(it);
          };
        };
      };
    };
    this.RemoveAllItemsFromCache = function () {
      if (this.FItemCache != null) this.FItemCache.Clear();
    };
    this.UpdateDisplay = function () {
      pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.UpdateDisplay.apply(this,arguments);
      this.UpdateGridDisplay();
      this.UpdateGroupsDisplay();
      this.UpdatePositionsDisplay();
      this.UpdateTimeLineDisplay();
      this.UpdateItemDisplay();
      this.UpdateInplaceEditorPosition();
      this.UpdateSizeHandlers();
      this.UpdateDeleteHandler();
      this.Invalidate();
    };
    this.UpdatePositionsDisplay = function () {
      this.BuildDisplay(this.FPositionsTopCache,this.FPositionsTopDisplay);
      this.BuildDisplay(this.FPositionsBottomCache,this.FPositionsBottomDisplay);
    };
    this.UpdateGroupsDisplay = function () {
      this.BuildDisplay(this.FGroupsTopCache,this.FGroupsTopDisplay);
      this.BuildDisplay(this.FGroupsBottomCache,this.FGroupsBottomDisplay);
    };
    this.UpdateTimeLineDisplay = function () {
      this.BuildDisplay(this.FTimeLineLeftCache,this.FTimeLineLeftDisplay);
      this.BuildDisplay(this.FTimeLineRightCache,this.FTimeLineRightDisplay);
    };
    this.UpdateGridDisplay = function () {
      this.BuildDisplay(this.FGridCache,this.FGridDisplay);
    };
    this.UpdateItemDisplay = function () {
      this.BuildDisplay(this.FItemCache,this.FItemDisplay);
    };
    this.UpdateInplaceEditorPosition = function () {
      var it = null;
      var c = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if ((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) return;
      if ((this.FInplaceEditor != null) && this.FInplaceEditorActive) {
        if ((this.FUpdateItem >= 0) && (this.FUpdateItem <= (this.FItems.GetCount() - 1))) {
          it = this.FItems.GetItem$1(this.FUpdateItem);
          c = null;
          if ((this.FDownCacheItemIdx >= 0) && (this.FDownCacheItemIdx <= (it.FCacheList.GetCount() - 1))) c = it.FCacheList.GetItem(this.FDownCacheItemIdx);
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetInplaceEditorRect(c,it));
          this.FInplaceEditor.SetBoundsRect(new pas.Types.TRect(pas.Types.Bounds(Math.round(r.Left),Math.round(r.Top),Math.round(r.Right - r.Left),Math.round(r.Bottom - r.Top))));
        };
      };
    };
    this.VerticalScrollPositionChanged = function () {
      this.FBlockScrollingUpdate = true;
      this.UpdateDisplay();
      this.FBlockScrollingUpdate = false;
      this.DoVScroll(this.GetVScrollValue());
    };
    this.HorizontalScrollPositionChanged = function () {
      this.FBlockScrollingUpdate = true;
      this.UpdateDisplay();
      this.FBlockScrollingUpdate = false;
      this.DoHScroll(this.GetHScrollValue());
    };
    this.DrawItem = function (AGraphics, ARect, AItem, ACacheIndex, ACaching) {
      var str = "";
      var strt = "";
      var b = false;
      var df = false;
      var txtr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var txtrt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var th = 0.0;
      var mr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var sr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var sz = 0.0;
      var bm = false;
      var dfm = false;
      var d = false;
      var itha = 0;
      var itva = 0;
      var ithat = 0;
      var itvat = 0;
      if (!(AItem != null)) return;
      if (AItem.FEnabled) {
        if (this.FSelectedItems.IndexOf(AItem) > -1) {
          if (AItem === this.FActiveItem) {
            AGraphics.FFill.Assign(this.FItemsAppearance.FActiveFill);
            AGraphics.FFill.SetColor(AItem.FActiveColor);
            AGraphics.FStroke.Assign(this.FItemsAppearance.FActiveStroke);
          } else {
            AGraphics.FFill.Assign(this.FItemsAppearance.FSelectedFill);
            AGraphics.FFill.SetColor(AItem.FSelectedColor);
            AGraphics.FStroke.Assign(this.FItemsAppearance.FSelectedStroke);
          };
        } else {
          AGraphics.FFill.Assign(this.FItemsAppearance.FFill);
          AGraphics.FFill.SetColor(AItem.FColor);
          AGraphics.FStroke.Assign(this.FItemsAppearance.FStroke);
        };
      } else {
        AGraphics.FFill.Assign(this.FItemsAppearance.FDisabledFill);
        AGraphics.FFill.SetColor(AItem.FDisabledColor);
        AGraphics.FStroke.Assign(this.FItemsAppearance.FDisabledStroke);
      };
      this.FixStroke(AGraphics);
      df = true;
      b = true;
      this.DoBeforeDrawItem(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
          if (AItem === this.FActiveItem) {
            if (((AItem.FMovable && this.FItemsAppearance.FShowMoveArea) && this.AllowDesktopMove()) && !this.FInteraction.FReadOnly) {
              AGraphics.FFill.SetColor(this.FItemsAppearance.FMoveAreaColor);
              AGraphics.FStroke.SetColor(this.FItemsAppearance.FMoveAreaColor);
              AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
              AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
              sz = this.FItemsAppearance.FMoveAreaSize;
              var $tmp1 = this.FOrientationMode;
              if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
                ARect.Top = mr.Bottom + 1;
              } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
                ARect.Left = mr.Right + 1;
              };
              bm = true;
              dfm = true;
              this.DoBeforeDrawMoveArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(mr),AItem,{get: function () {
                  return bm;
                }, set: function (v) {
                  bm = v;
                }},{get: function () {
                  return dfm;
                }, set: function (v) {
                  dfm = v;
                }});
              if (bm) {
                if (dfm) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(mr),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
                this.DoAfterDrawMoveArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(mr),AItem);
              };
            };
            if (ACacheIndex === 0) {
              if (((AItem.FSizeable && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly) {
                AGraphics.FFill.SetColor(this.FItemsAppearance.FSizeAreaColor);
                AGraphics.FStroke.SetColor(this.FItemsAppearance.FSizeAreaColor);
                AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
                AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
                sz = this.FItemsAppearance.FSizeAreaSize;
                var $tmp2 = this.FOrientationMode;
                if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
                  ARect.Left = sr.Right + 1;
                } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                  sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
                  ARect.Top = sr.Bottom + 1;
                };
                bm = true;
                dfm = true;
                this.DoBeforeDrawSizeArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(sr),AItem,{get: function () {
                    return bm;
                  }, set: function (v) {
                    bm = v;
                  }},{get: function () {
                    return dfm;
                  }, set: function (v) {
                    dfm = v;
                  }});
                if (bm) {
                  if (dfm) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(sr),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
                  this.DoAfterDrawSizeArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(sr),AItem);
                };
              };
            };
            if (((ACacheIndex === (AItem.FPositionsList.GetCount() - 1)) && ACaching) || ((ACacheIndex === (AItem.FCacheList.GetCount() - 1)) && !ACaching)) {
              if (((AItem.FSizeable && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly) {
                AGraphics.FFill.SetColor(this.FItemsAppearance.FSizeAreaColor);
                AGraphics.FStroke.SetColor(this.FItemsAppearance.FSizeAreaColor);
                AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
                AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
                sz = this.FItemsAppearance.FSizeAreaSize;
                var $tmp3 = this.FOrientationMode;
                if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - sz,ARect.Top,ARect.Right,ARect.Bottom));
                  ARect.Right = sr.Left - 1;
                } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                  sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Bottom - sz,ARect.Right,ARect.Bottom));
                  ARect.Bottom = sr.Top - 1;
                };
                bm = true;
                dfm = true;
                this.DoBeforeDrawSizeArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(sr),AItem,{get: function () {
                    return bm;
                  }, set: function (v) {
                    bm = v;
                  }},{get: function () {
                    return dfm;
                  }, set: function (v) {
                    dfm = v;
                  }});
                if (bm) {
                  if (dfm) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(sr),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
                  this.DoAfterDrawSizeArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(sr),AItem);
                };
              };
            };
          };
        };
        strt = AItem.FTitle;
        this.DoGetItemTitleText(AItem,$mod.TTMSFNCPlannerGetTextMode.pgtmDrawing,{get: function () {
            return strt;
          }, set: function (v) {
            strt = v;
          }});
        th = 0;
        if ((strt !== "") && AItem.FShowTitle) {
          if (AItem.FEnabled) {
            if (this.FSelectedItems.IndexOf(AItem) > -1) {
              if (AItem === this.FActiveItem) {
                AGraphics.FFont.Assign(this.FItemsAppearance.FActiveTitleFont);
                if (!AItem.FUseDefaultAppearance) {
                  if (AItem.FActiveTitleFontName !== "") AGraphics.FFont.SetName(AItem.FActiveTitleFontName);
                  if (AItem.FActiveTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FActiveTitleFontSize));
                  AGraphics.FFont.SetStyle(rtl.refSet(AItem.FActiveTitleFontStyle));
                };
              } else {
                AGraphics.FFont.Assign(this.FItemsAppearance.FSelectedTitleFont);
                if (!AItem.FUseDefaultAppearance) {
                  if (AItem.FSelectedTitleFontName !== "") AGraphics.FFont.SetName(AItem.FSelectedTitleFontName);
                  if (AItem.FSelectedTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FSelectedTitleFontSize));
                  AGraphics.FFont.SetStyle(rtl.refSet(AItem.FSelectedTitleFontStyle));
                };
              };
            } else {
              AGraphics.FFont.Assign(this.FItemsAppearance.FTitleFont);
              if (!AItem.FUseDefaultAppearance) {
                if (AItem.FTitleFontName !== "") AGraphics.FFont.SetName(AItem.FTitleFontName);
                if (AItem.FTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FTitleFontSize));
                AGraphics.FFont.SetStyle(rtl.refSet(AItem.FTitleFontStyle));
              };
            };
          } else {
            AGraphics.FFont.Assign(this.FItemsAppearance.FDisabledTitleFont);
            if (!AItem.FUseDefaultAppearance) {
              if (AItem.FDisabledTitleFontName !== "") AGraphics.FFont.SetName(AItem.FDisabledTitleFontName);
              if (AItem.FDisabledTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FDisabledTitleFontSize));
              AGraphics.FFont.SetStyle(rtl.refSet(AItem.FDisabledTitleFontStyle));
            };
          };
          th = Math.min(AGraphics.CalculateTextHeight$1(strt) + 5,ARect.Bottom - ARect.Top);
        };
        if (AItem.FEnabled) {
          if (this.FSelectedItems.IndexOf(AItem) > -1) {
            if (AItem === this.FActiveItem) {
              AGraphics.FFont.Assign(this.FItemsAppearance.FActiveFont);
              if (!AItem.FUseDefaultAppearance) {
                if (AItem.FActiveFontName !== "") AGraphics.FFont.SetName(AItem.FActiveFontName);
                if (AItem.FActiveFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FActiveFontSize));
                AGraphics.FFont.SetStyle(rtl.refSet(AItem.FActiveFontStyle));
                AGraphics.FFont.SetColor(AItem.FActiveFontColor);
              };
            } else {
              AGraphics.FFont.Assign(this.FItemsAppearance.FSelectedFont);
              if (!AItem.FUseDefaultAppearance) {
                if (AItem.FSelectedFontName !== "") AGraphics.FFont.SetName(AItem.FSelectedFontName);
                if (AItem.FSelectedFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FSelectedFontSize));
                AGraphics.FFont.SetStyle(rtl.refSet(AItem.FSelectedFontStyle));
                AGraphics.FFont.SetColor(AItem.FSelectedFontColor);
              };
            };
          } else {
            AGraphics.FFont.Assign(this.FItemsAppearance.FFont);
            if (!AItem.FUseDefaultAppearance) {
              if (AItem.FFontName !== "") AGraphics.FFont.SetName(AItem.FFontName);
              if (AItem.FFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FFontSize));
              AGraphics.FFont.SetStyle(rtl.refSet(AItem.FFontStyle));
              AGraphics.FFont.SetColor(AItem.FFontColor);
            };
          };
        } else {
          AGraphics.FFont.Assign(this.FItemsAppearance.FDisabledFont);
          if (!AItem.FUseDefaultAppearance) {
            if (AItem.FDisabledFontName !== "") AGraphics.FFont.SetName(AItem.FDisabledFontName);
            if (AItem.FDisabledFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FDisabledFontSize));
            AGraphics.FFont.SetStyle(rtl.refSet(AItem.FDisabledFontStyle));
            AGraphics.FFont.SetColor(AItem.FDisabledFontColor);
          };
        };
        if (AItem.FUseDefaultAppearance) {
          itha = this.FItemsAppearance.FTextHorizontalTextAlign;
          itva = this.FItemsAppearance.FTextVerticalTextAlign;
        } else {
          itha = AItem.FTextHorizontalTextAlign;
          itva = AItem.FTextVerticalTextAlign;
        };
        b = true;
        str = AItem.FText;
        this.DoGetItemText(AItem,$mod.TTMSFNCPlannerGetTextMode.pgtmDrawing,{get: function () {
            return str;
          }, set: function (v) {
            str = v;
          }});
        txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
        txtr.Top = txtr.Top + th;
        pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
            return txtr;
          }, set: function (v) {
            txtr = v;
          }},-2,-2);
        this.DoBeforeDrawItemText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AItem,str,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        if (b) {
          if (((this.FInplaceEditorActive && (this.FInteraction.FInplaceEditorMode === $mod.TTMSFNCPlannerInplaceEditorMode.piemTitle)) && (this.FActiveItem === AItem)) || (!this.FInplaceEditorActive || (this.FActiveItem !== AItem))) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,true,itha,itva,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
          this.DoAfterDrawItemText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AItem,str);
        };
        if ((strt !== "") && AItem.FShowTitle) {
          txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
          txtr.Bottom = txtr.Top + pas.System.Int(th);
          if (AItem.FEnabled) {
            if (this.FSelectedItems.IndexOf(AItem) > -1) {
              if (AItem === this.FActiveItem) {
                AGraphics.FFill.Assign(this.FItemsAppearance.FActiveTitleFill);
                AGraphics.FFill.SetColor(AItem.FActiveTitleColor);
                AGraphics.FStroke.Assign(this.FItemsAppearance.FActiveTitleStroke);
              } else {
                AGraphics.FFill.Assign(this.FItemsAppearance.FSelectedTitleFill);
                AGraphics.FFill.SetColor(AItem.FSelectedTitleColor);
                AGraphics.FStroke.Assign(this.FItemsAppearance.FSelectedTitleStroke);
              };
            } else {
              AGraphics.FFill.Assign(this.FItemsAppearance.FTitleFill);
              AGraphics.FFill.SetColor(AItem.FTitleColor);
              AGraphics.FStroke.Assign(this.FItemsAppearance.FTitleStroke);
            };
          } else {
            AGraphics.FFill.Assign(this.FItemsAppearance.FDisabledTitleFill);
            AGraphics.FFill.SetColor(AItem.FDisabledTitleColor);
            AGraphics.FStroke.Assign(this.FItemsAppearance.FDisabledTitleStroke);
          };
          this.FixStroke(AGraphics);
          df = true;
          b = true;
          this.DoBeforeDrawItemTitle(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AItem,strt,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
            if (AItem.FEnabled) {
              if (this.FSelectedItems.IndexOf(AItem) > -1) {
                if (AItem === this.FActiveItem) {
                  AGraphics.FFont.Assign(this.FItemsAppearance.FActiveTitleFont);
                  if (!AItem.FUseDefaultAppearance) {
                    if (AItem.FActiveTitleFontName !== "") AGraphics.FFont.SetName(AItem.FActiveTitleFontName);
                    if (AItem.FActiveTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FActiveTitleFontSize));
                    AGraphics.FFont.SetStyle(rtl.refSet(AItem.FActiveTitleFontStyle));
                    AGraphics.FFont.SetColor(AItem.FActiveTitleFontColor);
                  };
                } else {
                  AGraphics.FFont.Assign(this.FItemsAppearance.FSelectedTitleFont);
                  if (!AItem.FUseDefaultAppearance) {
                    if (AItem.FSelectedTitleFontName !== "") AGraphics.FFont.SetName(AItem.FSelectedTitleFontName);
                    if (AItem.FSelectedTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FSelectedTitleFontSize));
                    AGraphics.FFont.SetStyle(rtl.refSet(AItem.FSelectedTitleFontStyle));
                    AGraphics.FFont.SetColor(AItem.FSelectedTitleFontColor);
                  };
                };
              } else {
                AGraphics.FFont.Assign(this.FItemsAppearance.FTitleFont);
                if (!AItem.FUseDefaultAppearance) {
                  if (AItem.FTitleFontName !== "") AGraphics.FFont.SetName(AItem.FTitleFontName);
                  if (AItem.FTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FTitleFontSize));
                  AGraphics.FFont.SetStyle(rtl.refSet(AItem.FTitleFontStyle));
                  AGraphics.FFont.SetColor(AItem.FTitleFontColor);
                };
              };
            } else {
              AGraphics.FFont.Assign(this.FItemsAppearance.FDisabledTitleFont);
              if (!AItem.FUseDefaultAppearance) {
                if (AItem.FDisabledTitleFontName !== "") AGraphics.FFont.SetName(AItem.FDisabledTitleFontName);
                if (AItem.FDisabledTitleFontSize !== -1) AGraphics.FFont.SetSize(Math.round(AItem.FDisabledTitleFontSize));
                AGraphics.FFont.SetStyle(rtl.refSet(AItem.FDisabledTitleFontStyle));
                AGraphics.FFont.SetColor(AItem.FDisabledTitleFontColor);
              };
            };
            if (AItem.FUseDefaultAppearance) {
              ithat = this.FItemsAppearance.FTitleHorizontalTextAlign;
              itvat = this.FItemsAppearance.FTitleVerticalTextAlign;
            } else {
              ithat = AItem.FTitleHorizontalTextAlign;
              itvat = AItem.FTitleVerticalTextAlign;
            };
            b = true;
            txtrt = new pas["WEBLib.TMSFNCTypes"].TRectF(txtr);
            pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                return txtrt;
              }, set: function (v) {
                txtrt = v;
              }},-2,-2);
            this.DoBeforeDrawItemTitleText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtrt),AItem,strt,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }});
            if (b) {
              if (((this.FInplaceEditorActive && (this.FInteraction.FInplaceEditorMode === $mod.TTMSFNCPlannerInplaceEditorMode.piemText)) && (this.FActiveItem === AItem)) || (!this.FInplaceEditorActive || (this.FActiveItem !== AItem))) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtrt),strt,false,ithat,itvat,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              this.DoAfterDrawItemTitleText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtrt),AItem,strt);
            };
            this.DoAfterDrawItemTitle(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AItem,strt);
          };
        };
        if (ACacheIndex === 0) {
          d = AItem.FDeletable;
          this.DoIsItemDeletable(AItem,{get: function () {
              return d;
            }, set: function (v) {
              d = v;
            }});
          if (((d && this.FItemsAppearance.FShowDeleteArea) && this.AllowDesktopDelete()) && !this.FInteraction.FReadOnly) {
            if (AItem === this.FActiveItem) {
              AGraphics.FStroke.SetColor(16777215)}
             else AGraphics.FStroke.SetColor(this.FItemsAppearance.FDeleteAreaColor);
            AGraphics.FStroke.SetWidth(2);
            AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
            sz = this.FItemsAppearance.FDeleteAreaSize;
            var $tmp4 = this.FOrientationMode;
            if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - sz,ARect.Top,ARect.Right,ARect.Top + sz));
            } else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
              sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - sz,ARect.Top,ARect.Right,ARect.Top + sz));
            };
            bm = true;
            dfm = true;
            this.DoBeforeDrawDeleteArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(sr),AItem,{get: function () {
                return bm;
              }, set: function (v) {
                bm = v;
              }},{get: function () {
                return dfm;
              }, set: function (v) {
                dfm = v;
              }});
            if (bm) {
              if (dfm) {
                pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                    return sr;
                  }, set: function (v) {
                    sr = v;
                  }},-3,-3);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(sr.Left,sr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(sr.Right,sr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(sr.Right,sr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(sr.Left,sr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
              };
              this.DoAfterDrawDeleteArea(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(sr),AItem);
            };
          };
        };
        this.DoAfterDrawItem(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AItem);
      };
    };
    this.DrawCell = function (AGraphics, ARect, ACol, ARow, AStartTime, AEndTime, APosition, AKind) {
      var b = false;
      var df = false;
      var ds = false;
      var ac = false;
      var isSub = false;
      b = true;
      df = true;
      ds = this.IsDateTimeDisabled(AStartTime,APosition);
      if (ds) {
        AGraphics.FFill.Assign(this.FGridCellAppearance.FDisabledFill)}
       else {
        ac = this.IsDateTimeInActive(AStartTime,APosition);
        if (ac) {
          AGraphics.FFill.Assign(this.FGridCellAppearance.FInActiveFill)}
         else AGraphics.FFill.Assign(this.FGridCellAppearance.FFill);
      };
      AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      AGraphics.FStroke.SetColor(AGraphics.FFill.FColor);
      this.DoBeforeDrawCell(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
        };
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          b = true;
          df = true;
          isSub = this.HasDateTimeSub() && this.IsDateTimeSub(AStartTime);
          if (isSub) {
            AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalSubStroke)}
           else AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalStroke);
          this.DoBeforeDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AStartTime,APosition,AKind,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            this.DoAfterDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AEndTime,APosition,AKind);
          };
          isSub = this.HasDateTimeSub() && this.IsDateTimeSub(AEndTime);
          if (isSub) {
            AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalSubStroke)}
           else AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalStroke);
          b = true;
          df = true;
          this.DoBeforeDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AStartTime,APosition,AKind,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            this.DoAfterDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AStartTime,APosition,AKind);
          };
          b = true;
          df = true;
          AGraphics.FStroke.Assign(this.FGridCellAppearance.FVerticalStroke);
          this.DoBeforeDrawCellVerticalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) {
              AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
              AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            };
            this.DoAfterDrawCellVerticalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind);
          };
        } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          b = true;
          df = true;
          AGraphics.FStroke.Assign(this.FGridCellAppearance.FVerticalStroke);
          this.DoBeforeDrawCellVerticalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) {
              AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
              AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            };
            this.DoAfterDrawCellVerticalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind);
          };
          b = true;
          df = true;
          isSub = this.HasDateTimeSub() && this.IsDateTimeSub(AStartTime);
          if (isSub) {
            AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalSubStroke)}
           else AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalStroke);
          this.DoBeforeDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AStartTime,APosition,AKind,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            this.DoAfterDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AStartTime,APosition,AKind);
          };
          isSub = this.HasDateTimeSub() && this.IsDateTimeSub(AEndTime);
          if (isSub) {
            AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalSubStroke)}
           else AGraphics.FStroke.Assign(this.FGridCellAppearance.FHorizontalStroke);
          b = true;
          df = true;
          this.DoBeforeDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AEndTime,APosition,AKind,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            this.DoAfterDrawCellHorizontalLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),isSub,ACol,ARow,AEndTime,APosition,AKind);
          };
        };
        this.DoAfterDrawCell(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),ACol,ARow,AStartTime,AEndTime,APosition,AKind);
      };
    };
    this.DrawGroup = function (AGraphics, ARect, AGroup, AStartPosition, AEndPosition, AKind) {
      var b = false;
      var df = false;
      var str = "";
      var txtr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var $tmp1 = AKind;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupTop) {
        AGraphics.FStroke.Assign(this.FGroupsAppearance.FTopStroke);
        AGraphics.FFill.Assign(this.FGroupsAppearance.FTopFill);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupBottom) {
        AGraphics.FStroke.Assign(this.FGroupsAppearance.FBottomStroke);
        AGraphics.FFill.Assign(this.FGroupsAppearance.FBottomFill);
      };
      this.FixStroke(AGraphics);
      b = true;
      df = true;
      this.DoBeforeDrawGroup(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AGroup,AStartPosition,AEndPosition,AKind,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
        var $tmp2 = AKind;
        if ($tmp2 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupTop) {
          AGraphics.FFont.Assign(this.FGroupsAppearance.FTopFont)}
         else if ($tmp2 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupBottom) AGraphics.FFont.Assign(this.FGroupsAppearance.FBottomFont);
        txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
        pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
            return txtr;
          }, set: function (v) {
            txtr = v;
          }},-2,-2);
        str = this.GetGroupText(AGroup);
        this.DoGetGroupText(AGroup,AKind,{get: function () {
            return str;
          }, set: function (v) {
            str = v;
          }});
        b = true;
        this.DoBeforeDrawGroupText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AGroup,AStartPosition,AEndPosition,AKind,str,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        if (b) {
          var $tmp3 = AKind;
          if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupTop) {
            var $tmp4 = this.FGroupsAppearance.FTopVerticalTextMode;
            if ($tmp4 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
              var $tmp5 = this.FOrientationMode;
              if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
               else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
            } else if ($tmp4 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
              AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
             else if ($tmp4 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
          } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikGroupBottom) {
            var $tmp6 = this.FGroupsAppearance.FBottomVerticalTextMode;
            if ($tmp6 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
              var $tmp7 = this.FOrientationMode;
              if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,90,-1,-1,true,false,-1,-1)}
               else if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
            } else if ($tmp6 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
              AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,90,-1,-1,true,false,-1,-1)}
             else if ($tmp6 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FGroupsAppearance.FTopHorizontalTextAlign,this.FGroupsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
          };
          this.DoAfterDrawGroupText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AGroup,AStartPosition,AEndPosition,AKind,str);
        };
        this.DoAfterDrawGroup(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AGroup,AStartPosition,AEndPosition,AKind);
      };
    };
    this.DrawPosition = function (AGraphics, ARect, APosition, AKind) {
      var b = false;
      var str = "";
      var df = false;
      var txtr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var $tmp1 = AKind;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionTop) {
        AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopStroke);
        AGraphics.FFill.Assign(this.FPositionsAppearance.FTopFill);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionBottom) {
        AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomStroke);
        AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomFill);
      };
      this.FixStroke(AGraphics);
      b = true;
      df = true;
      this.DoBeforeDrawPosition(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),APosition,AKind,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
        var $tmp2 = AKind;
        if ($tmp2 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionTop) {
          AGraphics.FFont.Assign(this.FPositionsAppearance.FTopFont)}
         else if ($tmp2 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionBottom) AGraphics.FFont.Assign(this.FPositionsAppearance.FBottomFont);
        str = this.GetPositionText(APosition);
        this.DoGetPositionText(APosition,AKind,{get: function () {
            return str;
          }, set: function (v) {
            str = v;
          }});
        b = true;
        txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
        pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
            return txtr;
          }, set: function (v) {
            txtr = v;
          }},-2,-2);
        this.DoBeforeDrawPositionText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),APosition,AKind,str,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        if (b) {
          var $tmp3 = AKind;
          if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionTop) {
            var $tmp4 = this.FPositionsAppearance.FTopVerticalTextMode;
            if ($tmp4 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
              var $tmp5 = this.FOrientationMode;
              if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
               else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
            } else if ($tmp4 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
              AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
             else if ($tmp4 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
          } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikPositionBottom) {
            var $tmp6 = this.FPositionsAppearance.FBottomVerticalTextMode;
            if ($tmp6 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
              var $tmp7 = this.FOrientationMode;
              if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,90,-1,-1,true,false,-1,-1)}
               else if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
            } else if ($tmp6 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
              AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,90,-1,-1,true,false,-1,-1)}
             else if ($tmp6 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FPositionsAppearance.FTopHorizontalTextAlign,this.FPositionsAppearance.FTopVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
          };
          this.DoAfterDrawPositionText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),APosition,AKind,str);
        };
        this.DoAfterDrawPosition(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),APosition,AKind);
      };
    };
    this.DrawTime = function (AGraphics, ARect, AValue, ARow, AKind) {
      var b = false;
      var df = false;
      var str = "";
      var txtr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var isSub = false;
      var sk = 0;
      var $tmp1 = AKind;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
        AGraphics.FStroke.Assign(this.FTimeLineAppearance.FLeftStroke);
        AGraphics.FFill.Assign(this.FTimeLineAppearance.FLeftFill);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) {
        AGraphics.FStroke.Assign(this.FTimeLineAppearance.FRightStroke);
        AGraphics.FFill.Assign(this.FTimeLineAppearance.FRightFill);
      };
      this.FixStroke(AGraphics);
      b = true;
      df = true;
      this.DoBeforeDrawTime(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ARow,AKind,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          sk = AGraphics.FStroke.FKind;
          AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
          AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
          AGraphics.FStroke.SetKind(sk);
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            b = true;
            df = true;
            this.DoBeforeDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,false,ARow,AKind,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) {
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
              };
              this.DoAfterDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,false,ARow,AKind);
            };
            isSub = this.HasDateTimeSub() && this.IsDateTimeSub(AValue);
            if (isSub) {
              var $tmp3 = AKind;
              if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
                AGraphics.FStroke.Assign(this.FTimeLineAppearance.FLeftSubStroke)}
               else if ($tmp3 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) AGraphics.FStroke.Assign(this.FTimeLineAppearance.FRightSubStroke);
            };
            b = true;
            df = true;
            this.DoBeforeDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,isSub,ARow,AKind,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) {
                if (isSub) {
                  var $tmp4 = AKind;
                  if ($tmp4 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom - 20)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown)}
                   else if ($tmp4 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top + 20)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                } else AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
              };
              this.DoAfterDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,isSub,ARow,AKind);
            };
          } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            b = true;
            df = true;
            this.DoBeforeDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,false,ARow,AKind,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) {
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
              };
              this.DoAfterDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,false,ARow,AKind);
            };
            isSub = this.HasDateTimeSub() && this.IsDateTimeSub(AValue);
            if (isSub) {
              var $tmp5 = AKind;
              if ($tmp5 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
                AGraphics.FStroke.Assign(this.FTimeLineAppearance.FLeftSubStroke)}
               else if ($tmp5 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) AGraphics.FStroke.Assign(this.FTimeLineAppearance.FRightSubStroke);
            };
            b = true;
            df = true;
            this.DoBeforeDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,isSub,ARow,AKind,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) {
                if (isSub) {
                  var $tmp6 = AKind;
                  if ($tmp6 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right - 20,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown)}
                   else if ($tmp6 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + 20,ARect.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                } else AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
              };
              this.DoAfterDrawTimeStroke(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,isSub,ARow,AKind);
            };
          };
        };
        var $tmp7 = AKind;
        if ($tmp7 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
          AGraphics.FFont.Assign(this.FTimeLineAppearance.FLeftFont)}
         else if ($tmp7 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) AGraphics.FFont.Assign(this.FTimeLineAppearance.FRightFont);
        if (this.HasDateTimeSub()) {
          if (this.IsDateTimeSub(AValue)) {
            var $tmp8 = AKind;
            if ($tmp8 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
              AGraphics.FFont.SetSize(Math.round(this.FTimeLineAppearance.FLeftSubUnitFontSize))}
             else if ($tmp8 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) AGraphics.FFont.SetSize(Math.round(this.FTimeLineAppearance.FRightSubUnitFontSize));
            str = this.GetDateTimeText(AValue,true);
            this.DoGetTimeText(AValue,ARow,true,AKind,{get: function () {
                return str;
              }, set: function (v) {
                str = v;
              }});
            txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
            pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                return txtr;
              }, set: function (v) {
                txtr = v;
              }},-2,-2);
            b = true;
            this.DoBeforeDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,true,AKind,str,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }});
            if (b) {
              var $tmp9 = AKind;
              if ($tmp9 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
                var $tmp10 = this.FTimeLineAppearance.FLeftSubVerticalTextMode;
                if ($tmp10 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                  var $tmp11 = this.FOrientationMode;
                  if ($tmp11 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                   else if ($tmp11 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                } else if ($tmp10 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp10 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              } else if ($tmp9 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) {
                var $tmp12 = this.FTimeLineAppearance.FRightSubVerticalTextMode;
                if ($tmp12 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                  var $tmp13 = this.FOrientationMode;
                  if ($tmp13 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                   else if ($tmp13 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                } else if ($tmp12 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp12 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              };
              this.DoAfterDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,true,AKind,str);
            };
          } else {
            str = this.GetDateTimeText(AValue,false);
            this.DoGetTimeText(AValue,ARow,false,AKind,{get: function () {
                return str;
              }, set: function (v) {
                str = v;
              }});
            txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
            pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                return txtr;
              }, set: function (v) {
                txtr = v;
              }},-2,-2);
            b = true;
            this.DoBeforeDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,false,AKind,str,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }});
            if (b) {
              var $tmp14 = AKind;
              if ($tmp14 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
                var $tmp15 = this.FTimeLineAppearance.FLeftVerticalTextMode;
                if ($tmp15 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                  var $tmp16 = this.FOrientationMode;
                  if ($tmp16 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                   else if ($tmp16 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                } else if ($tmp15 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp15 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              } else if ($tmp14 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) {
                var $tmp17 = this.FTimeLineAppearance.FRightVerticalTextMode;
                if ($tmp17 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                  var $tmp18 = this.FOrientationMode;
                  if ($tmp18 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                   else if ($tmp18 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                } else if ($tmp17 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp17 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              };
              this.DoAfterDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,false,AKind,str);
            };
            var $tmp19 = AKind;
            if ($tmp19 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
              AGraphics.FFont.SetSize(Math.round(this.FTimeLineAppearance.FLeftSubUnitFontSize))}
             else if ($tmp19 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) AGraphics.FFont.SetSize(Math.round(this.FTimeLineAppearance.FRightSubUnitFontSize));
            str = this.GetDateTimeText(AValue,true);
            this.DoGetTimeText(AValue,ARow,true,AKind,{get: function () {
                return str;
              }, set: function (v) {
                str = v;
              }});
            txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
            pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
                return txtr;
              }, set: function (v) {
                txtr = v;
              }},-2,-2);
            b = true;
            this.DoBeforeDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,true,AKind,str,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }});
            if (b) {
              var $tmp20 = AKind;
              if ($tmp20 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
                var $tmp21 = this.FTimeLineAppearance.FLeftSubVerticalTextMode;
                if ($tmp21 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                  var $tmp22 = this.FOrientationMode;
                  if ($tmp22 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                   else if ($tmp22 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                } else if ($tmp21 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp21 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftSubHorizontalTextAlign,this.FTimeLineAppearance.FLeftSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              } else if ($tmp20 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) {
                var $tmp23 = this.FTimeLineAppearance.FRightSubVerticalTextMode;
                if ($tmp23 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                  var $tmp24 = this.FOrientationMode;
                  if ($tmp24 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                    AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                   else if ($tmp24 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                } else if ($tmp23 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp23 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightSubHorizontalTextAlign,this.FTimeLineAppearance.FRightSubVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              };
              this.DoAfterDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,true,AKind,str);
            };
          };
        } else {
          str = this.GetDateTimeText(AValue,false);
          this.DoGetTimeText(AValue,ARow,false,AKind,{get: function () {
              return str;
            }, set: function (v) {
              str = v;
            }});
          txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
          pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
              return txtr;
            }, set: function (v) {
              txtr = v;
            }},-2,-2);
          b = true;
          this.DoBeforeDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,false,AKind,str,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }});
          if (b) {
            var $tmp25 = AKind;
            if ($tmp25 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft) {
              var $tmp26 = this.FTimeLineAppearance.FLeftVerticalTextMode;
              if ($tmp26 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                var $tmp27 = this.FOrientationMode;
                if ($tmp27 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp27 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              } else if ($tmp26 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
               else if ($tmp26 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FLeftHorizontalTextAlign,this.FTimeLineAppearance.FLeftVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
            } else if ($tmp25 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight) {
              var $tmp28 = this.FTimeLineAppearance.FRightVerticalTextMode;
              if ($tmp28 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAuto) {
                var $tmp29 = this.FOrientationMode;
                if ($tmp29 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
                 else if ($tmp29 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              } else if ($tmp28 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmAlways) {
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1)}
               else if ($tmp28 === $mod.TTMSFNCPlannerVerticalTextMode.pvtmNone) AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,this.FTimeLineAppearance.FRightHorizontalTextAlign,this.FTimeLineAppearance.FRightVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
            };
            this.DoAfterDrawTimeText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),AValue,ARow,false,AKind,str);
          };
        };
        this.DoAfterDrawTime(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(ARect),AValue,ARow,AKind);
      };
    };
    this.DrawSelection = function (AGraphics) {
      var st = null;
      var c = 0;
      var r = 0;
      var sc = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var stc = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var x = 0.0;
      var y = 0.0;
      var w = 0.0;
      var h = 0.0;
      var rc = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (!this.FInteraction.FShowSelection) return;
      sc = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.StartCell);
      stc = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.EndCell);
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentClipRect());
      pas["WEBLib.TMSFNCTypes"].InflateRectEx({get: function () {
          return cr;
        }, set: function (v) {
          cr = v;
        }},-1,-1);
      st = AGraphics.SaveState(false);
      AGraphics.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(cr));
      AGraphics.FFill.Assign(this.FSelectionAppearance.FFill);
      AGraphics.FStroke.SetColor(AGraphics.FFill.FColor);
      x = this.StartX();
      for (var $l1 = this.StartCol(), $end2 = stc.Col; $l1 <= $end2; $l1++) {
        c = $l1;
        w = this.GetColWidths(c);
        y = this.StartY();
        for (var $l3 = this.StartRow(), $end4 = stc.Row; $l3 <= $end4; $l3++) {
          r = $l3;
          h = this.GetRowHeights(r);
          if ((((c >= sc.Col) && (c <= stc.Col)) && (r >= sc.Row)) && (r <= stc.Row)) {
            var $tmp5 = this.FOrientationMode;
            if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              rc = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(y,x,y + h,x + w))}
             else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) rc = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(x,y,x + w,y + h));
            rc.Left = pas.System.Int(rc.Left) + 1;
            rc.Top = pas.System.Int(rc.Top) + 1;
            var $tmp6 = this.FOrientationMode;
            if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              if (rc.Bottom === this.StopX()) {
                rc.Bottom = pas.System.Int(rc.Bottom) - 1}
               else rc.Bottom = pas.System.Int(rc.Bottom);
              if (rc.Right === this.StopY()) {
                rc.Right = pas.System.Int(rc.Right) - 1}
               else rc.Right = pas.System.Int(rc.Right);
            } else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
              if (rc.Bottom === this.StopY()) {
                rc.Bottom = pas.System.Int(rc.Bottom) - 1}
               else rc.Bottom = pas.System.Int(rc.Bottom);
              if (rc.Right === this.StopX()) {
                rc.Right = pas.System.Int(rc.Right) - 1}
               else rc.Right = pas.System.Int(rc.Right);
            };
            AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(rc),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
          };
          y = y + h;
        };
        x = x + w;
      };
      AGraphics.RestoreState(st,false);
    };
    this.DrawItems = function (AGraphics) {
      this.DrawDisplay(AGraphics,this.FItemDisplay);
      this.DrawItemHelpers(AGraphics);
    };
    this.DrawItemLinks = function (AGraphics) {
      var i = 0;
      var m = 0.0;
      var LR1F = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var LR1T = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var AItem = null;
      var pol = [];
      var lasz = 0.0;
      var las = 0;
      var stk = 0;
      var b = false;
      if (this.FItemsAppearance.FShowLinks) {
        AGraphics.FStroke.Assign(this.FItemsAppearance.FLinkStroke);
        lasz = this.FItemsAppearance.FLinkArrowSize;
        las = this.FItemsAppearance.FLinkArrowShape;
        pol = rtl.arraySetLength(pol,pas["WEBLib.TMSFNCTypes"].TPointF,4);
        for (var $l1 = 0, $end2 = this.FItemDisplay.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          AItem = this.FItemDisplay.GetItem(i).FItem;
          if (((AItem != null) && (AItem.FLinkedItem != null)) && this.IsValidItem(AItem.FLinkedItem)) {
            LR1F = new pas["WEBLib.TMSFNCTypes"].TRectF(AItem.GetLastRect());
            LR1T = new pas["WEBLib.TMSFNCTypes"].TRectF(AItem.FLinkedItem.GetFirstRect());
            if ((this.FSelectedItems.IndexOf(AItem) > -1) && (AItem.FSelectedLinkColor !== -1)) {
              AGraphics.FStroke.SetColor(AItem.FSelectedLinkColor)}
             else if (AItem.FLinkColor !== -1) AGraphics.FStroke.SetColor(AItem.FLinkColor);
            AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
            AGraphics.FFill.SetColor(AGraphics.FStroke.FColor);
            if ((LR1F.Top === 0) && (LR1T.Top === 0)) continue;
            if ((LR1F.Left === 0) && (LR1T.Left === 0)) continue;
            if (((((LR1F.Right - LR1F.Left) === 0) || ((LR1F.Bottom - LR1F.Top) === 0)) || ((LR1T.Right - LR1T.Left) === 0)) || ((LR1T.Bottom - LR1T.Top) === 0)) continue;
            b = true;
            this.DoBeforeDrawItemLink(AGraphics,AItem,AItem.FLinkedItem,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }});
            if (b) {
              if (LR1F.Right < LR1T.Left) {
                m = LR1F.Right + ((LR1T.Left - LR1F.Right) / 2);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,Math.min(LR1F.Bottom,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2)))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,Math.min(LR1T.Bottom,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2)))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                if (LR1F.Bottom > 0) {
                  AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Right,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaToFrom,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                    if (this.FItemsAppearance.FLinkArrowShape === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Right,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Right + lasz,(lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Right,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Right + lasz,(-lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    };
                    if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                      pol[0].X = LR1F.Right;
                      pol[0].Y = LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2);
                      pol[1].X = LR1F.Right + lasz;
                      pol[1].Y = (lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2);
                      pol[2].X = LR1F.Right + lasz;
                      pol[2].Y = (-lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2);
                      pol[3].X = pol[0].X;
                      pol[3].Y = pol[0].Y;
                      stk = AGraphics.FStroke.FKind;
                      AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                      AGraphics.DrawPolygon(pol);
                      AGraphics.FStroke.SetKind(stk);
                    };
                  };
                };
                if (LR1T.Bottom > 0) {
                  AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left,Math.min(LR1T.Bottom,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2)))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,Math.min(LR1T.Bottom,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2)))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaFromTo,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                    if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left - lasz,(lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left - lasz,(-lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    };
                    if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                      pol[0].X = LR1T.Left;
                      pol[0].Y = LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2);
                      pol[1].X = LR1T.Left - lasz;
                      pol[1].Y = (lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2);
                      pol[2].X = LR1T.Left - lasz;
                      pol[2].Y = (-lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2);
                      pol[3].X = pol[0].X;
                      pol[3].Y = pol[0].Y;
                      stk = AGraphics.FStroke.FKind;
                      AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                      AGraphics.DrawPolygon(pol);
                      AGraphics.FStroke.SetKind(stk);
                    };
                  };
                };
              } else if (LR1F.Left > LR1T.Right) {
                m = LR1F.Left - ((LR1F.Left - LR1T.Right) / 2);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,Math.min(LR1F.Bottom,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2)))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,Math.min(LR1T.Bottom,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2)))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                if (LR1F.Bottom > 0) {
                  AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left,Math.min(LR1F.Bottom,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2)))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,Math.min(LR1F.Bottom,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2)))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaToFrom,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                    if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left - lasz,(lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left,LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left - lasz,(-lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    };
                    if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                      pol[0].X = LR1F.Left;
                      pol[0].Y = LR1F.Top + ((LR1F.Bottom - LR1F.Top) / 2);
                      pol[1].X = LR1F.Left - lasz;
                      pol[1].Y = (lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2);
                      pol[2].X = LR1F.Left - lasz;
                      pol[2].Y = (-lasz + LR1F.Top) + ((LR1F.Bottom - LR1F.Top) / 2);
                      pol[3].X = pol[0].X;
                      pol[3].Y = pol[0].Y;
                      stk = AGraphics.FStroke.FKind;
                      AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                      AGraphics.DrawPolygon(pol);
                      AGraphics.FStroke.SetKind(stk);
                    };
                  };
                };
                if (LR1T.Bottom > 0) {
                  AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Right,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(m,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaFromTo,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                    if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Right,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Right + lasz,(lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                      AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Right,LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2))),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Right + lasz,(-lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    };
                    if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                      pol[0].X = LR1T.Right;
                      pol[0].Y = LR1T.Top + ((LR1T.Bottom - LR1T.Top) / 2);
                      pol[1].X = LR1T.Right + lasz;
                      pol[1].Y = (lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2);
                      pol[2].X = LR1T.Right + lasz;
                      pol[2].Y = (-lasz + LR1T.Top) + ((LR1T.Bottom - LR1T.Top) / 2);
                      pol[3].X = pol[0].X;
                      pol[3].Y = pol[0].Y;
                      stk = AGraphics.FStroke.FKind;
                      AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                      AGraphics.DrawPolygon(pol);
                      AGraphics.FStroke.SetKind(stk);
                    };
                  };
                };
              } else if (LR1F.Bottom < LR1T.Top) {
                m = LR1F.Bottom + ((LR1T.Top - LR1F.Bottom) / 2);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),m)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),m)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),m)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),LR1F.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaToFrom,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),LR1F.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1F.Left + lasz) + ((LR1F.Right - LR1F.Left) / 2),LR1F.Bottom + lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),LR1F.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1F.Left - lasz) + ((LR1F.Right - LR1F.Left) / 2),LR1F.Bottom + lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  };
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                    pol[0].X = LR1F.Left + ((LR1F.Right - LR1F.Left) / 2);
                    pol[0].Y = LR1F.Bottom;
                    pol[1].X = (LR1F.Left + lasz) + ((LR1F.Right - LR1F.Left) / 2);
                    pol[1].Y = LR1F.Bottom + lasz;
                    pol[2].X = (LR1F.Left - lasz) + ((LR1F.Right - LR1F.Left) / 2);
                    pol[2].Y = LR1F.Bottom + lasz;
                    pol[3].X = pol[0].X;
                    pol[3].Y = pol[0].Y;
                    stk = AGraphics.FStroke.FKind;
                    AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                    AGraphics.DrawPolygon(pol);
                    AGraphics.FStroke.SetKind(stk);
                  };
                };
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),m)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),LR1T.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaFromTo,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),LR1T.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1T.Left + lasz) + ((LR1T.Right - LR1T.Left) / 2),LR1T.Top - lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),LR1T.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1T.Left - lasz) + ((LR1T.Right - LR1T.Left) / 2),LR1T.Top - lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  };
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                    pol[0].X = LR1T.Left + ((LR1T.Right - LR1T.Left) / 2);
                    pol[0].Y = LR1T.Top;
                    pol[1].X = (LR1T.Left + lasz) + ((LR1T.Right - LR1T.Left) / 2);
                    pol[1].Y = LR1T.Top - lasz;
                    pol[2].X = (LR1T.Left - lasz) + ((LR1T.Right - LR1T.Left) / 2);
                    pol[2].Y = LR1T.Top - lasz;
                    pol[3].X = pol[0].X;
                    pol[3].Y = pol[0].Y;
                    stk = AGraphics.FStroke.FKind;
                    AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                    AGraphics.DrawPolygon(pol);
                    AGraphics.FStroke.SetKind(stk);
                  };
                };
              } else if (LR1F.Top > LR1T.Bottom) {
                m = LR1T.Bottom + ((LR1F.Top - LR1T.Bottom) / 2);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),m)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),m)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),m)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),LR1T.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaFromTo,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),LR1T.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1T.Left + lasz) + ((LR1T.Right - LR1T.Left) / 2),LR1T.Bottom + lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1T.Left + ((LR1T.Right - LR1T.Left) / 2),LR1T.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1T.Left - lasz) + ((LR1T.Right - LR1T.Left) / 2),LR1T.Bottom + lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  };
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                    pol[0].X = LR1T.Left + ((LR1T.Right - LR1T.Left) / 2);
                    pol[0].Y = LR1T.Bottom;
                    pol[1].X = (LR1T.Left + lasz) + ((LR1T.Right - LR1T.Left) / 2);
                    pol[1].Y = LR1T.Bottom + lasz;
                    pol[2].X = (LR1T.Left - lasz) + ((LR1T.Right - LR1T.Left) / 2);
                    pol[2].Y = LR1T.Bottom + lasz;
                    pol[3].X = pol[0].X;
                    pol[3].Y = pol[0].Y;
                    stk = AGraphics.FStroke.FKind;
                    AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                    AGraphics.DrawPolygon(pol);
                    AGraphics.FStroke.SetKind(stk);
                  };
                };
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),m)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),LR1F.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                if (AItem.FLinkArrow in rtl.createSet(pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaToFrom,pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkArrow.ilaBoth)) {
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasNormal) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),LR1F.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1F.Left + lasz) + ((LR1F.Right - LR1F.Left) / 2),LR1F.Top - lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(LR1F.Left + ((LR1F.Right - LR1F.Left) / 2),LR1F.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF((LR1F.Left - lasz) + ((LR1F.Right - LR1F.Left) / 2),LR1F.Top - lasz)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  };
                  if (las === $mod.TTMSFNCPlannerLinkArrowShape.lasFilled) {
                    pol[0].X = LR1F.Left + ((LR1F.Right - LR1F.Left) / 2);
                    pol[0].Y = LR1F.Top;
                    pol[1].X = (LR1F.Left + lasz) + ((LR1F.Right - LR1F.Left) / 2);
                    pol[1].Y = LR1F.Top - lasz;
                    pol[2].X = (LR1F.Left - lasz) + ((LR1F.Right - LR1F.Left) / 2);
                    pol[2].Y = LR1F.Top - lasz;
                    pol[3].X = pol[0].X;
                    pol[3].Y = pol[0].Y;
                    stk = AGraphics.FStroke.FKind;
                    AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
                    AGraphics.DrawPolygon(pol);
                    AGraphics.FStroke.SetKind(stk);
                  };
                };
                this.DoAfterDrawItemLink(AGraphics,AItem,AItem.FLinkedItem);
              };
            };
          };
        };
      };
    };
    this.DrawItemHelpers = function (AGraphics) {
      var it = null;
      var drs = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var txt = "";
      var tw = 0.0;
      var th = 0.0;
      var ctr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var y = 0.0;
      var st = null;
      var dt = 0.0;
      var b = false;
      var df = false;
      var sz = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      if (((this.FActiveItem != null) && this.FDrawItemHelpers) && this.FItemsAppearance.FShowItemHelpers) {
        it = this.FActiveItem;
        ctr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentClipRect());
        st = AGraphics.SaveState(false);
        AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        AGraphics.FFill.SetColor(16119285);
        AGraphics.FStroke.SetColor(11119017);
        AGraphics.FFont.SetColor(11119017);
        AGraphics.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(ctr));
        cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetFirstRect(it));
        if (pas["WEBLib.TMSFNCTypes"].IntersectRectEx(cr,ctr)) {
          dt = it.FStartTime;
          txt = pas.SysUtils.FormatDateTime("hh:nn",dt);
          this.DoGetItemHelperText(it,true,dt,{get: function () {
              return txt;
            }, set: function (v) {
              txt = v;
            }});
          sz = new pas["WEBLib.TMSFNCTypes"].TSizeF(AGraphics.CalculateTextSize$1(txt));
          tw = sz.cx + 5;
          th = sz.cy + 5;
          var $tmp1 = this.FOrientationMode;
          if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            drs = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Bottom + 10,cr.Left + tw,(cr.Bottom + 10) + th));
            if (drs.Bottom > ctr.Bottom) {
              y = drs.Bottom - drs.Top;
              drs.Top = (cr.Top - 10) - y;
              drs.Bottom = cr.Top - 10;
            };
          } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            drs = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Right + 10,cr.Top,(cr.Right + 10) + tw,cr.Top + th));
            if (drs.Right > ctr.Right) {
              y = drs.Right - drs.Left;
              drs.Left = (cr.Left - 10) - y;
              drs.Right = cr.Left - 10;
            };
          };
          b = true;
          df = true;
          this.DoBeforeDrawItemHelper(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,true,dt,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(drs),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightDown);
            b = true;
            this.DoBeforeDrawItemHelperText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,true,dt,txt,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }});
            if (b) {
              AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(drs),txt,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              this.DoAfterDrawItemHelperText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,true,dt,txt);
            };
            this.DoAfterDrawItemHelper(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,true,dt);
          };
        };
        AGraphics.FFill.SetColor(-1);
        AGraphics.FFill.SetColor(16119285);
        cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetLastRect(it));
        if (pas["WEBLib.TMSFNCTypes"].IntersectRectEx(cr,ctr)) {
          dt = it.FEndTime;
          txt = pas.SysUtils.FormatDateTime("hh:nn",dt);
          this.DoGetItemHelperText(it,false,dt,{get: function () {
              return txt;
            }, set: function (v) {
              txt = v;
            }});
          sz = new pas["WEBLib.TMSFNCTypes"].TSizeF(AGraphics.CalculateTextSize$1(txt));
          tw = sz.cx + 5;
          th = sz.cy + 5;
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            drs = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Right - tw,cr.Bottom + 10,cr.Right,(cr.Bottom + 10) + th));
            if (drs.Bottom > ctr.Bottom) {
              y = drs.Bottom - drs.Top;
              drs.Top = (cr.Top - 10) - y;
              drs.Bottom = cr.Top - 10;
            };
          } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            drs = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Right + 10,cr.Bottom - th,(cr.Right + 10) + tw,cr.Bottom));
            if (drs.Right > ctr.Right) {
              y = drs.Right - drs.Left;
              drs.Left = (cr.Left - 10) - y;
              drs.Right = cr.Left - 10;
            };
          };
          b = true;
          df = true;
          this.DoBeforeDrawItemHelper(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,false,dt,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(drs),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightDown);
            b = true;
            this.DoBeforeDrawItemHelperText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,false,dt,txt,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }});
            if (b) {
              AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(drs),txt,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              this.DoAfterDrawItemHelperText(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,false,dt,txt);
            };
            this.DoAfterDrawItemHelper(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(drs),it,false,dt);
          };
        };
        AGraphics.RestoreState(st,false);
      };
    };
    this.DrawGrid = function (AGraphics) {
      this.DrawDisplay(AGraphics,this.FGridDisplay);
    };
    this.DrawPositions = function (AGraphics) {
      this.DrawDisplay(AGraphics,this.FPositionsTopDisplay);
      this.DrawDisplay(AGraphics,this.FPositionsBottomDisplay);
    };
    this.DrawGroups = function (AGraphics) {
      this.DrawDisplay(AGraphics,this.FGroupsTopDisplay);
      this.DrawDisplay(AGraphics,this.FGroupsBottomDisplay);
    };
    this.DrawTimeLine = function (AGraphics) {
      this.DrawDisplay(AGraphics,this.FTimeLineLeftDisplay);
      this.DrawDisplay(AGraphics,this.FTimeLineRightDisplay);
    };
    this.DrawCurrentTimeInTimeLine = function (AGraphics, ALeft) {
      var st = null;
      var dt = 0.0;
      var v = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var crt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var txtr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var b = false;
      var df = false;
      var str = "";
      var th = 0.0;
      var tw = 0.0;
      var sz = new pas["WEBLib.TMSFNCTypes"].TSizeF();
      if (ALeft && !($mod.TTMSFNCPlannerTimeLineLayout.ptlLeft in this.FTimeLineAppearance.FLayouts)) return;
      if (!ALeft && !($mod.TTMSFNCPlannerTimeLineLayout.ptlRight in this.FTimeLineAppearance.FLayouts)) return;
      if (this.FTimeLine.FCurrentTimeMode !== $mod.TTMSFNCPlannerCurrentTimeMode.pctmNone) {
        dt = this.CurrentTime();
        if ($mod.DateTimeInRangeEx(dt,this.FDisplayStartTime,this.FDisplayEndTime,true)) {
          st = AGraphics.SaveState(false);
          if (ALeft) {
            cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineLeftRect())}
           else cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineRightRect());
          AGraphics.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(cr));
          if (ALeft) {
            AGraphics.FFont.Assign(this.FTimeLineAppearance.FLeftFont)}
           else AGraphics.FFont.Assign(this.FTimeLineAppearance.FRightFont);
          AGraphics.FFont.SetSize(Math.round(AGraphics.FFont.FSize * 0.75));
          AGraphics.FFill.SetColor(this.FTimeLineAppearance.FCurrentTimeColor);
          AGraphics.FStroke.SetColor(this.FTimeLineAppearance.FCurrentTimeColor);
          AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          b = true;
          df = true;
          crt = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
          var $tmp1 = this.FOrientationMode;
          if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            v = (this.DateTimeToValue(dt,true,true) - this.GetHorizontalScrollPosition()) + crt.Left}
           else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            v = (this.DateTimeToValue(dt,true,true) - this.GetVerticalScrollPosition()) + crt.Top}
           else {
            v = 0;
          };
          if (ALeft) {
            this.DoBeforeDrawCurrentTimeInTimeLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cr),pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft,v,dt,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }})}
           else this.DoBeforeDrawCurrentTimeInTimeLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cr),pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight,v,dt,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) {
              var $tmp2 = this.FTimeLine.FCurrentTimeMode;
              if ($tmp2 === $mod.TTMSFNCPlannerCurrentTimeMode.pctmLine) {
                var $tmp3 = this.FOrientationMode;
                if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  if (ALeft) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(v,cr.Bottom - 20)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(v,cr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawEllipse$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(v - 5,cr.Bottom - 30,v + 5,cr.Bottom - 20)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                  } else {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(v,cr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(v,cr.Top + 20)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawEllipse$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(v - 5,cr.Top + 20,v + 5,cr.Top + 30)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                  };
                } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
                  if (ALeft) {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(cr.Right - 20,v)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(cr.Right,v)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawEllipse$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Right - 30,v - 5,cr.Right - 20,v + 5)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
                  } else {
                    AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(cr.Left,v)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(cr.Left + 20,v)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmNone,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                    AGraphics.DrawEllipse$2(new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + 20,v - 5,cr.Left + 30,v + 5)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
                  };
                };
              } else if ($tmp2 === $mod.TTMSFNCPlannerCurrentTimeMode.pctmText) {
                str = pas.SysUtils.FormatDateTime("hh:nn",dt);
                sz = new pas["WEBLib.TMSFNCTypes"].TSizeF(AGraphics.CalculateTextSize$1(str));
                th = sz.cx + 4;
                tw = sz.cy + 4;
                var $tmp4 = this.FOrientationMode;
                if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                  txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(v - (tw / 2),cr.Top + (((cr.Bottom - cr.Top) - th) / 2),v + (tw / 2),(cr.Top + (((cr.Bottom - cr.Top) - th) / 2)) + th))}
                 else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + (((cr.Right - cr.Left) - tw) / 2),v - (th / 2),(cr.Left + (((cr.Right - cr.Left) - tw) / 2)) + tw,v + (th / 2)));
                AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
                AGraphics.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
              };
            };
            if (ALeft) {
              this.DoAfterDrawCurrentTimeInTimeLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cr),pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineLeft,v,dt)}
             else this.DoAfterDrawCurrentTimeInTimeLine(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cr),pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerCacheItemKind.ikTimeLineRight,v,dt);
          };
          AGraphics.RestoreState(st,false);
        };
      };
    };
    this.DrawCurrentTimeInGrid = function (AGraphics) {
      var st = null;
      var dt = 0.0;
      var v = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var crt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var b = false;
      var df = false;
      if (this.FTimeLine.FCurrentTimeMode === $mod.TTMSFNCPlannerCurrentTimeMode.pctmLine) {
        dt = this.CurrentTime();
        if ($mod.DateTimeInRangeEx(dt,this.FDisplayStartTime,this.FDisplayEndTime,true)) {
          st = AGraphics.SaveState(false);
          cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentClipRect());
          AGraphics.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(cr));
          AGraphics.FFill.SetColor(this.FTimeLineAppearance.FCurrentTimeColor);
          AGraphics.FStroke.SetColor(this.FTimeLineAppearance.FCurrentTimeColor);
          AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          b = true;
          df = true;
          crt = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
          var $tmp1 = this.FOrientationMode;
          if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            v = (this.DateTimeToValue(dt,true,true) - this.GetHorizontalScrollPosition()) + crt.Left}
           else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            v = (this.DateTimeToValue(dt,true,true) - this.GetVerticalScrollPosition()) + crt.Top}
           else {
            v = 0;
          };
          this.DoBeforeDrawCurrentTimeInGrid(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cr),v,dt,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) {
              var $tmp2 = this.FOrientationMode;
              if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(v,cr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(v,cr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown)}
               else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(cr.Left,v)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(cr.Right,v)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            };
            this.DoAfterDrawCurrentTimeInGrid(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cr),v,dt);
          };
          AGraphics.RestoreState(st,false);
        };
      };
    };
    this.DrawBorders = function (AGraphics) {
      var rrt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var rrb = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var trl = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var trr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var grt = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var grb = new pas["WEBLib.TMSFNCTypes"].TRectF();
      grt = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsTopRect());
      grb = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsBottomRect());
      rrt = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
      rrb = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
      trl = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineLeftRect());
      trr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineRightRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopStroke);
        if (($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts) && (this.FPositionsAppearance.FTopSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Left,rrt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Right,rrt.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Left,rrt.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Right,rrt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
        } else if ((!($mod.TTMSFNCPlannerGroupLayout.pglTop in this.FGroupsAppearance.FLayouts) || (this.FGroupsAppearance.FTopSize <= 0)) || (this.FDisplayGroups.GetCount() === 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Right,rrt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Right,rrt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
        AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomStroke);
        if (($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts) && (this.FPositionsAppearance.FBottomSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Left,rrb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Right,rrb.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Left,rrb.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Right,rrb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        } else if ((!($mod.TTMSFNCPlannerGroupLayout.pglBottom in this.FGroupsAppearance.FLayouts) || (this.FGroupsAppearance.FBottomSize <= 0)) || (this.FDisplayGroups.GetCount() === 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Left,rrb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Left,rrb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        AGraphics.FStroke.Assign(this.FGroupsAppearance.FTopStroke);
        if ((($mod.TTMSFNCPlannerGroupLayout.pglTop in this.FGroupsAppearance.FLayouts) && (this.FDisplayGroups.GetCount() > 0)) && (this.FGroupsAppearance.FTopSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Left,grt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Right,grt.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Left,grt.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Right,grt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
        };
        if (!($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts) || (this.FPositionsAppearance.FTopSize <= 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Right,grt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Right,grt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
        AGraphics.FStroke.Assign(this.FGroupsAppearance.FBottomStroke);
        if ((($mod.TTMSFNCPlannerGroupLayout.pglBottom in this.FGroupsAppearance.FLayouts) && (this.FDisplayGroups.GetCount() > 0)) && (this.FGroupsAppearance.FBottomSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Left,grb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Right,grb.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Left,grb.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Right,grb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        };
        if (!($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts) || (this.FPositionsAppearance.FBottomSize <= 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Left,grb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Left,grb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        AGraphics.FStroke.Assign(this.FTimeLineAppearance.FLeftStroke);
        if (($mod.TTMSFNCPlannerTimeLineLayout.ptlLeft in this.FTimeLineAppearance.FLayouts) && (this.FTimeLineAppearance.FLeftSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Left,trl.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Left,trl.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Right,trl.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Right,trl.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        } else AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Left,trl.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Right,trl.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown);
        AGraphics.FStroke.Assign(this.FTimeLineAppearance.FRightStroke);
        if (($mod.TTMSFNCPlannerTimeLineLayout.ptlRight in this.FTimeLineAppearance.FLayouts) && (this.FTimeLineAppearance.FRightSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Left,trr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Left,trr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Right,trr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Right,trr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        } else AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Left,trr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Right,trr.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        AGraphics.FStroke.Assign(this.FTimeLineAppearance.FLeftStroke);
        if (($mod.TTMSFNCPlannerTimeLineLayout.ptlLeft in this.FTimeLineAppearance.FLayouts) && (this.FTimeLineAppearance.FLeftSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Left,trl.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Right,trl.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Left,trl.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Right,trl.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
        } else AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Right,trl.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trl.Right,trl.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
        AGraphics.FStroke.Assign(this.FTimeLineAppearance.FRightStroke);
        if (($mod.TTMSFNCPlannerTimeLineLayout.ptlRight in this.FTimeLineAppearance.FLayouts) && (this.FTimeLineAppearance.FRightSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Left,trr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Right,trr.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Left,trr.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Right,trr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        } else AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Left,trr.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(trr.Left,trr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopStroke);
        if (($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts) && (this.FPositionsAppearance.FTopSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Left,rrt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Left,rrt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Right,rrt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Right,rrt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        } else if ((!($mod.TTMSFNCPlannerGroupLayout.pglTop in this.FGroupsAppearance.FLayouts) || (this.FGroupsAppearance.FTopSize <= 0)) || (this.FDisplayGroups.GetCount() === 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Left,rrt.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrt.Right,rrt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown);
        AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomStroke);
        if (($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts) && (this.FPositionsAppearance.FBottomSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Left,rrb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Left,rrb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Right,rrb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Right,rrb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        } else if ((!($mod.TTMSFNCPlannerGroupLayout.pglBottom in this.FGroupsAppearance.FLayouts) || (this.FGroupsAppearance.FBottomSize <= 0)) || (this.FDisplayGroups.GetCount() === 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Left,rrb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(rrb.Right,rrb.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        AGraphics.FStroke.Assign(this.FGroupsAppearance.FTopStroke);
        if ((($mod.TTMSFNCPlannerGroupLayout.pglTop in this.FGroupsAppearance.FLayouts) && (this.FDisplayGroups.GetCount() > 0)) && (this.FGroupsAppearance.FTopSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Left,grt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Left,grt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Right,grt.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Right,grt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        };
        if (!($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts) || (this.FPositionsAppearance.FTopSize <= 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Left,grt.Bottom)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grt.Right,grt.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown);
        AGraphics.FStroke.Assign(this.FGroupsAppearance.FBottomStroke);
        if ((($mod.TTMSFNCPlannerGroupLayout.pglBottom in this.FGroupsAppearance.FLayouts) && (this.FDisplayGroups.GetCount() > 0)) && (this.FGroupsAppearance.FBottomSize > 0)) {
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Left,grb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Left,grb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp);
          AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Right,grb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Right,grb.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
        };
        if (!($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts) || (this.FPositionsAppearance.FBottomSize <= 0)) AGraphics.DrawLine$1(new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Left,grb.Top)),new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(grb.Right,grb.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightUp,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmLeftUp);
      };
    };
    this.DrawNavigationButtons = function (AGraphics) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var b = false;
      var df = false;
      var rm = 0;
      if ((($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FTopNavigationButtons) && ($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts)) && (this.FPositionsAppearance.FTopSize > 0)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTopLeftNavigationButtonRect());
        rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightDown;
        var $tmp1 = this.FTopLeftNavigationButtonState;
        if ($tmp1 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopNavigationButtonStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopNavigationButtonFill);
        } else if ($tmp1 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopNavigationButtonDownStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopNavigationButtonDownFill);
        } else if ($tmp1 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopNavigationButtonHoverStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopNavigationButtonHoverFill);
        };
        b = true;
        df = true;
        this.DoBeforeDrawTopNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbPrevious,this.FTopLeftNavigationButtonState,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }},{get: function () {
            return df;
          }, set: function (v) {
            df = v;
          }});
        if (b) {
          if (df) {
            AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            var $tmp2 = this.FOrientationMode;
            if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakUp)}
             else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakLeft);
          };
          this.DoAfterDrawTopNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbPrevious,this.FTopLeftNavigationButtonState);
        };
      };
      if ((($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FTopNavigationButtons) && ($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts)) && (this.FPositionsAppearance.FTopSize > 0)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTopRightNavigationButtonRect());
        var $tmp3 = this.FOrientationMode;
        if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightAndExpandHeight}
         else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftDownAndExpandWidth}
         else {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
        };
        var $tmp4 = this.FTopRightNavigationButtonState;
        if ($tmp4 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopNavigationButtonStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopNavigationButtonFill);
        } else if ($tmp4 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopNavigationButtonDownStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopNavigationButtonDownFill);
        } else if ($tmp4 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopNavigationButtonHoverStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopNavigationButtonHoverFill);
        };
        b = true;
        df = true;
        this.DoBeforeDrawTopNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbNext,this.FTopRightNavigationButtonState,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }},{get: function () {
            return df;
          }, set: function (v) {
            df = v;
          }});
        if (b) {
          if (df) {
            AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            var $tmp5 = this.FOrientationMode;
            if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakDown)}
             else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakRight);
          };
          this.DoAfterDrawTopNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbNext,this.FTopRightNavigationButtonState);
        };
      };
      if ((($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FBottomNavigationButtons) && ($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts)) && (this.FPositionsAppearance.FBottomSize > 0)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBottomLeftNavigationButtonRect());
        var $tmp6 = this.FOrientationMode;
        if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftDown}
         else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightUp}
         else {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
        };
        var $tmp7 = this.FBottomLeftNavigationButtonState;
        if ($tmp7 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomNavigationButtonStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomNavigationButtonFill);
        } else if ($tmp7 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomNavigationButtonDownStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomNavigationButtonDownFill);
        } else if ($tmp7 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomNavigationButtonHoverStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomNavigationButtonHoverFill);
        };
        b = true;
        df = true;
        this.DoBeforeDrawBottomNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbPrevious,this.FBottomLeftNavigationButtonState,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }},{get: function () {
            return df;
          }, set: function (v) {
            df = v;
          }});
        if (b) {
          if (df) {
            AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            var $tmp8 = this.FOrientationMode;
            if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakUp)}
             else if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakLeft);
          };
          this.DoAfterDrawBottomNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbPrevious,this.FBottomLeftNavigationButtonState);
        };
      };
      if ((($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FBottomNavigationButtons) && ($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts)) && (this.FPositionsAppearance.FBottomSize > 0)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBottomRightNavigationButtonRect());
        var $tmp9 = this.FOrientationMode;
        if ($tmp9 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftAndExpandHeight}
         else if ($tmp9 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftUpAndExpandWidth}
         else {
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
        };
        var $tmp10 = this.FBottomRightNavigationButtonState;
        if ($tmp10 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsNormal) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomNavigationButtonStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomNavigationButtonFill);
        } else if ($tmp10 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsDown) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomNavigationButtonDownStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomNavigationButtonDownFill);
        } else if ($tmp10 === $mod.TTMSFNCPlannerNavigationButtonState.pnbsHover) {
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomNavigationButtonHoverStroke);
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomNavigationButtonHoverFill);
        };
        b = true;
        df = true;
        this.DoBeforeDrawBottomNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbNext,this.FBottomRightNavigationButtonState,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }},{get: function () {
            return df;
          }, set: function (v) {
            df = v;
          }});
        if (b) {
          if (df) {
            AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            var $tmp11 = this.FOrientationMode;
            if ($tmp11 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakDown)}
             else if ($tmp11 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.DrawArrow(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerArrowKind.pakRight);
          };
          this.DoAfterDrawBottomNavigationButton(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerNavigationButton.pnbNext,this.FBottomRightNavigationButtonState);
        };
      };
    };
    this.DrawEmptySpaces = function (AGraphics) {
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var b = false;
      var df = false;
      var rm = 0;
      if (this.FPositionsAppearance.FFillEmptySpaces) {
        if (($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts) && (this.FPositionsAppearance.FTopSize > 0)) {
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionTopLeftEmptyRect());
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopFill);
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopStroke);
          this.DoBeforeDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesTopLeft,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightDown);
            this.DoAfterDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesTopLeft);
          };
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionTopRightEmptyRect());
          var $tmp1 = this.FOrientationMode;
          if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightUp}
           else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftDownAndExpandWidth}
           else {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
          };
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FPositionsAppearance.FTopFill);
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FTopStroke);
          this.DoBeforeDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesTopRight,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            this.DoAfterDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesTopRight);
          };
        };
        if (($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts) && (this.FPositionsAppearance.FBottomSize > 0)) {
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionBottomLeftEmptyRect());
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftDown}
           else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightUp}
           else {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
          };
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomFill);
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomStroke);
          this.DoBeforeDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesBottomLeft,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            this.DoAfterDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesBottomLeft);
          };
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionBottomRightEmptyRect());
          var $tmp3 = this.FOrientationMode;
          if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftUp}
           else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftUpAndExpandWidth}
           else {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
          };
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FPositionsAppearance.FBottomFill);
          AGraphics.FStroke.Assign(this.FPositionsAppearance.FBottomStroke);
          this.DoBeforeDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesBottomRight,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            this.DoAfterDrawPositionEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerPositionEmptySpace.ppesBottomRight);
          };
        };
      };
      if (this.FGroupsAppearance.FFillEmptySpaces) {
        if (($mod.TTMSFNCPlannerGroupLayout.pglTop in this.FGroupsAppearance.FLayouts) && (this.FGroupsAppearance.FTopSize > 0)) {
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupTopLeftEmptyRect());
          rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightDown;
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FGroupsAppearance.FTopFill);
          AGraphics.FStroke.Assign(this.FGroupsAppearance.FTopStroke);
          this.DoBeforeDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesTopLeft,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            this.DoAfterDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesTopLeft);
          };
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupTopRightEmptyRect());
          var $tmp4 = this.FOrientationMode;
          if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightUp}
           else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftDown}
           else {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
          };
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FGroupsAppearance.FTopFill);
          AGraphics.FStroke.Assign(this.FGroupsAppearance.FTopStroke);
          this.DoBeforeDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesTopRight,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            this.DoAfterDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesTopRight);
          };
        };
        if (($mod.TTMSFNCPlannerGroupLayout.pglBottom in this.FGroupsAppearance.FLayouts) && (this.FGroupsAppearance.FBottomSize > 0)) {
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupBottomLeftEmptyRect());
          var $tmp5 = this.FOrientationMode;
          if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftDown}
           else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftRightUp}
           else {
            rm = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone;
          };
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FGroupsAppearance.FBottomFill);
          AGraphics.FStroke.Assign(this.FGroupsAppearance.FBottomStroke);
          this.DoBeforeDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesBottomLeft,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),rm);
            this.DoAfterDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesBottomLeft);
          };
          r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupBottomRightEmptyRect());
          b = true;
          df = true;
          AGraphics.FFill.Assign(this.FGroupsAppearance.FBottomFill);
          AGraphics.FStroke.Assign(this.FGroupsAppearance.FBottomStroke);
          this.DoBeforeDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesBottomRight,{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }},{get: function () {
              return df;
            }, set: function (v) {
              df = v;
            }});
          if (b) {
            if (df) AGraphics.DrawRectangle$2(new pas["WEBLib.TMSFNCTypes"].TRectF(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftUp);
            this.DoAfterDrawGroupEmptySpace(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(r),$mod.TTMSFNCPlannerGroupEmptySpace.pgesBottomRight);
          };
        };
      };
    };
    this.DrawDisplay = function (AGraphics, ADisplay) {
      var I = 0;
      var bmp = null;
      var cache = null;
      var st = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      if (ADisplay.GetCount() === 0) return;
      st = AGraphics.SaveState(false);
      if ($mod.TTMSFNCPlannerGridDisplayList.isPrototypeOf(ADisplay) || $mod.TTMSFNCPlannerItemDisplayList.isPrototypeOf(ADisplay)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentClipRect());
      } else if ($mod.TTMSFNCPlannerGroupsTopDisplayList.isPrototypeOf(ADisplay)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsTopRect());
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          r.Right = r.Right + 1}
         else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) r.Bottom = r.Bottom + 1;
      } else if ($mod.TTMSFNCPlannerGroupsBottomDisplayList.isPrototypeOf(ADisplay)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsBottomRect());
        var $tmp2 = this.FOrientationMode;
        if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          r.Left = r.Left - 1}
         else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) r.Top = r.Top - 1;
      } else if ($mod.TTMSFNCPlannerPositionsTopDisplayList.isPrototypeOf(ADisplay)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
        var $tmp3 = this.FOrientationMode;
        if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          r.Right = r.Right + 1}
         else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) r.Bottom = r.Bottom + 1;
      } else if ($mod.TTMSFNCPlannerPositionsBottomDisplayList.isPrototypeOf(ADisplay)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
        var $tmp4 = this.FOrientationMode;
        if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          r.Left = r.Left - 1}
         else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) r.Top = r.Top - 1;
      } else if ($mod.TTMSFNCPlannerTimeLineLeftDisplayList.isPrototypeOf(ADisplay)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineLeftRect());
        var $tmp5 = this.FOrientationMode;
        if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          r.Bottom = r.Bottom + 1}
         else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) r.Right = r.Right + 1;
      } else if ($mod.TTMSFNCPlannerTimeLineRightDisplayList.isPrototypeOf(ADisplay)) {
        r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineRightRect());
        var $tmp6 = this.FOrientationMode;
        if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          r.Top = r.Top - 1}
         else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) r.Left = r.Left - 1;
      };
      AGraphics.ClipRect(new pas["WEBLib.TMSFNCTypes"].TRectF(r));
      for (var $l7 = 0, $end8 = ADisplay.GetCount() - 1; $l7 <= $end8; $l7++) {
        I = $l7;
        cache = ADisplay.GetItem(I);
        bmp = cache.FBitmap;
        if (bmp != null) {
          AGraphics.DrawBitmap$1(new pas["WEBLib.TMSFNCTypes"].TRectF(cache.FDrawRect),bmp,true,false,true,false)}
         else if ($mod.TTMSFNCPlannerItemDisplayList.isPrototypeOf(ADisplay)) {
          this.DrawItem(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cache.FDrawRect),cache.FItem,cache.FIdx,false)}
         else if ($mod.TTMSFNCPlannerGridDisplayList.isPrototypeOf(ADisplay)) {
          this.DrawCell(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cache.FDrawRect),cache.FCol,cache.FRow,cache.FStartTime,cache.FEndTime,cache.FPosition,cache.FKind)}
         else if ($mod.TTMSFNCPlannerPositionsDisplayList.isPrototypeOf(ADisplay)) {
          this.DrawPosition(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cache.FDrawRect),cache.FPosition,cache.FKind)}
         else if ($mod.TTMSFNCPlannerGroupsDisplayList.isPrototypeOf(ADisplay)) {
          this.DrawGroup(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cache.FDrawRect),cache.FGroup,cache.FStartPosition,cache.FEndPosition,cache.FKind)}
         else if ($mod.TTMSFNCPlannerTimeLineDisplayList.isPrototypeOf(ADisplay)) this.DrawTime(AGraphics,new pas["WEBLib.TMSFNCTypes"].TRectF(cache.FDrawRect),cache.FValue,cache.FRow,cache.FKind);
      };
      if ($mod.TTMSFNCPlannerItemDisplayList.isPrototypeOf(ADisplay)) this.DrawItemLinks(AGraphics);
      if ($mod.TTMSFNCPlannerTimeLineDisplayList.isPrototypeOf(ADisplay)) this.DrawCurrentTimeInTimeLine(AGraphics,$mod.TTMSFNCPlannerTimeLineLeftDisplayList.isPrototypeOf(ADisplay));
      AGraphics.RestoreState(st,false);
    };
    this.HandleMouseEnter = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseEnter.apply(this,arguments);
      this.ProcessNavigationButtonsMove(-1,-1);
    };
    this.HandleMouseLeave = function () {
      var p = new pas["WEBLib.TMSFNCTypes"].TPointF();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseLeave.apply(this,arguments);
      if ((this.FToolBarPopup != null) && this.FToolBarPopup.Activated()) {
        p = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetMousePos());
        if (!this.FToolBarPopup.PointInPopup(new pas["WEBLib.TMSFNCTypes"].TPointF(p)) && !this.FToolBarPopup.DropDownActive()) this.FToolBarPopup.Deactivate();
      };
      this.ProcessNavigationButtonsMove(-1,-1);
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      var dc = null;
      var c = null;
      var it = null;
      var d = false;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      if (Button === pas["WEBLib.Controls"].TMouseButton.mbRight) return;
      this.CaptureEx();
      this.ProcessNavigationButtonsDown(X,Y);
      if (this.FNavigationButtonDown) return;
      if (!this.FDblClicked) {
        if (this.CanFocus()) this.SetFocus();
        if (this.FInplaceEditorActive) this.CloseInplaceEditor(false);
      };
      this.FDblClicked = false;
      dc = this.XYToCacheItem(X,Y);
      this.FDownCacheItemIdx = -1;
      this.FDownItem = null;
      if (dc != null) {
        this.FDownItem = dc.FItem;
        this.FDownCacheItemIdx = this.FDownItem.FCacheList.IndexOf(dc);
      };
      if (this.FDownItem != null) {
        it = this.FDownItem;
        if ((this.FDownCacheItemIdx >= 0) && (this.FDownCacheItemIdx <= (it.FCacheList.GetCount() - 1))) {
          c = it.FCacheList.GetItem(this.FDownCacheItemIdx);
          if (this.FDownItem === this.FActiveItem) {
            this.FDoItemSizeUp = (((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemStartTimeSizeRect(c),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.FDownItem.FSizeable) && this.CanSizeCacheItemStartTime(c)) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly;
            this.FDoItemSizeDown = (((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemEndTimeSizeRect(c),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.FDownItem.FSizeable) && this.CanSizeCacheItemEndTime(c)) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly;
            this.FDoItemMove = (((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemMoveRect(c),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.FDownItem.FMovable) && this.CanMoveCacheItem(c)) && this.AllowDesktopMove()) && !this.FInteraction.FReadOnly;
          };
          d = this.FDownItem.FDeletable;
          this.DoIsItemDeletable(this.FDownItem,{get: function () {
              return d;
            }, set: function (v) {
              d = v;
            }});
          this.FDoItemDelete = ((((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemDeleteRect(c),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && d) && this.CanDeleteCacheItem(c)) && this.AllowDesktopDelete()) && this.FItemsAppearance.FShowDeleteArea) && !this.FInteraction.FReadOnly;
        };
        this.FDoItemAnchor = this.XYToItemAnchor(this.FDownItem,X,Y);
      };
      this.FDownOnPositions = ((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetPositionsTopRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) || pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetPositionsBottomRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) || pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetGroupsTopRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) || pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetGroupsBottomRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
      this.FMoveOnPositions = this.FDownOnPositions;
      this.FDownCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.XYToCell(X,Y));
      this.FRangeCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FDownCell);
      this.FSizeCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FDownCell);
      this.FIsMouseDown = true;
      this.FTimeStart = $impl.GetTickCountX();
      this.FTimeStop = this.FTimeStart;
      this.FScrollVTo = this.GetVScrollValue();
      this.FScrollHTo = this.GetHScrollValue();
      this.FScrollX = X;
      this.FScrollY = Y;
      this.FDownX = X;
      this.FDownY = Y;
      this.FMouseX = X;
      this.FMouseY = Y;
      this.FMouseUp = false;
      this.FMovePositionPrevious = false;
      this.FMovePositionNext = false;
      this.FDownTimer.SetEnabled(!((((this.FDoItemSizeUp || this.FDoItemSizeDown) || this.FDoItemMove) || this.FDoItemDelete) || (this.FDoItemAnchor !== "")));
      this.FDoubleSelection = !this.FAnimateTimer.FEnabled;
      this.FRangeSelection = false;
      this.FScrolling = false;
      this.FDownTime = 0;
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        this.FMovePositionPrevious = (((this.GetVScrollValue() === 0) || !this.VerticalScrollBar().FVisible) && this.FInteraction.FSwipeToPreviousDateTime) && this.CanNavigate();
        this.FMovePositionNext = (((this.GetVScrollValue() === (this.VerticalScrollBar().FMax - this.GetVViewPortSize())) || !this.VerticalScrollBar().FVisible) && this.FInteraction.FSwipeToNextDateTime) && this.CanNavigate();
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        this.FMovePositionPrevious = (((this.GetHScrollValue() === 0) || !this.HorizontalScrollBar().FVisible) && this.FInteraction.FSwipeToPreviousDateTime) && this.CanNavigate();
        this.FMovePositionNext = (((this.GetHScrollValue() === (this.HorizontalScrollBar().FMax - this.GetHViewPortSize())) || !this.HorizontalScrollBar().FVisible) && this.FInteraction.FSwipeToNextDateTime) && this.CanNavigate();
      };
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      var f = 0.0;
      var cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var clsn = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var clen = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var it = null;
      var doscroll = false;
      var dsp = null;
      var m = 0;
      var domove = false;
      var dtc = 0.0;
      var dtn = 0.0;
      var d = 0;
      var del = false;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var pt = new pas["WEBLib.TMSFNCTypes"].TPointF();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      this.ProcessNavigationButtonsMove(X,Y);
      if (this.FIsMouseDown && !(this.FDoItemAnchor !== "")) {
        this.ShowHintEx(null,-1,-1);
        doscroll = ((!this.FDoItemMove && !this.FDoItemSizeUp) && !this.FDoItemSizeDown) && !this.FDoItemDelete;
        if (doscroll) {
          f = 1;
          var $tmp1 = this.FScrollMode;
          if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) f = 0.1;
          domove = false;
          if ((this.FDownOnPositions && (this.FInteraction.FSwipeToNextDateTime || this.FInteraction.FSwipeToPreviousDateTime)) && this.CanNavigate()) {
            domove = true;
            this.FDownOnPositions = false;
            var $tmp2 = this.FOrientationMode;
            if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
              this.FMovePositionNext = this.FMovePositionNext && ((Y - this.FMouseY) < 0);
              this.FMovePositionPrevious = this.FMovePositionPrevious && ((Y - this.FMouseY) > 0);
            } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
              this.FMovePositionNext = this.FMovePositionNext && ((X - this.FMouseX) < 0);
              this.FMovePositionPrevious = this.FMovePositionPrevious && ((X - this.FMouseX) > 0);
            };
          } else {
            this.FMovePositionPrevious = false;
            this.FMovePositionNext = false;
          };
          if (!this.FMovePositionNext && !this.FMovePositionPrevious) {
            if ((((this.FScrolling || (Math.abs(this.FMouseX - X) > 3)) || (Math.abs(this.FMouseY - Y) > 3)) && !this.FRangeSelection) && this.FInteraction.FTouchScrolling) {
              if ((Math.abs(X - this.FDownX) > 0) || (Math.abs(Y - this.FDownY) > 0)) {
                this.FScrolling = true;
                this.FDownTimer.SetEnabled(false);
                this.FDoubleSelection = false;
                if (this.FIsMouseDown && !this.FMouseUp) {
                  if (this.FMoveOnPositions) {
                    var $tmp3 = this.FOrientationMode;
                    if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                      this.Scroll(this.GetHScrollValue(),this.GetVScrollValue() - ((Y - this.FDownY) * f))}
                     else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.Scroll(this.GetHScrollValue() - ((X - this.FDownX) * f),this.GetVScrollValue());
                  } else this.Scroll(this.GetHScrollValue() - ((X - this.FDownX) * f),this.GetVScrollValue() - ((Y - this.FDownY) * f));
                  this.FDownY = Y;
                  this.FDownX = X;
                };
              };
            } else if (this.FRangeSelection) {
              cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.XYToCell(X,Y));
              if ($impl.IsValidCell(cl.Col,cl.Row) && $impl.IsValidCell(this.FDownCell.Col,this.FDownCell.Row)) {
                this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(cl.Col,this.FDownCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cl));
                if ((cl.Col !== this.FRangeCell.Col) || (cl.Row !== this.FRangeCell.Row)) this.HandleCellSelection(true);
                this.FRangeCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cl);
              };
            };
          } else if ((this.FMovePositionNext || this.FMovePositionPrevious) && domove) {
            if (this.FMovePositionPrevious || this.FMovePositionNext) {
              dtc = this.FDisplayStartTime;
              if (this.FMovePositionPrevious) {
                dtn = this.GetPreviousDateTime();
                d = $mod.TTMSFNCPlannerNavigationDirection.pndPrevious;
              } else {
                dtn = this.GetNextDateTime();
                d = $mod.TTMSFNCPlannerNavigationDirection.pndNext;
              };
              this.HandleDateTimeNavigation(d,dtc,dtn);
            };
          };
        } else if (((this.FDoItemSizeUp || this.FDoItemSizeDown) || this.FDoItemMove) && (this.FDownItem != null)) {
          this.FDrawItemHelpers = true;
          cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.XYToCell(X,Y));
          if ((cl.Col !== -1) && (cl.Row !== -1)) {
            cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.ItemToStartCell(this.FDownItem));
            cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.ItemToEndCell(this.FDownItem));
            clsn.Col = cls.Col;
            clen.Col = cle.Col;
            clsn.Row = cls.Row;
            clen.Row = cle.Row;
            if (this.FDoItemSizeUp) {
              if (((cls.Row >= cle.Row) && ((cle.Col - cl.Col) > 0)) || ((cls.Row < cle.Row) && ((cle.Col - cl.Col) >= 0))) clsn.Col = cl.Col;
              if (clsn.Col === cle.Col) {
                clsn.Row = Math.min(cle.Row - 1,cl.Row)}
               else clsn.Row = cl.Row;
            } else if (this.FDoItemSizeDown) {
              if (((cle.Row <= cls.Row) && ((cl.Col - cls.Col) > 0)) || ((cle.Row > cls.Row) && ((cl.Col - cls.Col) >= 0))) clen.Col = cl.Col;
              if (clen.Col === cls.Col) {
                clen.Row = Math.max(cls.Row + 1,cl.Row + 1)}
               else clen.Row = cl.Row + 1;
            } else {
              clsn.Col = clsn.Col + (cl.Col - this.FSizeCell.Col);
              clsn.Row = clsn.Row + (cl.Row - this.FSizeCell.Row);
              clen.Col = clen.Col + (cl.Col - this.FSizeCell.Col);
              clen.Row = clen.Row + (cl.Row - this.FSizeCell.Row);
              if ((clsn.Row < 0) || (clen.Row > this.FRowCount)) {
                clsn.Row = cls.Row;
                clen.Row = cle.Row;
              };
              if ((clsn.Col < 0) || (clen.Col > (this.FColumnCount - 1))) {
                clsn.Col = cls.Col;
                clen.Col = cle.Col;
              };
            };
            if (this.FDoItemSizeUp) {
              m = $mod.TTMSFNCPlannerMouseInteractionMode.pmmSizeUp}
             else if (this.FDoItemSizeDown) {
              m = $mod.TTMSFNCPlannerMouseInteractionMode.pmmSizeDown}
             else m = $mod.TTMSFNCPlannerMouseInteractionMode.pmmMove;
            if (this.HandleItemMouseInteraction(this.FDownItem,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clsn),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clen),m)) this.FSizeCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cl);
          };
        };
      } else {
        it = null;
        dsp = this.XYToCacheItem(X,Y);
        if (dsp != null) it = dsp.FItem;
        if (((this.FToolBarPopup != null) && (this.FActiveItem != null)) && !this.FToolBarPopup.Activated()) {
          if (it === this.FActiveItem) {
            this.FToolBarPopup.SetPlacementControl(this);
            this.FToolBarPopup.SetPlacement(pas["WEBLib.TMSFNCPopup"].TTMSFNCPopupPlacement.ppAbsolute);
            this.FToolBarPopup.FPlanner = this;
            this.FToolBarPopup.FPlannerItem = it;
            this.FToolBarPopup.Activate();
            r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetFirstRect(it));
            pt = new pas["WEBLib.TMSFNCTypes"].TPointF(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + (((r.Right - r.Left) - this.FToolBarPopup.FToolBar.GetWidth()) / 2),(r.Top - this.FToolBarPopup.FToolBar.GetHeight()) + 1));
            pt = new pas["WEBLib.TMSFNCTypes"].TPointF(this.ConvertClientToScreen(new pas["WEBLib.TMSFNCTypes"].TPointF(pt)));
            this.FToolBarPopup.FPlacementRectangle.SetLeft(pt.X);
            this.FToolBarPopup.FPlacementRectangle.SetTop(pt.Y);
            this.FToolBarPopup.FPlacementRectangle.SetRight(pt.X);
            this.FToolBarPopup.FPlacementRectangle.SetBottom(pt.Y);
            return;
          };
        };
        if ((((this.FToolBarPopup != null) && this.FToolBarPopup.Activated()) && !this.FToolBarPopup.DropDownActive()) && (it !== this.FActiveItem)) this.FToolBarPopup.Deactivate();
        if ((it != null) && (dsp != null)) {
          del = it.FDeletable;
          this.DoIsItemDeletable(it,{get: function () {
              return del;
            }, set: function (v) {
              del = v;
            }});
          if (this.FActiveItem === it) {
            if (((((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemStartTimeSizeRect(dsp),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.CanSizeCacheItemStartTime(dsp)) || (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemEndTimeSizeRect(dsp),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.CanSizeCacheItemEndTime(dsp))) && it.FSizeable) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly) {
              var $tmp4 = this.FOrientationMode;
              if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                this.SetCursor(9)}
               else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.SetCursor(7);
            } else if ((((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemMoveRect(dsp),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.CanMoveCacheItem(dsp)) && it.FMovable) && this.AllowDesktopMove()) && !this.FInteraction.FReadOnly) {
              this.SetCursor(22)}
             else if (((((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemDeleteRect(dsp),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.CanDeleteCacheItem(dsp)) && del) && this.AllowDesktopDelete()) && this.FItemsAppearance.FShowDeleteArea) && !this.FInteraction.FReadOnly) {
              this.SetCursor(21)}
             else if (this.XYToItemAnchor(it,X,Y) !== "") {
              this.SetCursor(21)}
             else this.SetCursor(0);
          } else {
            if (((((pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetCacheItemDeleteRect(dsp),pas["WEBLib.TMSFNCTypes"].PointF(X,Y)) && this.CanDeleteCacheItem(dsp)) && del) && this.AllowDesktopDelete()) && this.FItemsAppearance.FShowDeleteArea) && !this.FInteraction.FReadOnly) {
              this.SetCursor(21)}
             else if (this.XYToItemAnchor(it,X,Y) !== "") {
              this.SetCursor(21)}
             else this.SetCursor(0);
          };
        } else this.SetCursor(0);
        this.ShowHintEx(it,X,Y);
      };
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      var f = 0.0;
      var b = false;
      var prev = null;
      var a = "";
      var it = null;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      this.ReleaseCaptureEx();
      this.HandleAfterEvents();
      this.ProcessNavigationButtonsUp(X,Y);
      if (this.FNavigationButtonDown) {
        this.FNavigationButtonDown = false;
        this.Invalidate();
        return;
      };
      if (!this.FIsMouseDown) return;
      f = 1;
      var $tmp1 = this.FScrollMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) f = 0.1;
      this.FIsMouseDown = false;
      this.FMouseUp = true;
      this.FScrolling = false;
      this.FDownTimer.SetEnabled(false);
      if ((!this.FMovePositionPrevious && !this.FMovePositionNext) || !this.FDownOnPositions) {
        if ((((!this.FDoItemSizeUp && !this.FDoItemSizeDown) && !this.FDoItemMove) && !this.FDoItemDelete) && !(this.FDoItemAnchor !== "")) {
          if (!this.FDoubleSelection && this.FInteraction.FTouchScrolling) {
            this.FTimeStop = $impl.GetTickCountX();
            if (((this.FTimeStop - this.FTimeStart) < 300) && ((this.FTimeStop - this.FTimeStart) > 0)) {
              this.FSpY = Math.abs(Y - this.FScrollY) / (this.FTimeStop - this.FTimeStart);
              if ((this.FSpY > 0) && (!this.FMoveOnPositions || ((this.FOrientationMode === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) && this.FMoveOnPositions))) {
                if ((Y - this.FScrollY) > 0) {
                  this.FScrollVTo = Math.max(0,Math.min(this.VerticalScrollBar().FMax - this.GetVViewPortSize(),this.FScrollVTo - Math.round(((Math.abs(Y - this.FScrollY) * this.FSpY) * f) * 3)))}
                 else this.FScrollVTo = Math.max(0,Math.min(this.VerticalScrollBar().FMax - this.GetVViewPortSize(),this.FScrollVTo + Math.round(((Math.abs(Y - this.FScrollY) * this.FSpY) * f) * 3)));
                this.FAnimateVerticalPos = true;
                this.FAnimateTimer.SetEnabled(true);
              };
              this.FSpX = Math.abs(X - this.FScrollX) / (this.FTimeStop - this.FTimeStart);
              if ((this.FSpX > 0) && (!this.FMoveOnPositions || ((this.FOrientationMode === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) && this.FMoveOnPositions))) {
                if ((X - this.FScrollX) > 0) {
                  this.FScrollHTo = Math.max(0,Math.min(this.HorizontalScrollBar().FMax - this.GetHViewPortSize(),this.FScrollHTo - Math.round(((Math.abs(X - this.FScrollX) * this.FSpX) * f) * 3)))}
                 else this.FScrollHTo = Math.max(0,Math.min(this.HorizontalScrollBar().FMax - this.GetHViewPortSize(),this.FScrollHTo + Math.round(((Math.abs(X - this.FScrollX) * this.FSpX) * f) * 3)));
                this.FAnimateHorizontalPos = true;
                this.FAnimateTimer.SetEnabled(true);
              };
            };
          } else {
            if (this.FDownItem != null) {
              b = this.FDownItem.FSelectable && this.FDownItem.FEnabled;
              prev = this.FActiveItem;
              this.DoBeforeSelectItem(this.FDownItem,{get: function () {
                  return b;
                }, set: function (v) {
                  b = v;
                }});
              if (b) {
                if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
                  this.HandleSelectLinkedItems(this.FDownItem,(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in Shift) && this.FInteraction.FMultiSelect)}
                 else this.HandleSelectItem(this.FDownItem,(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in Shift) && this.FInteraction.FMultiSelect);
                this.DoAfterSelectItem(this.FDownItem);
              };
              if (((this.FInteraction.FMouseEditMode === $mod.TTMSFNCPlannerMouseEditMode.pmemSingleClick) || ((this.FInteraction.FMouseEditMode === $mod.TTMSFNCPlannerMouseEditMode.pmemSingleClickOnSelectedItem) && (this.FDownItem === prev))) && !this.FInteraction.FReadOnly) {
                if (this.FDownItem != null) {
                  it = this.FDownItem;
                  if ((this.FDownCacheItemIdx >= 0) && (this.FDownCacheItemIdx <= (it.FCacheList.GetCount() - 1))) this.HandleItemEditing(this.FDownItem,it.FCacheList.GetItem(this.FDownCacheItemIdx));
                };
              };
            } else if ($impl.IsValidCell(this.FDownCell.Col,this.FDownCell.Row)) {
              if (!this.FRangeSelection) {
                if (pas["WEBLib.Controls"].TShiftState$a.ssShift in Shift) {
                  this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FSelection.StartCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FDownCell))}
                 else this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FDownCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.FDownCell));
              };
              this.HandleCellSelection(false);
              if (!this.FInteraction.FReadOnly) {
                var $tmp2 = this.FInteraction.FMouseInsertMode;
                if ($tmp2 === $mod.TTMSFNCPlannerMouseInsertMode.pmimAfterSelection) {
                  this.HandleItemInsert(false)}
                 else if ($tmp2 === $mod.TTMSFNCPlannerMouseInsertMode.pmimDialogAfterSelection) this.HandleItemInsert(true);
              };
            };
          };
        } else if ((!this.FDoItemSizeUp && !this.FDoItemSizeDown) && !this.FDoItemMove) {
          if (this.FDoItemDelete) {
            this.HandleItemDelete(this.FDownItem,$mod.TTMSFNCPlannerItemDeleteMode.pidmTouch)}
           else {
            a = this.XYToItemAnchor(this.FDownItem,X,Y);
            if (a !== "") this.DoItemAnchorClick(this.FDownItem,a);
          };
        };
      };
      if (((this.FDoItemSizeUp || this.FDoItemSizeDown) || this.FDoItemMove) || this.FDoItemDelete) this.DoAfterItemChanged(this.FDownItem);
      this.FRangeSelection = false;
      this.FDoItemSizeUp = false;
      this.FDoItemSizeDown = false;
      this.FDoItemDelete = false;
      this.FDoItemAnchor = "";
      this.FDoItemMove = false;
      if (this.FDrawItemHelpers) {
        this.FDrawItemHelpers = false;
        this.Invalidate();
      };
    };
    this.HandleKeyDown = function (Key, Shift) {
      var k = 0;
      var sr = 0;
      var sc = 0;
      var cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var I = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyDown.apply(this,arguments);
      if (this.FInplaceEditorClosed) return;
      if (this.FActiveItem != null) {
        k = $mod.TTMSFNCPlannerInteractionDirection.idNone;
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          var $tmp2 = Key.get();
          if ($tmp2 === 38) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idLeft}
           else if ($tmp2 === 40) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idRight}
           else if ($tmp2 === 37) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idUp}
           else if ($tmp2 === 39) k = $mod.TTMSFNCPlannerInteractionDirection.idDown;
        } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          var $tmp3 = Key.get();
          if ($tmp3 === 37) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idLeft}
           else if ($tmp3 === 39) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idRight}
           else if ($tmp3 === 38) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idUp}
           else if ($tmp3 === 40) k = $mod.TTMSFNCPlannerInteractionDirection.idDown;
        };
        cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.ItemToStartCell(this.FActiveItem));
        cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.ItemToEndCell(this.FActiveItem));
        var $tmp4 = k;
        if ($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) {
          this.HandleItemKeyboardInteraction(this.FActiveItem,k,rtl.refSet(Shift),-1,0,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle))}
         else if ($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idRight) {
          this.HandleItemKeyboardInteraction(this.FActiveItem,k,rtl.refSet(Shift),1,0,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle))}
         else if ($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idUp) {
          this.HandleItemKeyboardInteraction(this.FActiveItem,k,rtl.refSet(Shift),0,-1,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle))}
         else if ($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idDown) this.HandleItemKeyboardInteraction(this.FActiveItem,k,rtl.refSet(Shift),0,1,new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle));
        var $tmp5 = Key.get();
        if ($tmp5 === 46) {
          if (this.FInteraction.FKeyboardDelete && !this.FInteraction.FReadOnly) {
            for (var $l6 = this.FSelectedItems.GetCount() - 1; $l6 >= 0; $l6--) {
              I = $l6;
              this.HandleItemDelete(this.FSelectedItems.GetItem(I),$mod.TTMSFNCPlannerItemDeleteMode.pidmKeyboard);
            };
          };
        };
      } else {
        k = $mod.TTMSFNCPlannerInteractionDirection.idNone;
        var $tmp7 = this.FOrientationMode;
        if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          var $tmp8 = Key.get();
          if (($tmp8 === 38) || ($tmp8 === 33)) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idLeft}
           else if (($tmp8 === 40) || ($tmp8 === 34)) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idRight}
           else if (($tmp8 === 37) || ($tmp8 === 36)) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idUp}
           else if (($tmp8 === 39) || ($tmp8 === 35)) k = $mod.TTMSFNCPlannerInteractionDirection.idDown;
        } else if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          var $tmp9 = Key.get();
          if (($tmp9 === 37) || ($tmp9 === 36)) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idLeft}
           else if (($tmp9 === 39) || ($tmp9 === 35)) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idRight}
           else if (($tmp9 === 38) || ($tmp9 === 33)) {
            k = $mod.TTMSFNCPlannerInteractionDirection.idUp}
           else if (($tmp9 === 40) || ($tmp9 === 34)) k = $mod.TTMSFNCPlannerInteractionDirection.idDown;
        };
        sr = 1;
        sc = 1;
        var $tmp10 = Key.get();
        if (($tmp10 === 33) || ($tmp10 === 34)) {
          sr = this.StopRow() - this.StartRow()}
         else if ($tmp10 === 36) {
          sc = this.FSelection.StartCell.Col}
         else if ($tmp10 === 35) sc = (this.FColumnCount - 1) - this.FSelection.StartCell.Col;
        this.ProcessSelection(k,rtl.refSet(Shift),sc,sr);
        var $tmp11 = k;
        if (((($tmp11 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) || ($tmp11 === $mod.TTMSFNCPlannerInteractionDirection.idRight)) || ($tmp11 === $mod.TTMSFNCPlannerInteractionDirection.idUp)) || ($tmp11 === $mod.TTMSFNCPlannerInteractionDirection.idDown)) this.HandleCellSelection(true);
        var $tmp12 = Key.get();
        if ($tmp12 === 45) {
          if (!this.FInteraction.FReadOnly) {
            var $tmp13 = this.FInteraction.FKeyboardInsertMode;
            if ($tmp13 === $mod.TTMSFNCPlannerKeyboardInsertMode.pkimSelection) this.HandleItemInsert(false);
          };
        };
      };
      if (((pas["WEBLib.Controls"].TShiftState$a.ssShift in Shift) || (pas["WEBLib.Controls"].TShiftState$a.ssCtrl in Shift)) && !this.FDrawItemHelpers) {
        this.FDrawItemHelpers = true;
        this.Invalidate();
      };
    };
    this.HandleDialogKey = function (Key, Shift) {
      var it = null;
      if (this.FInplaceEditorClosed) {
        pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleDialogKey.apply(this,arguments);
        return;
      };
      if (((((Key.get() === 27) || (Key.get() === 9)) || (Key.get() === 113)) && (this.FInplaceEditor != null)) && this.FInplaceEditorActive) {
        this.FCloseWithDialogKey = true;
        this.CloseInplaceEditor(Key.get() === 27);
      };
      if ((Key.get() === 27) && this.FEditorDialogActive) this.CloseEditingDialog(true);
      if ((((Key.get() === 13) && this.FEditorDialogActive) && (this.FTextMemo != null)) && !this.FTextMemo.IsFocused()) this.CloseEditingDialog(false);
      if ((Key.get() === 9) && this.FInplaceEditorActive) {
        Key.set(0);
        return;
      };
      it = null;
      if ((Key.get() === 9) && this.IsFocused()) {
        if (pas["WEBLib.Controls"].TShiftState$a.ssShift in Shift) {
          it = this.SelectPreviousItem()}
         else it = this.SelectNextItem();
      };
      if (it != null) Key.set(0);
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleDialogKey.apply(this,arguments);
    };
    this.HandleKeyUp = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyUp.apply(this,arguments);
      if (this.FInplaceEditorClosed) {
        this.FInplaceEditorClosed = false;
        return;
      };
      if (this.HandleAfterEvents() && (this.FActiveItem != null)) this.DoAfterItemChanged(this.FActiveItem);
      if (this.FCloseWithDialogKey) {
        this.FCloseWithDialogKey = false;
        return;
      };
      if (this.FActiveItem != null) {
        if (this.FInteraction.FKeyboardEdit && !this.FInteraction.FReadOnly) {
          var $tmp1 = Key.get();
          if ((($tmp1 === 113) || ($tmp1 === 13)) || ($tmp1 === 32)) this.HandleItemEditing(this.FActiveItem,null);
        };
      } else {
        var $tmp2 = Key.get();
        if (((((((($tmp2 === 38) || ($tmp2 === 40)) || ($tmp2 === 39)) || ($tmp2 === 37)) || ($tmp2 === 36)) || ($tmp2 === 33)) || ($tmp2 === 34)) || ($tmp2 === 35)) {
          this.HandleCellSelection(false);
        } else if ($tmp2 === 45) {
          if (!this.FInteraction.FReadOnly) {
            var $tmp3 = this.FInteraction.FKeyboardInsertMode;
            if ($tmp3 === $mod.TTMSFNCPlannerKeyboardInsertMode.pkimSelectionDialog) this.HandleItemInsert(true);
          };
        };
      };
      if (this.FDrawItemHelpers && rtl.eqSet(Shift,{})) {
        this.FDrawItemHelpers = false;
        this.Invalidate();
      };
    };
    this.HandleMouseWheel = function (Shift, WheelDelta, Handled) {
      var vpos = 0.0;
      var hpos = 0.0;
      var sz = 0.0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseWheel.apply(this,arguments);
      vpos = this.GetVScrollValue();
      hpos = this.GetHScrollValue();
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        sz = this.FDefaultColumnWidth}
       else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        sz = this.FDefaultRowHeight}
       else {
        sz = 0;
      };
      if (WheelDelta > 0) {
        this.Scroll(hpos,vpos - sz)}
       else this.Scroll(hpos,vpos + sz);
      Handled.set(true);
    };
    this.StartDateEditChanged = function (Sender) {
      var dt = 0.0;
      var dte = 0.0;
      if ((((this.FStartDateEdit != null) && (this.FStartTimeEdit != null)) && (this.FEndDateEdit != null)) && (this.FStartDateEdit != null)) {
        dt = this.FStartDateEdit.GetDate() + this.FStartTimeEdit.GetTime();
        dte = this.FEndDateEdit.GetDate() + this.FEndTimeEdit.GetTime();
        if (pas.DateUtils.CompareDateTime(dt + pas.DateUtils.IncMilliSecond(0,1),dte) === 1) {
          this.FStartDateEdit.SetDate(this.FDialogStartDate)}
         else this.FDialogStartDate = this.FStartDateEdit.GetDate();
      };
    };
    this.EndDateEditChanged = function (Sender) {
      var dt = 0.0;
      var dte = 0.0;
      if ((((this.FStartDateEdit != null) && (this.FStartTimeEdit != null)) && (this.FEndDateEdit != null)) && (this.FStartDateEdit != null)) {
        dt = this.FStartDateEdit.GetDate() + this.FStartTimeEdit.GetTime();
        dte = this.FEndDateEdit.GetDate() + this.FEndTimeEdit.GetTime();
        if (pas.DateUtils.CompareDateTime(dt + pas.DateUtils.IncMilliSecond(0,1),dte) === 1) {
          this.FEndDateEdit.SetDate(this.FDialogEndDate)}
         else this.FDialogEndDate = this.FEndDateEdit.GetDate();
      };
    };
    this.StartTimeEditChanged = function (Sender) {
      var dt = 0.0;
      var dte = 0.0;
      if ((((this.FStartDateEdit != null) && (this.FStartTimeEdit != null)) && (this.FEndDateEdit != null)) && (this.FStartDateEdit != null)) {
        dt = this.FStartDateEdit.GetDate() + this.FStartTimeEdit.GetTime();
        dte = this.FEndDateEdit.GetDate() + this.FEndTimeEdit.GetTime();
        if (pas.DateUtils.CompareDateTime(dt + pas.DateUtils.IncMilliSecond(0,1),dte) === 1) {
          this.FStartTimeEdit.SetTime(this.FDialogStartTime)}
         else this.FDialogStartTime = this.FStartTimeEdit.GetTime();
      };
    };
    this.EndTimeEditChanged = function (Sender) {
      var dt = 0.0;
      var dte = 0.0;
      if ((((this.FStartDateEdit != null) && (this.FStartTimeEdit != null)) && (this.FEndDateEdit != null)) && (this.FStartDateEdit != null)) {
        dt = this.FStartDateEdit.GetDate() + this.FStartTimeEdit.GetTime();
        dte = this.FEndDateEdit.GetDate() + this.FEndTimeEdit.GetTime();
        if (pas.DateUtils.CompareDateTime(dt + pas.DateUtils.IncMilliSecond(0,1),dte) === 1) {
          this.FEndTimeEdit.SetTime(this.FDialogEndTime)}
         else this.FDialogEndTime = this.FEndTimeEdit.GetTime();
      };
    };
    this.EditingDialogCancel = function (Sender) {
      this.CloseEditingDialog(true);
    };
    this.EditingDialogRemove = function (Sender) {
      this.CloseEditingDialogAndRemoveItem();
    };
    this.EditingDialogValidate = function (Sender) {
      this.CloseEditingDialog(false);
    };
    this.DirtyItem = function (AItem) {
      var rse = 0;
      var rsa = 0;
      var I = 0;
      var it = null;
      var svdirty = null;
      var sta = 0.0;
      var ste = 0.0;
      var mxa = 0.0;
      var mxe = 0.0;
      if (AItem != null) {
        it = AItem;
        var $tmp1 = this.GetDisplayMode();
        if ((((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmCustom)) {
          rsa = AItem.FResource;
          rse = AItem.FResource;
        } else if (((($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
          rsa = this.DateTimeToPosition(it.FStartTime,false,true);
          rse = this.DateTimeToPosition(it.FEndTime,true,true);
          var $tmp2 = this.GetDisplayMode();
          if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
            if (Math.abs(it.FEndTime - it.FStartTime) < 1) rse = this.DateTimeToPosition(it.FEndTime,false,true);
          } else if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
            rsa = rsa + AItem.FResource;
            rse = rse + AItem.FResource;
          } else if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
            rsa = rsa + (AItem.FResource * Math.max(1,this.GetNumDays()));
            rse = rse + (AItem.FResource * Math.max(1,this.GetNumDays()));
          };
        } else {
          rsa = -1;
          rse = -1;
        };
        svdirty = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerIntegerList.$create("Create$1");
        for (var $l3 = 0, $end4 = it.FCacheList.GetCount() - 1; $l3 <= $end4; $l3++) {
          I = $l3;
          svdirty.Add(it.FCacheList.GetItem(I).FPosition);
        };
        it.FDirtyList.Clear();
        for (var $l5 = rsa, $end6 = rse; $l5 <= $end6; $l5++) {
          I = $l5;
          if (((this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiResDay) && (this.PositionToResource(I) === AItem.FResource)) || (this.GetDisplayMode() !== $mod.TTMSFNCPlannerMode.pmMultiResDay)) {
            sta = this.MaxPositionDateTime(it.FStartTime,false,I);
            ste = this.MaxPositionDateTime(it.FEndTime,true,I);
            mxa = this.CalculatePositionDateTime(this.FDisplayStartTime,I);
            mxe = this.CalculatePositionDateTime(this.FDisplayEndTime,I);
            if ((((pas.DateUtils.CompareDateTime(sta,mxa) >= 0) && (pas.DateUtils.CompareDateTime(sta,mxe) <= 0)) || ((pas.DateUtils.CompareDateTime(ste,mxa) >= 0) && (pas.DateUtils.CompareDateTime(ste,mxe) <= 0))) && ((ste - sta) > 0)) it.FDirtyList.Add(I);
          };
        };
        it.FCleanupList.Clear();
        for (var $l7 = 0, $end8 = svdirty.GetCount() - 1; $l7 <= $end8; $l7++) {
          I = $l7;
          if (~it.FDirtyList.IndexOf(svdirty.GetItem(I)) > -1) it.FCleanupList.Add(svdirty.GetItem(I));
        };
        it.FOldPositionsList.Clear();
        for (var $l9 = 0, $end10 = it.FPositionsList.GetCount() - 1; $l9 <= $end10; $l9++) {
          I = $l9;
          it.FOldPositionsList.Add(it.FPositionsList.GetItem(I));
        };
        it.FPositionsList.Clear();
        for (var $l11 = 0, $end12 = it.FDirtyList.GetCount() - 1; $l11 <= $end12; $l11++) {
          I = $l11;
          it.FPositionsList.Add(it.FDirtyList.GetItem(I));
        };
        svdirty = rtl.freeLoc(svdirty);
      };
    };
    this.ShowHintEx = function (AItem, X, Y) {
      var hp = new $mod.TTMSFNCPlannerHintPopup();
      hp = new $mod.TTMSFNCPlannerHintPopup(this.GetHintPopup());
      if (hp.Panel != null) {
        if (((AItem != null) && (AItem.FHint !== "")) && !this.FAnimating) {
          if (hp.Panel.FParent === null) {
            hp.Panel.SetParent(this);
            if (hp.TextLabel != null) {
              hp.TextLabel.SetCaption(AItem.FHint);
              hp.Panel.SetWidth(hp.TextLabel.GetWidth() + 10);
              hp.Panel.SetHeight(hp.TextLabel.GetHeight() + 10);
            };
          };
          hp.Panel.SetLeft(Math.round(X));
          hp.Panel.SetTop(Math.round(Y + 20));
        } else hp.Panel.SetParent(null);
      };
    };
    this.UpdateLinkedItems = function (AItem, ADiffStartTime, ADiffEndTime, ADiffPosition) {
      var li = null;
      var nst = 0.0;
      var net = 0.0;
      if (!(AItem != null) || !(AItem.FLinkedItem != null)) return;
      li = AItem.FLinkedItem;
      if (li.FCanUpdate && (AItem.FLinkType !== pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltNone)) {
        li.BeginUpdate();
        nst = li.FStartTime;
        net = li.FEndTime;
        this.GetNewDateTimeAndResource(li,AItem.FLinkType,ADiffStartTime,ADiffEndTime,{get: function () {
            return nst;
          }, set: function (v) {
            nst = v;
          }},{get: function () {
            return net;
          }, set: function (v) {
            net = v;
          }});
        li.SetStartTime(nst);
        li.SetEndTime(net);
        if (!li.FFixedResource) li.SetResource(li.FResource + ADiffPosition);
        li.EndUpdate(false,false);
      };
    };
    this.ProcessNavigation = function (ADirection, AShift, AStepCol, AStepRow) {
      var $tmp1 = ADirection;
      if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) {
        if (this.FSelection.StartCell.Col > 0) {
          if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
            this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col - AStepCol,this.FSelection.StartCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col - AStepCol,this.FSelection.EndCell.Row)))}
           else {
            if (this.FPrevSelection.EndCell.Row === this.FSelection.EndCell.Row) {
              this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col - AStepCol,this.FSelection.StartCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col - AStepCol,this.FSelection.StartCell.Row)))}
             else this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col - AStepCol,this.FSelection.EndCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col - AStepCol,this.FSelection.EndCell.Row)));
          };
        };
      } else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idRight) {
        if (this.FSelection.EndCell.Col < (this.FColumnCount - 1)) {
          if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
            this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col + AStepCol,this.FSelection.StartCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col + AStepCol,this.FSelection.EndCell.Row)))}
           else {
            if (this.FPrevSelection.EndCell.Row === this.FSelection.EndCell.Row) {
              this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col + AStepCol,this.FSelection.StartCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col + AStepCol,this.FSelection.StartCell.Row)))}
             else this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col + AStepCol,this.FSelection.EndCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col + AStepCol,this.FSelection.EndCell.Row)));
          };
        };
      } else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idUp) {
        if (this.FSelection.StartCell.Row > 0) {
          if (this.FPrevSelection.StartCell.Row === this.FSelection.StartCell.Row) {
            if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
              this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col,this.FSelection.StartCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.EndCell.Row - AStepRow)))}
             else this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col,this.FSelection.StartCell.Row - AStepRow)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.StartCell.Row - AStepRow)));
          } else {
            if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
              this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col,this.FSelection.StartCell.Row - AStepRow)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col,this.FSelection.EndCell.Row)))}
             else this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col,this.FSelection.StartCell.Row - AStepRow)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.StartCell.Col,this.FSelection.StartCell.Row - AStepRow)));
          };
        };
      } else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idDown) {
        if (this.FSelection.EndCell.Row < (this.FRowCount - 1)) {
          if (this.FPrevSelection.EndCell.Row === this.FSelection.EndCell.Row) {
            if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
              this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.StartCell.Row + AStepRow)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.EndCell.Row)))}
             else this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.EndCell.Row + AStepRow)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.EndCell.Row + AStepRow)));
          } else {
            if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
              this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.StartCell.Row)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.EndCell.Row + AStepRow)))}
             else this.SelectCells(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.EndCell.Row + AStepRow)),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FSelection.EndCell.Col,this.FSelection.EndCell.Row + AStepRow)));
          };
        };
      };
    };
    this.HandleItemKeyboardInteraction = function (AItem, ADirection, AShift, AColValue, ARowValue, AStartCell, AEndCell) {
      var cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var clssave = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var res = 0;
      var nst = 0.0;
      var net = 0.0;
      var c = false;
      var ps = 0;
      var pe = 0;
      var difc = 0;
      var rs = 0;
      var b = false;
      var duration = 0.0;
      var deltae = 0.0;
      var deltas = 0.0;
      var dt = 0.0;
      if (((AItem != null) && (ADirection !== $mod.TTMSFNCPlannerInteractionDirection.idNone)) && !this.FInteraction.FReadOnly) {
        cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AStartCell);
        cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AEndCell);
        clssave = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls);
        deltae = AItem.FEndTime - this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle));
        deltas = AItem.FStartTime - this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls));
        duration = AItem.FEndTime - AItem.FStartTime;
        var $tmp1 = ADirection;
        if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) {
          if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
            if ((pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (cls.Col > 0)) {
              cls.Col = cls.Col + AColValue}
             else if (!(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (((cle.Row > cls.Row) && ((cle.Col - cls.Col) > 0)) || ((cle.Row <= cls.Row) && ((cle.Col - cls.Col) > 1)))) cle.Col = cle.Col + AColValue;
          } else if (cls.Col > 0) {
            cls.Col = cls.Col + AColValue;
            cle.Col = cle.Col + AColValue;
          };
        } else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idRight) {
          if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
            if ((pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (((cle.Row > cls.Row) && ((cle.Col - cls.Col) > 0)) || ((cle.Row <= cls.Row) && ((cle.Col - cls.Col) > 1)))) {
              cls.Col = cls.Col + AColValue}
             else if (!(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (cle.Col < (this.FColumnCount - 1))) cle.Col = cle.Col + AColValue;
          } else if (cle.Col < (this.FColumnCount - 1)) {
            cls.Col = cls.Col + AColValue;
            cle.Col = cle.Col + AColValue;
          };
        } else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idUp) {
          if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
            if ((pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (cls.Row > 0)) {
              cls.Row = cls.Row + ARowValue}
             else if ((!(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (cle.Row > 0)) && (((cle.Row - cls.Row) > 1) || ((cle.Col - cls.Col) > 0))) cle.Row = cle.Row + ARowValue;
          } else if (cls.Row > 0) {
            cls.Row = cls.Row + ARowValue;
            cle.Row = cle.Row + ARowValue;
          };
        } else if ($tmp1 === $mod.TTMSFNCPlannerInteractionDirection.idDown) {
          if (pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) {
            if (((pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (cls.Row < this.FRowCount)) && (((cle.Row - cls.Row) > 1) || ((cle.Col - cls.Col) > 0))) {
              cls.Row = cls.Row + ARowValue}
             else if (!(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) && (cle.Row < this.FRowCount)) cle.Row = cle.Row + ARowValue;
          } else if (cle.Row < this.FRowCount) {
            cls.Row = cls.Row + ARowValue;
            cle.Row = cle.Row + ARowValue;
          };
        };
        if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
          ps = this.PositionToResource(cls.Col);
          pe = this.PositionToResource(cle.Col);
          difc = cle.Col - cls.Col;
          if (pe !== ps) {
            var $tmp2 = ADirection;
            if (($tmp2 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) || ($tmp2 === $mod.TTMSFNCPlannerInteractionDirection.idUp)) {
              cls.Col = cls.Col - difc;
              cle.Col = cle.Col - difc;
            } else if (($tmp2 === $mod.TTMSFNCPlannerInteractionDirection.idRight) || ($tmp2 === $mod.TTMSFNCPlannerInteractionDirection.idDown)) {
              cls.Col = cls.Col + difc;
              cle.Col = cle.Col + difc;
            };
          };
        };
        nst = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls));
        net = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle));
        res = 0;
        if (!AItem.FFixedResource) {
          var $tmp3 = ADirection;
          if (($tmp3 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) || ($tmp3 === $mod.TTMSFNCPlannerInteractionDirection.idUp)) {
            if ((pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) && !(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift)) {
              res = cle.Col}
             else res = cls.Col;
          } else if (($tmp3 === $mod.TTMSFNCPlannerInteractionDirection.idRight) || ($tmp3 === $mod.TTMSFNCPlannerInteractionDirection.idDown)) {
            if ((pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) && (pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift)) {
              res = cls.Col}
             else res = cle.Col;
          };
        };
        if (this.GetDisplayMode() !== $mod.TTMSFNCPlannerMode.pmCustom) {
          if (!(pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift)) {
            nst = nst + deltas;
            net = nst + duration;
          } else {
            if (pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift) {
              dt = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clssave));
              if (deltas !== 0) nst = dt;
              net = net + deltae;
            } else {
              if ((net - nst) < this.GetDisplayUnitValue()) net = nst + this.GetDisplayUnitValue();
              nst = nst + deltas;
            };
          };
        };
        c = false;
        if (!this.HasItem(nst,net,res,AItem.GetIndex(),true)) {
          c = true;
          if (!(pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift)) {
            c = AItem.FMovable;
            this.DoBeforeMoveItem(AItem,{get: function () {
                return nst;
              }, set: function (v) {
                nst = v;
              }},{get: function () {
                return net;
              }, set: function (v) {
                net = v;
              }},{get: function () {
                return res;
              }, set: function (v) {
                res = v;
              }},{get: function () {
                return c;
              }, set: function (v) {
                c = v;
              }});
            AItem.FUpdatingLinked = true;
            this.CallBeforeMoveLinkedItems(AItem,nst - AItem.FStartTime,net - AItem.FEndTime,this.PositionToResource(res) - AItem.FResource);
            AItem.FUpdatingLinked = false;
          } else {
            c = AItem.FSizeable;
            this.DoBeforeSizeItem(AItem,{get: function () {
                return nst;
              }, set: function (v) {
                nst = v;
              }},{get: function () {
                return net;
              }, set: function (v) {
                net = v;
              }},{get: function () {
                return res;
              }, set: function (v) {
                res = v;
              }},{get: function () {
                return c;
              }, set: function (v) {
                c = v;
              }});
            AItem.FUpdatingLinked = true;
            this.CallBeforeSizeLinkedItems(AItem,nst - AItem.FStartTime,net - AItem.FEndTime,this.PositionToResource(res) - AItem.FResource);
            AItem.FUpdatingLinked = false;
          };
        };
        if (c) {
          rs = this.PositionToResource(res);
          b = ((pas.DateUtils.CompareDateTime(nst,AItem.FStartTime) !== 0) || (pas.DateUtils.CompareDateTime(net,AItem.FEndTime) !== 0)) || (AItem.FResource !== rs);
          if (b) {
            AItem.BeginUpdate();
            AItem.SetStartTime(nst);
            AItem.SetEndTime(net);
            if (!AItem.FFixedResource) AItem.SetResource(rs);
            AItem.EndUpdate(false,true);
            if (!(pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift)) {
              this.FCallAfterMoveEvent = true;
              this.FCallItemIndex = AItem.GetIndex();
              AItem.FCallPosition = res;
              this.DoMoveItem(AItem,nst,net,res);
              AItem.FUpdatingLinked = true;
              this.CallMoveLinkedItems(AItem);
              AItem.FUpdatingLinked = false;
            } else {
              this.FCallAfterSizeEvent = true;
              this.FCallItemIndex = AItem.GetIndex();
              AItem.FCallPosition = res;
              this.DoSizeItem(AItem,nst,net,res);
              AItem.FUpdatingLinked = true;
              this.CallSizeLinkedItems(AItem);
              AItem.FUpdatingLinked = false;
            };
          };
          var $tmp4 = ADirection;
          if (($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idLeft) || ($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idUp)) {
            if ((pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) && !(pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift)) {
              this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(cle.Col,cle.Row - 1)),false)}
             else this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),false);
          } else if (($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idRight) || ($tmp4 === $mod.TTMSFNCPlannerInteractionDirection.idDown)) {
            if ((pas["WEBLib.Controls"].TShiftState$a.ssShift in AShift) && (pas["WEBLib.Controls"].TShiftState$a.ssCtrl in AShift)) {
              this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),false)}
             else this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(cle.Col,cle.Row - 1)),false);
          };
          this.UpdateSizeHandlers();
          this.UpdateDeleteHandler();
        };
      };
    };
    this.HandleSelectItem = function (AItem, AMultiSelect) {
      var I = 0;
      var it = null;
      if (AItem != null) {
        if (AItem.FCollection === null) return;
      };
      if (!AMultiSelect) this.FActiveItem = AItem;
      for (var $l1 = this.FSelectedItems.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        it = this.FSelectedItems.GetItem(I);
        if (!AMultiSelect) this.FSelectedItems.Remove(it);
        it.UpdateItem(false,true);
      };
      if (AItem != null) {
        if (this.FSelectedItems.IndexOf(AItem) > -1) {
          if (AItem !== this.FActiveItem) this.FSelectedItems.Remove(AItem);
        } else this.FSelectedItems.Add(AItem);
        AItem.UpdateItem(false,true);
      };
      if (!this.FInteraction.FKeepSelection) {
        this.FSelection.StartCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(-1,-1));
        this.FSelection.EndCell = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(-1,-1));
      };
      this.UpdateSizeHandlers();
      this.UpdateDeleteHandler();
    };
    this.HandleSelectLinkedItems = function (AItem, AMultiSelect) {
      var Item = null;
      Item = AItem;
      if (Item != null) {
        this.HandleSelectItem(Item,AMultiSelect);
        Item = Item.FLinkedItem;
        while ((Item != null) && (AItem !== Item)) {
          this.HandleSelectItem(Item,true);
          Item = Item.FLinkedItem;
        };
      };
    };
    this.UpdateSizeHandlers = function () {
      var startsz = new $mod.TTMSFNCPlannerSizeHandler();
      var endsz = new $mod.TTMSFNCPlannerSizeHandler();
      var bkgst = null;
      var bkget = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var w = 0.0;
      var h = 0.0;
      if (((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || (pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) return;
      if (this.AllowMobileSize() && !this.FInteraction.FReadOnly) {
        startsz = new $mod.TTMSFNCPlannerSizeHandler(this.GetStartTimeSizeHandler());
        endsz = new $mod.TTMSFNCPlannerSizeHandler(this.GetEndTimeSizeHandler());
        bkgst = startsz.Background;
        bkget = endsz.Background;
        if ((bkgst != null) && (bkget != null)) {
          if (this.FActiveItem != null) {
            if (this.FActiveItem.FSizeable) {
              bkgst.SetParent(this);
              bkget.SetParent(this);
              w = this.FItemsAppearance.FSizeHandlerWidth;
              h = this.FItemsAppearance.FSizeHandlerHeight;
              r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetFirstRect(this.FActiveItem));
              var $tmp1 = this.FOrientationMode;
              if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                bkgst.SetBoundsRect(new pas.Types.TRect(pas.Types.Rect(Math.round(r.Left - h) + 1,Math.round(r.Top + (((r.Bottom - r.Top) - w) / 2)),Math.round(r.Left) + 1,Math.round((r.Top + (((r.Bottom - r.Top) - w) / 2)) + w))))}
               else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) bkgst.SetBoundsRect(new pas.Types.TRect(pas.Types.Rect(Math.round(r.Left + (((r.Right - r.Left) - w) / 2)),Math.round(r.Top - h) + 1,Math.round((r.Left + (((r.Right - r.Left) - w) / 2)) + w),Math.round(r.Top) + 1)));
              r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetLastRect(this.FActiveItem));
              var $tmp2 = this.FOrientationMode;
              if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                bkget.SetBoundsRect(new pas.Types.TRect(pas.Types.Rect(Math.round(r.Right),Math.round(r.Top + (((r.Bottom - r.Top) - w) / 2)),Math.round(r.Right + h),Math.round((r.Top + (((r.Bottom - r.Top) - w) / 2)) + w))))}
               else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) bkget.SetBoundsRect(new pas.Types.TRect(pas.Types.Rect(Math.round(r.Left + (((r.Right - r.Left) - w) / 2)),Math.round(r.Bottom),Math.round((r.Left + (((r.Right - r.Left) - w) / 2)) + w),Math.round(r.Bottom + h))));
            };
          } else {
            bkgst.SetParent(null);
            bkget.SetParent(null);
          };
        };
      };
    };
    this.UpdateDeleteHandler = function () {
      var delh = new $mod.TTMSFNCPlannerDeleteHandler();
      var bkg = null;
      var r = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var w = 0.0;
      var h = 0.0;
      var d = false;
      if (((this.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) || (pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) return;
      if (this.AllowMobileDelete() && !this.FInteraction.FReadOnly) {
        delh = new $mod.TTMSFNCPlannerDeleteHandler(this.GetDeleteHandler());
        bkg = delh.Background;
        if (bkg != null) {
          if (this.FActiveItem != null) {
            d = this.FActiveItem.FDeletable;
            this.DoIsItemDeletable(this.FActiveItem,{get: function () {
                return d;
              }, set: function (v) {
                d = v;
              }});
            if (d) {
              bkg.SetParent(this);
              r = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetFirstRect(this.FActiveItem));
              w = this.FItemsAppearance.FDeleteHandlerWidth;
              h = this.FItemsAppearance.FDeleteHandlerHeight;
              var $tmp1 = this.FOrientationMode;
              if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
                bkg.SetBoundsRect(new pas.Types.TRect(pas.Types.Rect(Math.round(r.Right),Math.round(r.Top),Math.round(r.Right + w),Math.round(r.Top + h))))}
               else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) bkg.SetBoundsRect(new pas.Types.TRect(pas.Types.Rect(Math.round(r.Right),Math.round(r.Top),Math.round(r.Right + w),Math.round(r.Top + h))));
            };
          } else bkg.SetParent(null);
        };
      };
    };
    this.GetNewDateTimeAndResource = function (AItem, ALinkType, ADiffStartDateTime, ADiffEndDateTime, AStartDateTime, AEndDateTime) {
      var $tmp1 = ALinkType;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltFull) {
        AStartDateTime.set(AItem.FStartTime + ADiffStartDateTime);
        AEndDateTime.set(AItem.FEndTime + ADiffEndDateTime);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltStartEnd) {
        AStartDateTime.set(AItem.FStartTime + ADiffStartDateTime);
        AEndDateTime.set(AItem.FEndTime + ADiffStartDateTime);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltEndStart) {
        AStartDateTime.set(AItem.FStartTime + ADiffEndDateTime);
        AEndDateTime.set(AItem.FEndTime + ADiffEndDateTime);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltEndEnd) {
        AStartDateTime.set(AItem.FStartTime);
        AEndDateTime.set(AItem.FEndTime + ADiffEndDateTime);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItemLinkType.iltStartStart) {
        AStartDateTime.set(AItem.FStartTime + ADiffStartDateTime);
        AEndDateTime.set(AItem.FEndTime);
      };
    };
    this.SetEditingDialogTabOrder = function () {
      if (this.FStartDateEdit != null) this.FStartDateEdit.SetTabOrder(0);
      if (this.FStartTimeEdit != null) this.FStartTimeEdit.SetTabOrder(1);
      if (this.FEndDateEdit != null) this.FEndDateEdit.SetTabOrder(2);
      if (this.FEndTimeEdit != null) this.FEndTimeEdit.SetTabOrder(3);
    };
    this.ColumnStretchingActive = function () {
      var Result = false;
      Result = this.FPositionsAppearance.FStretch;
      return Result;
    };
    this.AllowDesktopSize = function () {
      var Result = false;
      Result = this.FInteraction.FSizeMode in rtl.createSet($mod.TTMSFNCPlannerSizeMode.psmDesktop,$mod.TTMSFNCPlannerSizeMode.psmAuto);
      return Result;
    };
    this.HandleAfterEvents = function () {
      var Result = false;
      var itc = null;
      Result = false;
      if (this.FCallAfterMoveEvent) {
        this.FCallAfterMoveEvent = false;
        if ((this.FCallItemIndex >= 0) && (this.FCallItemIndex <= (this.FItems.GetCount() - 1))) {
          itc = this.FItems.GetItem$1(this.FCallItemIndex);
          this.DoAfterMoveItem(itc,itc.FStartTime,itc.FEndTime,itc.FCallPosition);
          this.DoItemChanged(itc);
          itc.FUpdatingLinked = true;
          this.CallAfterMoveLinkedItems(itc);
          itc.FUpdatingLinked = false;
          Result = true;
        };
        this.FCallItemIndex = -1;
      } else if (this.FCallAfterSizeEvent) {
        this.FCallAfterSizeEvent = false;
        if ((this.FCallItemIndex >= 0) && (this.FCallItemIndex <= (this.FItems.GetCount() - 1))) {
          itc = this.FItems.GetItem$1(this.FCallItemIndex);
          this.DoAfterSizeItem(itc,itc.FStartTime,itc.FEndTime,itc.FCallPosition);
          this.DoItemChanged(itc);
          itc.FUpdatingLinked = true;
          this.CallAfterSizeLinkedItems(itc);
          itc.FUpdatingLinked = false;
          Result = true;
        };
        this.FCallItemIndex = -1;
      };
      return Result;
    };
    this.AllowMobileSize = function () {
      var Result = false;
      Result = this.FInteraction.FSizeMode in rtl.createSet($mod.TTMSFNCPlannerSizeMode.psmMobile);
      return Result;
    };
    this.AllowDesktopMove = function () {
      var Result = false;
      Result = this.FInteraction.FMoveMode in rtl.createSet($mod.TTMSFNCPlannerMoveMode.pmmDesktop,$mod.TTMSFNCPlannerMoveMode.pmmAuto);
      return Result;
    };
    this.AllowMobileMove = function () {
      var Result = false;
      Result = this.FInteraction.FMoveMode in rtl.createSet($mod.TTMSFNCPlannerMoveMode.pmmMobile);
      return Result;
    };
    this.AllowDesktopDelete = function () {
      var Result = false;
      Result = this.FInteraction.FDeleteMode in rtl.createSet($mod.TTMSFNCPlannerDeleteMode.pdmDesktop,$mod.TTMSFNCPlannerDeleteMode.pdmAuto);
      return Result;
    };
    this.AllowMobileDelete = function () {
      var Result = false;
      Result = this.FInteraction.FDeleteMode in rtl.createSet($mod.TTMSFNCPlannerDeleteMode.pdmMobile);
      return Result;
    };
    this.CanNavigate = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetNextDateTime = function () {
      var Result = 0.0;
      Result = this.FModeSettings.FStartTime;
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
        Result = pas.SysUtils.IncMonth(Result,1)}
       else {
        Result = pas.DateUtils.IncDay(Result,1);
      };
      return Result;
    };
    this.GetPreviousDateTime = function () {
      var Result = 0.0;
      Result = this.FModeSettings.FStartTime;
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
        Result = pas.SysUtils.IncMonth(Result,-1)}
       else {
        Result = pas.DateUtils.IncDay(Result,-1);
      };
      return Result;
    };
    this.CurrentTime = function () {
      var Result = 0.0;
      var $tmp1 = this.FMode;
      if (((($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDay)) {
        Result = pas.SysUtils.EncodeDate(pas.DateUtils.YearOf(this.FDisplayStartTime),pas.DateUtils.MonthOf(this.FDisplayStartTime),Math.min(pas.DateUtils.DaysInMonth(this.FDisplayStartTime),pas.DateUtils.DayOf(pas.SysUtils.Now()))) + pas.System.Frac(pas.SysUtils.Now())}
       else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmCustom) {
        Result = pas.SysUtils.Now()}
       else {
        Result = pas.System.Int(this.FDisplayStartTime) + pas.System.Frac(pas.SysUtils.Now());
      };
      return Result;
    };
    this.HandleItemMouseInteraction = function (AItem, AStartCell, AEndCell, ANewStartCell, ANewEndCell, AMode) {
      var Result = false;
      var cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var clssave = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var clesave = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var res = 0;
      var nst = 0.0;
      var net = 0.0;
      var c = false;
      var ps = 0;
      var pe = 0;
      var difc = 0;
      var rs = 0;
      var deltas = 0.0;
      var deltae = 0.0;
      var duration = 0.0;
      var dt = 0.0;
      Result = false;
      if (AItem != null) {
        cls = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(ANewStartCell);
        cle = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(ANewEndCell);
        clssave = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AStartCell);
        clesave = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AEndCell);
        deltas = AItem.FStartTime - this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clssave));
        deltae = AItem.FEndTime - this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clesave));
        duration = AItem.FEndTime - AItem.FStartTime;
        if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
          ps = this.PositionToResource(cls.Col);
          pe = this.PositionToResource(cle.Col);
          difc = cle.Col - cls.Col;
          if (pe !== ps) {
            if (cls.Col !== clssave.Col) {
              cls.Col = cls.Col - difc;
              cle.Col = cle.Col - difc;
            } else {
              cls.Col = cls.Col + difc;
              cle.Col = cle.Col + difc;
            };
          };
        };
        nst = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls));
        net = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle));
        res = 0;
        if (!AItem.FFixedResource) {
          if (cls.Col !== clssave.Col) {
            res = cls.Col}
           else res = cle.Col;
        };
        if (this.GetDisplayMode() !== $mod.TTMSFNCPlannerMode.pmCustom) {
          var $tmp1 = AMode;
          if ($tmp1 === $mod.TTMSFNCPlannerMouseInteractionMode.pmmMove) {
            nst = nst + deltas;
            net = nst + duration;
          } else if ($tmp1 === $mod.TTMSFNCPlannerMouseInteractionMode.pmmSizeDown) {
            if ((net - nst) < this.GetDisplayUnitValue()) net = nst + this.GetDisplayUnitValue();
            nst = nst + deltas;
          } else if ($tmp1 === $mod.TTMSFNCPlannerMouseInteractionMode.pmmSizeUp) {
            dt = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(clssave));
            if (deltas !== 0) nst = dt;
            net = net + deltae;
          };
        };
        c = false;
        if (!this.HasItem(nst,net,res,AItem.GetIndex(),true)) {
          c = true;
          if (AMode === $mod.TTMSFNCPlannerMouseInteractionMode.pmmMove) {
            c = AItem.FMovable;
            this.DoBeforeMoveItem(AItem,{get: function () {
                return nst;
              }, set: function (v) {
                nst = v;
              }},{get: function () {
                return net;
              }, set: function (v) {
                net = v;
              }},{get: function () {
                return res;
              }, set: function (v) {
                res = v;
              }},{get: function () {
                return c;
              }, set: function (v) {
                c = v;
              }});
            AItem.FUpdatingLinked = true;
            this.CallBeforeMoveLinkedItems(AItem,nst - AItem.FStartTime,net - AItem.FEndTime,this.PositionToResource(res) - AItem.FResource);
            AItem.FUpdatingLinked = false;
          } else {
            c = AItem.FSizeable;
            this.DoBeforeSizeItem(AItem,{get: function () {
                return nst;
              }, set: function (v) {
                nst = v;
              }},{get: function () {
                return net;
              }, set: function (v) {
                net = v;
              }},{get: function () {
                return res;
              }, set: function (v) {
                res = v;
              }},{get: function () {
                return c;
              }, set: function (v) {
                c = v;
              }});
            AItem.FUpdatingLinked = true;
            this.CallBeforeSizeLinkedItems(AItem,nst - AItem.FStartTime,net - AItem.FEndTime,this.PositionToResource(res) - AItem.FResource);
            AItem.FUpdatingLinked = false;
          };
        };
        if (c) {
          rs = this.PositionToResource(res);
          Result = ((pas.DateUtils.CompareDateTime(nst,AItem.FStartTime) !== 0) || (pas.DateUtils.CompareDateTime(net,AItem.FEndTime) !== 0)) || (AItem.FResource !== rs);
          if (Result) {
            AItem.BeginUpdate();
            AItem.SetStartTime(nst);
            AItem.SetEndTime(net);
            if (!AItem.FFixedResource) AItem.SetResource(rs);
            AItem.EndUpdate(false,true);
            if (AMode === $mod.TTMSFNCPlannerMouseInteractionMode.pmmMove) {
              this.FCallAfterMoveEvent = true;
              this.FCallItemIndex = AItem.GetIndex();
              AItem.FCallPosition = res;
              this.DoMoveItem(AItem,nst,net,res);
              AItem.FUpdatingLinked = true;
              this.CallMoveLinkedItems(AItem);
              AItem.FUpdatingLinked = false;
            } else {
              this.FCallAfterSizeEvent = true;
              this.FCallItemIndex = AItem.GetIndex();
              AItem.FCallPosition = res;
              this.DoSizeItem(AItem,nst,net,res);
              AItem.FUpdatingLinked = true;
              this.CallSizeLinkedItems(AItem);
              AItem.FUpdatingLinked = false;
            };
          };
        };
        if (cls.Row < clssave.Row) {
          this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cls),false)}
         else this.Navigate(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(cle),false);
        this.UpdateSizeHandlers();
        this.UpdateDeleteHandler();
      };
      return Result;
    };
    this.GetInplaceEditorRect = function (ACacheItem, AItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var it = null;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      it = null;
      if (AItem != null) it = AItem;
      var $tmp1 = this.FInteraction.FInplaceEditorMode;
      if ($tmp1 === $mod.TTMSFNCPlannerInplaceEditorMode.piemText) {
        if (ACacheItem != null) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCacheItemTextRect(ACacheItem))}
         else if ((it != null) && (it.FCacheList.GetCount() > 0)) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCacheItemTextRect(it.FCacheList.GetItem(it.FCacheList.GetCount() - 1)));
      } else if ($tmp1 === $mod.TTMSFNCPlannerInplaceEditorMode.piemTitle) {
        if (ACacheItem != null) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCacheItemTitleRect(ACacheItem))}
         else if ((it != null) && (it.FCacheList.GetCount() > 0)) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCacheItemTitleRect(it.FCacheList.GetItem(it.FCacheList.GetCount() - 1)));
      } else if ($tmp1 === $mod.TTMSFNCPlannerInplaceEditorMode.piemItem) {
        if (ACacheItem != null) {
          Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCacheItemRect(ACacheItem))}
         else if ((it != null) && (it.FCacheList.GetCount() > 0)) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCacheItemRect(it.FCacheList.GetItem(it.FCacheList.GetCount() - 1)));
      };
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentClipRect());
      Result.Top = Math.max(Result.Top,cr.Top);
      Result.Bottom = Math.min(Result.Bottom,cr.Bottom);
      Result.Left = Math.max(Result.Left,cr.Left);
      Result.Right = Math.min(Result.Right,cr.Right);
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(pas.math.Floor(Result.Left),pas.math.Floor(Result.Top),pas.math.Floor(Result.Right),pas.math.Floor(Result.Bottom)));
      return Result;
    };
    this.GetFirstRect = function (AItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if ((AItem != null) && (AItem.FCacheList.GetCount() > 0)) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(AItem.FCacheList.GetItem(AItem.FCacheList.GetCount() - 1).FDrawRect);
      return Result;
    };
    this.GetLastRect = function (AItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if ((AItem != null) && (AItem.FCacheList.GetCount() > 0)) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(AItem.FCacheList.GetItem(0).FDrawRect);
      return Result;
    };
    this.CanMoveCacheItem = function (ACacheItem) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.CanSizeCacheItemEndTime = function (ACacheItem) {
      var Result = false;
      Result = false;
      if ((ACacheItem != null) && (ACacheItem.FItem != null)) Result = ACacheItem.FIdx === (ACacheItem.FItem.FCacheList.GetCount() - 1);
      return Result;
    };
    this.CanSizeCacheItemStartTime = function (ACacheItem) {
      var Result = false;
      Result = (ACacheItem != null) && (ACacheItem.FIdx === 0);
      return Result;
    };
    this.CanDeleteCacheItem = function (ACacheItem) {
      var Result = false;
      Result = (ACacheItem != null) && (ACacheItem.FIdx === 0);
      return Result;
    };
    this.GetCacheItemEndTimeSizeRect = function (ACacheItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var sz = 0.0;
      if (!(ACacheItem != null)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ACacheItem.FDrawRect);
      sz = this.FItemsAppearance.FSizeAreaSize;
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Right - sz,Result.Top,Result.Right,Result.Bottom))}
       else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left,Result.Bottom - sz,Result.Right,Result.Bottom));
      return Result;
    };
    this.GetCacheItemStartTimeSizeRect = function (ACacheItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var sz = 0.0;
      if (!(ACacheItem != null)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ACacheItem.FDrawRect);
      sz = this.FItemsAppearance.FSizeAreaSize;
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left,Result.Top,Result.Left + sz,Result.Bottom))}
       else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left,Result.Top,Result.Right,Result.Top + sz));
      return Result;
    };
    this.GetCacheItemMoveRect = function (ACacheItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var sz = 0.0;
      if (!(ACacheItem != null)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ACacheItem.FDrawRect);
      sz = this.FItemsAppearance.FMoveAreaSize;
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left,Result.Top,Result.Right,Result.Top + sz))}
       else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left,Result.Top,Result.Left + sz,Result.Bottom));
      return Result;
    };
    this.GetCacheItemTextRect = function (ACacheItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ARect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var it = null;
      var g = null;
      var th = 0.0;
      var str = "";
      var sz = 0.0;
      var sr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var mr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!(ACacheItem != null)) return Result;
      if (!(ACacheItem.FItem != null)) return Result;
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,false,true]);
      try {
        it = ACacheItem.FItem;
        ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(ACacheItem.FDrawRect);
        if ((((it.FMovable && this.CanMoveCacheItem(ACacheItem)) && this.FItemsAppearance.FShowMoveArea) && this.AllowDesktopMove()) && !this.FInteraction.FReadOnly) {
          sz = this.FItemsAppearance.FMoveAreaSize;
          var $tmp1 = this.FOrientationMode;
          if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
            ARect.Top = mr.Bottom + 1;
          } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
            ARect.Left = mr.Right + 1;
          };
        };
        if ((((((ACacheItem.FIdx === 0) && this.CanSizeCacheItemStartTime(ACacheItem)) && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && it.FSizeable) && !this.FInteraction.FReadOnly) {
          sz = this.FItemsAppearance.FSizeAreaSize;
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
            ARect.Left = sr.Right + 1;
          } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
            ARect.Top = sr.Bottom + 1;
          };
        };
        if ((((((ACacheItem.FIdx === (it.FCacheList.GetCount() - 1)) && this.CanSizeCacheItemEndTime(ACacheItem)) && it.FSizeable) && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly) {
          sz = this.FItemsAppearance.FSizeAreaSize;
          var $tmp3 = this.FOrientationMode;
          if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - sz,ARect.Top,ARect.Right,ARect.Bottom));
            ARect.Right = sr.Left - 1;
          } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Bottom - sz,ARect.Right,ARect.Bottom));
            ARect.Bottom = sr.Top - 1;
          };
        };
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
        str = it.FTitle;
        this.DoGetItemTitleText(it,$mod.TTMSFNCPlannerGetTextMode.pgtmDrawing,{get: function () {
            return str;
          }, set: function (v) {
            str = v;
          }});
        if ((str !== "") && it.FShowTitle) {
          if (it.FEnabled) {
            if (this.FSelectedItems.IndexOf(it) > -1) {
              if (it === this.FActiveItem) {
                g.FFont.Assign(this.FItemsAppearance.FActiveTitleFont)}
               else g.FFont.Assign(this.FItemsAppearance.FSelectedTitleFont);
            } else g.FFont.Assign(this.FItemsAppearance.FTitleFont);
          } else g.FFont.Assign(this.FItemsAppearance.FDisabledTitleFont);
          th = Math.min(g.CalculateTextHeight$1(str) + 5,ARect.Bottom - ARect.Top);
          Result.Top = Result.Top + th;
        };
      } finally {
        g = rtl.freeLoc(g);
      };
      return Result;
    };
    this.GetCacheItemTitleRect = function (ACacheItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ARect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var it = null;
      var th = 0.0;
      var str = "";
      var sz = 0.0;
      var sr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var mr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var g = null;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!(ACacheItem != null)) return Result;
      if (!(ACacheItem.FItem != null)) return Result;
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,false,true]);
      try {
        it = ACacheItem.FItem;
        ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(ACacheItem.FDrawRect);
        if ((((it.FMovable && this.CanMoveCacheItem(ACacheItem)) && this.FItemsAppearance.FShowMoveArea) && this.AllowDesktopMove()) && !this.FInteraction.FReadOnly) {
          sz = this.FItemsAppearance.FMoveAreaSize;
          var $tmp1 = this.FOrientationMode;
          if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
            ARect.Top = mr.Bottom + 1;
          } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
            ARect.Left = mr.Right + 1;
          };
        };
        if ((((((ACacheItem.FIdx === 0) && this.CanSizeCacheItemStartTime(ACacheItem)) && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && it.FSizeable) && !this.FInteraction.FReadOnly) {
          sz = this.FItemsAppearance.FSizeAreaSize;
          var $tmp2 = this.FOrientationMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
            ARect.Left = sr.Right + 1;
          } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
            ARect.Top = sr.Bottom + 1;
          };
        };
        if ((((((ACacheItem.FIdx === (it.FCacheList.GetCount() - 1)) && this.CanSizeCacheItemEndTime(ACacheItem)) && it.FSizeable) && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly) {
          sz = this.FItemsAppearance.FSizeAreaSize;
          var $tmp3 = this.FOrientationMode;
          if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - sz,ARect.Top,ARect.Right,ARect.Bottom));
            ARect.Right = sr.Left - 1;
          } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
            sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Bottom - sz,ARect.Right,ARect.Bottom));
            ARect.Bottom = sr.Top - 1;
          };
        };
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
        str = it.FTitle;
        this.DoGetItemTitleText(it,$mod.TTMSFNCPlannerGetTextMode.pgtmDrawing,{get: function () {
            return str;
          }, set: function (v) {
            str = v;
          }});
        if ((str !== "") && it.FShowTitle) {
          if (it.FEnabled) {
            if (this.FSelectedItems.IndexOf(it) > -1) {
              if (it === this.FActiveItem) {
                g.FFont.Assign(this.FItemsAppearance.FActiveTitleFont)}
               else g.FFont.Assign(this.FItemsAppearance.FSelectedTitleFont);
            } else g.FFont.Assign(this.FItemsAppearance.FTitleFont);
          } else g.FFont.Assign(this.FItemsAppearance.FDisabledTitleFont);
          th = Math.min(g.CalculateTextHeight$1(str) + 5,ARect.Bottom - ARect.Top);
          Result.Bottom = Result.Top + th;
        };
      } finally {
        g = rtl.freeLoc(g);
      };
      return Result;
    };
    this.GetCacheItemDeleteRect = function (ACacheItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var sz = 0.0;
      if (!(ACacheItem != null)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ACacheItem.FDrawRect);
      sz = this.FItemsAppearance.FDeleteAreaSize;
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Right - sz,Result.Top,Result.Right,Result.Top + sz))}
       else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(Result.Right - sz,Result.Top,Result.Right,Result.Top + sz));
      return Result;
    };
    this.GetCacheItemRect = function (ACacheItem) {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ARect = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var it = null;
      var sz = 0.0;
      var sr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var mr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!(ACacheItem != null)) return Result;
      if (!(ACacheItem.FItem != null)) return Result;
      it = ACacheItem.FItem;
      ARect = new pas["WEBLib.TMSFNCTypes"].TRectF(ACacheItem.FDrawRect);
      if ((((it.FMovable && this.CanMoveCacheItem(ACacheItem)) && this.FItemsAppearance.FShowMoveArea) && this.AllowDesktopMove()) && !this.FInteraction.FReadOnly) {
        sz = this.FItemsAppearance.FMoveAreaSize;
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
          ARect.Top = mr.Bottom + 1;
        } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          mr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
          ARect.Left = mr.Right + 1;
        };
      };
      if ((((((ACacheItem.FIdx === 0) && this.CanSizeCacheItemStartTime(ACacheItem)) && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && it.FSizeable) && !this.FInteraction.FReadOnly) {
        sz = this.FItemsAppearance.FSizeAreaSize;
        var $tmp2 = this.FOrientationMode;
        if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + sz,ARect.Bottom));
          ARect.Left = sr.Right + 1;
        } else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + sz));
          ARect.Top = sr.Bottom + 1;
        };
      };
      if ((((((ACacheItem.FIdx === (it.FCacheList.GetCount() - 1)) && this.CanSizeCacheItemEndTime(ACacheItem)) && it.FSizeable) && this.FItemsAppearance.FShowSizeArea) && this.AllowDesktopSize()) && !this.FInteraction.FReadOnly) {
        sz = this.FItemsAppearance.FSizeAreaSize;
        var $tmp3 = this.FOrientationMode;
        if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - sz,ARect.Top,ARect.Right,ARect.Bottom));
          ARect.Right = sr.Left - 1;
        } else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          sr = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Bottom - sz,ARect.Right,ARect.Bottom));
          ARect.Bottom = sr.Top - 1;
        };
      };
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(ARect);
      return Result;
    };
    this.CreateAndPrepareBitmap = function (ABitmap, AWidth, AHeight) {
      var Result = false;
      ABitmap.set(pas["WEBLib.Graphics"].TBitmap.$create("Create$3"));
      ABitmap.get().SetWidth(Math.round(AWidth));
      ABitmap.get().SetHeight(Math.round(AHeight));
      Result = true;
      return Result;
    };
    this.GetDefaultItem = function () {
      var Result = null;
      Result = this.FDefaultItem;
      return Result;
    };
    this.GetPositionFormat = function () {
      var Result = "";
      if (this.FPositions.FFormat !== "") {
        Result = this.FPositions.FFormat}
       else {
        var $tmp1 = this.GetDisplayMode();
        if ((($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
          Result = "dddd"}
         else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) Result = "mmmmm";
      };
      return Result;
    };
    this.GetPositionText = function (APosition) {
      var Result = "";
      var p = 0.0;
      Result = (pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerPosition")) + " ") + pas.SysUtils.IntToStr(APosition);
      var $tmp1 = this.GetDisplayMode();
      if (((((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmCustom)) {
        if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiResDay) APosition = APosition % Math.max(1,this.FResources.GetCount());
        if ((APosition >= 0) && (APosition <= (this.FResources.GetCount() - 1))) {
          Result = this.FResources.GetItem$1(APosition).FText;
          if (Result === "") {
            Result = this.FResources.GetItem$1(APosition).FName;
            if (Result === "") Result = (pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerPosition")) + " ") + pas.SysUtils.IntToStr(APosition);
          };
        };
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        p = pas.DateUtils.IncDay(this.FDisplayStartTime,APosition % Math.max(1,this.GetNumDays()));
        Result = pas.SysUtils.FormatDateTime(this.GetPositionFormat(),p);
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) {
        p = pas.DateUtils.IncDay(this.FDisplayStartTime,APosition);
        Result = pas.SysUtils.FormatDateTime(this.GetPositionFormat(),p);
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
        p = pas.SysUtils.IncMonth(this.FDisplayStartTime,APosition);
        Result = pas.SysUtils.FormatDateTime(this.GetPositionFormat(),p);
      };
      return Result;
    };
    this.GetPositionResourceText = function (APosition) {
      var Result = "";
      var p = 0.0;
      Result = (pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerPosition")) + " ") + pas.SysUtils.IntToStr(APosition);
      var $tmp1 = this.GetDisplayMode();
      if (((((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmCustom)) {
        if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiResDay) APosition = APosition % Math.max(1,this.FResources.GetCount());
        if ((APosition >= 0) && (APosition <= (this.FResources.GetCount() - 1))) {
          Result = this.FResources.GetItem$1(APosition).FText;
          if ((((Result === "") || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<\/",Result) > 0)) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("\/>",Result) > 0)) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<BR>",pas.SysUtils.UpperCase(Result)) > 0)) {
            Result = this.FResources.GetItem$1(APosition).FName;
            if (Result === "") Result = (pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerPosition")) + " ") + pas.SysUtils.IntToStr(APosition);
          };
        };
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        p = pas.DateUtils.IncDay(this.FDisplayStartTime,APosition % Math.max(1,this.GetNumDays()));
        Result = pas.SysUtils.FormatDateTime(this.GetPositionFormat(),p);
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) {
        p = pas.DateUtils.IncDay(this.FDisplayStartTime,APosition);
        Result = pas.SysUtils.FormatDateTime(this.GetPositionFormat(),p);
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
        p = pas.SysUtils.IncMonth(this.FDisplayStartTime,APosition);
        Result = pas.SysUtils.FormatDateTime(this.GetPositionFormat(),p);
      };
      return Result;
    };
    this.GetGroupText = function (AGroup) {
      var Result = "";
      var p = 0.0;
      Result = (pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlannerData"],"sTMSFNCPlannerGroup")) + " ") + pas.SysUtils.IntToStr(AGroup);
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
        if (this.FColumnCount > 0) {
          p = pas.DateUtils.IncDay(this.FDisplayStartTime,AGroup % this.FColumnCount);
          if (this.FPositions.FFormat !== "") {
            Result = pas.SysUtils.FormatDateTime(this.FPositions.FFormat,p)}
           else Result = pas.SysUtils.FormatDateTime("dddd",p);
        };
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        if ((AGroup >= 0) && (AGroup <= (this.FResources.GetCount() - 1))) Result = this.FResources.GetItem$1(AGroup).GetText();
      } else {
        if ((AGroup >= 0) && (AGroup <= (this.FGroups.GetCount() - 1))) Result = this.FGroups.GetItem$1(AGroup).GetText();
      };
      return Result;
    };
    this.IsDateTimeSub = function (ADateTime) {
      var Result = false;
      Result = false;
      var $tmp1 = this.GetDisplayMode();
      if (((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) ADateTime = ADateTime - this.GetDisplayOffsetValue();
      var $tmp2 = this.GetDisplayMode();
      if (((($tmp2 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
        Result = ((pas.DateUtils.MinuteOf(ADateTime) + pas.DateUtils.SecondOf(ADateTime)) + pas.DateUtils.MilliSecondOf(ADateTime)) > 0}
       else if (($tmp2 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod) || ($tmp2 === $mod.TTMSFNCPlannerMode.pmMonth)) Result = (((pas.DateUtils.HourOf(ADateTime) + pas.DateUtils.MinuteOf(ADateTime)) + pas.DateUtils.SecondOf(ADateTime)) + pas.DateUtils.MilliSecondOf(ADateTime)) > 0;
      this.DoIsDateTimeSub(ADateTime,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.HasDateTimeSub = function () {
      var Result = false;
      Result = false;
      var $tmp1 = this.GetDisplayMode();
      if ((((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) Result = true;
      this.DoHasDateTimeSub({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.GetDateTimeText = function (ADateTime, ASub) {
      var Result = "";
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
        Result = pas.SysUtils.FloatToStr(ADateTime)}
       else {
        if (ASub) {
          Result = pas.SysUtils.FormatDateTime(this.GetDisplaySubUnitFormat(),ADateTime)}
         else Result = pas.SysUtils.FormatDateTime(this.GetDisplayUnitFormat(),ADateTime);
      };
      return Result;
    };
    this.GetResourcesAvailable = function () {
      var Result = false;
      Result = (this.GetDisplayMode() !== $mod.TTMSFNCPlannerMode.pmMultiDay) && (this.GetDisplayMode() !== $mod.TTMSFNCPlannerMode.pmMultiMonth);
      return Result;
    };
    this.GetResources = function () {
      var Result = null;
      var I = 0;
      Result = pas.Classes.TStringList.$create("Create$1");
      var $tmp1 = this.GetDisplayMode();
      if ((((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmCustom)) {
        for (var $l2 = 0, $end3 = this.FColumnCount - 1; $l2 <= $end3; $l2++) {
          I = $l2;
          Result.Add(this.GetPositionResourceText(I));
        };
      } else if (($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
        for (var $l4 = 0, $end5 = this.FResources.GetCount() - 1; $l4 <= $end5; $l4++) {
          I = $l4;
          Result.Add(this.FResources.GetItem$1(I).GetResourceText());
        };
      };
      return Result;
    };
    this.GetMaxDisplayUnitValue = function () {
      var Result = 0.0;
      var du = 0.0;
      Result = 0;
      du = this.FTimeLine.FDisplayUnit;
      if (du > 0) {
        var $tmp1 = this.GetDisplayMode();
        if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
          Result = 31}
         else if ((($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
          var $tmp2 = this.FTimeLine.FDisplayUnitType;
          if ($tmp2 === $mod.TTMSFNCPlannerDisplayUnitType.pduMilliSecond) {
            Result = 86400000 / du}
           else if ($tmp2 === $mod.TTMSFNCPlannerDisplayUnitType.pduSecond) {
            Result = 86400 / du}
           else if ($tmp2 === $mod.TTMSFNCPlannerDisplayUnitType.pduMinute) {
            Result = 1440 / du}
           else if ($tmp2 === $mod.TTMSFNCPlannerDisplayUnitType.pduHour) {
            Result = 24 / du}
           else if ($tmp2 === $mod.TTMSFNCPlannerDisplayUnitType.pduDay) Result = 1;
        };
      };
      return Result;
    };
    this.GetDisplayUnitValue = function () {
      var Result = 0.0;
      var du = 0;
      du = this.FTimeLine.FDisplayUnit;
      var $tmp1 = this.FTimeLine.FDisplayUnitType;
      if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduMilliSecond) {
        Result = pas.DateUtils.IncMilliSecond(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduSecond) {
        Result = pas.DateUtils.IncSecond(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduMinute) {
        Result = pas.DateUtils.IncMinute(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduHour) {
        Result = pas.DateUtils.IncHour(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduDay) {
        Result = pas.DateUtils.IncDay(0,du)}
       else {
        Result = 0;
      };
      return Result;
    };
    this.GetDisplayOffsetValue = function () {
      var Result = 0.0;
      var du = 0;
      du = this.FTimeLine.FDisplayOffset;
      var $tmp1 = this.FTimeLine.FDisplayOffsetType;
      if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduMilliSecond) {
        Result = pas.DateUtils.IncMilliSecond(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduSecond) {
        Result = pas.DateUtils.IncSecond(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduMinute) {
        Result = pas.DateUtils.IncMinute(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduHour) {
        Result = pas.DateUtils.IncHour(0,du)}
       else if ($tmp1 === $mod.TTMSFNCPlannerDisplayUnitType.pduDay) {
        Result = pas.DateUtils.IncDay(0,du)}
       else {
        Result = 0;
      };
      return Result;
    };
    this.GetPositionsTopSize = function () {
      var Result = 0.0;
      Result = 0;
      if (($mod.TTMSFNCPlannerPositionsLayout.pplTop in this.FPositionsAppearance.FLayouts) && (this.FColumnCount > 0)) Result = this.FPositionsAppearance.FTopSize;
      return Result;
    };
    this.GetPositionsBottomSize = function () {
      var Result = 0.0;
      Result = 0;
      if (($mod.TTMSFNCPlannerPositionsLayout.pplBottom in this.FPositionsAppearance.FLayouts) && (this.FColumnCount > 0)) Result = this.FPositionsAppearance.FBottomSize;
      return Result;
    };
    this.GetGroupsTopSize = function () {
      var Result = 0.0;
      Result = 0;
      if ((($mod.TTMSFNCPlannerGroupLayout.pglTop in this.FGroupsAppearance.FLayouts) && (this.FDisplayGroups.GetCount() > 0)) && (this.FColumnCount > 0)) Result = this.FGroupsAppearance.FTopSize;
      return Result;
    };
    this.GetGroupsBottomSize = function () {
      var Result = 0.0;
      Result = 0;
      if ((($mod.TTMSFNCPlannerGroupLayout.pglBottom in this.FGroupsAppearance.FLayouts) && (this.FDisplayGroups.GetCount() > 0)) && (this.FColumnCount > 0)) Result = this.FGroupsAppearance.FBottomSize;
      return Result;
    };
    this.GetTimeLineLeftSize = function () {
      var Result = 0.0;
      Result = 0;
      if ($mod.TTMSFNCPlannerTimeLineLayout.ptlLeft in this.FTimeLineAppearance.FLayouts) Result = this.FTimeLineAppearance.FLeftSize;
      return Result;
    };
    this.GetTimeLineRightSize = function () {
      var Result = 0.0;
      Result = 0;
      if ($mod.TTMSFNCPlannerTimeLineLayout.ptlRight in this.FTimeLineAppearance.FLayouts) Result = this.FTimeLineAppearance.FRightSize;
      return Result;
    };
    this.GetCalculationRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.GetCalculationRect.call(this));
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Left = (Result.Left + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Top = Result.Top + this.GetTimeLineLeftSize();
        Result.Right = (Result.Right - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize();
        Result.Bottom = Result.Bottom - this.GetTimeLineRightSize();
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = (Result.Top + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Left = Result.Left + this.GetTimeLineLeftSize();
        Result.Bottom = (Result.Bottom - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize();
        Result.Right = Result.Right - this.GetTimeLineRightSize();
      };
      Result.Right = Result.Left + Math.max(0,Result.Right - Result.Left);
      Result.Bottom = Result.Top + Math.max(0,Result.Bottom - Result.Top);
      return Result;
    };
    this.GetGroupsTopRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Right = Result.Left;
        Result.Left = Result.Right - this.GetGroupsTopSize();
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Bottom = Result.Top;
        Result.Top = Result.Top - this.GetGroupsTopSize();
      };
      return Result;
    };
    this.MaxPositionDateTime = function (ADateTime, AEndDatetime, APosition) {
      var Result = 0.0;
      var dtmx = 0.0;
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        if (AEndDatetime) {
          Result = Math.min(pas.DateUtils.IncDay(this.FDisplayEndTime,APosition % Math.max(1,this.GetNumDays())),ADateTime)}
         else Result = Math.max(pas.DateUtils.IncDay(this.FDisplayStartTime,APosition % Math.max(1,this.GetNumDays())),ADateTime);
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
        if (AEndDatetime) {
          Result = Math.min(pas.DateUtils.IncDay(this.FDisplayEndTime,Math.floor(APosition / Math.max(1,this.FResources.GetCount()))),ADateTime)}
         else Result = Math.max(pas.DateUtils.IncDay(this.FDisplayStartTime,Math.floor(APosition / Math.max(1,this.FResources.GetCount()))),ADateTime);
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) {
        if (AEndDatetime) {
          Result = Math.min(pas.DateUtils.IncDay(this.FDisplayEndTime,APosition),ADateTime)}
         else Result = Math.max(pas.DateUtils.IncDay(this.FDisplayStartTime,APosition),ADateTime);
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
        dtmx = pas.SysUtils.IncMonth(this.FDisplayStartTime,APosition);
        if (AEndDatetime) {
          Result = Math.min(pas.SysUtils.EncodeDate(pas.DateUtils.YearOf(dtmx),pas.DateUtils.MonthOf(dtmx),pas.DateUtils.DaysInMonth(dtmx)) + 1,ADateTime)}
         else Result = Math.max(dtmx,ADateTime);
      } else {
        if (AEndDatetime) {
          Result = Math.min(this.FDisplayEndTime,ADateTime)}
         else Result = Math.max(this.FDisplayStartTime,ADateTime);
      };
      return Result;
    };
    this.CalculatePositionDateTime = function (ADateTime, APosition) {
      var Result = 0.0;
      Result = ADateTime;
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        Result = pas.DateUtils.IncDay(Result,APosition % Math.max(1,this.GetNumDays()))}
       else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
        Result = pas.DateUtils.IncDay(Result,Math.floor(APosition / Math.max(1,this.FResources.GetCount())))}
       else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) {
        Result = pas.DateUtils.IncDay(Result,APosition)}
       else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) Result = pas.SysUtils.IncMonth(Result,APosition);
      return Result;
    };
    this.GetGroupsBottomRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Left = Result.Right;
        Result.Right = Result.Left + this.GetGroupsBottomSize();
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = Result.Bottom;
        Result.Bottom = Result.Top + this.GetGroupsBottomSize();
      };
      return Result;
    };
    this.GetPositionsTopRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var tlr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var trr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      tlr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineLeftRect());
      trr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineRightRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Left = tlr.Left - this.GetPositionsTopSize();
        Result.Top = tlr.Bottom;
        Result.Right = tlr.Left;
        Result.Bottom = trr.Top;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Left = tlr.Right;
        Result.Top = tlr.Top - this.GetPositionsTopSize();
        Result.Right = trr.Left;
        Result.Bottom = tlr.Top;
      };
      return Result;
    };
    this.GetPositionTopLeftEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
      if ($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FTopNavigationButtons) {
        nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTopLeftNavigationButtonRect())}
       else nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        if ($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FTopNavigationButtons) {
          Result.Top = nr.Bottom}
         else Result.Top = nr.Top;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        Result.Bottom = ptr.Top;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        if ($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FTopNavigationButtons) {
          Result.Left = nr.Right}
         else Result.Left = nr.Left;
        Result.Right = ptr.Left;
        Result.Bottom = ptr.Bottom;
      };
      return Result;
    };
    this.GetPositionBottomLeftEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
      if ($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FBottomNavigationButtons) {
        nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBottomLeftNavigationButtonRect())}
       else nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        if ($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FBottomNavigationButtons) {
          Result.Top = nr.Bottom}
         else Result.Top = nr.Top;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        Result.Bottom = ptr.Top;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        if ($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FBottomNavigationButtons) {
          Result.Left = nr.Right}
         else Result.Left = nr.Left;
        Result.Right = ptr.Left;
        Result.Bottom = ptr.Bottom;
      };
      return Result;
    };
    this.GetPositionBottomRightEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
      if ($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FBottomNavigationButtons) {
        nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetBottomRightNavigationButtonRect())}
       else nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Top = ptr.Bottom;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        if ($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FBottomNavigationButtons) {
          Result.Bottom = nr.Top}
         else Result.Bottom = nr.Bottom;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        Result.Left = ptr.Right;
        if ($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FBottomNavigationButtons) {
          Result.Right = nr.Left}
         else Result.Right = nr.Right - 1;
        Result.Bottom = ptr.Bottom;
      };
      return Result;
    };
    this.GetPositionTopRightEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
      if ($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FTopNavigationButtons) {
        nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTopRightNavigationButtonRect())}
       else nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Top = ptr.Bottom;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        if ($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FTopNavigationButtons) {
          Result.Bottom = nr.Top}
         else Result.Bottom = nr.Bottom;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        Result.Left = ptr.Right;
        if ($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FTopNavigationButtons) {
          Result.Right = nr.Left}
         else Result.Right = nr.Right - 1;
        Result.Bottom = ptr.Bottom;
      };
      return Result;
    };
    this.GetGroupTopLeftEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsTopRect());
      nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Top = nr.Top;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        Result.Bottom = ptr.Top;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        Result.Left = nr.Left;
        Result.Right = ptr.Left;
        Result.Bottom = ptr.Bottom;
      };
      return Result;
    };
    this.GetGroupBottomLeftEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsBottomRect());
      nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Top = nr.Top;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        Result.Bottom = ptr.Top;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        Result.Left = nr.Left;
        Result.Right = ptr.Left;
        Result.Bottom = nr.Bottom;
      };
      return Result;
    };
    this.GetGroupBottomRightEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsBottomRect());
      nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Top = ptr.Bottom;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        Result.Bottom = nr.Bottom;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        Result.Left = ptr.Right;
        Result.Right = nr.Right;
        Result.Bottom = ptr.Bottom;
      };
      return Result;
    };
    this.GetGroupTopRightEmptyRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var ptr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var nr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      ptr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetGroupsTopRect());
      nr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Top = ptr.Bottom;
        Result.Left = ptr.Left;
        Result.Right = ptr.Right;
        Result.Bottom = nr.Bottom;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = ptr.Top;
        Result.Left = ptr.Right;
        Result.Right = nr.Right;
        Result.Bottom = ptr.Bottom;
      };
      return Result;
    };
    this.GetTopLeftNavigationButtonRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var s = 0.0;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FTopNavigationButtons)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        s = this.FPositionsAppearance.FTopLeftNavigationButtonSize;
        Result.Top = cr.Top;
        Result.Bottom = (cr.Top + s) + 1;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        s = this.FPositionsAppearance.FTopLeftNavigationButtonSize;
        Result.Left = cr.Left;
        Result.Right = (Result.Left + s) + 1;
      };
      return Result;
    };
    this.GetTopRightNavigationButtonRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var s = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FTopNavigationButtons)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsTopRect());
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        s = this.FPositionsAppearance.FTopRightNavigationButtonSize;
        Result.Top = (cr.Bottom - s) - 1;
        Result.Bottom = cr.Bottom - 1;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        s = this.FPositionsAppearance.FTopRightNavigationButtonSize;
        Result.Left = (cr.Right - s) - 1;
        Result.Right = cr.Right - 1;
      };
      return Result;
    };
    this.GetBottomLeftNavigationButtonRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var s = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!($mod.TTMSFNCPlannerNavigationButton.pnbPrevious in this.FInteraction.FBottomNavigationButtons)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        s = this.FPositionsAppearance.FBottomLeftNavigationButtonSize;
        Result.Top = cr.Top;
        Result.Bottom = (Result.Top + s) + 1;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        s = this.FPositionsAppearance.FBottomLeftNavigationButtonSize;
        Result.Left = cr.Left;
        Result.Right = (Result.Left + s) + 1;
      };
      return Result;
    };
    this.GetBottomRightNavigationButtonRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var s = 0.0;
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!($mod.TTMSFNCPlannerNavigationButton.pnbNext in this.FInteraction.FBottomNavigationButtons)) return Result;
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetPositionsBottomRect());
      cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.LocalRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        s = this.FPositionsAppearance.FBottomRightNavigationButtonSize;
        Result.Top = (cr.Bottom - s) - 1;
        Result.Bottom = cr.Bottom - 1;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        s = this.FPositionsAppearance.FBottomRightNavigationButtonSize;
        Result.Left = (cr.Right - s) - 1;
        Result.Right = cr.Right - 1;
      };
      return Result;
    };
    this.GetPositionsBottomRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var tlr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var trr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      tlr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineLeftRect());
      trr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetTimeLineRightRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Left = tlr.Right;
        Result.Top = tlr.Bottom;
        Result.Right = tlr.Right + this.GetPositionsBottomSize();
        Result.Bottom = trr.Top;
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Left = tlr.Right;
        Result.Top = tlr.Bottom;
        Result.Right = trr.Left;
        Result.Bottom = Result.Top + this.GetPositionsBottomSize();
      };
      return Result;
    };
    this.GetTimeLineLeftRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.GetContentRect.call(this));
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Left = (Result.Left + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Right = Result.Left + Math.min(this.GetTotalRowHeight(),((Result.Right - Result.Left) - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize());
        Result.Bottom = Result.Top + this.GetTimeLineLeftSize();
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = (Result.Top + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Bottom = Result.Top + Math.min(this.GetTotalRowHeight(),((Result.Bottom - Result.Top) - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize());
        Result.Right = Result.Left + this.GetTimeLineLeftSize();
      };
      return Result;
    };
    this.GetTimeLineRightRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.GetContentRect.call(this));
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Left = (Result.Left + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Right = Result.Left + Math.min(this.GetTotalRowHeight(),((Result.Right - Result.Left) - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize());
        Result.Top = (Result.Top + Math.min(this.GetTotalColumnWidth(),((Result.Bottom - Result.Top) - this.GetTimeLineLeftSize()) - this.GetTimeLineRightSize())) + this.GetTimeLineLeftSize();
        Result.Bottom = Result.Top + this.GetTimeLineRightSize();
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = (Result.Top + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Bottom = Result.Top + Math.min(this.GetTotalRowHeight(),((Result.Bottom - Result.Top) - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize());
        Result.Left = (Result.Left + Math.min(this.GetTotalColumnWidth(),((Result.Right - Result.Left) - this.GetTimeLineLeftSize()) - this.GetTimeLineRightSize())) + this.GetTimeLineLeftSize();
        Result.Right = Result.Left + this.GetTimeLineRightSize();
      };
      return Result;
    };
    this.GetCacheWidth = function () {
      var Result = 0;
      Result = 1000;
      return Result;
    };
    this.GetCacheHeight = function () {
      var Result = 0;
      Result = 1000;
      return Result;
    };
    this.GetDisplaySubUnitFormat = function () {
      var Result = "";
      if (this.FTimeLine.FDisplaySubUnitFormat !== "") {
        Result = this.FTimeLine.FDisplaySubUnitFormat}
       else {
        var $tmp1 = this.GetDisplayMode();
        if ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod) {
          Result = "hh:nn"}
         else if ((((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) Result = "nn";
      };
      return Result;
    };
    this.GetDisplayUnitFormat = function () {
      var Result = "";
      if (this.FTimeLine.FDisplayUnitFormat !== "") {
        Result = this.FTimeLine.FDisplayUnitFormat}
       else {
        var $tmp1 = this.GetDisplayMode();
        if ($tmp1 === $mod.TTMSFNCPlannerMode.pmCustom) {
          Result = (pas.SysUtils.ShortDateFormat + " ") + pas.SysUtils.ShortTimeFormat}
         else if (($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) {
          Result = pas.SysUtils.ShortDateFormat}
         else if (((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
          Result = "h"}
         else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth) Result = pas.SysUtils.ShortDateFormat;
      };
      return Result;
    };
    this.GetNumDays = function () {
      var Result = 0;
      Result = pas.System.Trunc(0.5 + (this.FColumnCount / Math.max(1,this.FResources.GetCount())));
      return Result;
    };
    this.GetDisplayMode = function () {
      var Result = 0;
      Result = this.FMode;
      var $tmp1 = Result;
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
        if (this.FResources.GetCount() === 0) Result = $mod.TTMSFNCPlannerMode.pmDay;
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        if (this.FResources.GetCount() === 0) Result = $mod.TTMSFNCPlannerMode.pmMultiDay;
      };
      return Result;
    };
    this.GetActiveItem = function () {
      var Result = null;
      Result = this.FActiveItem;
      return Result;
    };
    this.UpdateActiveItem = function (AItem) {
      this.SetActiveItem(AItem);
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerData.Create$1.apply(this,arguments);
      this.FFindItemIndex = 0;
      this.FNeedsInitialization = true;
      this.FSelectedItems = $mod.TTMSFNCPlannerSelectedItems.$create("Create$1");
      this.FCustomDatesList = $mod.TTMSFNCPlannerDateTimes.$create("Create$1");
      this.FGroupsCaching = false;
      this.FGridCaching = false;
      this.FPositionsCaching = false;
      this.FTimeLineCaching = false;
      this.FMode = $mod.TTMSFNCPlannerMode.pmMultiDay;
      this.FCustomDateTimes = $mod.TTMSFNCPlannerDateTimes.$create("Create$1");
      this.FDisplayGroups = $mod.TTMSFNCPlannerDisplayGroups.$create("Create$1");
      this.FConflicts = $mod.TTMSFNCPlannerConflicts.$create("Create$2");
      this.FGridCache = $mod.TTMSFNCPlannerGridCache.$create("Create$2");
      this.FItemCache = $mod.TTMSFNCPlannerItemCache.$create("Create$2");
      this.FPositionsTopCache = $mod.TTMSFNCPlannerPositionsTopCache.$create("Create$2");
      this.FTimeLineLeftCache = $mod.TTMSFNCPlannerTimeLineLeftCache.$create("Create$2");
      this.FGroupsTopCache = $mod.TTMSFNCPlannerGroupsTopCache.$create("Create$2");
      this.FPositionsBottomCache = $mod.TTMSFNCPlannerPositionsBottomCache.$create("Create$2");
      this.FTimeLineRightCache = $mod.TTMSFNCPlannerTimeLineRightCache.$create("Create$2");
      this.FGroupsBottomCache = $mod.TTMSFNCPlannerGroupsBottomCache.$create("Create$2");
      this.FGridDisplay = $mod.TTMSFNCPlannerGridDisplayList.$create("Create$1");
      this.FItemDisplay = $mod.TTMSFNCPlannerItemDisplayList.$create("Create$1");
      this.FPositionsTopDisplay = $mod.TTMSFNCPlannerPositionsTopDisplayList.$create("Create$1");
      this.FTimeLineLeftDisplay = $mod.TTMSFNCPlannerTimeLineLeftDisplayList.$create("Create$1");
      this.FGroupsTopDisplay = $mod.TTMSFNCPlannerGroupsTopDisplayList.$create("Create$1");
      this.FPositionsBottomDisplay = $mod.TTMSFNCPlannerPositionsBottomDisplayList.$create("Create$1");
      this.FTimeLineRightDisplay = $mod.TTMSFNCPlannerTimeLineRightDisplayList.$create("Create$1");
      this.FGroupsBottomDisplay = $mod.TTMSFNCPlannerGroupsBottomDisplayList.$create("Create$1");
      this.FSelectionAppearance = $mod.TTMSFNCPlannerSelectionAppearance.$create("Create$1",[this]);
      this.FGridCellAppearance = $mod.TTMSFNCPlannerGridCellAppearance.$create("Create$1",[this]);
      this.FItemsAppearance = $mod.TTMSFNCPlannerItemsAppearance.$create("Create$1",[this]);
      this.FTimeLine = $mod.TTMSFNCPlannerTimeLine.$create("Create$1",[this]);
      this.FModeSettings = $mod.TTMSFNCPlannerModeSettings.$create("Create$1",[this]);
      this.FTimeLineAppearance = $mod.TTMSFNCPlannerTimeLineAppearance.$create("Create$1",[this]);
      this.FPositionsAppearance = $mod.TTMSFNCPlannerPositionsAppearance.$create("Create$1",[this]);
      this.FPositions = $mod.TTMSFNCPlannerPositions.$create("Create$1",[this]);
      this.FGroupsAppearance = $mod.TTMSFNCPlannerGroupsAppearance.$create("Create$1",[this]);
      this.FInteraction = $mod.TTMSFNCPlannerInteraction.$create("Create$1",[this]);
      this.FDefaultItem = pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItem.$create("Create$1",[null]);
      this.FAnimateTimer = pas["WEBLib.ExtCtrls"].TTimer.$create("Create$1",[this]);
      this.FAnimateTimer.SetInterval(1);
      this.FAnimateTimer.SetEnabled(false);
      this.FAnimateTimer.FOnTimer = rtl.createCallback(this,"Animate");
      this.FDownTimer = pas["WEBLib.ExtCtrls"].TTimer.$create("Create$1",[this]);
      this.FDownTimer.SetInterval(1);
      this.FDownTimer.SetEnabled(false);
      this.FDownTimer.FOnTimer = rtl.createCallback(this,"DownTime");
      this.SetWidth(600);
      this.SetHeight(450);
      if ((pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !((pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState) || (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState))) this.InitSample();
    };
    this.Destroy = function () {
      this.FActiveItem = null;
      if (this.FEditingBackground != null) rtl.free(this,"FEditingBackground");
      this.FEditingBackground = null;
      if (this.FEditingDialog != null) rtl.free(this,"FEditingDialog");
      this.FEditingDialog = null;
      if (this.FHintPanel != null) rtl.free(this,"FHintPanel");
      this.FHintPanel = null;
      if (this.FStartTimeSizePanel != null) rtl.free(this,"FStartTimeSizePanel");
      this.FStartTimeSizePanel = null;
      if (this.FEndTimeSizePanel != null) rtl.free(this,"FEndTimeSizePanel");
      this.FEndTimeSizePanel = null;
      rtl.free(this,"FAnimateTimer");
      rtl.free(this,"FDownTimer");
      rtl.free(this,"FItemsAppearance");
      rtl.free(this,"FDefaultItem");
      rtl.free(this,"FModeSettings");
      rtl.free(this,"FTimeLine");
      rtl.free(this,"FGridCellAppearance");
      rtl.free(this,"FGroupsAppearance");
      rtl.free(this,"FTimeLineAppearance");
      rtl.free(this,"FInteraction");
      rtl.free(this,"FPositions");
      rtl.free(this,"FPositionsAppearance");
      rtl.free(this,"FSelectionAppearance");
      rtl.free(this,"FGroupsTopDisplay");
      rtl.free(this,"FPositionsTopDisplay");
      rtl.free(this,"FTimeLineLeftDisplay");
      rtl.free(this,"FGroupsBottomDisplay");
      rtl.free(this,"FPositionsBottomDisplay");
      rtl.free(this,"FTimeLineRightDisplay");
      rtl.free(this,"FCustomDatesList");
      rtl.free(this,"FSelectedItems");
      rtl.free(this,"FCustomDateTimes");
      rtl.free(this,"FItemDisplay");
      rtl.free(this,"FGridDisplay");
      rtl.free(this,"FItemCache");
      rtl.free(this,"FGridCache");
      rtl.free(this,"FConflicts");
      rtl.free(this,"FDisplayGroups");
      rtl.free(this,"FGroupsTopCache");
      rtl.free(this,"FPositionsTopCache");
      rtl.free(this,"FTimeLineLeftCache");
      rtl.free(this,"FGroupsBottomCache");
      rtl.free(this,"FPositionsBottomCache");
      rtl.free(this,"FTimeLineRightCache");
      pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerData.Destroy.apply(this,arguments);
    };
    this.Assign = function (Source) {
      var I = 0;
      pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerData.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomPlanner.isPrototypeOf(Source)) {
        this.FItemsAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FItemsAppearance);
        this.FTimeLineAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FTimeLineAppearance);
        this.FPositionsAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FPositionsAppearance);
        this.FPositions.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FPositions);
        this.FGroupsAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FGroupsAppearance);
        this.FTimeLine.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FTimeLine);
        this.FModeSettings.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FModeSettings);
        this.FMode = rtl.as(Source,$mod.TTMSFNCCustomPlanner).FMode;
        this.FGridCellAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FGridCellAppearance);
        this.FSelectionAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FSelectionAppearance);
        this.FCustomDateTimes.Clear();
        for (var $l1 = 0, $end2 = rtl.as(Source,$mod.TTMSFNCCustomPlanner).FCustomDateTimes.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.FCustomDateTimes.Add(rtl.as(Source,$mod.TTMSFNCCustomPlanner).FCustomDateTimes.GetItem(I));
        };
      };
    };
    this.Draw = function (AGraphics, ARect) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      AGraphics.FBitmapContainer = this.GetBitmapContainer();
      this.DrawEmptySpaces(AGraphics);
      this.DrawGrid(AGraphics);
      this.DrawSelection(AGraphics);
      if (this.FTimeLine.FCurrentTimePosition === $mod.TTMSFNCPlannerCurrentTimePosition.pctpUnderItems) this.DrawCurrentTimeInGrid(AGraphics);
      this.DrawItems(AGraphics);
      if (this.FTimeLine.FCurrentTimePosition === $mod.TTMSFNCPlannerCurrentTimePosition.pctpOverItems) this.DrawCurrentTimeInGrid(AGraphics);
      this.DrawPositions(AGraphics);
      this.DrawTimeLine(AGraphics);
      this.DrawGroups(AGraphics);
      this.DrawBorders(AGraphics);
      this.DrawNavigationButtons(AGraphics);
    };
    this.SelectCells = function (AStartCell, AEndCell) {
      this.HandleSelection(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AStartCell),new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(AEndCell));
    };
    this.Navigate = function (ACell, AForceScroll) {
      var hs = 0.0;
      var vs = 0.0;
      var rhs = 0.0;
      var rvs = 0.0;
      var vss = 0.0;
      var hss = 0.0;
      var cw = 0.0;
      var ch = 0.0;
      var hscroll = null;
      var vscroll = null;
      var totalh = 0.0;
      var totalw = 0.0;
      var cs = 0;
      var rs = 0;
      var toth = 0.0;
      var totw = 0.0;
      var cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var cr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      hscroll = this.HorizontalScrollBar();
      vscroll = this.VerticalScrollBar();
      if ((hscroll != null) && (vscroll != null)) {
        cr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
        var $tmp1 = this.FOrientationMode;
        if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          cw = cr.Bottom - cr.Top;
          ch = cr.Right - cr.Left;
          vs = this.GetHScrollValue();
          hs = this.GetVScrollValue();
          vss = vs;
          hss = hs;
          if (this.FScrollMode === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) {
            hss = this.GetVerticalScrollPosition();
            vss = this.GetHorizontalScrollPosition();
          };
        } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
          cw = cr.Right - cr.Left;
          ch = cr.Bottom - cr.Top;
          vs = this.GetVScrollValue();
          hs = this.GetHScrollValue();
          vss = vs;
          hss = hs;
          if (this.FScrollMode === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) {
            vss = this.GetVerticalScrollPosition();
            hss = this.GetHorizontalScrollPosition();
          };
        } else {
          hs = 0;
          vs = 0;
          vss = 0;
          hss = 0;
          cw = 0;
          ch = 0;
        };
        totalw = this.GetColWidths(ACell.Col);
        totalh = this.GetRowHeights(ACell.Row);
        rvs = this.GetRowPos(ACell.Row);
        if (AForceScroll) {
          var $tmp2 = this.FScrollMode;
          if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smPixelScrolling) {
            vs = rvs}
           else if ($tmp2 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) vs = ACell.Row;
        } else {
          if (rvs < vss) {
            var $tmp3 = this.FScrollMode;
            if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smPixelScrolling) {
              vs = rvs}
             else if ($tmp3 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) vs = ACell.Row;
          } else {
            var $tmp4 = this.FScrollMode;
            if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smPixelScrolling) {
              if ((rvs + totalh) > (vss + ch)) vs = ((rvs + totalh) - ch) + 1;
            } else if ($tmp4 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) {
              while ((rvs + totalh) > (vss + ch)) {
                vs = vs + 1;
                cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(ACell.Col,Math.round(vs)));
                rs = 1;
                if (rs > 0) {
                  toth = this.GetRowPos((cl.Row + rs) - 1) - this.GetRowPos(cl.Row)}
                 else {
                  rs = 1;
                  toth = this.GetRowHeights(cl.Row);
                };
                vs = (vs + rs) - 1;
                vss = vss + toth;
              };
            };
          };
        };
        rhs = this.GetColPos(ACell.Col);
        if (AForceScroll) {
          var $tmp5 = this.FScrollMode;
          if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smPixelScrolling) {
            hs = rhs}
           else if ($tmp5 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) hs = ACell.Col;
        } else {
          if (rhs < hss) {
            var $tmp6 = this.FScrollMode;
            if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smPixelScrolling) {
              hs = rhs}
             else if ($tmp6 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) hs = ACell.Col;
          } else {
            var $tmp7 = this.FScrollMode;
            if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smPixelScrolling) {
              if ((rhs + totalw) > (hss + cw)) hs = ((rhs + totalw) - cw) + 1;
            } else if ($tmp7 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerScrollMode.smCellScrolling) {
              while ((rhs + totalw) > (hss + cw)) {
                hs = hs + 1;
                cl = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(Math.round(hs),ACell.Row));
                cs = 1;
                if (cs > 0) {
                  totw = this.GetColPos(cl.Col) - this.GetColPos((cl.Col + cs) - 1)}
                 else {
                  cs = 1;
                  totw = this.GetColWidths(cl.Col);
                };
                hs = (hs + cs) - 1;
                hss = hss + totw;
              };
            };
          };
        };
        var $tmp8 = this.FOrientationMode;
        if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
          this.Scroll(vs,hs)}
         else if ($tmp8 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) this.Scroll(hs,vs);
      };
    };
    this.InitSample = function () {
      this.BeginUpdate();
      this.AddOrUpdateItem(this.FDefaultItem.FStartTime,this.FDefaultItem.FEndTime,"Sample Item","Notes",-1);
      this.FTimeLine.SetViewStart(pas.System.Int(pas.SysUtils.Now()) + pas.SysUtils.EncodeTime(4,0,0,0));
      this.FResources.Add$1().SetText("BMW");
      this.FResources.Add$1().SetText("Mercedes");
      this.FResources.Add$1().SetText("Audi");
      this.EndUpdate();
    };
    this.CloseEditingDialogAndRemoveItem = function () {
      if ((this.FUpdateItem >= 0) && (this.FUpdateItem <= (this.FItems.GetCount() - 1))) this.HandleItemDelete(this.FItems.GetItem$1(this.FUpdateItem),$mod.TTMSFNCPlannerItemDeleteMode.pidmDialog);
      this.CloseEditingDialog(true);
    };
    this.CloseEditingDialog = function (ACancel) {
      var p = new $mod.TTMSFNCPlannerEditingDialog();
      var sta = 0.0;
      var ste = 0.0;
      var t = "";
      var n = "";
      var b = false;
      var it = null;
      var res = 0;
      var s = false;
      var c = false;
      var sc = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var prtn = null;
      it = null;
      if ((this.FUpdateItem >= 0) && (this.FUpdateItem <= (this.FItems.GetCount() - 1))) it = this.FItems.GetItem$1(this.FUpdateItem);
      sta = 0;
      ste = 0;
      p = new $mod.TTMSFNCPlannerEditingDialog(this.GetEditingDialog(this.FUpdateItem));
      if (!ACancel) {
        sta = pas.System.Int(pas.SysUtils.Now());
        if (p.StartDateEdit != null) sta = pas.System.Int(p.StartDateEdit.GetDate());
        if (p.StartTimeEdit != null) sta = sta + pas.System.Frac(p.StartTimeEdit.GetTime());
        ste = pas.System.Int(pas.SysUtils.Now());
        if (p.EndDateEdit != null) ste = pas.System.Int(p.EndDateEdit.GetDate());
        if (p.EndTimeEdit != null) ste = ste + pas.System.Frac(p.EndTimeEdit.GetTime());
        t = this.FDefaultItem.FTitle;
        if (p.TitleEdit != null) t = p.TitleEdit.GetText();
        n = this.FDefaultItem.FText;
        if (p.TextMemo != null) n = p.TextMemo.GetText();
        res = this.FInsertResource;
        if (p.ResourcesComboBox != null) {
          prtn = this.FResourcesComboBox.FParent;
          res = p.ResourcesComboBox.GetItemIndex();
          p.ResourcesComboBox.SetParent(prtn);
        };
        if ((this.FUpdateItem >= 0) && (this.FUpdateItem <= (this.FItems.GetCount() - 1))) {
          it = this.FItems.GetItem$1(this.FUpdateItem);
          b = true;
          this.DoBeforeUpdateItem(sta,ste,res,it,{get: function () {
              return t;
            }, set: function (v) {
              t = v;
            }},{get: function () {
              return n;
            }, set: function (v) {
              n = v;
            }},{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }});
          if (b) {
            it.FUpdatingLinked = true;
            this.CallBeforeUpdateLinkedItems(it,sta - it.FStartTime,ste - it.FEndTime,res - it.FResource);
            it.FUpdatingLinked = false;
            it = this.AddOrUpdateItem$1(res,sta,ste,t,n,this.FUpdateItem);
            if ((p.CustomContentPanel && (p.ContentPanel != null)) && !ACancel) this.DoCustomContentPanelToItem(p.ContentPanel,it);
            this.DoAfterUpdateItem(sta,ste,res,it);
            this.DoItemChanged(it);
            it.FUpdatingLinked = true;
            this.CallAfterUpdateLinkedItems(it);
            it.FUpdatingLinked = false;
          };
        } else {
          b = true;
          this.DoBeforeInsertItem(sta,ste,res,{get: function () {
              return t;
            }, set: function (v) {
              t = v;
            }},{get: function () {
              return n;
            }, set: function (v) {
              n = v;
            }},{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }});
          if (b) {
            it = this.AddOrUpdateItem$1(res,sta,ste,t,n,-1);
            if ((p.CustomContentPanel && (p.ContentPanel != null)) && !ACancel) this.DoCustomContentPanelToItem(p.ContentPanel,it);
            this.DoAfterInsertItem(sta,ste,res,it);
            s = it.FSelectable && it.FEnabled;
            this.DoBeforeSelectItem(it,{get: function () {
                return s;
              }, set: function (v) {
                s = v;
              }});
            if (s) {
              if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
                this.HandleSelectLinkedItems(it,false)}
               else this.HandleSelectItem(it,false);
              this.DoAfterSelectItem(it);
            };
          };
        };
      };
      c = true;
      if (it != null) sc = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.ItemToStartCell(it));
      if ((this.FUpdateItem >= 0) && (this.FUpdateItem <= (this.FItems.GetCount() - 1))) {
        this.DoCloseUpdateDialog(sta,ste,sc.Col,it,ACancel,{get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }})}
       else this.DoCloseInsertDialog(sta,ste,sc.Col,it,ACancel,{get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }});
      if (c) {
        if (p.Background != null) p.Background.SetParent(null);
        if (p.Panel != null) p.Panel.SetParent(null);
        if (this.CanFocus()) this.SetFocus();
        this.FEditorDialogActive = false;
      };
    };
    this.OpenEditingDialog = function (AStartTime, AEndTime, AResource, ATitle, AText, AUpdateItem, ACustomParent) {
      var p = new $mod.TTMSFNCPlannerEditingDialog();
      var s = null;
      var fr = false;
      var it = null;
      var d = false;
      var itd = null;
      var prnt = null;
      this.FInsertResource = AResource;
      this.FUpdateItem = AUpdateItem;
      p = new $mod.TTMSFNCPlannerEditingDialog(this.GetEditingDialog(this.FUpdateItem));
      this.FDialogStartDate = pas.System.Int(AStartTime);
      if (p.StartDateEdit != null) p.StartDateEdit.SetDate(this.FDialogStartDate);
      this.FDialogEndDate = pas.System.Int(AEndTime);
      if (p.EndDateEdit != null) p.EndDateEdit.SetDate(this.FDialogEndDate);
      this.FDialogStartTime = pas.System.Frac(AStartTime);
      if (p.StartTimeEdit != null) p.StartTimeEdit.SetTime(this.FDialogStartTime);
      this.FDialogEndTime = pas.System.Frac(AEndTime);
      if (p.EndTimeEdit != null) p.EndTimeEdit.SetTime(this.FDialogEndTime);
      if (p.TitleEdit != null) p.TitleEdit.SetText(ATitle);
      if (p.TextMemo != null) p.TextMemo.SetText(AText);
      fr = false;
      if ((AUpdateItem >= 0) && (AUpdateItem <= (this.FItems.GetCount() - 1))) fr = this.FItems.GetItem$1(AUpdateItem).FFixedResource;
      if (p.ResourcesComboBox != null) {
        prnt = p.ResourcesComboBox.FParent;
        if (!(ACustomParent != null)) {
          p.ResourcesComboBox.SetParent(this)}
         else p.ResourcesComboBox.SetParent(ACustomParent);
        p.ResourcesComboBox.Clear();
        s = this.GetResources();
        p.ResourcesComboBox.FItems.Assign(s);
        p.ResourcesComboBox.SetItemIndex(this.PositionToResource(AResource));
        p.ResourcesComboBox.SetVisible(this.GetResourcesAvailable() && !fr);
        p.ResourcesComboBox.SetParent(prnt);
        s = rtl.freeLoc(s);
      };
      if (p.ResourceLabel != null) p.ResourceLabel.SetVisible(this.GetResourcesAvailable() && !fr);
      if (p.TitleLabel != null) {
        if ((p.ResourceLabel != null) && p.ResourceLabel.FVisible) {
          p.TitleLabel.SetTop((p.ResourceLabel.GetTop() + p.ResourceLabel.GetHeight()) + 15)}
         else if (p.StartTimeLabel != null) p.TitleLabel.SetTop((p.EndTimeLabel.GetTop() + p.EndTimeLabel.GetHeight()) + 15);
        if (p.TitleEdit != null) p.TitleEdit.SetTop(p.TitleLabel.GetTop() + Math.floor((p.TitleLabel.GetHeight() - p.TitleEdit.GetHeight()) / 2));
        if (p.TextLabel != null) p.TextLabel.SetTop((p.TitleLabel.GetTop() + p.TitleLabel.GetHeight()) + 15);
        if (p.TextMemo != null) p.TextMemo.FMargins.SetTop((p.TextLabel.GetTop() + p.TextLabel.GetHeight()) + 15);
      };
      if (p.ButtonRemove != null) {
        if ((AUpdateItem >= 0) && (AUpdateItem <= (this.FItems.GetCount() - 1))) {
          itd = this.FItems.GetItem$1(AUpdateItem);
          d = itd.FDeletable;
          this.DoIsItemDeletable(itd,{get: function () {
              return d;
            }, set: function (v) {
              d = v;
            }});
          p.ButtonRemove.SetVisible(d);
        };
      };
      if ((p.Background != null) && !(ACustomParent != null)) p.Background.SetParent(this);
      if (p.Panel != null) {
        if (ACustomParent != null) {
          p.Panel.SetParent(ACustomParent)}
         else p.Panel.SetParent(this);
      };
      if (p.CustomContentPanel && (p.ContentPanel != null)) {
        it = null;
        if ((this.FUpdateItem >= 0) && (this.FUpdateItem <= (this.FItems.GetCount() - 1))) it = this.FItems.GetItem$1(this.FUpdateItem);
        this.DoInitializeCustomContentPanel(it,p.ContentPanel);
        this.DoItemToCustomContentPanel(it,p.ContentPanel);
      };
      if (p.StartDateEdit != null) p.StartDateEdit.SetDate(p.StartDateEdit.GetDate());
      if (p.EndDateEdit != null) p.EndDateEdit.SetDate(p.EndDateEdit.GetDate());
      if (p.StartTimeEdit != null) p.StartTimeEdit.SetTime(p.StartTimeEdit.GetTime());
      if (p.EndTimeEdit != null) p.EndTimeEdit.SetTime(p.EndTimeEdit.GetTime());
      if ((((p.StartDateEdit != null) && !p.CustomContentPanel) && p.StartDateEdit.CanFocus()) && !(ACustomParent != null)) p.StartDateEdit.SetFocus();
      if (p.Panel != null) p.Panel.Invalidate();
      this.FEditorDialogActive = true;
    };
    this.NavigateToNextDateTime = function (ADateTime) {
      var stdt = 0.0;
      this.BeginUpdate();
      this.SaveScrollPosition();
      stdt = this.FModeSettings.FStartTime;
      if (ADateTime !== -1) {
        this.FModeSettings.SetStartTime(ADateTime)}
       else this.FModeSettings.SetStartTime(this.GetNextDateTime());
      this.FModeSettings.SetEndTime(this.FModeSettings.FEndTime + (this.FModeSettings.FStartTime - stdt));
      this.RestoreScrollPosition();
      this.EndUpdate();
    };
    this.NavigateToPreviousDateTime = function (ADateTime) {
      var stdt = 0.0;
      this.BeginUpdate();
      this.SaveScrollPosition();
      stdt = this.FModeSettings.FStartTime;
      if (ADateTime !== -1) {
        this.FModeSettings.SetStartTime(ADateTime)}
       else this.FModeSettings.SetStartTime(this.GetPreviousDateTime());
      this.FModeSettings.SetEndTime(this.FModeSettings.FEndTime + (this.FModeSettings.FStartTime - stdt));
      this.RestoreScrollPosition();
      this.EndUpdate();
    };
    this.SaveScrollPosition = function () {
      this.FSaveHScrollPos = this.GetHScrollValue();
      this.FSaveVScrollPos = this.GetVScrollValue();
    };
    this.RestoreScrollPosition = function () {
      this.Scroll(this.FSaveHScrollPos,this.FSaveVScrollPos);
    };
    this.UpdateConflicts = function () {
      var Self = this;
      var I = 0;
      var J = 0;
      var K = 0;
      var L = 0;
      var M = 0;
      var N = 0;
      var conf = null;
      var it = null;
      var itemA = null;
      var itemB = null;
      var res = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate();
      var firsttime = 0.0;
      var lasttime = 0.0;
      var check = false;
      var found = false;
      function ExtendOverlap(itemA, itemB) {
        var Result = false;
        var ms = 0.0;
        var me = 0.0;
        ms = Math.max(itemA.FStartTimeExt,itemB.FStartTimeExt);
        me = Math.min(itemA.FEndTimeExt,itemB.FEndTimeExt);
        Result = pas.DateUtils.CompareDateTime(me,ms) === 1;
        if (Result) {
          itemA.FStartTimeExt = Math.min(itemA.FStartTimeExt,itemB.FStartTimeExt);
          itemA.FEndTimeExt = Math.max(itemA.FEndTimeExt,itemB.FEndTimeExt);
          itemB.FStartTimeExt = itemA.FStartTimeExt;
          itemB.FEndTimeExt = itemA.FEndTimeExt;
        };
        return Result;
      };
      if (((Self.GetUpdateCount() > 0) || (pas.Classes.TComponentStateItem.csDestroying in Self.FComponentState)) || (pas.Classes.TComponentStateItem.csLoading in Self.FComponentState)) return;
      if (Self.FNeedsConflictsUpdate) {
        Self.NeedsConflictsUpdate(null);
        Self.FNeedsConflictsUpdate = false;
      };
      for (var $l1 = 0, $end2 = Self.FConflicts.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        conf = Self.FConflicts.GetItem$1(I);
        if (conf.FNeedsConflictsUpdate) {
          conf.UpdateItems();
          conf.UpdateDates();
          firsttime = 0;
          lasttime = 0;
          if (conf.FDates.GetCount() > 0) {
            firsttime = rtl.getObject(conf.FDates.Get(0)).DateTime;
            lasttime = rtl.getObject(conf.FDates.Get(conf.FDates.GetCount() - 1)).DateTime;
          };
          for (var $l3 = 0, $end4 = conf.FItems.GetCount() - 1; $l3 <= $end4; $l3++) {
            K = $l3;
            var $with5 = conf.FItems.GetItem(K);
            $with5.FStartTimeExt = Math.max($with5.FStartTime,firsttime);
            $with5.FEndTimeExt = Math.min($with5.FEndTime,lasttime);
          };
          for (var $l6 = 0, $end7 = conf.FItems.GetCount() - 1; $l6 <= $end7; $l6++) {
            K = $l6;
            for (var $l8 = 0, $end9 = conf.FItems.GetCount() - 1; $l8 <= $end9; $l8++) {
              L = $l8;
              if (K !== L) ExtendOverlap(conf.FItems.GetItem(K),conf.FItems.GetItem(L));
            };
            it = conf.FItems.GetItem(K);
            it.DirtyItem();
          };
          for (var $l10 = 0, $end11 = conf.FDates.GetCount() - 1; $l10 <= $end11; $l10++) {
            J = $l10;
            res = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rtl.getObject(conf.FDates.Get(J)));
            res.X = 0;
            res.Y = 0;
            conf.FDates.Put(J,new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(res));
          };
          for (var $l12 = 0, $end13 = conf.FItems.GetCount() - 1; $l12 <= $end13; $l12++) {
            K = $l12;
            it = conf.FItems.GetItem(K);
            for (var $l14 = 0, $end15 = conf.FDates.GetCount() - 1; $l14 <= $end15; $l14++) {
              J = $l14;
              if ((pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,it.FStartTimeExt) in rtl.createSet(1,0)) && (pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,it.FEndTimeExt) === -1)) {
                res = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rtl.getObject(conf.FDates.Get(J)));
                res.Y = res.Y + 1;
                conf.FDates.Put(J,new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(res));
              };
            };
          };
          for (var $l16 = 0, $end17 = conf.FItems.GetCount() - 1; $l16 <= $end17; $l16++) {
            K = $l16;
            it = conf.FItems.GetItem(K);
            it.FConflictsExt = 1;
            for (var $l18 = 0, $end19 = conf.FDates.GetCount() - 1; $l18 <= $end19; $l18++) {
              J = $l18;
              if ((pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,it.FStartTime) in rtl.createSet(1,0)) && (pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,it.FEndTime) === -1)) {
                if (rtl.getObject(conf.FDates.Get(J)).Y > it.FConflictsExt) it.FConflictsExt = rtl.getObject(conf.FDates.Get(J)).Y;
              };
            };
          };
          for (var $l20 = 0, $end21 = conf.FDates.GetCount() - 1; $l20 <= $end21; $l20++) {
            J = $l20;
            res = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rtl.getObject(conf.FDates.Get(J)));
            res.Z = rtl.arraySetLength(res.Z,false,res.Y);
            for (var $l22 = 0, $end23 = res.Y - 1; $l22 <= $end23; $l22++) {
              L = $l22;
              res.Z[L] = false;
            };
            conf.FDates.Put(J,new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(res));
          };
          for (var $l24 = 0, $end25 = conf.FItems.GetCount() - 1; $l24 <= $end25; $l24++) {
            K = $l24;
            it = conf.FItems.GetItem(K);
            for (var $l26 = 0, $end27 = it.FConflictsExt - 1; $l26 <= $end27; $l26++) {
              N = $l26;
              found = true;
              check = false;
              for (var $l28 = 0, $end29 = conf.FDates.GetCount() - 1; $l28 <= $end29; $l28++) {
                J = $l28;
                if (pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,Math.max(it.FStartTime,firsttime)) === 0) check = true;
                if (pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,Math.min(it.FEndTime,lasttime)) === 0) check = false;
                if (check) {
                  res = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rtl.getObject(conf.FDates.Get(J)));
                  if (res.Z[N]) {
                    found = false;
                    break;
                  };
                };
              };
              if (found) {
                it.FConflictsPosExt = N;
                check = false;
                for (var $l30 = 0, $end31 = conf.FDates.GetCount() - 1; $l30 <= $end31; $l30++) {
                  J = $l30;
                  if (pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,Math.max(it.FStartTime,firsttime)) === 0) check = true;
                  if (pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,Math.min(it.FEndTime,lasttime)) === 0) check = false;
                  if (check) {
                    res = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rtl.getObject(conf.FDates.Get(J)));
                    res.Z[N] = true;
                    if (res.X < N) res.X = N;
                    conf.FDates.Put(J,new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(res));
                  };
                };
                break;
              };
            };
          };
          for (var $l32 = 0, $end33 = conf.FItems.GetCount() - 1; $l32 <= $end33; $l32++) {
            K = $l32;
            it = conf.FItems.GetItem(K);
            M = 1;
            for (var $l34 = 0, $end35 = conf.FDates.GetCount() - 1; $l34 <= $end35; $l34++) {
              J = $l34;
              res = new pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResourceDate(rtl.getObject(conf.FDates.Get(J)));
              if ((pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,Math.max(it.FStartTime,firsttime)) in rtl.createSet(1,0)) && (pas.DateUtils.CompareDateTime(rtl.getObject(conf.FDates.Get(J)).DateTime,Math.min(it.FEndTime,lasttime)) === -1)) {
                if (res.X > M) M = res.X;
              };
            };
            if (it.FConflictsExt > (M + 1)) it.FConflictsExt = M + 1;
          };
          for (var $l36 = 0, $end37 = conf.FItems.GetCount() - 1; $l36 <= $end37; $l36++) {
            K = $l36;
            for (var $l38 = 0, $end39 = conf.FItems.GetCount() - 1; $l38 <= $end39; $l38++) {
              L = $l38;
              if (K !== L) {
                itemA = conf.FItems.GetItem(K);
                itemB = conf.FItems.GetItem(L);
                if (ExtendOverlap(itemA,itemB)) {
                  if (itemA.FConflictsExt !== itemB.FConflictsExt) {
                    M = Math.max(itemA.FConflictsExt,itemB.FConflictsExt);
                    itemA.FConflictsExt = M;
                    itemB.FConflictsExt = M;
                  };
                };
              };
            };
          };
          for (var $l40 = 0, $end41 = conf.FItems.GetCount() - 1; $l40 <= $end41; $l40++) {
            K = $l40;
            it = conf.FItems.GetItem(K);
            it.DirtyItem();
            for (var $l42 = 0, $end43 = it.FPositionsList.GetCount() - 1; $l42 <= $end43; $l42++) {
              J = $l42;
              if (it.FPositionsList.GetItem(J) === conf.FPosition) {
                if ((J >= 0) && (J <= (it.FConflictsList.GetCount() - 1))) {
                  it.FConflictsList.SetItem(J,it.FConflictsExt)}
                 else it.FConflictsList.Add(it.FConflictsExt);
                if ((J >= 0) && (J <= (it.FConflictsPosList.GetCount() - 1))) {
                  it.FConflictsPosList.SetItem(J,it.FConflictsPosExt)}
                 else it.FConflictsPosList.Add(it.FConflictsPosExt);
              };
            };
          };
          conf.FNeedsConflictsUpdate = false;
        };
      };
    };
    this.UpdateItemsCache = function () {
      this.UpdateItemCache();
      this.UpdateItemDisplay();
    };
    this.UpdatePlannerCache = function (ADirtyItems) {
      if (this.GetUpdateCount() > 0) {
        this.UpdateCalculations(true);
        if (ADirtyItems) this.DirtyItems();
        return;
      };
      pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.UpdatePlannerCache.apply(this,arguments);
      this.UpdateInplaceEditorPosition();
      this.UpdateSizeHandlers();
      this.UpdateDeleteHandler();
      this.Invalidate();
    };
    this.GetContentClipRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetContentRect());
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Bottom = Result.Top + Math.min(this.GetTotalColumnWidth(),Result.Bottom - Result.Top);
        Result.Right = Result.Left + Math.min(this.GetTotalRowHeight(),Result.Right - Result.Left);
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Bottom = Result.Top + Math.min(this.GetTotalRowHeight(),Result.Bottom - Result.Top);
        Result.Right = Result.Left + Math.min(this.GetTotalColumnWidth(),Result.Right - Result.Left);
      };
      return Result;
    };
    this.GetContentRect = function () {
      var Result = new pas["WEBLib.TMSFNCTypes"].TRectF();
      Result = new pas["WEBLib.TMSFNCTypes"].TRectF(pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.GetContentRect.call(this));
      var $tmp1 = this.FOrientationMode;
      if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomHorizontal) {
        Result.Left = (Result.Left + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Top = Result.Top + this.GetTimeLineLeftSize();
        Result.Right = (Result.Right - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize();
        Result.Bottom = Result.Bottom - this.GetTimeLineRightSize();
      } else if ($tmp1 === pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical) {
        Result.Top = (Result.Top + this.GetPositionsTopSize()) + this.GetGroupsTopSize();
        Result.Left = Result.Left + this.GetTimeLineLeftSize();
        Result.Bottom = (Result.Bottom - this.GetPositionsBottomSize()) - this.GetGroupsBottomSize();
        Result.Right = Result.Right - this.GetTimeLineRightSize();
      };
      return Result;
    };
    this.GetDeleteHandler = function () {
      var Result = new $mod.TTMSFNCPlannerDeleteHandler();
      if (!this.FDeleteHandlerCreated) {
        this.FDeletePanel = $mod.TTMSFNCPlannerDeleteHandlerPanel.$create("Create$1",[this]);
        this.FDeletePanel.FPlanner = this;
        this.FDeleteHandlerCreated = true;
      };
      Result.Background = this.FDeletePanel;
      return Result;
    };
    this.GetStartTimeSizeHandler = function () {
      var Result = new $mod.TTMSFNCPlannerSizeHandler();
      if (!this.FStartTimeSizeHandlerCreated) {
        this.FStartTimeSizePanel = $mod.TTMSFNCPlannerSizeHandlerPanel.$create("Create$1",[this]);
        this.FStartTimeSizePanel.FPlanner = this;
        this.FStartTimeSizePanel.FKind = $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkStartTime;
        this.FStartTimeSizeHandlerCreated = true;
      };
      Result.Background = this.FStartTimeSizePanel;
      return Result;
    };
    this.GetEndTimeSizeHandler = function () {
      var Result = new $mod.TTMSFNCPlannerSizeHandler();
      if (!this.FEndTimeSizeHandlerCreated) {
        this.FEndTimeSizePanel = $mod.TTMSFNCPlannerSizeHandlerPanel.$create("Create$1",[this]);
        this.FEndTimeSizePanel.FPlanner = this;
        this.FEndTimeSizePanel.FKind = $mod.TTMSFNCPlannerSizeHandlerPanelKind.pshpkEndTime;
        this.FEndTimeSizeHandlerCreated = true;
      };
      Result.Background = this.FEndTimeSizePanel;
      return Result;
    };
    this.GetHintPopup = function () {
      var Result = new $mod.TTMSFNCPlannerHintPopup();
      if (!this.FHintPopupCreated) {
        this.FHintPanel = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControl.$create("Create$1",[this]);
        this.FHintPanel.SetAdaptToStyle(this.GetAdaptToStyle());
        this.FHintPanel.SetAllowFocus(false);
        this.FHintPanel.SetWidth(350);
        this.FHintPanel.SetHeight(300);
        this.FHintLabel = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this]);
        this.FHintLabel.SetWidth(10000);
        this.FHintLabel.FWordWrap = false;
        this.FHintLabel.SetAutoSize(true);
        this.FHintLabel.SetLayout(pas["WEBLib.StdCtrls"].TTextLayout.tlCenter);
        this.FHintLabel.SetAlignWithMargins(true);
        this.FHintLabel.FMargins.SetLeft(5);
        this.FHintLabel.SetLeft(5);
        this.FHintLabel.SetTop(5);
        this.FHintLabel.SetParent(this.FHintPanel);
        this.FHintPopupCreated = true;
      };
      Result.TextLabel = this.FHintLabel;
      Result.Panel = this.FHintPanel;
      return Result;
    };
    this.GetEditingDialog = function (AItemIndex) {
      var Result = new $mod.TTMSFNCPlannerEditingDialog();
      var cp = null;
      var it = null;
      var sc = 0.0;
      if (!this.FEditingDialogCreated) {
        this.FEditingBackground = pas["WEBLib.TMSFNCImage"].TTMSFNCImage.$create("Create$1",[this]);
        this.FEditingBackground.SetAllowFocus(false);
        this.FEditingBackground.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
        this.FEditingBackground.DisableBackground();
        this.FEditingBackground.FOnClick = rtl.createCallback(this,"EditingDialogCancel");
        this.FEditingDialog = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControl.$create("Create$1",[this]);
        this.FEditingDialog.SetAdaptToStyle(this.GetAdaptToStyle());
        this.FEditingDialog.SetAllowFocus(false);
        this.FEditingDialog.SetWidth(350);
        this.FEditingDialog.SetHeight(300);
        this.FEditingDialog.SetLeft(Math.floor((this.GetWidth() - this.FEditingDialog.GetWidth()) / 2));
        this.FEditingDialog.SetTop(Math.floor((this.GetHeight() - this.FEditingDialog.GetHeight()) / 2));
        this.FBottomPanel = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControl.$create("Create$1",[this.FEditingDialog]);
        this.FBottomPanel.SetAdaptToStyle(this.GetAdaptToStyle());
        this.FBottomPanel.SetHeight(37);
        this.FBottomPanel.SetParent(this.FEditingDialog);
        this.FBottomPanel.SetWidth(200);
        this.FBottomPanel.SetAllowFocus(false);
        this.FButtonOK = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FBottomPanel]);
        this.FButtonOK.SetVisible(false);
        this.FButtonOK.SetParent(this);
        this.FButtonOK.SetLayout(pas["WEBLib.StdCtrls"].TTextLayout.tlCenter);
        this.FButtonOK.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerOK")));
        this.FButtonOK.SetAlign(pas["WEBLib.Controls"].TAlign.alRight);
        this.FButtonOK.SetAlignWithMargins(true);
        this.FButtonOK.FWordWrap = false;
        this.FButtonOK.SetAutoSize(true);
        this.FButtonOK.SetCursor(21);
        pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FButtonOK.FFont,16);
        this.FButtonOK.FMargins.SetRight(5);
        this.FButtonOK.FMargins.SetTop(5);
        this.FButtonOK.FMargins.SetBottom(5);
        this.FButtonOK.FMargins.SetLeft(5);
        this.FButtonOK.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.FButtonOK.FOnClick = rtl.createCallback(this,"EditingDialogValidate");
        this.FButtonOK.SetParent(this.FBottomPanel);
        this.FButtonOK.SetVisible(true);
        this.FButtonCancel = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FBottomPanel]);
        this.FButtonCancel.SetVisible(false);
        this.FButtonCancel.SetParent(this);
        pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FButtonCancel.FFont,16);
        this.FButtonCancel.SetLayout(pas["WEBLib.StdCtrls"].TTextLayout.tlCenter);
        this.FButtonCancel.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerCancel")));
        this.FButtonCancel.SetAlign(pas["WEBLib.Controls"].TAlign.alRight);
        this.FButtonCancel.SetAlignWithMargins(true);
        this.FButtonCancel.FWordWrap = false;
        this.FButtonCancel.SetAutoSize(true);
        this.FButtonCancel.SetCursor(21);
        this.FButtonCancel.FMargins.SetRight(5);
        this.FButtonCancel.FMargins.SetTop(5);
        this.FButtonCancel.FMargins.SetBottom(5);
        this.FButtonCancel.FMargins.SetLeft(5);
        this.FButtonCancel.FOnClick = rtl.createCallback(this,"EditingDialogCancel");
        this.FButtonCancel.SetParent(this.FBottomPanel);
        this.FButtonCancel.SetVisible(true);
        this.FButtonRemove = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FBottomPanel]);
        this.FButtonRemove.SetVisible(false);
        this.FButtonRemove.SetParent(this);
        pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(this.FButtonRemove.FFont,16);
        this.FButtonRemove.SetLayout(pas["WEBLib.StdCtrls"].TTextLayout.tlCenter);
        this.FButtonRemove.SetAlign(pas["WEBLib.Controls"].TAlign.alLeft);
        this.FButtonRemove.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerRemove")));
        this.FButtonRemove.FFont.SetColor(255);
        this.FButtonRemove.SetAlignWithMargins(true);
        this.FButtonRemove.FWordWrap = false;
        this.FButtonRemove.SetAutoSize(true);
        this.FButtonRemove.SetCursor(21);
        this.FButtonRemove.FMargins.SetRight(5);
        this.FButtonRemove.FMargins.SetTop(5);
        this.FButtonRemove.FMargins.SetBottom(5);
        this.FButtonRemove.FMargins.SetLeft(5);
        this.FButtonRemove.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.FButtonRemove.FOnClick = rtl.createCallback(this,"EditingDialogRemove");
        this.FButtonRemove.SetParent(this.FBottomPanel);
        this.FButtonRemove.SetVisible(true);
        this.FContentPanel = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControl.$create("Create$1",[this.FEditingDialog]);
        this.FContentPanel.SetAdaptToStyle(this.GetAdaptToStyle());
        this.FContentPanel.SetAllowFocus(false);
        this.FContentPanel.SetHeight(37);
        this.FContentPanel.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
        this.FContentPanel.SetParent(this.FEditingDialog);
        this.FStartTimeLabel = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FContentPanel]);
        this.FStartTimeLabel.SetWidth(100);
        this.FStartTimeLabel.SetHeight(15);
        this.FStartTimeLabel.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerStartTime")));
        this.FStartTimeLabel.SetLeft(10);
        this.FStartTimeLabel.SetTop(10);
        this.FStartTimeLabel.FFont.SetColor(11119017);
        this.FStartTimeLabel.FWordWrap = false;
        this.FStartTimeLabel.SetParent(this.FContentPanel);
        this.FStartTimeEdit = $mod.TTMSFNCPlannerTimeEdit.$create("Create$1",[this.FContentPanel]);
        this.FStartTimeEdit.FOnChange = rtl.createCallback(this,"StartTimeEditChanged");
        this.FStartTimeEdit.SetWidth(100);
        this.FStartTimeEdit.SetKind(pas["WEBLib.StdCtrls"].TDateTimeKind.dtkTime);
        this.FStartTimeEdit.SetLeft((this.FEditingDialog.GetWidth() - this.FStartTimeEdit.GetWidth()) - 10);
        this.FStartTimeEdit.SetTop(this.FStartTimeLabel.GetTop() + Math.floor((this.FStartTimeLabel.GetHeight() - this.FStartTimeEdit.GetHeight()) / 2));
        this.FStartTimeEdit.SetParent(this.FContentPanel);
        this.FStartDateEdit = $mod.TTMSFNCPlannerDateEdit.$create("Create$1",[this.FContentPanel]);
        this.FStartDateEdit.FOnChange = rtl.createCallback(this,"StartDateEditChanged");
        this.FStartDateEdit.SetWidth(100);
        this.FStartDateEdit.SetWidth(125);
        this.FStartDateEdit.SetLeft((this.FStartTimeEdit.GetLeft() - this.FStartDateEdit.GetWidth()) - 10);
        this.FStartDateEdit.SetTop(this.FStartTimeEdit.GetTop() + Math.floor((this.FStartTimeEdit.GetHeight() - this.FStartDateEdit.GetHeight()) / 2));
        this.FStartDateEdit.SetParent(this.FContentPanel);
        this.FEndTimeLabel = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FContentPanel]);
        this.FEndTimeLabel.SetWidth(100);
        this.FEndTimeLabel.SetHeight(15);
        this.FEndTimeLabel.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerEndTime")));
        this.FEndTimeLabel.SetLeft(10);
        this.FEndTimeLabel.SetTop((this.FStartTimeLabel.GetTop() + this.FStartTimeLabel.GetHeight()) + 15);
        this.FEndTimeLabel.FFont.SetColor(11119017);
        this.FEndTimeLabel.FWordWrap = false;
        this.FEndTimeLabel.SetParent(this.FContentPanel);
        this.FEndTimeEdit = $mod.TTMSFNCPlannerTimeEdit.$create("Create$1",[this.FContentPanel]);
        this.FEndTimeEdit.FOnChange = rtl.createCallback(this,"EndTimeEditChanged");
        this.FEndTimeEdit.SetWidth(100);
        this.FEndTimeEdit.SetKind(pas["WEBLib.StdCtrls"].TDateTimeKind.dtkTime);
        this.FEndTimeEdit.SetLeft((this.FEditingDialog.GetWidth() - this.FEndTimeEdit.GetWidth()) - 10);
        this.FEndTimeEdit.SetTop(this.FEndTimeLabel.GetTop() + Math.floor((this.FEndTimeLabel.GetHeight() - this.FEndTimeEdit.GetHeight()) / 2));
        this.FEndTimeEdit.SetParent(this.FContentPanel);
        this.FEndDateEdit = $mod.TTMSFNCPlannerDateEdit.$create("Create$1",[this.FContentPanel]);
        this.FEndDateEdit.FOnChange = rtl.createCallback(this,"EndDateEditChanged");
        this.FEndDateEdit.SetWidth(100);
        this.FEndDateEdit.SetWidth(125);
        this.FEndDateEdit.SetLeft((this.FEndTimeEdit.GetLeft() - this.FEndDateEdit.GetWidth()) - 10);
        this.FEndDateEdit.SetTop(this.FEndTimeEdit.GetTop() + Math.floor((this.FEndTimeEdit.GetHeight() - this.FEndDateEdit.GetHeight()) / 2));
        this.FEndDateEdit.SetParent(this.FContentPanel);
        this.FResourceLabel = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FContentPanel]);
        this.FResourceLabel.SetWidth(100);
        this.FResourceLabel.SetHeight(15);
        this.FResourceLabel.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlannerData"],"sTMSFNCPlannerResource")));
        this.FResourceLabel.SetLeft(10);
        this.FResourceLabel.SetTop((this.FEndTimeLabel.GetTop() + this.FEndTimeLabel.GetHeight()) + 15);
        this.FResourceLabel.FFont.SetColor(11119017);
        this.FResourceLabel.FWordWrap = false;
        this.FResourceLabel.SetParent(this.FContentPanel);
        this.FResourcesComboBox = pas["WEBLib.StdCtrls"].TComboBox.$create("Create$1",[this.FContentPanel]);
        this.FResourcesComboBox.SetWidth((this.FEditingDialog.GetWidth() - this.FStartDateEdit.GetLeft()) - 10);
        this.FResourcesComboBox.SetLeft(this.FStartDateEdit.GetLeft());
        this.FResourcesComboBox.SetTop(this.FResourceLabel.GetTop() + Math.floor((this.FResourceLabel.GetHeight() - this.FResourcesComboBox.GetHeight()) / 2));
        this.FResourcesComboBox.SetParent(this.FContentPanel);
        this.FTitleLabel = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FContentPanel]);
        this.FTitleLabel.SetWidth(100);
        this.FTitleLabel.SetHeight(15);
        this.FTitleLabel.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerTitle")));
        this.FTitleLabel.SetLeft(10);
        this.FTitleLabel.SetTop((this.FResourceLabel.GetTop() + this.FResourceLabel.GetHeight()) + 15);
        this.FTitleLabel.FFont.SetColor(11119017);
        this.FTitleLabel.FWordWrap = false;
        this.FTitleLabel.SetParent(this.FContentPanel);
        this.FTitleEdit = pas["WEBLib.StdCtrls"].TEdit.$create("Create$1",[this.FContentPanel]);
        this.FTitleEdit.SetWidth((this.FEditingDialog.GetWidth() - this.FStartDateEdit.GetLeft()) - 10);
        this.FTitleEdit.SetLeft(this.FStartDateEdit.GetLeft());
        this.FTitleEdit.SetTop(this.FTitleLabel.GetTop() + Math.floor((this.FTitleLabel.GetHeight() - this.FTitleEdit.GetHeight()) / 2));
        this.FTitleEdit.SetParent(this.FContentPanel);
        this.FTextLabel = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this.FContentPanel]);
        this.FTextLabel.SetWidth(100);
        this.FTextLabel.SetHeight(15);
        this.FTextLabel.SetCaption(pas["WEBLib.TMSFNCPlannerData"].TranslateTextEx(rtl.getResStr(pas["WEBLib.TMSFNCPlanner"],"sTMSFNCPlannerText")));
        this.FTextLabel.SetLeft(10);
        this.FTextLabel.SetTop((this.FTitleLabel.GetTop() + this.FTitleLabel.GetHeight()) + 15);
        this.FTextLabel.FFont.SetColor(11119017);
        this.FTextLabel.FWordWrap = false;
        this.FTextLabel.SetParent(this.FContentPanel);
        this.FTextMemo = pas["WEBLib.StdCtrls"].TMemo.$create("Create$1",[this.FContentPanel]);
        this.FTextMemo.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
        this.FTextMemo.SetAlignWithMargins(true);
        this.FTextMemo.FMargins.SetTop((this.FTextLabel.GetTop() + this.FTextLabel.GetHeight()) + 15);
        this.FTextMemo.FMargins.SetRight(10);
        this.FTextMemo.FMargins.SetBottom(10);
        this.FTextMemo.FMargins.SetLeft(10);
        this.FTextMemo.SetParent(this.FContentPanel);
        this.FEditingDialogCreated = true;
        this.SetEditingDialogTabOrder();
      };
      Result.Background = this.FEditingBackground;
      Result.Panel = this.FEditingDialog;
      Result.StartTimeEdit = this.FStartTimeEdit;
      Result.EndTimeEdit = this.FEndTimeEdit;
      Result.StartDateEdit = this.FStartDateEdit;
      Result.EndDateEdit = this.FEndDateEdit;
      Result.TitleEdit = this.FTitleEdit;
      Result.TextMemo = this.FTextMemo;
      Result.TitleLabel = this.FTitleLabel;
      Result.TextLabel = this.FTextLabel;
      Result.StartTimeLabel = this.FStartTimeLabel;
      Result.EndTimeLabel = this.FEndTimeLabel;
      Result.BottomPanel = this.FBottomPanel;
      Result.ButtonOK = this.FButtonOK;
      Result.ButtonRemove = this.FButtonRemove;
      Result.ButtonCancel = this.FButtonCancel;
      Result.ResourcesComboBox = this.FResourcesComboBox;
      Result.ResourceLabel = this.FResourceLabel;
      Result.ContentPanel = this.FContentPanel;
      Result.ContentPanel.SetVisible(true);
      Result.CustomContentPanel = false;
      Result.BottomPanel.SetAlign(pas["WEBLib.Controls"].TAlign.alNone);
      Result.BottomPanel.SetWidth(200);
      cp = null;
      it = null;
      if ((AItemIndex >= 0) && (AItemIndex <= (this.FItems.GetCount() - 1))) it = this.FItems.GetItem$1(AItemIndex);
      if (this.FCurrentPanel != null) {
        this.FCurrentPanel.SetVisible(false);
        this.FCurrentPanel.SetAlign(pas["WEBLib.Controls"].TAlign.alNone);
        this.FCurrentPanel.SetParent(null);
        this.FCurrentPanel = null;
      };
      this.DoGetCustomContentPanel(it,{get: function () {
          return cp;
        }, set: function (v) {
          cp = v;
        }});
      if (cp != null) {
        if (Result.ContentPanel != null) {
          Result.ContentPanel.SetVisible(false);
          Result.ContentPanel.SetAlign(pas["WEBLib.Controls"].TAlign.alNone);
        };
        cp.SetParent(Result.Panel);
        cp.SetVisible(true);
        Result.ContentPanel = cp;
        Result.CustomContentPanel = true;
        this.FCurrentPanel = cp;
      };
      if (!Result.CustomContentPanel) {
        Result.ContentPanel.SetAlign(pas["WEBLib.Controls"].TAlign.alNone);
        sc = 1;
        Result.ContentPanel.SetWidth(Math.round(350 * sc));
        Result.ContentPanel.SetHeight(Math.round(300 * sc));
      };
      if (((Result.Panel != null) && (Result.ContentPanel != null)) && (Result.BottomPanel != null)) {
        Result.Panel.SetHeight(Math.max(Result.BottomPanel.GetHeight(),Result.ContentPanel.GetHeight() + Result.BottomPanel.GetHeight()));
        Result.Panel.SetWidth(Math.max(Result.BottomPanel.GetWidth(),Result.ContentPanel.GetWidth()));
        Result.BottomPanel.SetAlign(pas["WEBLib.Controls"].TAlign.alBottom);
        Result.ContentPanel.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
      };
      return Result;
    };
    this.AddOrUpdateItem = function (AStartTime, AEndTime, ATitle, AText, AItemIndex) {
      var Result = null;
      Result = this.AddOrUpdateItem$1(0,AStartTime,AEndTime,ATitle,AText,AItemIndex);
      return Result;
    };
    this.AddOrUpdateItem$1 = function (AResource, AStartTime, AEndTime, ATitle, AText, AItemIndex) {
      var Result = null;
      if ((AItemIndex >= 0) && (AItemIndex <= (this.FItems.GetCount() - 1))) {
        Result = this.FItems.GetItem$1(AItemIndex)}
       else Result = this.FItems.Add$1();
      Result.BeginUpdate();
      Result.SetStartTime(AStartTime);
      Result.SetEndTime(AEndTime);
      Result.SetResource(AResource);
      Result.SetText(AText);
      Result.SetTitle(ATitle);
      Result.EndUpdate(true,true);
      return Result;
    };
    this.XYToCacheItem = function (X, Y) {
      var Result = null;
      var I = 0;
      var dsp = null;
      Result = null;
      if (!(this.FItemDisplay != null)) return Result;
      for (var $l1 = 0, $end2 = this.FItemDisplay.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        dsp = this.FItemDisplay.GetItem(I);
        if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(dsp.FDrawRect,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
          Result = dsp;
          break;
        };
      };
      return Result;
    };
    this.XYToCell = function (X, Y) {
      var Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerBase.XYToCell.call(this,X,Y));
      if ((((Result.Col >= 0) && (Result.Col <= (this.FColumnCount - 1))) && (Result.Row >= 0)) && (Result.Row <= (this.FRowCount - 1))) {
        if (this.IsCellDisabled(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(Result))) {
          Result.Col = -1;
          Result.Row = -1;
        };
      };
      return Result;
    };
    this.XYToItemAnchor = function (AItem, X, Y) {
      var Result = "";
      var I = 0;
      var it = null;
      var txtr = new pas["WEBLib.TMSFNCTypes"].TRectF();
      var a = "";
      var str = "";
      var g = null;
      if (AItem != null) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,false,true]);
        try {
          it = AItem;
          for (var $l1 = 0, $end2 = it.FCacheList.GetCount() - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            txtr = new pas["WEBLib.TMSFNCTypes"].TRectF(this.GetCacheItemTextRect(it.FCacheList.GetItem(I)));
            if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(txtr,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
              str = AItem.FText;
              this.DoGetItemText(AItem,$mod.TTMSFNCPlannerGetTextMode.pgtmDrawing,{get: function () {
                  return str;
                }, set: function (v) {
                  str = v;
                }});
              a = g.DrawText$1(new pas["WEBLib.TMSFNCTypes"].TRectF(txtr),str,true,this.FItemsAppearance.FTextHorizontalTextAlign,this.FItemsAppearance.FTextVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,true,X,Y);
              if (a !== "") {
                Result = a;
                break;
              };
            };
          };
        } finally {
          g = rtl.freeLoc(g);
        };
      };
      return Result;
    };
    this.PositionToResource = function (APosition) {
      var Result = 0;
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        Result = Math.floor(APosition / Math.max(1,this.GetNumDays()))}
       else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
        Result = APosition % Math.max(1,this.FResources.GetCount())}
       else {
        Result = APosition;
      };
      return Result;
    };
    this.ResourceToPosition = function (AResource) {
      var Result = 0;
      var $tmp1 = this.GetDisplayMode();
      if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        Result = AResource * Math.max(1,this.GetNumDays());
      } else {
        Result = AResource;
      };
      return Result;
    };
    this.IsDateTimeDisabled = function (ADateTime, APosition) {
      var Result = false;
      Result = false;
      var $tmp1 = this.GetDisplayMode();
      if (($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth)) {
        Result = !(this.DateTimeToPosition(ADateTime,false,false) === APosition)}
       else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
        Result = !(this.DateTimeToPosition(ADateTime,false,false) === (APosition % Math.max(1,this.GetNumDays())))}
       else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay) Result = !(Math.floor(this.DateTimeToPosition(ADateTime,false,false) / Math.max(1,this.FResources.GetCount())) === Math.floor(APosition / Math.max(1,this.FResources.GetCount())));
      this.DoIsDateTimeDisabled(ADateTime,APosition,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.IsDateTimeInActive = function (ADateTime, APosition) {
      var Result = false;
      Result = (pas.DateUtils.DayOfTheWeek(ADateTime) - 1) in this.FModeSettings.FInActiveDays;
      if (!Result) {
        var $tmp1 = this.GetDisplayMode();
        if (((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
          Result = (pas.DateUtils.CompareDateTime(ADateTime,this.CalculatePositionDateTime(this.FActiveStartTime,APosition)) === -1) || (pas.DateUtils.CompareDateTime(ADateTime,this.CalculatePositionDateTime(this.FActiveEndTime,APosition)) in rtl.createSet(0,1));
        };
      };
      this.DoIsDateTimeInActive(ADateTime,APosition,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.IsCellDisabled = function (ACell) {
      var Result = false;
      Result = this.IsDateTimeDisabled(this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(ACell)),ACell.Col);
      return Result;
    };
    this.CellToDateTime = function (ACell) {
      var Result = 0.0;
      Result = this.ValueToDateTime(this.GetRowPos(ACell.Row),ACell.Col,ACell.Row);
      return Result;
    };
    this.DateTimeToCell = function (ADateTime, AEndDateTime) {
      var Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      var v = 0.0;
      var ch = 0.0;
      v = this.DateTimeToValue(ADateTime,AEndDateTime,false);
      ch = this.GetTotalRowHeight();
      Result.Row = 0;
      if (ch > 0) Result.Row = Math.round((this.FRowCount / ch) * v);
      Result.Col = this.DateTimeToPosition(ADateTime,AEndDateTime,false);
      return Result;
    };
    this.ItemToStartCell = function (AItem) {
      var Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      if (AItem != null) {
        Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.DateTimeToCell(AItem.FStartTime,false));
        var $tmp1 = this.GetDisplayMode();
        if (($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) {}
        else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
          Result.Col = Result.Col + (AItem.FResource * Math.max(1,this.GetNumDays()))}
         else {
          Result.Col = Result.Col + AItem.FResource;
        };
      };
      return Result;
    };
    this.ItemToEndCell = function (AItem) {
      var Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
      if (AItem != null) {
        Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell(this.DateTimeToCell(AItem.FEndTime,true));
        var $tmp1 = this.GetDisplayMode();
        if (($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay)) {}
        else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
          Result.Col = Result.Col + (AItem.FResource * Math.max(1,this.GetNumDays()))}
         else {
          Result.Col = Result.Col + AItem.FResource;
        };
      };
      return Result;
    };
    this.HasItem = function (AStartTime, AEndTime, APosition, ACompareWithItemIndex, ACheckOverlap) {
      var Result = false;
      var I = 0;
      var it = null;
      Result = false;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.FItems.GetItem$1(I);
        if (((((ACheckOverlap && (!it.FOverlappable || !this.FModeSettings.FOverlappableItems)) || !ACheckOverlap) && this.IsValidItem(it)) && (it.GetIndex() !== ACompareWithItemIndex)) && (it.FResource === this.PositionToResource(APosition))) {
          if (((($mod.DateTimeInRangeEx(AStartTime,it.FStartTime,it.FEndTime,false) || $mod.DateTimeInRangeEx(AEndTime,it.FStartTime,it.FEndTime,false)) || $mod.DateTimeInRangeEx(it.FStartTime,AStartTime,AEndTime,false)) || $mod.DateTimeInRangeEx(it.FEndTime,AStartTime,AEndTime,false)) || ((pas.DateUtils.CompareDateTime(it.FStartTime,AStartTime) === 0) && (pas.DateUtils.CompareDateTime(it.FEndTime,AEndTime) === 0))) {
            Result = true;
            break;
          };
        };
      };
      return Result;
    };
    this.DateTimeToValue = function (ADateTime, AEndDateTime, ACheckBounds) {
      var Self = this;
      var Result = 0.0;
      var st = 0.0;
      var et = 0.0;
      var str = 0.0;
      var etr = 0.0;
      var s = 0.0;
      var c = 0.0;
      var v = 0.0;
      var ps = 0;
      var d = 0;
      var crh = 0.0;
      function BinarySearch(Values, Item, FoundIndex, Index, Count) {
        var Result = false;
        var L = 0;
        var H = 0;
        var mid = 0;
        var cmp = 0;
        if (((((Index < 0) || ((Index > (Values.GetCount() - 1)) && (Count > 0))) || (((Index + Count) - 1) > (Values.GetCount() - 1))) || (Count < 0)) || ((Index + Count) < 0)) throw pas.SysUtils.EArgumentOutOfRangeException.$create("Create$1",["Argument out of range"]);
        if (Count === 0) {
          FoundIndex.set(Index);
          return false;
        };
        Result = false;
        L = Index;
        H = (Index + Count) - 1;
        while (L <= H) {
          mid = L + ((H - L) >>> 1);
          cmp = pas.DateUtils.CompareDateTime(Values.GetItem(mid),Item);
          if (cmp < 0) {
            L = mid + 1}
           else {
            H = mid - 1;
            if (cmp === 0) Result = true;
          };
        };
        FoundIndex.set(L);
        return Result;
      };
      Result = 0;
      st = Self.FDisplayStartTime;
      et = Self.FDisplayEndTime;
      c = Self.GetTotalRowHeight();
      if (Self.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmCustom) {
        BinarySearch(Self.FCustomDatesList,ADateTime,{get: function () {
            return ps;
          }, set: function (v) {
            ps = v;
          }},0,Self.FCustomDatesList.GetCount());
        ps = ps - 1;
        if (ps === -1) ps = ps + 1;
        if ((ps >= 0) && (ps < (Self.FCustomDatesList.GetCount() - 1))) {
          str = Self.FCustomDatesList.GetItem(ps);
          etr = Self.FCustomDatesList.GetItem(ps + 1);
          crh = Self.GetRowHeights(ps);
          if (ACheckBounds) {
            v = Math.max(st,Math.min(et,ADateTime))}
           else v = ADateTime;
          if (crh > 0) Result = Self.GetRowPos(ps) + ((crh / (etr - str)) * (v - str));
        };
      } else {
        var $tmp1 = Self.GetDisplayMode();
        if ((($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) {
          ps = Self.DateTimeToPosition(ADateTime,AEndDateTime,true);
          if (Self.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmMultiResDay) ps = Math.floor(ps / Math.max(1,Self.FResources.GetCount()));
          st = pas.DateUtils.IncDay(st,ps);
          et = pas.DateUtils.IncDay(et,ps);
        } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
          st = Self.FDisplayStart;
          et = Self.FDisplayEnd;
        };
        var $tmp2 = Self.GetDisplayMode();
        if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
          if (AEndDateTime) {
            d = pas.DateUtils.DayOf(pas.DateUtils.IncDay(ADateTime,-1)) + 1}
           else d = pas.DateUtils.DayOf(ADateTime);
          if (ACheckBounds) {
            v = Math.max(st,Math.min(et,(d - 1) + pas.System.Frac(ADateTime)))}
           else v = (d - 1) + pas.System.Frac(ADateTime);
        } else {
          if (ACheckBounds) {
            v = Math.max(st,Math.min(et,ADateTime))}
           else v = ADateTime;
        };
        if ((et - st) > 0) {
          s = c / (et - st);
          Result = (v - st) * s;
        };
      };
      return Result;
    };
    this.ValueToDateTime = function (AValue, APosition, ARow) {
      var Result = 0.0;
      var st = 0.0;
      var et = 0.0;
      var s = 0.0;
      var c = 0.0;
      var v = 0.0;
      var cr = 0;
      var crh = 0.0;
      Result = 0;
      v = AValue;
      c = this.GetTotalRowHeight();
      if (this.GetDisplayMode() === $mod.TTMSFNCPlannerMode.pmCustom) {
        if (ARow === -1) {
          if (c > 0) {
            cr = pas.math.Floor((v / c) * this.FRowCount);
            cr = cr - 1;
            if (cr === -1) cr = cr + 1;
            crh = this.GetRowHeights(cr);
            if (((cr >= 0) && (cr < this.FCustomDatesList.GetCount())) && (crh > 0)) {
              st = this.FCustomDatesList.GetItem(cr);
              et = this.FCustomDatesList.GetItem(cr + 1);
              s = (et - st) / crh;
              Result = st + ((v - this.GetRowPos(cr)) * s);
            };
          };
        } else {
          if ((ARow >= 0) && (ARow < this.FCustomDatesList.GetCount())) Result = this.FCustomDatesList.GetItem(ARow);
        };
      } else {
        var $tmp1 = this.GetDisplayMode();
        if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
          st = this.FDisplayStart;
          et = this.FDisplayEnd;
          Result = this.FDisplayStartTime;
          Result = pas.SysUtils.IncMonth(Result,APosition);
        } else {
          st = this.FDisplayStartTime;
          et = this.FDisplayEndTime;
          Result = st;
        };
        if (c > 0) {
          s = (et - st) / c;
          Result = Result + (v * s);
        };
        var $tmp2 = this.GetDisplayMode();
        if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiDay) {
          Result = pas.DateUtils.IncDay(Result,APosition)}
         else if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
          Result = pas.DateUtils.IncDay(Result,APosition % Math.max(1,this.GetNumDays()))}
         else if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiResDay) Result = pas.DateUtils.IncDay(Result,Math.floor(APosition / Math.max(1,this.FResources.GetCount())));
      };
      return Result;
    };
    this.DateTimeToPosition = function (ADateTime, AEndDateTime, ACheckBounds) {
      var Result = 0;
      Result = 0;
      var $tmp1 = this.GetDisplayMode();
      if ((($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) {
        Result = pas.DateUtils.DaysBetween(ADateTime,this.FDisplayStartTime);
        if (pas.DateUtils.CompareDateTime(this.FDisplayStartTime,ADateTime) === 1) Result = -Result;
        if (AEndDateTime && (pas.DateUtils.CompareDateTime(ADateTime,pas.DateUtils.IncDay(this.FDisplayStartTime,Result)) === 0)) Result = Result - 1;
        var $tmp2 = this.GetDisplayMode();
        if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiResDay) Result = Result * Math.max(1,this.FResources.GetCount());
      } else if ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth) {
        if (AEndDateTime) ADateTime = pas.DateUtils.IncDay(ADateTime,-1);
        Result = (pas.DateUtils.MonthOf(ADateTime) - pas.DateUtils.MonthOf(this.FDisplayStartTime)) + (12 * (pas.DateUtils.YearOf(ADateTime) - pas.DateUtils.YearOf(this.FDisplayStartTime)));
      };
      if (ACheckBounds) Result = Math.max(0,Math.min(Result,this.FColumnCount - 1));
      return Result;
    };
    this.SelectNextItem = function () {
      var Result = null;
      var Idx = 0;
      var s = false;
      if (this.FActiveItem !== null) {
        Idx = this.FActiveItem.GetIndex();
        while ((Idx + 1) < this.FItems.GetCount()) {
          s = this.FItems.GetItem$1(Idx + 1).FSelectable && this.FItems.GetItem$1(Idx + 1).FEnabled;
          this.DoBeforeSelectItem(this.FItems.GetItem$1(Idx + 1),{get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }});
          if (this.IsValidItem(this.FItems.GetItem$1(Idx + 1)) && s) {
            if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
              this.HandleSelectLinkedItems(this.FItems.GetItem$1(Idx + 1),false)}
             else this.HandleSelectItem(this.FItems.GetItem$1(Idx + 1),false);
            this.DoAfterSelectItem(this.FItems.GetItem$1(Idx + 1));
            break;
          } else Idx += 1;
        };
        if ((Idx + 1) === this.FItems.GetCount()) this.HandleSelectItem(null,false);
      } else {
        if (this.FItems.GetCount() > 0) {
          Idx = 0;
          while (Idx < this.FItems.GetCount()) {
            s = this.FItems.GetItem$1(Idx).FSelectable && this.FItems.GetItem$1(Idx).FEnabled;
            this.DoBeforeSelectItem(this.FItems.GetItem$1(Idx),{get: function () {
                return s;
              }, set: function (v) {
                s = v;
              }});
            if (this.IsValidItem(this.FItems.GetItem$1(Idx)) && s) {
              if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
                this.HandleSelectLinkedItems(this.FItems.GetItem$1(Idx),false)}
               else this.HandleSelectItem(this.FItems.GetItem$1(Idx),false);
              this.DoAfterSelectItem(this.FItems.GetItem$1(Idx));
              break;
            } else Idx += 1;
          };
        };
      };
      Result = this.FActiveItem;
      return Result;
    };
    this.SelectPreviousItem = function () {
      var Result = null;
      var Idx = 0;
      var s = false;
      if (this.FActiveItem !== null) {
        Idx = this.FActiveItem.GetIndex();
        while (Idx > 0) {
          s = this.FItems.GetItem$1(Idx - 1).FSelectable && this.FItems.GetItem$1(Idx - 1).FEnabled;
          this.DoBeforeSelectItem(this.FItems.GetItem$1(Idx - 1),{get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }});
          if (this.IsValidItem(this.FItems.GetItem$1(Idx - 1)) && s) {
            if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
              this.HandleSelectLinkedItems(this.FItems.GetItem$1(Idx - 1),false)}
             else this.HandleSelectItem(this.FItems.GetItem$1(Idx - 1),false);
            this.DoAfterSelectItem(this.FItems.GetItem$1(Idx - 1));
            break;
          } else Idx -= 1;
        };
        if (Idx <= 0) this.HandleSelectItem(null,false);
      } else {
        if (this.FItems.GetCount() > 0) {
          Idx = this.FItems.GetCount() - 1;
          while (Idx >= 0) {
            s = this.FItems.GetItem$1(Idx).FSelectable && this.FItems.GetItem$1(Idx).FEnabled;
            this.DoBeforeSelectItem(this.FItems.GetItem$1(Idx),{get: function () {
                return s;
              }, set: function (v) {
                s = v;
              }});
            if (this.IsValidItem(this.FItems.GetItem$1(Idx)) && s) {
              if (this.FInteraction.FAutoSelectLinkedItems && this.FInteraction.FMultiSelect) {
                this.HandleSelectLinkedItems(this.FItems.GetItem$1(Idx),false)}
               else this.HandleSelectItem(this.FItems.GetItem$1(Idx),false);
              this.DoAfterSelectItem(this.FItems.GetItem$1(Idx));
              break;
            } else Idx -= 1;
          };
        };
      };
      Result = this.FActiveItem;
      return Result;
    };
    this.IsValidItem = function (AItem) {
      var Result = false;
      var rest = 0;
      var rese = 0;
      Result = false;
      if (AItem != null) {
        var $tmp1 = this.GetDisplayMode();
        if ((((($tmp1 === $mod.TTMSFNCPlannerMode.pmDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmHalfDayPeriod)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmCustom)) {
          rest = AItem.FResource;
          rese = AItem.FResource;
          Result = ((((AItem.FVisible && ((AItem.FEndTime - AItem.FStartTime) > 0)) && (rest >= 0)) && (rest <= (this.FColumnCount - 1))) && (rese >= 0)) && (rese <= (this.FColumnCount - 1));
        } else if (((($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDay) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiMonth)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiDayRes)) || ($tmp1 === $mod.TTMSFNCPlannerMode.pmMultiResDay)) {
          rest = this.DateTimeToPosition(AItem.FStartTime,false,false);
          rese = this.DateTimeToPosition(AItem.FEndTime,true,false);
          var $tmp2 = this.GetDisplayMode();
          if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiResDay) {
            rest = rest + AItem.FResource;
            rese = rese + AItem.FResource;
          } else if ($tmp2 === $mod.TTMSFNCPlannerMode.pmMultiDayRes) {
            rest = rest + (AItem.FResource * Math.max(1,this.GetNumDays()));
            rese = rese + (AItem.FResource * Math.max(1,this.GetNumDays()));
          };
          Result = (AItem.FVisible && ((AItem.FEndTime - AItem.FStartTime) > 0)) && !(((rest < 0) && (rese < 0)) || ((rest > (this.FColumnCount - 1)) && (rese > (this.FColumnCount - 1))));
        };
      };
      return Result;
    };
    this.DisplayStartDateTime = function () {
      var Result = 0.0;
      Result = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(0,0)));
      return Result;
    };
    this.DisplayEndDateTime = function () {
      var Result = 0.0;
      Result = this.CellToDateTime(new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell($mod.MakeCell(this.FColumnCount - 1,this.FRowCount)));
      return Result;
    };
    this.$intfmaps = {};
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCPlanner",$mod.TTMSFNCCustomPlanner,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.apply(this,arguments);
    };
    var $r = this.$rtti;
    $r.addProperty("Adapter",2,$mod.$rtti["TTMSFNCPlannerAdapter"],"FAdapter","SetAdapter");
    $r.addProperty("ToolBarPopup",0,$mod.$rtti["TTMSFNCPlannerCustomToolBarPopup"],"FToolBarPopup","FToolBarPopup");
    $r.addProperty("ItemEditor",2,$mod.$rtti["TTMSFNCPlannerCustomItemEditor"],"FItemEditor","SetItemEditor");
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("HorizontalScrollBarVisible",2,rtl.boolean,"FHorizontalScrollBarVisible","SetHorizontalScrollBarVisible",{Default: true});
    $r.addProperty("VerticalScrollBarVisible",2,rtl.boolean,"FVerticalScrollBarVisible","SetVerticalScrollBarVisible",{Default: true});
    $r.addProperty("DefaultItem",2,pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItem"],"FDefaultItem","SetDefaultItem");
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("GridCellAppearance",2,$mod.$rtti["TTMSFNCPlannerGridCellAppearance"],"FGridCellAppearance","SetGridCellAppearance");
    $r.addProperty("Groups",2,pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerGroups"],"FGroups","SetGroups");
    $r.addProperty("GroupsAppearance",2,$mod.$rtti["TTMSFNCPlannerGroupsAppearance"],"FGroupsAppearance","SetGroupsAppearance");
    $r.addProperty("Interaction",2,$mod.$rtti["TTMSFNCPlannerInteraction"],"FInteraction","SetInteraction");
    $r.addProperty("Items",2,pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerItems"],"FItems","SetItems");
    $r.addProperty("Mode",2,$mod.$rtti["TTMSFNCPlannerMode"],"FMode","SetMode",{Default: $mod.TTMSFNCPlannerMode.pmMultiDay});
    $r.addProperty("ModeSettings",2,$mod.$rtti["TTMSFNCPlannerModeSettings"],"FModeSettings","SetModeSettings");
    $r.addProperty("OrientationMode",2,pas["WEBLib.TMSFNCPlannerBase"].$rtti["TTMSFNCPlannerOrientationMode"],"FOrientationMode","SetOrientationMode",{Default: pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerOrientationMode.pomVertical});
    $r.addProperty("Positions",2,$mod.$rtti["TTMSFNCPlannerPositions"],"FPositions","SetPositions");
    $r.addProperty("PositionsAppearance",2,$mod.$rtti["TTMSFNCPlannerPositionsAppearance"],"FPositionsAppearance","SetPositionsAppearance");
    $r.addProperty("Resources",2,pas["WEBLib.TMSFNCPlannerData"].$rtti["TTMSFNCPlannerResources"],"FResources","SetResources");
    $r.addProperty("SelectionAppearance",2,$mod.$rtti["TTMSFNCPlannerSelectionAppearance"],"FSelectionAppearance","SetSelectionAppearance");
    $r.addProperty("StretchScrollBars",2,rtl.boolean,"FStretchScrollBars","SetStretchScrollBars",{Default: false});
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("TimeLine",2,$mod.$rtti["TTMSFNCPlannerTimeLine"],"FTimeLine","SetTimeLine");
    $r.addProperty("TimeLineAppearance",2,$mod.$rtti["TTMSFNCPlannerTimeLineAppearance"],"FTimeLineAppearance","SetTimeLineAppearance");
    $r.addProperty("ItemsAppearance",2,$mod.$rtti["TTMSFNCPlannerItemsAppearance"],"FItemsAppearance","SetItemsAppearance");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("OnBeforeDrawTopNavigationButton",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawTopNavigationButtonEvent"],"FOnBeforeDrawTopNavigationButton","FOnBeforeDrawTopNavigationButton");
    $r.addProperty("OnBeforeDrawBottomNavigationButton",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawBottomNavigationButtonEvent"],"FOnBeforeDrawBottomNavigationButton","FOnBeforeDrawBottomNavigationButton");
    $r.addProperty("OnAfterDrawTopNavigationButton",0,$mod.$rtti["TTMSFNCPlannerAfterDrawTopNavigationButtonEvent"],"FOnAfterDrawTopNavigationButton","FOnAfterDrawTopNavigationButton");
    $r.addProperty("OnAfterDrawBottomNavigationButton",0,$mod.$rtti["TTMSFNCPlannerAfterDrawBottomNavigationButtonEvent"],"FOnAfterDrawBottomNavigationButton","FOnAfterDrawBottomNavigationButton");
    $r.addProperty("OnBeforeDrawCell",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawCellEvent"],"FOnBeforeDrawCell","FOnBeforeDrawCell");
    $r.addProperty("OnAfterDrawCell",0,$mod.$rtti["TTMSFNCPlannerAfterDrawCellEvent"],"FOnAfterDrawCell","FOnAfterDrawCell");
    $r.addProperty("OnBeforeDrawItemLink",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawItemLink"],"FOnBeforeDrawItemLink","FOnBeforeDrawItemLink");
    $r.addProperty("OnAfterDrawItemLink",0,$mod.$rtti["TTMSFNCPlannerAfterDrawItemLink"],"FOnAfterDrawItemLink","FOnAfterDrawItemLink");
    $r.addProperty("OnBeforeDrawCellVerticalLine",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawCellVerticalLineEvent"],"FOnBeforeDrawCellVerticalLine","FOnBeforeDrawCellVerticalLine");
    $r.addProperty("OnAfterDrawCellVerticalLine",0,$mod.$rtti["TTMSFNCPlannerAfterDrawCellVerticalLineEvent"],"FOnAfterDrawCellVerticalLine","FOnAfterDrawCellVerticalLine");
    $r.addProperty("OnBeforeDrawCellHorizontalLine",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawCellHorizontalLineEvent"],"FOnBeforeDrawCellHorizontalLine","FOnBeforeDrawCellHorizontalLine");
    $r.addProperty("OnAfterDrawCellHorizontalLine",0,$mod.$rtti["TTMSFNCPlannerAfterDrawCellHorizontalLineEvent"],"FOnAfterDrawCellHorizontalLine","FOnAfterDrawCellHorizontalLine");
    $r.addProperty("OnBeforeDrawCurrentTimeInTimeLine",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawCurrentTimeInTimeLineEvent"],"FOnBeforeDrawCurrentTimeInTimeLine","FOnBeforeDrawCurrentTimeInTimeLine");
    $r.addProperty("OnAfterDrawCurrentTimeInTimeLine",0,$mod.$rtti["TTMSFNCPlannerAfterDrawCurrentTimeInTimeLineEvent"],"FOnAfterDrawCurrentTimeInTimeLine","FOnAfterDrawCurrentTimeInTimeLine");
    $r.addProperty("OnBeforeDrawCurrentTimeInGrid",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawCurrentTimeInGridEvent"],"FOnBeforeDrawCurrentTimeInGrid","FOnBeforeDrawCurrentTimeInGrid");
    $r.addProperty("OnAfterDrawCurrentTimeInGrid",0,$mod.$rtti["TTMSFNCPlannerAfterDrawCurrentTimeInGridEvent"],"FOnAfterDrawCurrentTimeInGrid","FOnAfterDrawCurrentTimeInGrid");
    $r.addProperty("OnBeforeDrawSizeArea",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawSizeAreaEvent"],"FOnBeforeDrawSizeArea","FOnBeforeDrawSizeArea");
    $r.addProperty("OnBeforeDrawMoveArea",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawMoveAreaEvent"],"FOnBeforeDrawMoveArea","FOnBeforeDrawMoveArea");
    $r.addProperty("OnBeforeDrawDeleteArea",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawDeleteAreaEvent"],"FOnBeforeDrawDeleteArea","FOnBeforeDrawDeleteArea");
    $r.addProperty("OnAfterDrawSizeArea",0,$mod.$rtti["TTMSFNCPlannerAfterDrawSizeAreaEvent"],"FOnAfterDrawSizeArea","FOnAfterDrawSizeArea");
    $r.addProperty("OnAfterDrawMoveArea",0,$mod.$rtti["TTMSFNCPlannerAfterDrawMoveAreaEvent"],"FOnAfterDrawMoveArea","FOnAfterDrawMoveArea");
    $r.addProperty("OnAfterDrawDeleteArea",0,$mod.$rtti["TTMSFNCPlannerAfterDrawDeleteAreaEvent"],"FOnAfterDrawDeleteArea","FOnAfterDrawDeleteArea");
    $r.addProperty("OnBeforeDrawPosition",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawPositionEvent"],"FOnBeforeDrawPosition","FOnBeforeDrawPosition");
    $r.addProperty("OnAfterDrawPosition",0,$mod.$rtti["TTMSFNCPlannerAfterDrawPositionEvent"],"FOnAfterDrawPosition","FOnAfterDrawPosition");
    $r.addProperty("OnBeforeDrawGroup",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawGroupEvent"],"FOnBeforeDrawGroup","FOnBeforeDrawGroup");
    $r.addProperty("OnAfterDrawGroup",0,$mod.$rtti["TTMSFNCPlannerAfterDrawGroupEvent"],"FOnAfterDrawGroup","FOnAfterDrawGroup");
    $r.addProperty("OnBeforeDrawTime",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawTimeEvent"],"FOnBeforeDrawTime","FOnBeforeDrawTime");
    $r.addProperty("OnAfterDrawTime",0,$mod.$rtti["TTMSFNCPlannerAfterDrawTimeEvent"],"FOnAfterDrawTime","FOnAfterDrawTime");
    $r.addProperty("OnBeforeDrawTimeStroke",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawTimeStrokeEvent"],"FOnBeforeDrawTimeStroke","FOnBeforeDrawTimeStroke");
    $r.addProperty("OnAfterDrawTimeStroke",0,$mod.$rtti["TTMSFNCPlannerAfterDrawTimeStrokeEvent"],"FOnAfterDrawTimeStroke","FOnAfterDrawTimeStroke");
    $r.addProperty("OnBeforeDrawItem",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawItemEvent"],"FOnBeforeDrawItem","FOnBeforeDrawItem");
    $r.addProperty("OnAfterDrawItem",0,$mod.$rtti["TTMSFNCPlannerAfterDrawItemEvent"],"FOnAfterDrawItem","FOnAfterDrawItem");
    $r.addProperty("OnBeforeDrawItemTitle",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawItemTitleEvent"],"FOnBeforeDrawItemTitle","FOnBeforeDrawItemTitle");
    $r.addProperty("OnAfterDrawItemTitle",0,$mod.$rtti["TTMSFNCPlannerAfterDrawItemTitleEvent"],"FOnAfterDrawItemTitle","FOnAfterDrawItemTitle");
    $r.addProperty("OnBeforeDrawPositionText",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawPositionTextEvent"],"FOnBeforeDrawPositionText","FOnBeforeDrawPositionText");
    $r.addProperty("OnGetPositionText",0,$mod.$rtti["TTMSFNCPlannerGetPositionTextEvent"],"FOnGetPositionText","FOnGetPositionText");
    $r.addProperty("OnAfterDrawPositionText",0,$mod.$rtti["TTMSFNCPlannerAfterDrawPositionTextEvent"],"FOnAfterDrawPositionText","FOnAfterDrawPositionText");
    $r.addProperty("OnBeforeDrawGroupText",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawGroupTextEvent"],"FOnBeforeDrawGroupText","FOnBeforeDrawGroupText");
    $r.addProperty("OnGetGroupText",0,$mod.$rtti["TTMSFNCPlannerGetGroupTextEvent"],"FOnGetGroupText","FOnGetGroupText");
    $r.addProperty("OnAfterDrawGroupText",0,$mod.$rtti["TTMSFNCPlannerAfterDrawGroupTextEvent"],"FOnAfterDrawGroupText","FOnAfterDrawGroupText");
    $r.addProperty("OnBeforeDrawTimeText",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawTimeTextEvent"],"FOnBeforeDrawTimeText","FOnBeforeDrawTimeText");
    $r.addProperty("OnBeforeNavigateToDateTime",0,$mod.$rtti["TTMSFNCPlannerBeforeNavigateToDateTimeEvent"],"FOnBeforeNavigateToDateTime","FOnBeforeNavigateToDateTime");
    $r.addProperty("OnAfterNavigateToDateTime",0,$mod.$rtti["TTMSFNCPlannerAfterNavigateToDateTimeEvent"],"FOnAfterNavigateToDateTime","FOnAfterNavigateToDateTime");
    $r.addProperty("OnGetTimeText",0,$mod.$rtti["TTMSFNCPlannerGetTimeTextEvent"],"FOnGetTimeText","FOnGetTimeText");
    $r.addProperty("OnAfterDrawTimeText",0,$mod.$rtti["TTMSFNCPlannerAfterDrawTimeTextEvent"],"FOnAfterDrawTimeText","FOnAfterDrawTimeText");
    $r.addProperty("OnBeforeDrawItemText",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawItemTextEvent"],"FOnBeforeDrawItemText","FOnBeforeDrawItemText");
    $r.addProperty("OnGetItemText",0,$mod.$rtti["TTMSFNCPlannerGetItemTextEvent"],"FOnGetItemText","FOnGetItemText");
    $r.addProperty("OnAfterDrawItemText",0,$mod.$rtti["TTMSFNCPlannerAfterDrawItemTextEvent"],"FOnAfterDrawItemText","FOnAfterDrawItemText");
    $r.addProperty("OnBeforeDrawItemTitleText",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawItemTitleTextEvent"],"FOnBeforeDrawItemTitleText","FOnBeforeDrawItemTitleText");
    $r.addProperty("OnGetItemTitleText",0,$mod.$rtti["TTMSFNCPlannerGetItemTitleTextEvent"],"FOnGetItemTitleText","FOnGetItemTitleText");
    $r.addProperty("OnAfterDrawItemTitleText",0,$mod.$rtti["TTMSFNCPlannerAfterDrawItemTitleTextEvent"],"FOnAfterDrawItemTitleText","FOnAfterDrawItemTitleText");
    $r.addProperty("OnSelectTime",0,$mod.$rtti["TTMSFNCPlannerSelectTimeEvent"],"FOnSelectTime","FOnSelectTime");
    $r.addProperty("OnSelectingTime",0,$mod.$rtti["TTMSFNCPlannerSelectTimeEvent"],"FOnSelectingTime","FOnSelectingTime");
    $r.addProperty("OnSelectCell",0,$mod.$rtti["TTMSFNCPlannerSelectCellEvent"],"FOnSelectCell","FOnSelectCell");
    $r.addProperty("OnSelectingCell",0,$mod.$rtti["TTMSFNCPlannerSelectCellEvent"],"FOnSelectingCell","FOnSelectingCell");
    $r.addProperty("OnIsItemDeletable",0,$mod.$rtti["TTMSFNCPlannerIsItemDeletableEvent"],"FOnIsItemDeletable","FOnIsItemDeletable");
    $r.addProperty("OnIsDateTimeDisabled",0,$mod.$rtti["TTMSFNCPlannerIsDateTimeDisabledEvent"],"FOnIsDateTimeDisabled","FOnIsDateTimeDisabled");
    $r.addProperty("OnItemChanged",0,$mod.$rtti["TTMSFNCPlannerItemChangedEvent"],"FOnItemChanged","FOnItemChanged");
    $r.addProperty("OnAfterItemChanged",0,$mod.$rtti["TTMSFNCPlannerItemChangedEvent"],"FOnAfterItemChanged","FOnAfterItemChanged");
    $r.addProperty("OnIsDateTimeInActive",0,$mod.$rtti["TTMSFNCPlannerIsDateTimeInActiveEvent"],"FOnIsDateTimeInActive","FOnIsDateTimeInActive");
    $r.addProperty("OnItemAnchorClick",0,$mod.$rtti["TTMSFNCPlannerItemAnchorClickEvent"],"FOnItemAnchorClick","FOnItemAnchorClick");
    $r.addProperty("OnIsDateTimeSub",0,$mod.$rtti["TTMSFNCPlannerIsDateTimeSubEvent"],"FOnIsDateTimeSub","FOnIsDateTimeSub");
    $r.addProperty("OnHasDateTimeSub",0,$mod.$rtti["TTMSFNCPlannerHasDateTimeSubEvent"],"FOnHasDateTimeSub","FOnHasDateTimeSub");
    $r.addProperty("OnBeforeUpdateItem",0,$mod.$rtti["TTMSFNCPlannerBeforeUpdateItemEvent"],"FOnBeforeUpdateItem","FOnBeforeUpdateItem");
    $r.addProperty("OnBeforeInsertItem",0,$mod.$rtti["TTMSFNCPlannerBeforeInsertItemEvent"],"FOnBeforeInsertItem","FOnBeforeInsertItem");
    $r.addProperty("OnAfterUpdateItem",0,$mod.$rtti["TTMSFNCPlannerAfterUpdateItemEvent"],"FOnAfterUpdateItem","FOnAfterUpdateItem");
    $r.addProperty("OnAfterInsertItem",0,$mod.$rtti["TTMSFNCPlannerAfterInsertItemEvent"],"FOnAfterInsertItem","FOnAfterInsertItem");
    $r.addProperty("OnBeforeOpenInsertDialog",0,$mod.$rtti["TTMSFNCPlannerBeforeOpenInsertDialogEvent"],"FOnBeforeOpenInsertDialog","FOnBeforeOpenInsertDialog");
    $r.addProperty("OnAfterOpenInsertDialog",0,$mod.$rtti["TTMSFNCPlannerAfterOpenInsertDialogEvent"],"FOnAfterOpenInsertDialog","FOnAfterOpenInsertDialog");
    $r.addProperty("OnBeforeOpenUpdateDialog",0,$mod.$rtti["TTMSFNCPlannerBeforeOpenUpdateDialogEvent"],"FOnBeforeOpenUpdateDialog","FOnBeforeOpenUpdateDialog");
    $r.addProperty("OnAfterOpenUpdateDialog",0,$mod.$rtti["TTMSFNCPlannerAfterOpenUpdateDialogEvent"],"FOnAfterOpenUpdateDialog","FOnAfterOpenUpdateDialog");
    $r.addProperty("OnBeforeOpenInplaceEditor",0,$mod.$rtti["TTMSFNCPlannerBeforeOpenInplaceEditorEvent"],"FOnBeforeOpenInplaceEditor","FOnBeforeOpenInplaceEditor");
    $r.addProperty("OnAfterOpenInplaceEditor",0,$mod.$rtti["TTMSFNCPlannerAfterOpenInplaceEditorEvent"],"FOnAfterOpenInplaceEditor","FOnAfterOpenInplaceEditor");
    $r.addProperty("OnCloseInplaceEditor",0,$mod.$rtti["TTMSFNCPlannerCloseInplaceEditorEvent"],"FOnCloseInplaceEditor","FOnCloseInplaceEditor");
    $r.addProperty("OnCloseUpdateDialog",0,$mod.$rtti["TTMSFNCPlannerCloseUpdateDialogEvent"],"FOnCloseUpdateDialog","FOnCloseUpdateDialog");
    $r.addProperty("OnCloseInsertDialog",0,$mod.$rtti["TTMSFNCPlannerCloseInsertDialogEvent"],"FOnCloseInsertDialog","FOnCloseInsertDialog");
    $r.addProperty("OnGetInplaceEditor",0,$mod.$rtti["TTMSFNCPlannerGetInplaceEditorEvent"],"FOnGetInplaceEditor","FOnGetInplaceEditor");
    $r.addProperty("OnBeforeSelectItem",0,$mod.$rtti["TTMSFNCPlannerBeforeSelectItemEvent"],"FOnBeforeSelectItem","FOnBeforeSelectItem");
    $r.addProperty("OnAfterSelectItem",0,$mod.$rtti["TTMSFNCPlannerAfterSelectItemEvent"],"FOnAfterSelectItem","FOnAfterSelectItem");
    $r.addProperty("OnBeforeDeleteItem",0,$mod.$rtti["TTMSFNCPlannerBeforeDeleteItemEvent"],"FOnBeforeDeleteItem","FOnBeforeDeleteItem");
    $r.addProperty("OnAfterDeleteItem",0,$mod.$rtti["TTMSFNCPlannerAfterDeleteItemEvent"],"FOnAfterDeleteItem","FOnAfterDeleteItem");
    $r.addProperty("OnBeforeMoveItem",0,$mod.$rtti["TTMSFNCPlannerBeforeMoveItemEvent"],"FOnBeforeMoveItem","FOnBeforeMoveItem");
    $r.addProperty("OnMoveItem",0,$mod.$rtti["TTMSFNCPlannerMoveItemEvent"],"FOnMoveItem","FOnMoveItem");
    $r.addProperty("OnAfterMoveItem",0,$mod.$rtti["TTMSFNCPlannerAfterMoveItemEvent"],"FOnAfterMoveItem","FOnAfterMoveItem");
    $r.addProperty("OnBeforeSizeItem",0,$mod.$rtti["TTMSFNCPlannerBeforeSizeItemEvent"],"FOnBeforeSizeItem","FOnBeforeSizeItem");
    $r.addProperty("OnSizeItem",0,$mod.$rtti["TTMSFNCPlannerSizeItemEvent"],"FOnSizeItem","FOnSizeItem");
    $r.addProperty("OnAfterSizeItem",0,$mod.$rtti["TTMSFNCPlannerAfterSizeItemEvent"],"FOnAfterSizeItem","FOnAfterSizeItem");
    $r.addProperty("OnHScroll",0,$mod.$rtti["TTMSFNCPlannerScrollEvent"],"FOnHScroll","FOnHScroll");
    $r.addProperty("OnVScroll",0,$mod.$rtti["TTMSFNCPlannerScrollEvent"],"FOnVScroll","FOnVScroll");
    $r.addProperty("OnBeforeDrawPositionEmptySpace",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawPositionEmptySpaceEvent"],"FOnBeforeDrawPositionEmptySpace","FOnBeforeDrawPositionEmptySpace");
    $r.addProperty("OnAfterDrawPositionEmptySpace",0,$mod.$rtti["TTMSFNCPlannerAfterDrawPositionEmptySpaceEvent"],"FOnAfterDrawPositionEmptySpace","FOnAfterDrawPositionEmptySpace");
    $r.addProperty("OnBeforeDrawGroupEmptySpace",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawGroupEmptySpaceEvent"],"FOnBeforeDrawGroupEmptySpace","FOnBeforeDrawGroupEmptySpace");
    $r.addProperty("OnAfterDrawGroupEmptySpace",0,$mod.$rtti["TTMSFNCPlannerAfterDrawGroupEmptySpaceEvent"],"FOnAfterDrawGroupEmptySpace","FOnAfterDrawGroupEmptySpace");
    $r.addProperty("OnBeforeDrawItemHelper",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawItemHelperEvent"],"FOnBeforeDrawItemHelper","FOnBeforeDrawItemHelper");
    $r.addProperty("OnBeforeDrawItemHelperText",0,$mod.$rtti["TTMSFNCPlannerBeforeDrawItemHelperTextEvent"],"FOnBeforeDrawItemHelperText","FOnBeforeDrawItemHelperText");
    $r.addProperty("OnAfterDrawItemHelper",0,$mod.$rtti["TTMSFNCPlannerAfterDrawItemHelperEvent"],"FOnAfterDrawItemHelper","FOnAfterDrawItemHelper");
    $r.addProperty("OnAfterDrawItemHelperText",0,$mod.$rtti["TTMSFNCPlannerAfterDrawItemHelperTextEvent"],"FOnAfterDrawItemHelperText","FOnAfterDrawItemHelperText");
    $r.addProperty("OnGetItemHelperText",0,$mod.$rtti["TTMSFNCPlannerGetItemHelperTextEvent"],"FOnGetItemHelperText","FOnGetItemHelperText");
    $r.addProperty("OnCustomContentPanelToItem",0,$mod.$rtti["TTMSFNCPlannerCustomContentPanelToItemEvent"],"FOnCustomContentPanelToItem","FOnCustomContentPanelToItem");
    $r.addProperty("OnItemToCustomContentPanel",0,$mod.$rtti["TTMSFNCPlannerItemToCustomContentPanelEvent"],"FOnItemToCustomContentPanel","FOnItemToCustomContentPanel");
    $r.addProperty("OnGetCustomContentPanel",0,$mod.$rtti["TTMSFNCPlannerGetCustomContentPanelEvent"],"FOnGetCustomContentPanel","FOnGetCustomContentPanel");
    $r.addProperty("OnInitializeCustomContentPanel",0,$mod.$rtti["TTMSFNCPlannerInitializeCustomContentPanelEvent"],"FOnInitializeCustomContentPanel","FOnInitializeCustomContentPanel");
  });
  this.MakeCell = function (ACol, ARow) {
    var Result = new pas["WEBLib.TMSFNCPlannerBase"].TTMSFNCPlannerCell();
    Result.Col = ACol;
    Result.Row = ARow;
    return Result;
  };
  this.DateTimeInRangeEx = function (ADateTime, AStartDateTime, AEndDateTime, aInclusive) {
    var Result = false;
    var vs = -1;
    var ve = -1;
    vs = pas.DateUtils.CompareDateTime(AStartDateTime,ADateTime);
    ve = pas.DateUtils.CompareDateTime(AEndDateTime,ADateTime);
    if (aInclusive) {
      Result = ((vs === 0) || (vs === -1)) && ((ve === 0) || (ve === 1))}
     else Result = (vs === -1) && (ve === 1);
    return Result;
  };
  $mod.$resourcestrings = {sTMSFNCPlannerOK: {org: "OK"}, sTMSFNCPlannerCancel: {org: "Cancel"}, sTMSFNCPlannerRemove: {org: "Remove"}, sTMSFNCPlannerStartTime: {org: "Start Time"}, sTMSFNCPlannerEndTime: {org: "End Time"}, sTMSFNCPlannerPosition: {org: "Position"}, sTMSFNCPlannerTitle: {org: "Title"}, sTMSFNCPlannerText: {org: "Text"}};
},["DateUtils","math","WEBLib.TMSFNCUtils","WEBLib.Forms","WEBLib.TMSFNCStyles"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($impl,"TTMSFNCPlannerItemOpen",pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerItem,function () {
  });
  rtl.createClass($impl,"TTMSFNCPlannerResourceOpen",pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerResource,function () {
  });
  rtl.createClass($impl,"TTMSFNCPlannerGroupOpen",pas["WEBLib.TMSFNCPlannerData"].TTMSFNCPlannerGroup,function () {
  });
  $impl.CompareRes = function (Item1, Item2) {
    var Result = 0;
    Result = pas.DateUtils.CompareDateTime(Item1.DateTime,Item2.DateTime);
    return Result;
  };
  $impl.CompareDT = function (Item1, Item2) {
    var Result = 0;
    Result = pas.DateUtils.CompareDateTime(Item1,Item2);
    return Result;
  };
  $impl.IsValidCell = function (ACol, ARow) {
    var Result = false;
    Result = (ACol !== -1) && (ARow !== -1);
    return Result;
  };
  $impl.GetTickCountX = function () {
    var Result = 0;
    var h = 0;
    var m = 0;
    var s = 0;
    var ms = 0;
    pas.SysUtils.DecodeTime(pas.SysUtils.Now(),{get: function () {
        return h;
      }, set: function (v) {
        h = v;
      }},{get: function () {
        return m;
      }, set: function (v) {
        m = v;
      }},{get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},{get: function () {
        return ms;
      }, set: function (v) {
        ms = v;
      }});
    Result = ((ms + (s * 1000)) + ((m * 60) * 1000)) + (((h * 60) * 60) * 1000);
    return Result;
  };
  $impl.AnimateDouble = function (Start, Stop, Delta, Margin) {
    var Result = false;
    Result = true;
    if ((Start.get() > (Stop.get() - Margin)) && (Start.get() < (Stop.get() + Margin))) {
      Start.set(Stop.get());
      Result = false;
    } else {
      Delta = Math.max(Margin,Delta);
      if (Start.get() < Stop.get()) {
        Start.set(Start.get() + Delta)}
       else Start.set(Start.get() - Delta);
    };
    return Result;
  };
});
rtl.module("Unit1",["System","SysUtils","Classes","WEBLib.Graphics","WEBLib.Forms","WEBLib.TMSFNCTypes","WEBLib.TMSFNCUtils","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCCustomComponent","WEBLib.TMSFNCBitmapContainer","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCPlannerBase","WEBLib.TMSFNCPlannerData","WEBLib.TMSFNCPlanner","WEBLib.Controls","WEBLib.StdCtrls","WEBLib.ExtCtrls"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TForm4",pas["WEBLib.Forms"].TForm,function () {
    this.$init = function () {
      pas["WEBLib.Forms"].TForm.$init.call(this);
      this.WebPanel1 = null;
      this.WebRadioButton1 = null;
      this.WebRadioButton2 = null;
      this.WebRadioButton3 = null;
      this.WebCheckBox1 = null;
      this.WebComboBox1 = null;
      this.TMSFNCPlanner1 = null;
      this.TMSFNCBitmapContainer1 = null;
      this.dt = 0.0;
    };
    this.$final = function () {
      this.WebPanel1 = undefined;
      this.WebRadioButton1 = undefined;
      this.WebRadioButton2 = undefined;
      this.WebRadioButton3 = undefined;
      this.WebCheckBox1 = undefined;
      this.WebComboBox1 = undefined;
      this.TMSFNCPlanner1 = undefined;
      this.TMSFNCBitmapContainer1 = undefined;
      pas["WEBLib.Forms"].TForm.$final.call(this);
    };
    this.WebFormCreate = function (Sender) {
      var i = 0;
      this.WebComboBox1.FItems.Add("5");
      this.WebComboBox1.FItems.Add("10");
      this.WebComboBox1.FItems.Add("12");
      this.WebComboBox1.FItems.Add("15");
      this.WebComboBox1.FItems.Add("20");
      this.WebComboBox1.FItems.Add("30");
      this.WebComboBox1.FItems.Add("60");
      this.WebComboBox1.SetItemIndex(5);
      this.TMSFNCBitmapContainer1.AddFromURL("http:\/\/www.tmssoftware.net\/public\/WebPas\/Audi.png","Audi");
      this.TMSFNCBitmapContainer1.AddFromURL("http:\/\/www.tmssoftware.net\/public\/WebPas\/BMW.png","BMW");
      this.TMSFNCBitmapContainer1.AddFromURL("http:\/\/www.tmssoftware.net\/public\/WebPas\/Mercedes.png","Mercedes");
      this.TMSFNCPlanner1.InitSample();
      this.dt = pas.SysUtils.Now();
      this.TMSFNCPlanner1.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
      this.TMSFNCPlanner1.BeginUpdate();
      this.TMSFNCPlanner1.SetBitmapContainer(this.TMSFNCBitmapContainer1);
      this.TMSFNCPlanner1.FInteraction.SetKeyboardInsertMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerKeyboardInsertMode.pkimSelection);
      this.TMSFNCPlanner1.FInteraction.SetMouseInsertMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMouseInsertMode.pmimDialogAfterSelection);
      this.TMSFNCPlanner1.FInteraction.SetUpdateMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerUpdateMode.pumDialog);
      this.TMSFNCPlanner1.FModeSettings.SetStartTime(this.dt);
      this.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(237,243,248));
      this.TMSFNCPlanner1.FFill.SetColor(this.FColor);
      this.TMSFNCPlanner1.FTimeLineAppearance.FLeftStroke.SetColor(this.FColor);
      this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(115,115,115));
      this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
      this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.SetSize(14);
      this.TMSFNCPlanner1.FTimeLineAppearance.SetLeftSubUnitFontSize(12);
      this.TMSFNCPlanner1.FPositions.SetCount(7);
      this.TMSFNCPlanner1.FPositions.SetFormat("dddd d");
      this.TMSFNCPlanner1.FPositionsAppearance.FTopStroke.SetColor(this.FColor);
      this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(115,115,115));
      this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.SetSize(12);
      this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(115,115,115));
      this.TMSFNCPlanner1.FGroupsAppearance.FTopStroke.SetColor(this.FColor);
      this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(115,115,115));
      this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.SetSize(12);
      this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(115,115,115));
      this.TMSFNCPlanner1.FGridCellAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.TMSFNCPlanner1.FMargins.SetLeft(10);
      this.TMSFNCPlanner1.FMargins.SetBottom(10);
      this.TMSFNCPlanner1.SetStretchScrollBars(false);
      this.TMSFNCPlanner1.FItemsAppearance.SetMoveAreaColor(11119017);
      this.TMSFNCPlanner1.FItemsAppearance.SetSizeAreaColor(11119017);
      for (var $l1 = 0, $end2 = this.TMSFNCPlanner1.FResources.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.TMSFNCPlanner1.FResources.GetItem$1(i).SetName(this.TMSFNCPlanner1.FResources.GetItem$1(i).FText);
        this.TMSFNCPlanner1.FResources.GetItem$1(i).SetText(('<img src="' + this.TMSFNCPlanner1.FResources.GetItem$1(i).FText) + '" height="45"\/>');
      };
      this.TMSFNCPlanner1.EndUpdate();
      this.TMSFNCPlanner1.FTimeLine.SetViewStart(pas.System.Int(pas.SysUtils.Now()) + pas.SysUtils.EncodeTime(5,0,0,0));
      this.AddItems();
    };
    this.WebRadioButton1Click = function (Sender) {
      this.ChangeMode();
    };
    this.WebRadioButton2Click = function (Sender) {
      this.ChangeMode();
    };
    this.WebRadioButton3Click = function (Sender) {
      this.ChangeMode();
    };
    this.WebCheckBox1Click = function (Sender) {
      this.ChangeMode();
    };
    this.WebComboBox1Change = function (Sender) {
      this.ChangeDisplayUnit();
    };
    this.LoadDFMValues = function () {
      pas["WEBLib.Forms"].TCustomForm.LoadDFMValues.call(this);
      this.WebPanel1 = pas["WEBLib.ExtCtrls"].TPanel.$create("Create$1",[this]);
      this.WebRadioButton1 = pas["WEBLib.StdCtrls"].TRadioButton.$create("Create$1",[this.WebPanel1]);
      this.WebRadioButton2 = pas["WEBLib.StdCtrls"].TRadioButton.$create("Create$1",[this.WebPanel1]);
      this.WebRadioButton3 = pas["WEBLib.StdCtrls"].TRadioButton.$create("Create$1",[this.WebPanel1]);
      this.WebCheckBox1 = pas["WEBLib.StdCtrls"].TCheckBox.$create("Create$1",[this.WebPanel1]);
      this.WebComboBox1 = pas["WEBLib.StdCtrls"].TComboBox.$create("Create$1",[this.WebPanel1]);
      this.TMSFNCBitmapContainer1 = pas["WEBLib.TMSFNCBitmapContainer"].TTMSFNCBitmapContainer.$create("Create$1",[this.WebPanel1]);
      this.TMSFNCPlanner1 = pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlanner.$create("Create$1",[this]);
      this.WebPanel1.BeforeLoadDFMValues();
      this.WebRadioButton1.BeforeLoadDFMValues();
      this.WebRadioButton2.BeforeLoadDFMValues();
      this.WebRadioButton3.BeforeLoadDFMValues();
      this.WebCheckBox1.BeforeLoadDFMValues();
      this.WebComboBox1.BeforeLoadDFMValues();
      this.TMSFNCBitmapContainer1.BeforeLoadDFMValues();
      this.TMSFNCPlanner1.BeforeLoadDFMValues();
      try {
        this.SetName("Form4");
        this.SetLeft(0);
        this.SetTop(0);
        this.SetWidth(1070);
        this.SetHeight(785);
        this.FFont.FCharset = 1;
        this.FFont.SetColor(0);
        this.FFont.SetHeight(-11);
        this.FFont.SetName("Tahoma");
        this.FFont.SetStyle({});
        this.FFormContainer = "appcontent";
        this.SetTabOrder(1);
        this.FOnCreate = rtl.createCallback(this,"WebFormCreate");
        this.WebPanel1.SetParentComponent(this);
        this.WebPanel1.SetName("WebPanel1");
        this.WebPanel1.SetLeft(0);
        this.WebPanel1.SetTop(0);
        this.WebPanel1.SetWidth(1070);
        this.WebPanel1.SetHeight(97);
        this.WebPanel1.SetAlign(pas["WEBLib.Controls"].TAlign.alTop);
        this.WebPanel1.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsSingle);
        this.WebRadioButton1.SetParentComponent(this.WebPanel1);
        this.WebRadioButton1.SetName("WebRadioButton1");
        this.WebRadioButton1.SetLeft(208);
        this.WebRadioButton1.SetTop(16);
        this.WebRadioButton1.SetWidth(113);
        this.WebRadioButton1.SetHeight(17);
        this.WebRadioButton1.SetCaption("Day");
        this.WebRadioButton1.SetChecked(true);
        this.WebRadioButton1.SetGroupName("Planner");
        this.WebRadioButton1.SetTabOrder(0);
        this.WebRadioButton1.FOnClick = rtl.createCallback(this,"WebRadioButton1Click");
        this.WebRadioButton2.SetParentComponent(this.WebPanel1);
        this.WebRadioButton2.SetName("WebRadioButton2");
        this.WebRadioButton2.SetLeft(208);
        this.WebRadioButton2.SetTop(39);
        this.WebRadioButton2.SetWidth(113);
        this.WebRadioButton2.SetHeight(17);
        this.WebRadioButton2.SetCaption("Week");
        this.WebRadioButton2.SetChecked(false);
        this.WebRadioButton2.SetGroupName("Planner");
        this.WebRadioButton2.SetTabOrder(1);
        this.WebRadioButton2.FOnClick = rtl.createCallback(this,"WebRadioButton2Click");
        this.WebRadioButton3.SetParentComponent(this.WebPanel1);
        this.WebRadioButton3.SetName("WebRadioButton3");
        this.WebRadioButton3.SetLeft(208);
        this.WebRadioButton3.SetTop(62);
        this.WebRadioButton3.SetWidth(113);
        this.WebRadioButton3.SetHeight(17);
        this.WebRadioButton3.SetCaption("Month");
        this.WebRadioButton3.SetChecked(false);
        this.WebRadioButton3.SetGroupName("Planner");
        this.WebRadioButton3.SetTabOrder(2);
        this.WebRadioButton3.FOnClick = rtl.createCallback(this,"WebRadioButton3Click");
        this.WebCheckBox1.SetParentComponent(this.WebPanel1);
        this.WebCheckBox1.SetName("WebCheckBox1");
        this.WebCheckBox1.SetLeft(40);
        this.WebCheckBox1.SetTop(62);
        this.WebCheckBox1.SetWidth(97);
        this.WebCheckBox1.SetHeight(17);
        this.WebCheckBox1.SetCaption("Resources");
        this.WebCheckBox1.SetState(pas["WEBLib.StdCtrls"].TCheckBoxState.cbUnchecked);
        this.WebCheckBox1.SetTabOrder(3);
        this.WebCheckBox1.FOnClick = rtl.createCallback(this,"WebCheckBox1Click");
        this.WebComboBox1.SetParentComponent(this.WebPanel1);
        this.WebComboBox1.SetName("WebComboBox1");
        this.WebComboBox1.SetLeft(40);
        this.WebComboBox1.SetTop(14);
        this.WebComboBox1.SetWidth(145);
        this.WebComboBox1.SetHeight(21);
        this.WebComboBox1.SetItemIndex(-1);
        this.WebComboBox1.SetTabOrder(4);
        this.WebComboBox1.SetText("WebComboBox1");
        this.WebComboBox1.FOnChange = rtl.createCallback(this,"WebComboBox1Change");
        this.TMSFNCBitmapContainer1.SetParentComponent(this.WebPanel1);
        this.TMSFNCBitmapContainer1.SetName("TMSFNCBitmapContainer1");
        this.TMSFNCBitmapContainer1.SetLeft(944);
        this.TMSFNCBitmapContainer1.SetTop(39);
        this.TMSFNCBitmapContainer1.SetWidth(26);
        this.TMSFNCBitmapContainer1.SetHeight(26);
        this.TMSFNCBitmapContainer1.SetVisible(true);
        this.TMSFNCPlanner1.SetParentComponent(this);
        this.TMSFNCPlanner1.SetName("TMSFNCPlanner1");
        this.TMSFNCPlanner1.SetLeft(0);
        this.TMSFNCPlanner1.SetTop(97);
        this.TMSFNCPlanner1.SetWidth(1070);
        this.TMSFNCPlanner1.SetHeight(688);
        this.TMSFNCPlanner1.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
        this.TMSFNCPlanner1.FParentDoubleBuffered = false;
        this.TMSFNCPlanner1.FDoubleBuffered = true;
        this.TMSFNCPlanner1.SetTabOrder(1);
        this.TMSFNCPlanner1.FDefaultItem.SetStartTime(43051.270833333340000000);
        this.TMSFNCPlanner1.FDefaultItem.SetEndTime(43051.375000000000000000);
        this.TMSFNCPlanner1.FGridCellAppearance.FVerticalStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FGridCellAppearance.FHorizontalStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FGridCellAppearance.FHorizontalSubStroke.SetColor(13882323);
        this.TMSFNCPlanner1.FGridCellAppearance.FInActiveFill.SetColor(16774625);
        this.TMSFNCPlanner1.FGridCellAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.TMSFNCPlanner1.FGridCellAppearance.FDisabledFill.SetColor(15132390);
        this.TMSFNCPlanner1.FGroupsAppearance.SetTopSize(50.000000000000000000);
        this.TMSFNCPlanner1.FGroupsAppearance.SetBottomSize(50.000000000000000000);
        this.TMSFNCPlanner1.FGroupsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.TMSFNCPlanner1.FGroupsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.FCharset = 1;
        this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.SetColor(8421504);
        this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.SetHeight(-11);
        this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FGroupsAppearance.FTopFont.SetStyle({});
        this.TMSFNCPlanner1.FGroupsAppearance.FBottomFont.FCharset = 1;
        this.TMSFNCPlanner1.FGroupsAppearance.FBottomFont.SetColor(8421504);
        this.TMSFNCPlanner1.FGroupsAppearance.FBottomFont.SetHeight(-11);
        this.TMSFNCPlanner1.FGroupsAppearance.FBottomFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FGroupsAppearance.FBottomFont.SetStyle({});
        this.TMSFNCPlanner1.FGroupsAppearance.FTopStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FGroupsAppearance.FBottomStroke.SetColor(11119017);
        var $with1 = this.TMSFNCPlanner1.FItems.Add$1();
        $with1.SetText("Notes");
        $with1.SetTitle("Sample Item");
        $with1.SetStartTime(43051.270833333340000000);
        $with1.SetEndTime(43051.375000000000000000);
        this.TMSFNCPlanner1.FModeSettings.SetStartTime(43051.683571504630000000);
        this.TMSFNCPlanner1.FModeSettings.SetEndTime(43071.683571504630000000);
        this.TMSFNCPlanner1.FPositionsAppearance.SetSize(100.000000000000000000);
        this.TMSFNCPlanner1.FPositionsAppearance.SetTopSize(50.000000000000000000);
        this.TMSFNCPlanner1.FPositionsAppearance.SetBottomSize(50.000000000000000000);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.FCharset = 1;
        this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.SetColor(8421504);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.SetHeight(-11);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FPositionsAppearance.FTopFont.SetStyle({});
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomFont.FCharset = 1;
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomFont.SetColor(8421504);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomFont.SetHeight(-11);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomFont.SetStyle({});
        this.TMSFNCPlanner1.FPositionsAppearance.FTopFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopNavigationButtonStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomNavigationButtonStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopNavigationButtonHoverFill.SetColor(16774625);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomNavigationButtonHoverFill.SetColor(16774625);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopNavigationButtonHoverStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomNavigationButtonHoverStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopNavigationButtonDownFill.SetColor(16176533);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomNavigationButtonDownFill.SetColor(16176533);
        this.TMSFNCPlanner1.FPositionsAppearance.FTopNavigationButtonDownStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.FBottomNavigationButtonDownStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FPositionsAppearance.SetTopLeftNavigationButtonSize(18.000000000000000000);
        this.TMSFNCPlanner1.FPositionsAppearance.SetTopRightNavigationButtonSize(18.000000000000000000);
        this.TMSFNCPlanner1.FPositionsAppearance.SetBottomLeftNavigationButtonSize(18.000000000000000000);
        this.TMSFNCPlanner1.FPositionsAppearance.SetBottomRightNavigationButtonSize(18.000000000000000000);
        var $with2 = this.TMSFNCPlanner1.FResources.Add$1();
        $with2.SetName("Resource0");
        $with2.SetText("BMW");
        var $with3 = this.TMSFNCPlanner1.FResources.Add$1();
        $with3.SetName("Resource1");
        $with3.SetText("Mercedes");
        var $with4 = this.TMSFNCPlanner1.FResources.Add$1();
        $with4.SetName("Resource2");
        $with4.SetText("Audi");
        this.TMSFNCPlanner1.FSelectionAppearance.FFill.SetColor(16176533);
        this.TMSFNCPlanner1.FTimeLine.SetDisplayUnitSize(25.000000000000000000);
        this.TMSFNCPlanner1.FTimeLine.SetViewStart(43051.166666666660000000);
        this.TMSFNCPlanner1.FTimeLineAppearance.SetLeftSize(50.000000000000000000);
        this.TMSFNCPlanner1.FTimeLineAppearance.SetRightSize(50.000000000000000000);
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftSubStroke.SetColor(13882323);
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightSubStroke.SetColor(13882323);
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.FCharset = 1;
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.SetColor(8421504);
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.SetHeight(-19);
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FTimeLineAppearance.FLeftFont.SetStyle({});
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightFont.FCharset = 1;
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightFont.SetColor(8421504);
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightFont.SetHeight(-19);
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FTimeLineAppearance.FRightFont.SetStyle({});
        this.TMSFNCPlanner1.FTimeLineAppearance.SetLeftSubUnitFontSize(10.000000000000000000);
        this.TMSFNCPlanner1.FTimeLineAppearance.SetRightSubUnitFontSize(10.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetGap(10.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetMoveAreaSize(4.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetSizeAreaSize(4.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetDeleteAreaSize(16.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.FDeleteHandlerBitmap.LoadFromFile("Unit1.TMSFNCPlanner1.ItemsAppearance.DeleteHandlerBitmap.png");
        this.TMSFNCPlanner1.FItemsAppearance.SetSizeHandlerHeight(30.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetSizeHandlerWidth(50.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetDeleteHandlerHeight(30.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetDeleteHandlerWidth(30.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.FSizeHandlerLeftBitmap.LoadFromFile("Unit1.TMSFNCPlanner1.ItemsAppearance.SizeHandlerLeftBitmap.png");
        this.TMSFNCPlanner1.FItemsAppearance.FSizeHandlerRightBitmap.LoadFromFile("Unit1.TMSFNCPlanner1.ItemsAppearance.SizeHandlerRightBitmap.png");
        this.TMSFNCPlanner1.FItemsAppearance.FSizeHandlerUpBitmap.LoadFromFile("Unit1.TMSFNCPlanner1.ItemsAppearance.SizeHandlerUpBitmap.png");
        this.TMSFNCPlanner1.FItemsAppearance.FSizeHandlerDownBitmap.LoadFromFile("Unit1.TMSFNCPlanner1.ItemsAppearance.SizeHandlerDownBitmap.png");
        this.TMSFNCPlanner1.FItemsAppearance.FLinkStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FLinkStroke.SetWidth(2.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.SetLinkArrowSize(7.000000000000000000);
        this.TMSFNCPlanner1.FItemsAppearance.FTitleStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FTitleStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FTitleFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FTitleFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FTitleFont.SetHeight(-16);
        this.TMSFNCPlanner1.FItemsAppearance.FTitleFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.TMSFNCPlanner1.FItemsAppearance.FFill.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FFont.SetHeight(-11);
        this.TMSFNCPlanner1.FItemsAppearance.FFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FFont.SetStyle({});
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedTitleStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedTitleStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedTitleFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedTitleFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedTitleFont.SetHeight(-16);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedTitleFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.TMSFNCPlanner1.FItemsAppearance.FActiveTitleStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveTitleStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveTitleFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FActiveTitleFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveTitleFont.SetHeight(-16);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveTitleFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FActiveTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedFill.SetColor(16297243);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedFont.SetHeight(-11);
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FSelectedFont.SetStyle({});
        this.TMSFNCPlanner1.FItemsAppearance.FActiveFill.SetColor(16297243);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FActiveFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveFont.SetHeight(-11);
        this.TMSFNCPlanner1.FItemsAppearance.FActiveFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FActiveFont.SetStyle({});
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleFill.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleFont.SetHeight(-16);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledTitleFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledFill.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledStroke.SetColor(11119017);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledFont.FCharset = 1;
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledFont.SetColor(0);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledFont.SetHeight(-11);
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledFont.SetName("Tahoma");
        this.TMSFNCPlanner1.FItemsAppearance.FDisabledFont.SetStyle({});
      } finally {
        this.WebPanel1.AfterLoadDFMValues();
        this.WebRadioButton1.AfterLoadDFMValues();
        this.WebRadioButton2.AfterLoadDFMValues();
        this.WebRadioButton3.AfterLoadDFMValues();
        this.WebCheckBox1.AfterLoadDFMValues();
        this.WebComboBox1.AfterLoadDFMValues();
        this.TMSFNCBitmapContainer1.AfterLoadDFMValues();
        this.TMSFNCPlanner1.AfterLoadDFMValues();
      };
    };
    this.AddItems = function () {
      var dt = 0.0;
      var it = null;
      var c = 0.0;
      var I = 0;
      this.TMSFNCPlanner1.BeginUpdate();
      dt = pas.SysUtils.Now();
      this.TMSFNCPlanner1.FItems.Clear$1();
      c = 0;
      if (this.TMSFNCPlanner1.FMode === pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiDay) c = 2;
      it = this.TMSFNCPlanner1.AddOrUpdateItem(pas.System.Int(dt) + pas.SysUtils.EncodeTime(6,30,0,0),pas.System.Int(dt) + pas.SysUtils.EncodeTime(13,0,0,0),"Meeting with John","<u>Necessities<\/u><br><ul><li>Notebook<li>Digital lineout<li>Model artwork<\/ul>",-1);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(255,246,210));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(255,211,39));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,165,59));
      it = this.TMSFNCPlanner1.AddOrUpdateItem((pas.System.Int(dt) + c) + pas.SysUtils.EncodeTime(13,30,0,0),(pas.System.Int(dt) + c) + pas.SysUtils.EncodeTime(16,30,0,0),"Presentation","The new A3",-1);
      it.SetResource(2);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(210,239,255));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(61,185,249));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(17,111,159));
      it = this.TMSFNCPlanner1.AddOrUpdateItem(((pas.System.Int(dt) + c) + 1) + pas.SysUtils.EncodeTime(20,30,0,0),((pas.System.Int(dt) + c) + 1) + pas.SysUtils.EncodeTime(21,30,0,0),"Audi Conditions","<ul><li>Update iOS application<li>Change Audi packs<li>Change online terms<\/ul>",-1);
      it.SetResource(2);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(210,239,255));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(61,185,249));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(17,111,159));
      it = this.TMSFNCPlanner1.AddOrUpdateItem(((pas.System.Int(dt) + c) + 1) + pas.SysUtils.EncodeTime(9,30,0,0),((pas.System.Int(dt) + c) + 1) + pas.SysUtils.EncodeTime(12,45,0,0),"Audi - Mercedes fusion",'Meeting with Bruno Fierens for approval<br><a href="http:\/\/www.tmssoftware.com">http:\/\/www.tmssoftware.com<\/a>',-1);
      it.SetResource(2);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(210,239,255));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(61,185,249));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(17,111,159));
      it = this.TMSFNCPlanner1.AddOrUpdateItem(((pas.System.Int(dt) + 1) + c) + pas.SysUtils.EncodeTime(5,45,0,0),((pas.System.Int(dt) + 1) + c) + pas.SysUtils.EncodeTime(7,35,0,0),"Test drive","Test drive of the new BMW i8",-1);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(255,246,210));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(255,211,39));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,165,59));
      it = this.TMSFNCPlanner1.AddOrUpdateItem(((pas.System.Int(dt) + 1) + c) + pas.SysUtils.EncodeTime(9,30,0,0),((pas.System.Int(dt) + 1) + c) + pas.SysUtils.EncodeTime(11,35,0,0),"Reminder","Trip to Brussels to present the future of BMW",-1);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(255,246,210));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(255,211,39));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,165,59));
      c = 0;
      if (this.TMSFNCPlanner1.FMode === pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiResDay) c = -5;
      it = this.TMSFNCPlanner1.AddOrUpdateItem(((pas.System.Int(dt) + c) + 6) + pas.SysUtils.EncodeTime(12,35,0,0),((pas.System.Int(dt) + c) + 6) + pas.SysUtils.EncodeTime(16,50,0,0),"Exposition","Mercedes exposition on the AMG GT Coupé",-1);
      it.SetResource(1);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(222,255,210));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(122,223,86));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(114,172,93));
      it = this.TMSFNCPlanner1.AddOrUpdateItem(((pas.System.Int(dt) + c) + 5) + pas.SysUtils.EncodeTime(8,35,0,0),((pas.System.Int(dt) + c) + 5) + pas.SysUtils.EncodeTime(10,50,0,0),"Meeting","Meeting with sponsors for 2015",-1);
      it.SetResource(1);
      it.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(222,255,210));
      it.SetTitleColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(122,223,86));
      it.SetFontColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(114,172,93));
      for (var $l1 = 0, $end2 = this.TMSFNCPlanner1.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.TMSFNCPlanner1.FItems.GetItem$1(I);
        if ((this.TMSFNCPlanner1.FMode === pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMonth) || (this.TMSFNCPlanner1.FMode === pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiMonth)) {
          if (this.TMSFNCPlanner1.FMode === pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiMonth) {
            c = pas.System.Random(100)}
           else c = pas.math.RandomRange(-20,20);
          it.SetStartTime(it.FStartTime + c);
          it.SetEndTime((it.FEndTime + c) + 6);
        };
        it.SetHint(it.FTitle);
        it.SetTitleFontColor(it.FFontColor);
        it.SetActiveColor(it.FTitleColor);
        it.SetActiveTitleFontColor(it.FTitleFontColor);
        it.SetActiveFontColor(it.FFontColor);
      };
      this.TMSFNCPlanner1.EndUpdate();
    };
    this.ChangeDisplayUnit = function () {
      if ((this.TMSFNCPlanner1.FMode !== pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMonth) && (this.TMSFNCPlanner1.FMode !== pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiMonth)) {
        this.TMSFNCPlanner1.BeginUpdate();
        var $tmp1 = this.WebComboBox1.GetItemIndex();
        if ($tmp1 === 0) {
          this.TMSFNCPlanner1.FTimeLine.SetDisplayUnit(5)}
         else if ($tmp1 === 1) {
          this.TMSFNCPlanner1.FTimeLine.SetDisplayUnit(10)}
         else if ($tmp1 === 2) {
          this.TMSFNCPlanner1.FTimeLine.SetDisplayUnit(12)}
         else if ($tmp1 === 3) {
          this.TMSFNCPlanner1.FTimeLine.SetDisplayUnit(15)}
         else if ($tmp1 === 4) {
          this.TMSFNCPlanner1.FTimeLine.SetDisplayUnit(20)}
         else if ($tmp1 === 5) {
          this.TMSFNCPlanner1.FTimeLine.SetDisplayUnit(30)}
         else if ($tmp1 === 6) this.TMSFNCPlanner1.FTimeLine.SetDisplayUnit(60);
        this.TMSFNCPlanner1.FTimeLine.SetDisplayEnd(10000);
        this.TMSFNCPlanner1.EndUpdate();
      };
    };
    this.ChangeMode = function () {
      this.TMSFNCPlanner1.BeginUpdate();
      if (this.WebCheckBox1.GetChecked()) {
        if (this.WebRadioButton1.GetChecked()) {
          this.TMSFNCPlanner1.SetMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiResDay);
          this.TMSFNCPlanner1.FPositions.SetCount(3);
          this.TMSFNCPlanner1.FPositions.SetFormat("dddd d");
        } else if (this.WebRadioButton2.GetChecked()) {
          this.TMSFNCPlanner1.SetMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiResDay);
          this.TMSFNCPlanner1.FPositions.SetCount(6);
          this.TMSFNCPlanner1.FPositions.SetFormat("dddd d");
        } else if (this.WebRadioButton3.GetChecked()) {
          this.TMSFNCPlanner1.SetMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMonth);
          this.TMSFNCPlanner1.FPositions.SetCount(3);
          this.TMSFNCPlanner1.FPositions.SetFormat("mmmm");
        };
      } else {
        if (this.WebRadioButton1.GetChecked()) {
          this.TMSFNCPlanner1.SetMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiDay);
          this.TMSFNCPlanner1.FPositions.SetCount(1);
          this.TMSFNCPlanner1.FPositions.SetFormat("dddd d");
        } else if (this.WebRadioButton2.GetChecked()) {
          this.TMSFNCPlanner1.SetMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiDay);
          this.TMSFNCPlanner1.FPositions.SetCount(7);
          this.TMSFNCPlanner1.FPositions.SetFormat("dddd d");
        } else if (this.WebRadioButton3.GetChecked()) {
          this.TMSFNCPlanner1.SetMode(pas["WEBLib.TMSFNCPlanner"].TTMSFNCPlannerMode.pmMultiMonth);
          this.TMSFNCPlanner1.FPositions.SetCount(5);
          this.TMSFNCPlanner1.FPositions.SetFormat("mmmm");
        };
      };
      this.TMSFNCPlanner1.EndUpdate();
      if (!this.WebRadioButton3.GetChecked()) this.TMSFNCPlanner1.FTimeLine.SetViewStart(pas.System.Int(pas.SysUtils.Now()) + pas.SysUtils.EncodeTime(5,0,0,0));
      this.ChangeDisplayUnit();
      this.AddItems();
    };
  });
  this.Form4 = null;
},["DateUtils","math"]);
rtl.module("program",["System","WEBLib.Forms","Unit1"],function () {
  "use strict";
  var $mod = this;
  $mod.$main = function () {
    pas["WEBLib.Forms"].Application.Initialize();
    pas["WEBLib.Forms"].Application.FMainFormOnTaskBar = true;
    pas["WEBLib.Forms"].Application.CreateForm(pas.Unit1.TForm4,{p: pas.Unit1, get: function () {
        return this.p.Form4;
      }, set: function (v) {
        this.p.Form4 = v;
      }});
    pas["WEBLib.Forms"].Application.Run();
  };
});
//# sourceMappingURL=TMSWeb_FNCPlanner.js.map
